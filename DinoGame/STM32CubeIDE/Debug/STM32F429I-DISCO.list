
STM32F429I-DISCO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015450  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001784  08015600  08015600  00016600  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 00007446  08016d84  08016d84  00017d84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 000001d0  0801e1cc  0801e1cc  0001f1cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 TextFlashSection 0000004e  0801e39c  0801e39c  0001f39c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 ExtFlashSection 000c1a7c  0801e3ec  0801e3ec  0001f3ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .ARM.extab    00000000  080dfe68  080dfe68  000e10f0  2**0
                  CONTENTS
  8 .ARM          00000008  080dfe68  080dfe68  000e0e68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .preinit_array 00000000  080dfe70  080dfe70  000e10f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 10 .init_array   00000018  080dfe70  080dfe70  000e0e70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .fini_array   00000008  080dfe88  080dfe88  000e0e88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .data         000000f0  20000000  080dfe90  000e1000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 13 .bss          00015628  200000f0  080dff80  000e10f0  2**2
                  ALLOC
 14 ._user_heap_stack 00001400  20015718  080dff80  000e1718  2**0
                  ALLOC
 15 .ARM.attributes 00000030  00000000  00000000  000e10f0  2**0
                  CONTENTS, READONLY
 16 TouchGFX_Framebuffer 00070800  d0000000  d0000000  000e2000  2**2
                  ALLOC
 17 .debug_line   00055dbd  00000000  00000000  000e1120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 0000006a  00000000  00000000  00136edd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_info   000d0981  00000000  00000000  00136f47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_abbrev 00017f03  00000000  00000000  002078c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_aranges 00003038  00000000  00000000  0021f7d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    0012386d  00000000  00000000  00222808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_rnglists 000037b4  00000000  00000000  00346075  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_loclists 0001954c  00000000  00000000  00349829  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_macro  00012520  00000000  00000000  00362d75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .comment      000000c2  00000000  00000000  00375295  2**0
                  CONTENTS, READONLY
 27 .debug_frame  00009b44  00000000  00000000  00375358  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000f0 	.word	0x200000f0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080155e8 	.word	0x080155e8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000f4 	.word	0x200000f4
 80001ec:	080155e8 	.word	0x080155e8

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_d2f>:
 8000b4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b50:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b54:	bf24      	itt	cs
 8000b56:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b5a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b5e:	d90d      	bls.n	8000b7c <__aeabi_d2f+0x30>
 8000b60:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b64:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b68:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b6c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b70:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b74:	bf08      	it	eq
 8000b76:	f020 0001 	biceq.w	r0, r0, #1
 8000b7a:	4770      	bx	lr
 8000b7c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b80:	d121      	bne.n	8000bc6 <__aeabi_d2f+0x7a>
 8000b82:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b86:	bfbc      	itt	lt
 8000b88:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b8c:	4770      	bxlt	lr
 8000b8e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b92:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b96:	f1c2 0218 	rsb	r2, r2, #24
 8000b9a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b9e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ba2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ba6:	bf18      	it	ne
 8000ba8:	f040 0001 	orrne.w	r0, r0, #1
 8000bac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bb4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bb8:	ea40 000c 	orr.w	r0, r0, ip
 8000bbc:	fa23 f302 	lsr.w	r3, r3, r2
 8000bc0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bc4:	e7cc      	b.n	8000b60 <__aeabi_d2f+0x14>
 8000bc6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bca:	d107      	bne.n	8000bdc <__aeabi_d2f+0x90>
 8000bcc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bd0:	bf1e      	ittt	ne
 8000bd2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000bd6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000bda:	4770      	bxne	lr
 8000bdc:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000be0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000be4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000be8:	4770      	bx	lr
 8000bea:	bf00      	nop

08000bec <__aeabi_uldivmod>:
 8000bec:	b953      	cbnz	r3, 8000c04 <__aeabi_uldivmod+0x18>
 8000bee:	b94a      	cbnz	r2, 8000c04 <__aeabi_uldivmod+0x18>
 8000bf0:	2900      	cmp	r1, #0
 8000bf2:	bf08      	it	eq
 8000bf4:	2800      	cmpeq	r0, #0
 8000bf6:	bf1c      	itt	ne
 8000bf8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bfc:	f04f 30ff 	movne.w	r0, #4294967295
 8000c00:	f000 b96a 	b.w	8000ed8 <__aeabi_idiv0>
 8000c04:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c08:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c0c:	f000 f806 	bl	8000c1c <__udivmoddi4>
 8000c10:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c18:	b004      	add	sp, #16
 8000c1a:	4770      	bx	lr

08000c1c <__udivmoddi4>:
 8000c1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c20:	9d08      	ldr	r5, [sp, #32]
 8000c22:	460c      	mov	r4, r1
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d14e      	bne.n	8000cc6 <__udivmoddi4+0xaa>
 8000c28:	4694      	mov	ip, r2
 8000c2a:	458c      	cmp	ip, r1
 8000c2c:	4686      	mov	lr, r0
 8000c2e:	fab2 f282 	clz	r2, r2
 8000c32:	d962      	bls.n	8000cfa <__udivmoddi4+0xde>
 8000c34:	b14a      	cbz	r2, 8000c4a <__udivmoddi4+0x2e>
 8000c36:	f1c2 0320 	rsb	r3, r2, #32
 8000c3a:	4091      	lsls	r1, r2
 8000c3c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c40:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c44:	4319      	orrs	r1, r3
 8000c46:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c4a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c4e:	fa1f f68c 	uxth.w	r6, ip
 8000c52:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c56:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c5a:	fb07 1114 	mls	r1, r7, r4, r1
 8000c5e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c62:	fb04 f106 	mul.w	r1, r4, r6
 8000c66:	4299      	cmp	r1, r3
 8000c68:	d90a      	bls.n	8000c80 <__udivmoddi4+0x64>
 8000c6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c72:	f080 8112 	bcs.w	8000e9a <__udivmoddi4+0x27e>
 8000c76:	4299      	cmp	r1, r3
 8000c78:	f240 810f 	bls.w	8000e9a <__udivmoddi4+0x27e>
 8000c7c:	3c02      	subs	r4, #2
 8000c7e:	4463      	add	r3, ip
 8000c80:	1a59      	subs	r1, r3, r1
 8000c82:	fa1f f38e 	uxth.w	r3, lr
 8000c86:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c8a:	fb07 1110 	mls	r1, r7, r0, r1
 8000c8e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c92:	fb00 f606 	mul.w	r6, r0, r6
 8000c96:	429e      	cmp	r6, r3
 8000c98:	d90a      	bls.n	8000cb0 <__udivmoddi4+0x94>
 8000c9a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c9e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ca2:	f080 80fc 	bcs.w	8000e9e <__udivmoddi4+0x282>
 8000ca6:	429e      	cmp	r6, r3
 8000ca8:	f240 80f9 	bls.w	8000e9e <__udivmoddi4+0x282>
 8000cac:	4463      	add	r3, ip
 8000cae:	3802      	subs	r0, #2
 8000cb0:	1b9b      	subs	r3, r3, r6
 8000cb2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cb6:	2100      	movs	r1, #0
 8000cb8:	b11d      	cbz	r5, 8000cc2 <__udivmoddi4+0xa6>
 8000cba:	40d3      	lsrs	r3, r2
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	e9c5 3200 	strd	r3, r2, [r5]
 8000cc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc6:	428b      	cmp	r3, r1
 8000cc8:	d905      	bls.n	8000cd6 <__udivmoddi4+0xba>
 8000cca:	b10d      	cbz	r5, 8000cd0 <__udivmoddi4+0xb4>
 8000ccc:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd0:	2100      	movs	r1, #0
 8000cd2:	4608      	mov	r0, r1
 8000cd4:	e7f5      	b.n	8000cc2 <__udivmoddi4+0xa6>
 8000cd6:	fab3 f183 	clz	r1, r3
 8000cda:	2900      	cmp	r1, #0
 8000cdc:	d146      	bne.n	8000d6c <__udivmoddi4+0x150>
 8000cde:	42a3      	cmp	r3, r4
 8000ce0:	d302      	bcc.n	8000ce8 <__udivmoddi4+0xcc>
 8000ce2:	4290      	cmp	r0, r2
 8000ce4:	f0c0 80f0 	bcc.w	8000ec8 <__udivmoddi4+0x2ac>
 8000ce8:	1a86      	subs	r6, r0, r2
 8000cea:	eb64 0303 	sbc.w	r3, r4, r3
 8000cee:	2001      	movs	r0, #1
 8000cf0:	2d00      	cmp	r5, #0
 8000cf2:	d0e6      	beq.n	8000cc2 <__udivmoddi4+0xa6>
 8000cf4:	e9c5 6300 	strd	r6, r3, [r5]
 8000cf8:	e7e3      	b.n	8000cc2 <__udivmoddi4+0xa6>
 8000cfa:	2a00      	cmp	r2, #0
 8000cfc:	f040 8090 	bne.w	8000e20 <__udivmoddi4+0x204>
 8000d00:	eba1 040c 	sub.w	r4, r1, ip
 8000d04:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d08:	fa1f f78c 	uxth.w	r7, ip
 8000d0c:	2101      	movs	r1, #1
 8000d0e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d16:	fb08 4416 	mls	r4, r8, r6, r4
 8000d1a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d1e:	fb07 f006 	mul.w	r0, r7, r6
 8000d22:	4298      	cmp	r0, r3
 8000d24:	d908      	bls.n	8000d38 <__udivmoddi4+0x11c>
 8000d26:	eb1c 0303 	adds.w	r3, ip, r3
 8000d2a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d2e:	d202      	bcs.n	8000d36 <__udivmoddi4+0x11a>
 8000d30:	4298      	cmp	r0, r3
 8000d32:	f200 80cd 	bhi.w	8000ed0 <__udivmoddi4+0x2b4>
 8000d36:	4626      	mov	r6, r4
 8000d38:	1a1c      	subs	r4, r3, r0
 8000d3a:	fa1f f38e 	uxth.w	r3, lr
 8000d3e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d42:	fb08 4410 	mls	r4, r8, r0, r4
 8000d46:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d4a:	fb00 f707 	mul.w	r7, r0, r7
 8000d4e:	429f      	cmp	r7, r3
 8000d50:	d908      	bls.n	8000d64 <__udivmoddi4+0x148>
 8000d52:	eb1c 0303 	adds.w	r3, ip, r3
 8000d56:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d5a:	d202      	bcs.n	8000d62 <__udivmoddi4+0x146>
 8000d5c:	429f      	cmp	r7, r3
 8000d5e:	f200 80b0 	bhi.w	8000ec2 <__udivmoddi4+0x2a6>
 8000d62:	4620      	mov	r0, r4
 8000d64:	1bdb      	subs	r3, r3, r7
 8000d66:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d6a:	e7a5      	b.n	8000cb8 <__udivmoddi4+0x9c>
 8000d6c:	f1c1 0620 	rsb	r6, r1, #32
 8000d70:	408b      	lsls	r3, r1
 8000d72:	fa22 f706 	lsr.w	r7, r2, r6
 8000d76:	431f      	orrs	r7, r3
 8000d78:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d7c:	fa04 f301 	lsl.w	r3, r4, r1
 8000d80:	ea43 030c 	orr.w	r3, r3, ip
 8000d84:	40f4      	lsrs	r4, r6
 8000d86:	fa00 f801 	lsl.w	r8, r0, r1
 8000d8a:	0c38      	lsrs	r0, r7, #16
 8000d8c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d90:	fbb4 fef0 	udiv	lr, r4, r0
 8000d94:	fa1f fc87 	uxth.w	ip, r7
 8000d98:	fb00 441e 	mls	r4, r0, lr, r4
 8000d9c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000da0:	fb0e f90c 	mul.w	r9, lr, ip
 8000da4:	45a1      	cmp	r9, r4
 8000da6:	fa02 f201 	lsl.w	r2, r2, r1
 8000daa:	d90a      	bls.n	8000dc2 <__udivmoddi4+0x1a6>
 8000dac:	193c      	adds	r4, r7, r4
 8000dae:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000db2:	f080 8084 	bcs.w	8000ebe <__udivmoddi4+0x2a2>
 8000db6:	45a1      	cmp	r9, r4
 8000db8:	f240 8081 	bls.w	8000ebe <__udivmoddi4+0x2a2>
 8000dbc:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dc0:	443c      	add	r4, r7
 8000dc2:	eba4 0409 	sub.w	r4, r4, r9
 8000dc6:	fa1f f983 	uxth.w	r9, r3
 8000dca:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dce:	fb00 4413 	mls	r4, r0, r3, r4
 8000dd2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dd6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dda:	45a4      	cmp	ip, r4
 8000ddc:	d907      	bls.n	8000dee <__udivmoddi4+0x1d2>
 8000dde:	193c      	adds	r4, r7, r4
 8000de0:	f103 30ff 	add.w	r0, r3, #4294967295
 8000de4:	d267      	bcs.n	8000eb6 <__udivmoddi4+0x29a>
 8000de6:	45a4      	cmp	ip, r4
 8000de8:	d965      	bls.n	8000eb6 <__udivmoddi4+0x29a>
 8000dea:	3b02      	subs	r3, #2
 8000dec:	443c      	add	r4, r7
 8000dee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000df2:	fba0 9302 	umull	r9, r3, r0, r2
 8000df6:	eba4 040c 	sub.w	r4, r4, ip
 8000dfa:	429c      	cmp	r4, r3
 8000dfc:	46ce      	mov	lr, r9
 8000dfe:	469c      	mov	ip, r3
 8000e00:	d351      	bcc.n	8000ea6 <__udivmoddi4+0x28a>
 8000e02:	d04e      	beq.n	8000ea2 <__udivmoddi4+0x286>
 8000e04:	b155      	cbz	r5, 8000e1c <__udivmoddi4+0x200>
 8000e06:	ebb8 030e 	subs.w	r3, r8, lr
 8000e0a:	eb64 040c 	sbc.w	r4, r4, ip
 8000e0e:	fa04 f606 	lsl.w	r6, r4, r6
 8000e12:	40cb      	lsrs	r3, r1
 8000e14:	431e      	orrs	r6, r3
 8000e16:	40cc      	lsrs	r4, r1
 8000e18:	e9c5 6400 	strd	r6, r4, [r5]
 8000e1c:	2100      	movs	r1, #0
 8000e1e:	e750      	b.n	8000cc2 <__udivmoddi4+0xa6>
 8000e20:	f1c2 0320 	rsb	r3, r2, #32
 8000e24:	fa20 f103 	lsr.w	r1, r0, r3
 8000e28:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e2c:	fa24 f303 	lsr.w	r3, r4, r3
 8000e30:	4094      	lsls	r4, r2
 8000e32:	430c      	orrs	r4, r1
 8000e34:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e38:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e3c:	fa1f f78c 	uxth.w	r7, ip
 8000e40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e44:	fb08 3110 	mls	r1, r8, r0, r3
 8000e48:	0c23      	lsrs	r3, r4, #16
 8000e4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e4e:	fb00 f107 	mul.w	r1, r0, r7
 8000e52:	4299      	cmp	r1, r3
 8000e54:	d908      	bls.n	8000e68 <__udivmoddi4+0x24c>
 8000e56:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e5e:	d22c      	bcs.n	8000eba <__udivmoddi4+0x29e>
 8000e60:	4299      	cmp	r1, r3
 8000e62:	d92a      	bls.n	8000eba <__udivmoddi4+0x29e>
 8000e64:	3802      	subs	r0, #2
 8000e66:	4463      	add	r3, ip
 8000e68:	1a5b      	subs	r3, r3, r1
 8000e6a:	b2a4      	uxth	r4, r4
 8000e6c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e70:	fb08 3311 	mls	r3, r8, r1, r3
 8000e74:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e78:	fb01 f307 	mul.w	r3, r1, r7
 8000e7c:	42a3      	cmp	r3, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x276>
 8000e80:	eb1c 0404 	adds.w	r4, ip, r4
 8000e84:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e88:	d213      	bcs.n	8000eb2 <__udivmoddi4+0x296>
 8000e8a:	42a3      	cmp	r3, r4
 8000e8c:	d911      	bls.n	8000eb2 <__udivmoddi4+0x296>
 8000e8e:	3902      	subs	r1, #2
 8000e90:	4464      	add	r4, ip
 8000e92:	1ae4      	subs	r4, r4, r3
 8000e94:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e98:	e739      	b.n	8000d0e <__udivmoddi4+0xf2>
 8000e9a:	4604      	mov	r4, r0
 8000e9c:	e6f0      	b.n	8000c80 <__udivmoddi4+0x64>
 8000e9e:	4608      	mov	r0, r1
 8000ea0:	e706      	b.n	8000cb0 <__udivmoddi4+0x94>
 8000ea2:	45c8      	cmp	r8, r9
 8000ea4:	d2ae      	bcs.n	8000e04 <__udivmoddi4+0x1e8>
 8000ea6:	ebb9 0e02 	subs.w	lr, r9, r2
 8000eaa:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eae:	3801      	subs	r0, #1
 8000eb0:	e7a8      	b.n	8000e04 <__udivmoddi4+0x1e8>
 8000eb2:	4631      	mov	r1, r6
 8000eb4:	e7ed      	b.n	8000e92 <__udivmoddi4+0x276>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	e799      	b.n	8000dee <__udivmoddi4+0x1d2>
 8000eba:	4630      	mov	r0, r6
 8000ebc:	e7d4      	b.n	8000e68 <__udivmoddi4+0x24c>
 8000ebe:	46d6      	mov	lr, sl
 8000ec0:	e77f      	b.n	8000dc2 <__udivmoddi4+0x1a6>
 8000ec2:	4463      	add	r3, ip
 8000ec4:	3802      	subs	r0, #2
 8000ec6:	e74d      	b.n	8000d64 <__udivmoddi4+0x148>
 8000ec8:	4606      	mov	r6, r0
 8000eca:	4623      	mov	r3, r4
 8000ecc:	4608      	mov	r0, r1
 8000ece:	e70f      	b.n	8000cf0 <__udivmoddi4+0xd4>
 8000ed0:	3e02      	subs	r6, #2
 8000ed2:	4463      	add	r3, ip
 8000ed4:	e730      	b.n	8000d38 <__udivmoddi4+0x11c>
 8000ed6:	bf00      	nop

08000ed8 <__aeabi_idiv0>:
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop

08000edc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000edc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f14 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000ee0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000ee2:	e003      	b.n	8000eec <LoopCopyDataInit>

08000ee4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000ee4:	4b0c      	ldr	r3, [pc, #48]	@ (8000f18 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000ee6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000ee8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000eea:	3104      	adds	r1, #4

08000eec <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000eec:	480b      	ldr	r0, [pc, #44]	@ (8000f1c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000eee:	4b0c      	ldr	r3, [pc, #48]	@ (8000f20 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000ef0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000ef2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000ef4:	d3f6      	bcc.n	8000ee4 <CopyDataInit>
  ldr  r2, =_sbss
 8000ef6:	4a0b      	ldr	r2, [pc, #44]	@ (8000f24 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000ef8:	e002      	b.n	8000f00 <LoopFillZerobss>

08000efa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000efa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000efc:	f842 3b04 	str.w	r3, [r2], #4

08000f00 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000f00:	4b09      	ldr	r3, [pc, #36]	@ (8000f28 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000f02:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000f04:	d3f9      	bcc.n	8000efa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000f06:	f003 ffa7 	bl	8004e58 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f0a:	f013 fdcb 	bl	8014aa4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f0e:	f000 fdfd 	bl	8001b0c <main>
  bx  lr    
 8000f12:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000f14:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8000f18:	080dfe90 	.word	0x080dfe90
  ldr  r0, =_sdata
 8000f1c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000f20:	200000f0 	.word	0x200000f0
  ldr  r2, =_sbss
 8000f24:	200000f0 	.word	0x200000f0
  ldr  r3, = _ebss
 8000f28:	20015718 	.word	0x20015718

08000f2c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f2c:	e7fe      	b.n	8000f2c <ADC_IRQHandler>

08000f2e <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
    {
        return 0;
    }
 8000f2e:	2000      	movs	r0, #0
 8000f30:	4770      	bx	lr

08000f32 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
    {
        rect.x = x;
 8000f32:	8081      	strh	r1, [r0, #4]
    }
 8000f34:	4770      	bx	lr

08000f36 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
    {
        rect.y = y;
 8000f36:	80c1      	strh	r1, [r0, #6]
    }
 8000f38:	4770      	bx	lr

08000f3a <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
    {
        rect.width = width;
 8000f3a:	8101      	strh	r1, [r0, #8]
    }
 8000f3c:	4770      	bx	lr

08000f3e <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
    {
        rect.height = height;
 8000f3e:	8141      	strh	r1, [r0, #10]
    }
 8000f40:	4770      	bx	lr

08000f42 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
    {
    }
 8000f42:	4770      	bx	lr

08000f44 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
    {
        (void)event; // Unused variable
    }
 8000f44:	4770      	bx	lr

08000f46 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
    {
        (void)event; // Unused variable
    }
 8000f46:	4770      	bx	lr

08000f48 <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
    {
        (void)event; // Unused variable
    }
 8000f48:	4770      	bx	lr

08000f4a <_ZN8touchgfx8Drawable15handleTickEventEv>:
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
    {
    }
 8000f4a:	4770      	bx	lr

08000f4c <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 8000f4c:	b410      	push	{r4}
    {
        moveRelative(x - rect.x, y - rect.y);
 8000f4e:	88c4      	ldrh	r4, [r0, #6]
 8000f50:	6803      	ldr	r3, [r0, #0]
 8000f52:	1b12      	subs	r2, r2, r4
 8000f54:	8884      	ldrh	r4, [r0, #4]
 8000f56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000f58:	1b09      	subs	r1, r1, r4
 8000f5a:	b212      	sxth	r2, r2
    }
 8000f5c:	f85d 4b04 	ldr.w	r4, [sp], #4
        moveRelative(x - rect.x, y - rect.y);
 8000f60:	b209      	sxth	r1, r1
 8000f62:	4718      	bx	r3

08000f64 <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 8000f64:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000f68:	8183      	strh	r3, [r0, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 8000f6a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f6e:	6203      	str	r3, [r0, #32]
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
    {
        (void)invalidatedArea; // Unused variable
        resetDrawChainCache();
        nextDrawChainElement = *nextPreviousElement;
 8000f70:	6813      	ldr	r3, [r2, #0]
 8000f72:	61c3      	str	r3, [r0, #28]
        *nextPreviousElement = this;
 8000f74:	6010      	str	r0, [r2, #0]
    }
 8000f76:	4770      	bx	lr

08000f78 <_ZN6EntityD1Ev>:
#ifndef ENTITY_HPP
#define ENTITY_HPP

#include <touchgfx/widgets/Image.hpp>

class Entity : public touchgfx::Image {
 8000f78:	4770      	bx	lr

08000f7a <_ZN6EntityD0Ev>:
 8000f7a:	b510      	push	{r4, lr}
 8000f7c:	2130      	movs	r1, #48	@ 0x30
 8000f7e:	4604      	mov	r4, r0
 8000f80:	f012 fee9 	bl	8013d56 <_ZdlPvj>
 8000f84:	4620      	mov	r0, r4
 8000f86:	bd10      	pop	{r4, pc}

08000f88 <_ZNK8touchgfx8Drawable17invalidateContentEv>:
        if (visible)
 8000f88:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 8000f8c:	b112      	cbz	r2, 8000f94 <_ZNK8touchgfx8Drawable17invalidateContentEv+0xc>
            invalidate();
 8000f8e:	6803      	ldr	r3, [r0, #0]
 8000f90:	695b      	ldr	r3, [r3, #20]
 8000f92:	4718      	bx	r3
    }
 8000f94:	4770      	bx	lr

08000f96 <_ZNK8touchgfx5Image17invalidateContentEv>:
        return alpha;
    }

    virtual Rect getSolidRect() const;

    virtual void invalidateContent() const
 8000f96:	b508      	push	{r3, lr}
    {
        if (alpha > 0)
 8000f98:	f890 3028 	ldrb.w	r3, [r0, #40]	@ 0x28
 8000f9c:	b10b      	cbz	r3, 8000fa2 <_ZNK8touchgfx5Image17invalidateContentEv+0xc>
        {
            Widget::invalidateContent();
 8000f9e:	f7ff fff3 	bl	8000f88 <_ZNK8touchgfx8Drawable17invalidateContentEv>
        }
    }
 8000fa2:	bd08      	pop	{r3, pc}

08000fa4 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t /*x*/, int16_t /*y*/, Drawable** last)
    {
        if (isVisible() && isTouchable())
 8000fa4:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 8000fa8:	b11a      	cbz	r2, 8000fb2 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
 8000faa:	f890 2024 	ldrb.w	r2, [r0, #36]	@ 0x24
 8000fae:	b102      	cbz	r2, 8000fb2 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
        {
            *last = this;
 8000fb0:	6018      	str	r0, [r3, #0]
        }
    }
 8000fb2:	4770      	bx	lr

08000fb4 <_ZN8touchgfx8Drawable5setXYEss>:
    void setXY(int16_t x, int16_t y)
 8000fb4:	b570      	push	{r4, r5, r6, lr}
        setX(x);
 8000fb6:	6803      	ldr	r3, [r0, #0]
    void setXY(int16_t x, int16_t y)
 8000fb8:	4604      	mov	r4, r0
        setX(x);
 8000fba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    void setXY(int16_t x, int16_t y)
 8000fbc:	4615      	mov	r5, r2
        setX(x);
 8000fbe:	4798      	blx	r3
        setY(y);
 8000fc0:	6823      	ldr	r3, [r4, #0]
 8000fc2:	4629      	mov	r1, r5
 8000fc4:	4620      	mov	r0, r4
 8000fc6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    }
 8000fc8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setY(y);
 8000fcc:	4718      	bx	r3
	...

08000fd0 <_ZN12CloudManagerC1Ev>:
#include "CloudManager.hpp"

CloudManager::CloudManager() {
 8000fd0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
        : Widget(), bitmap(bmp), alpha(255)
 8000fd4:	f8df a074 	ldr.w	sl, [pc, #116]	@ 800104c <_ZN12CloudManagerC1Ev+0x7c>
public:
    bool isVisible;
    float speed;

    Entity() : isVisible(true), speed(1.0f) {
 8000fd8:	f8df 9074 	ldr.w	r9, [pc, #116]	@ 8001050 <_ZN12CloudManagerC1Ev+0x80>
 8000fdc:	4605      	mov	r5, r0
 8000fde:	4604      	mov	r4, r0
 8000fe0:	f100 0860 	add.w	r8, r0, #96	@ 0x60
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
        : bitmapId(id)
 8000fe4:	f64f 76ff 	movw	r6, #65535	@ 0xffff
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
        : x(0), y(0), width(0), height(0)
 8000fe8:	2300      	movs	r3, #0
          visible(true)
 8000fea:	2701      	movs	r7, #1
 8000fec:	80a3      	strh	r3, [r4, #4]
 8000fee:	80e3      	strh	r3, [r4, #6]
 8000ff0:	8123      	strh	r3, [r4, #8]
 8000ff2:	8163      	strh	r3, [r4, #10]
 8000ff4:	81a3      	strh	r3, [r4, #12]
 8000ff6:	81e3      	strh	r3, [r4, #14]
 8000ff8:	8223      	strh	r3, [r4, #16]
 8000ffa:	8263      	strh	r3, [r4, #18]
          nextDrawChainElement(0),
 8000ffc:	61e3      	str	r3, [r4, #28]
          cachedAbsX(0),
 8000ffe:	8423      	strh	r3, [r4, #32]
          cachedAbsY(0),
 8001000:	8463      	strh	r3, [r4, #34]	@ 0x22
          touchable(false),
 8001002:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
          nextSibling(0),
 8001006:	e9c4 3305 	strd	r3, r3, [r4, #20]
          visible(true)
 800100a:	f884 7025 	strb.w	r7, [r4, #37]	@ 0x25
 800100e:	f8c4 a000 	str.w	sl, [r4]
 8001012:	84e6      	strh	r6, [r4, #38]	@ 0x26
 8001014:	f884 6028 	strb.w	r6, [r4, #40]	@ 0x28
        Image::setBitmap(bmp);
 8001018:	4620      	mov	r0, r4
 800101a:	a901      	add	r1, sp, #4
 800101c:	f8ad 6004 	strh.w	r6, [sp, #4]
 8001020:	f00a fa5d 	bl	800b4de <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8001024:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001028:	f8c4 9000 	str.w	r9, [r4]
 800102c:	f884 7029 	strb.w	r7, [r4, #41]	@ 0x29
 8001030:	62e3      	str	r3, [r4, #44]	@ 0x2c
   *
   *  @tparam  Tp  Type of element. Required to be a complete type.
   *  @tparam  Nm  Number of elements.
  */
  template<typename _Tp, std::size_t _Nm>
    struct array
 8001032:	3430      	adds	r4, #48	@ 0x30
 8001034:	4544      	cmp	r4, r8
 8001036:	d1d7      	bne.n	8000fe8 <_ZN12CloudManagerC1Ev+0x18>
 8001038:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800103c:	23e6      	movs	r3, #230	@ 0xe6

}
 800103e:	4628      	mov	r0, r5
CloudManager::CloudManager() {
 8001040:	e9c5 2318 	strd	r2, r3, [r5, #96]	@ 0x60
}
 8001044:	b002      	add	sp, #8
 8001046:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800104a:	bf00      	nop
 800104c:	08016a28 	.word	0x08016a28
 8001050:	08015650 	.word	0x08015650

08001054 <_ZN12CloudManager12updateCloudsEv>:
        float speed = i * 0.7f + 1.3f; // Random speed between 1.0 and 3.0
        clouds[i].init(x, y, touchgfx::Bitmap(1), speed);
    }
}

void CloudManager::updateClouds() {
 8001054:	b570      	push	{r4, r5, r6, lr}
 8001056:	4605      	mov	r5, r0
 8001058:	4604      	mov	r4, r0
 800105a:	f100 0660 	add.w	r6, r0, #96	@ 0x60
    // Update each cloud's position
    for (int i = 0; i < NUM_CLOUDS; ++i) {
        if (clouds[i].isVisible) {
 800105e:	f894 3029 	ldrb.w	r3, [r4, #41]	@ 0x29
 8001062:	b373      	cbz	r3, 80010c2 <_ZN12CloudManager12updateCloudsEv+0x6e>
        this->speed = speed;
        this->setBitmap(bitmap);
    }

    void moveRelative(float dx, float dy) {
        moveTo(getX() + dx, getY() + dy);
 8001064:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8001068:	eddf 7a18 	vldr	s15, [pc, #96]	@ 80010cc <_ZN12CloudManager12updateCloudsEv+0x78>
 800106c:	edd4 6a0b 	vldr	s13, [r4, #44]	@ 0x2c
 8001070:	ee07 3a10 	vmov	s14, r3
 8001074:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8001078:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800107c:	4620      	mov	r0, r4
 800107e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001082:	ee07 3a90 	vmov	s15, r3
 8001086:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800108a:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 800108e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8001092:	6823      	ldr	r3, [r4, #0]
 8001094:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001098:	ee17 2a10 	vmov	r2, s14
 800109c:	ee17 1a90 	vmov	r1, s15
 80010a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010a2:	b212      	sxth	r2, r2
 80010a4:	b209      	sxth	r1, r1
 80010a6:	4798      	blx	r3
            // Move the cloud horizontally
            clouds[i].moveRelative(-clouds[i].speed, 0);
            if (clouds[i].getX() + clouds[i].getWidth() < 0) {
 80010a8:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
    bool getVisibility() const {
        return isVisible;
    }

    int getX() const {
        return Image::getX();
 80010ac:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 80010b0:	42da      	cmn	r2, r3
 80010b2:	d506      	bpl.n	80010c2 <_ZN12CloudManager12updateCloudsEv+0x6e>
                clouds[i].setXY(SCREEN_WIDTH, clouds[i].getY()); // Reset cloud off-screen
 80010b4:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 80010b8:	f9b5 1060 	ldrsh.w	r1, [r5, #96]	@ 0x60
 80010bc:	4620      	mov	r0, r4
 80010be:	f7ff ff79 	bl	8000fb4 <_ZN8touchgfx8Drawable5setXYEss>
    for (int i = 0; i < NUM_CLOUDS; ++i) {
 80010c2:	3430      	adds	r4, #48	@ 0x30
 80010c4:	42b4      	cmp	r4, r6
 80010c6:	d1ca      	bne.n	800105e <_ZN12CloudManager12updateCloudsEv+0xa>
            }
        }
    }
}
 80010c8:	bd70      	pop	{r4, r5, r6, pc}
 80010ca:	bf00      	nop
 80010cc:	00000000 	.word	0x00000000

080010d0 <_ZNSt23mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EE11_M_gen_randEv>:
	   size_t __n, size_t __m, size_t __r,
	   _UIntType __a, size_t __u, _UIntType __d, size_t __s,
	   _UIntType __b, size_t __t, _UIntType __c, size_t __l,
	   _UIntType __f>
    void
    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
 80010d0:	b530      	push	{r4, r5, lr}
      for (size_t __k = 0; __k < (__n - __m); ++__k)
        {
	  _UIntType __y = ((_M_x[__k] & __upper_mask)
			   | (_M_x[__k + 1] & __lower_mask));
	  _M_x[__k] = (_M_x[__k + __m] ^ (__y >> 1)
		       ^ ((__y & 0x01) ? __a : 0));
 80010d2:	4d25      	ldr	r5, [pc, #148]	@ (8001168 <_ZNSt23mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EE11_M_gen_randEv+0x98>)
 80010d4:	f500 7463 	add.w	r4, r0, #908	@ 0x38c
    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
 80010d8:	4602      	mov	r2, r0
	  _UIntType __y = ((_M_x[__k] & __upper_mask)
 80010da:	6811      	ldr	r1, [r2, #0]
			   | (_M_x[__k + 1] & __lower_mask));
 80010dc:	f852 3f04 	ldr.w	r3, [r2, #4]!
	  _UIntType __y = ((_M_x[__k] & __upper_mask)
 80010e0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
			   | (_M_x[__k + 1] & __lower_mask));
 80010e4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
	  _UIntType __y = ((_M_x[__k] & __upper_mask)
 80010e8:	430b      	orrs	r3, r1
	  _M_x[__k] = (_M_x[__k + __m] ^ (__y >> 1)
 80010ea:	f8d2 1630 	ldr.w	r1, [r2, #1584]	@ 0x630
 80010ee:	ea81 0153 	eor.w	r1, r1, r3, lsr #1
		       ^ ((__y & 0x01) ? __a : 0));
 80010f2:	f013 0301 	ands.w	r3, r3, #1
 80010f6:	bf18      	it	ne
 80010f8:	462b      	movne	r3, r5
 80010fa:	4059      	eors	r1, r3
      for (size_t __k = 0; __k < (__n - __m); ++__k)
 80010fc:	4294      	cmp	r4, r2
	  _M_x[__k] = (_M_x[__k + __m] ^ (__y >> 1)
 80010fe:	f842 1c04 	str.w	r1, [r2, #-4]
      for (size_t __k = 0; __k < (__n - __m); ++__k)
 8001102:	d1ea      	bne.n	80010da <_ZNSt23mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EE11_M_gen_randEv+0xa>
      for (size_t __k = (__n - __m); __k < (__n - 1); ++__k)
	{
	  _UIntType __y = ((_M_x[__k] & __upper_mask)
			   | (_M_x[__k + 1] & __lower_mask));
	  _M_x[__k] = (_M_x[__k + (__m - __n)] ^ (__y >> 1)
		       ^ ((__y & 0x01) ? __a : 0));
 8001104:	4d18      	ldr	r5, [pc, #96]	@ (8001168 <_ZNSt23mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EE11_M_gen_randEv+0x98>)
 8001106:	1f02      	subs	r2, r0, #4
 8001108:	f200 642c 	addw	r4, r0, #1580	@ 0x62c
	  _UIntType __y = ((_M_x[__k] & __upper_mask)
 800110c:	f8d2 3390 	ldr.w	r3, [r2, #912]	@ 0x390
			   | (_M_x[__k + 1] & __lower_mask));
 8001110:	f8d2 1394 	ldr.w	r1, [r2, #916]	@ 0x394
	  _UIntType __y = ((_M_x[__k] & __upper_mask)
 8001114:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
			   | (_M_x[__k + 1] & __lower_mask));
 8001118:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
	  _UIntType __y = ((_M_x[__k] & __upper_mask)
 800111c:	430b      	orrs	r3, r1
	  _M_x[__k] = (_M_x[__k + (__m - __n)] ^ (__y >> 1)
 800111e:	f852 1f04 	ldr.w	r1, [r2, #4]!
 8001122:	ea81 0153 	eor.w	r1, r1, r3, lsr #1
		       ^ ((__y & 0x01) ? __a : 0));
 8001126:	f013 0301 	ands.w	r3, r3, #1
 800112a:	bf18      	it	ne
 800112c:	462b      	movne	r3, r5
 800112e:	404b      	eors	r3, r1
      for (size_t __k = (__n - __m); __k < (__n - 1); ++__k)
 8001130:	4294      	cmp	r4, r2
	  _M_x[__k] = (_M_x[__k + (__m - __n)] ^ (__y >> 1)
 8001132:	f8c2 338c 	str.w	r3, [r2, #908]	@ 0x38c
      for (size_t __k = (__n - __m); __k < (__n - 1); ++__k)
 8001136:	d1e9      	bne.n	800110c <_ZNSt23mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EE11_M_gen_randEv+0x3c>
	}

      _UIntType __y = ((_M_x[__n - 1] & __upper_mask)
 8001138:	f8d0 39bc 	ldr.w	r3, [r0, #2492]	@ 0x9bc
		       | (_M_x[0] & __lower_mask));
 800113c:	6802      	ldr	r2, [r0, #0]
      _M_x[__n - 1] = (_M_x[__m - 1] ^ (__y >> 1)
		       ^ ((__y & 0x01) ? __a : 0));
 800113e:	490a      	ldr	r1, [pc, #40]	@ (8001168 <_ZNSt23mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EE11_M_gen_randEv+0x98>)
		       | (_M_x[0] & __lower_mask));
 8001140:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
      _UIntType __y = ((_M_x[__n - 1] & __upper_mask)
 8001144:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001148:	4313      	orrs	r3, r2
      _M_x[__n - 1] = (_M_x[__m - 1] ^ (__y >> 1)
 800114a:	f8d0 2630 	ldr.w	r2, [r0, #1584]	@ 0x630
 800114e:	ea82 0253 	eor.w	r2, r2, r3, lsr #1
		       ^ ((__y & 0x01) ? __a : 0));
 8001152:	f013 0301 	ands.w	r3, r3, #1
 8001156:	bf18      	it	ne
 8001158:	460b      	movne	r3, r1
 800115a:	405a      	eors	r2, r3
      _M_p = 0;
 800115c:	2300      	movs	r3, #0
      _M_x[__n - 1] = (_M_x[__m - 1] ^ (__y >> 1)
 800115e:	f8c0 29bc 	str.w	r2, [r0, #2492]	@ 0x9bc
      _M_p = 0;
 8001162:	f8c0 39c0 	str.w	r3, [r0, #2496]	@ 0x9c0
    }
 8001166:	bd30      	pop	{r4, r5, pc}
 8001168:	9908b0df 	.word	0x9908b0df

0800116c <_ZNSt23mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EEclEv>:
    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
			    __s, __b, __t, __c, __l, __f>::
    operator()()
    {
      // Reload the vector - cost is O(n) amortized over n calls.
      if (_M_p >= state_size)
 800116c:	f8d0 39c0 	ldr.w	r3, [r0, #2496]	@ 0x9c0
 8001170:	f5b3 7f1c 	cmp.w	r3, #624	@ 0x270
    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
 8001174:	b510      	push	{r4, lr}
 8001176:	4604      	mov	r4, r0
      if (_M_p >= state_size)
 8001178:	d301      	bcc.n	800117e <_ZNSt23mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EEclEv+0x12>
	_M_gen_rand();
 800117a:	f7ff ffa9 	bl	80010d0 <_ZNSt23mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EE11_M_gen_randEv>

      // Calculate o(x(i)).
      result_type __z = _M_x[_M_p++];
 800117e:	f8d4 39c0 	ldr.w	r3, [r4, #2496]	@ 0x9c0
      __z ^= (__z >> __u) & __d;
      __z ^= (__z << __s) & __b;
      __z ^= (__z << __t) & __c;
 8001182:	4809      	ldr	r0, [pc, #36]	@ (80011a8 <_ZNSt23mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EEclEv+0x3c>)
      result_type __z = _M_x[_M_p++];
 8001184:	1c5a      	adds	r2, r3, #1
 8001186:	f8c4 29c0 	str.w	r2, [r4, #2496]	@ 0x9c0
 800118a:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
      __z ^= (__z << __s) & __b;
 800118e:	4b07      	ldr	r3, [pc, #28]	@ (80011ac <_ZNSt23mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EEclEv+0x40>)
      __z ^= (__z >> __u) & __d;
 8001190:	ea82 22d2 	eor.w	r2, r2, r2, lsr #11
      __z ^= (__z << __s) & __b;
 8001194:	ea03 13c2 	and.w	r3, r3, r2, lsl #7
 8001198:	4053      	eors	r3, r2
      __z ^= (__z << __t) & __c;
 800119a:	ea00 30c3 	and.w	r0, r0, r3, lsl #15
 800119e:	4058      	eors	r0, r3
      __z ^= (__z >> __l);

      return __z;
    }
 80011a0:	ea80 4090 	eor.w	r0, r0, r0, lsr #18
 80011a4:	bd10      	pop	{r4, pc}
 80011a6:	bf00      	nop
 80011a8:	efc60000 	.word	0xefc60000
 80011ac:	9d2c5680 	.word	0x9d2c5680

080011b0 <_ZN12CloudManager16initializeCloudsEv>:
void CloudManager::initializeClouds() {
 80011b0:	b570      	push	{r4, r5, r6, lr}
 80011b2:	f5ad 5d9c 	sub.w	sp, sp, #4992	@ 0x1380
 80011b6:	b086      	sub	sp, #24
	_Alloc_hider(pointer __dat, const _Alloc& __a = _Alloc())
	: allocator_type(__a), _M_p(__dat) { }
#else
	_GLIBCXX20_CONSTEXPR
	_Alloc_hider(pointer __dat, const _Alloc& __a)
	: allocator_type(__a), _M_p(__dat) { }
 80011b8:	f60d 14d4 	addw	r4, sp, #2516	@ 0x9d4
	  ~_Guard() { if (_M_guarded) _M_guarded->_M_dispose(); }

	  basic_string* _M_guarded;
	} __guard(this);

	this->_S_copy_chars(_M_data(), __beg, __end);
 80011bc:	4a3b      	ldr	r2, [pc, #236]	@ (80012ac <_ZN12CloudManager16initializeCloudsEv+0xfc>)
 80011be:	4605      	mov	r5, r0
 80011c0:	f60d 10dc 	addw	r0, sp, #2524	@ 0x9dc
 80011c4:	1fd1      	subs	r1, r2, #7
 80011c6:	6020      	str	r0, [r4, #0]
 80011c8:	f012 fe7c 	bl	8013ec4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
      { _M_dataplus._M_p = __p; }

      _GLIBCXX20_CONSTEXPR
      void
      _M_length(size_type __length)
      { _M_string_length = __length; }
 80011cc:	2307      	movs	r3, #7
 80011ce:	6063      	str	r3, [r4, #4]
#if __cpp_constexpr_dynamic_alloc
	if (std::__is_constant_evaluated())
	  std::construct_at(__builtin_addressof(__c1), __c2);
	else
#endif
	__c1 = __c2;
 80011d0:	6823      	ldr	r3, [r4, #0]
 80011d2:	2200      	movs	r2, #0
 80011d4:	71da      	strb	r2, [r3, #7]
    /** The type of the generated random value. */
    typedef unsigned int result_type;

    // constructors, destructors and member functions

    random_device() { _M_init("default"); }
 80011d6:	4621      	mov	r1, r4
 80011d8:	a804      	add	r0, sp, #16
 80011da:	f012 fde3 	bl	8013da4 <_ZNSt13random_device7_M_initERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
      /**
       *  @brief  Destroy the string instance.
       */
      _GLIBCXX20_CONSTEXPR
      ~basic_string()
      { _M_dispose(); }
 80011de:	4620      	mov	r0, r4
 80011e0:	f012 fe59 	bl	8013e96 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
    entropy() const noexcept
    { return this->_M_getentropy(); }

    result_type
    operator()()
    { return this->_M_getval(); }
 80011e4:	a804      	add	r0, sp, #16
 80011e6:	f012 fe21 	bl	8013e2c <_ZNSt13random_device9_M_getvalEv>
      _M_x[0] = __detail::__mod<_UIntType,
 80011ea:	6020      	str	r0, [r4, #0]
	  __x *= __f;
 80011ec:	4830      	ldr	r0, [pc, #192]	@ (80012b0 <_ZN12CloudManager16initializeCloudsEv+0x100>)
 80011ee:	4621      	mov	r1, r4
      for (size_t __i = 1; __i < state_size; ++__i)
 80011f0:	2201      	movs	r2, #1
	  _UIntType __x = _M_x[__i - 1];
 80011f2:	680b      	ldr	r3, [r1, #0]
	  __x ^= __x >> (__w - 2);
 80011f4:	ea83 7393 	eor.w	r3, r3, r3, lsr #30
	  __x += __detail::__mod<_UIntType, __n>(__i);
 80011f8:	fb00 2303 	mla	r3, r0, r3, r2
      for (size_t __i = 1; __i < state_size; ++__i)
 80011fc:	3201      	adds	r2, #1
 80011fe:	f5b2 7f1c 	cmp.w	r2, #624	@ 0x270
	  _M_x[__i] = __detail::__mod<_UIntType,
 8001202:	f841 3f04 	str.w	r3, [r1, #4]!
      for (size_t __i = 1; __i < state_size; ++__i)
 8001206:	d1f4      	bne.n	80011f2 <_ZN12CloudManager16initializeCloudsEv+0x42>
      _M_p = state_size;
 8001208:	f8c4 29c0 	str.w	r2, [r4, #2496]	@ 0x9c0
			"W must be twice as wide as U");

	  // reference: Fast Random Integer Generation in an Interval
	  // ACM Transactions on Modeling and Computer Simulation 29 (1), 2019
	  // https://arxiv.org/abs/1805.10941
	  _Wp __product = _Wp(__g()) * _Wp(__range);
 800120c:	4620      	mov	r0, r4
 800120e:	f7ff ffad 	bl	800116c <_ZNSt23mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EEclEv>
 8001212:	210f      	movs	r1, #15
 8001214:	fba0 3001 	umull	r3, r0, r0, r1
	  _Up __low = _Up(__product);
	  if (__low < __range)
 8001218:	2b0e      	cmp	r3, #14
 800121a:	d807      	bhi.n	800122c <_ZN12CloudManager16initializeCloudsEv+0x7c>
	    {
	      _Up __threshold = -__range % __range;
	      while (__low < __threshold)
		{
		  __product = _Wp(__g()) * _Wp(__range);
 800121c:	460e      	mov	r6, r1
	      while (__low < __threshold)
 800121e:	b92b      	cbnz	r3, 800122c <_ZN12CloudManager16initializeCloudsEv+0x7c>
		  __product = _Wp(__g()) * _Wp(__range);
 8001220:	4620      	mov	r0, r4
 8001222:	f7ff ffa3 	bl	800116c <_ZNSt23mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EEclEv>
 8001226:	fba0 3006 	umull	r3, r0, r0, r6
 800122a:	e7f8      	b.n	800121e <_ZN12CloudManager16initializeCloudsEv+0x6e>
    Bitmap(const BitmapId id = BITMAP_INVALID)
 800122c:	ab03      	add	r3, sp, #12
        this->setXY(x, y);
 800122e:	f100 0210 	add.w	r2, r0, #16
 8001232:	2601      	movs	r6, #1
 8001234:	2196      	movs	r1, #150	@ 0x96
 8001236:	4628      	mov	r0, r5
 8001238:	801e      	strh	r6, [r3, #0]
 800123a:	f7ff febb 	bl	8000fb4 <_ZN8touchgfx8Drawable5setXYEss>
        this->speed = speed;
 800123e:	4b1d      	ldr	r3, [pc, #116]	@ (80012b4 <_ZN12CloudManager16initializeCloudsEv+0x104>)
 8001240:	62eb      	str	r3, [r5, #44]	@ 0x2c
        this->setBitmap(bitmap);
 8001242:	ab03      	add	r3, sp, #12
 8001244:	4619      	mov	r1, r3
 8001246:	4628      	mov	r0, r5
        this->isVisible = true;
 8001248:	f885 6029 	strb.w	r6, [r5, #41]	@ 0x29
        this->setBitmap(bitmap);
 800124c:	9301      	str	r3, [sp, #4]
 800124e:	f00a f946 	bl	800b4de <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
	  _Wp __product = _Wp(__g()) * _Wp(__range);
 8001252:	4620      	mov	r0, r4
 8001254:	f7ff ff8a 	bl	800116c <_ZNSt23mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EEclEv>
 8001258:	210f      	movs	r1, #15
 800125a:	fba0 3001 	umull	r3, r0, r0, r1
	  if (__low < __range)
 800125e:	2b0e      	cmp	r3, #14
 8001260:	d801      	bhi.n	8001266 <_ZN12CloudManager16initializeCloudsEv+0xb6>
		  __product = _Wp(__g()) * _Wp(__range);
 8001262:	460e      	mov	r6, r1
	      while (__low < __threshold)
 8001264:	b1db      	cbz	r3, 800129e <_ZN12CloudManager16initializeCloudsEv+0xee>
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 8001266:	ab03      	add	r3, sp, #12
      { return const_cast<_Tp&>(__t[__n]); }
 8001268:	f105 0430 	add.w	r4, r5, #48	@ 0x30
        this->setXY(x, y);
 800126c:	f100 0210 	add.w	r2, r0, #16
 8001270:	2601      	movs	r6, #1
 8001272:	4620      	mov	r0, r4
 8001274:	2155      	movs	r1, #85	@ 0x55
 8001276:	801e      	strh	r6, [r3, #0]
 8001278:	f7ff fe9c 	bl	8000fb4 <_ZN8touchgfx8Drawable5setXYEss>
        this->speed = speed;
 800127c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001280:	65eb      	str	r3, [r5, #92]	@ 0x5c
        this->setBitmap(bitmap);
 8001282:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8001284:	9901      	ldr	r1, [sp, #4]
 8001286:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
        this->isVisible = true;
 8001288:	f885 6059 	strb.w	r6, [r5, #89]	@ 0x59
        this->setBitmap(bitmap);
 800128c:	4620      	mov	r0, r4
 800128e:	4798      	blx	r3
    { _M_fini(); }
 8001290:	a804      	add	r0, sp, #16
 8001292:	f012 fdc9 	bl	8013e28 <_ZNSt13random_device7_M_finiEv>
}
 8001296:	f50d 5d9c 	add.w	sp, sp, #4992	@ 0x1380
 800129a:	b006      	add	sp, #24
 800129c:	bd70      	pop	{r4, r5, r6, pc}
		  __product = _Wp(__g()) * _Wp(__range);
 800129e:	4620      	mov	r0, r4
 80012a0:	f7ff ff64 	bl	800116c <_ZNSt23mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EEclEv>
 80012a4:	fba0 3006 	umull	r3, r0, r0, r6
 80012a8:	e7dc      	b.n	8001264 <_ZN12CloudManager16initializeCloudsEv+0xb4>
 80012aa:	bf00      	nop
 80012ac:	08015647 	.word	0x08015647
 80012b0:	6c078965 	.word	0x6c078965
 80012b4:	3fa66666 	.word	0x3fa66666

080012b8 <_ZN22JointedObstacleManagerC1Ev>:
#include "JointedObstacleManager.hpp"

JointedObstacleManager::JointedObstacleManager() : gen(rd()), dis_entity_type(0, 1), currentEntityType(-1) {
 80012b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80012bc:	b087      	sub	sp, #28
 80012be:	4606      	mov	r6, r0
 80012c0:	f000 f948 	bl	8001554 <_ZN15ObstacleManagerC1Ev>
#ifndef TURTLE_MANAGER_HPP
#define TURTLE_MANAGER_HPP

#include "Entity.hpp" // Include the Entity class header

class TurtleManager {
 80012c4:	f506 54a1 	add.w	r4, r6, #5152	@ 0x1420
 80012c8:	f506 58a4 	add.w	r8, r6, #5248	@ 0x1480
        : Widget(), bitmap(bmp), alpha(255)
 80012cc:	f8df b0fc 	ldr.w	fp, [pc, #252]	@ 80013cc <_ZN22JointedObstacleManagerC1Ev+0x114>
    Entity() : isVisible(true), speed(1.0f) {
 80012d0:	f8df a0fc 	ldr.w	sl, [pc, #252]	@ 80013d0 <_ZN22JointedObstacleManagerC1Ev+0x118>
 80012d4:	3410      	adds	r4, #16
 80012d6:	f108 0810 	add.w	r8, r8, #16
        : bitmapId(id)
 80012da:	f64f 79ff 	movw	r9, #65535	@ 0xffff
 80012de:	2500      	movs	r5, #0
 80012e0:	2701      	movs	r7, #1
 80012e2:	80a5      	strh	r5, [r4, #4]
 80012e4:	80e5      	strh	r5, [r4, #6]
 80012e6:	8125      	strh	r5, [r4, #8]
 80012e8:	8165      	strh	r5, [r4, #10]
 80012ea:	81a5      	strh	r5, [r4, #12]
 80012ec:	81e5      	strh	r5, [r4, #14]
 80012ee:	8225      	strh	r5, [r4, #16]
 80012f0:	8265      	strh	r5, [r4, #18]
          nextDrawChainElement(0),
 80012f2:	61e5      	str	r5, [r4, #28]
          cachedAbsX(0),
 80012f4:	8425      	strh	r5, [r4, #32]
          cachedAbsY(0),
 80012f6:	8465      	strh	r5, [r4, #34]	@ 0x22
          touchable(false),
 80012f8:	f884 5024 	strb.w	r5, [r4, #36]	@ 0x24
          visible(true)
 80012fc:	f884 7025 	strb.w	r7, [r4, #37]	@ 0x25
 8001300:	f8c4 b000 	str.w	fp, [r4]
 8001304:	f8a4 9026 	strh.w	r9, [r4, #38]	@ 0x26
 8001308:	f884 9028 	strb.w	r9, [r4, #40]	@ 0x28
          nextSibling(0),
 800130c:	e9c4 5505 	strd	r5, r5, [r4, #20]
        Image::setBitmap(bmp);
 8001310:	4620      	mov	r0, r4
 8001312:	4669      	mov	r1, sp
 8001314:	f8ad 9000 	strh.w	r9, [sp]
 8001318:	f00a f8e1 	bl	800b4de <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 800131c:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001320:	f8c4 a000 	str.w	sl, [r4]
 8001324:	f884 7029 	strb.w	r7, [r4, #41]	@ 0x29
 8001328:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800132a:	3430      	adds	r4, #48	@ 0x30
 800132c:	4544      	cmp	r4, r8
 800132e:	d1d6      	bne.n	80012de <_ZN22JointedObstacleManagerC1Ev+0x26>
 8001330:	4a24      	ldr	r2, [pc, #144]	@ (80013c4 <_ZN22JointedObstacleManagerC1Ev+0x10c>)
 8001332:	f506 5480 	add.w	r4, r6, #4096	@ 0x1000
 8001336:	f04f 33ff 	mov.w	r3, #4294967295
 800133a:	1fd1      	subs	r1, r2, #7
	: allocator_type(__a), _M_p(__dat) { }
 800133c:	a802      	add	r0, sp, #8
 800133e:	f8c4 34a0 	str.w	r3, [r4, #1184]	@ 0x4a0
 8001342:	9000      	str	r0, [sp, #0]
 8001344:	f012 fdbe 	bl	8013ec4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
      { _M_string_length = __length; }
 8001348:	2307      	movs	r3, #7
 800134a:	9301      	str	r3, [sp, #4]
 800134c:	f506 58a5 	add.w	r8, r6, #5280	@ 0x14a0
 8001350:	9b00      	ldr	r3, [sp, #0]
 8001352:	f108 0804 	add.w	r8, r8, #4
    random_device() { _M_init("default"); }
 8001356:	4669      	mov	r1, sp
 8001358:	71dd      	strb	r5, [r3, #7]
 800135a:	4640      	mov	r0, r8
 800135c:	f012 fd22 	bl	8013da4 <_ZNSt13random_device7_M_initERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
      { _M_dispose(); }
 8001360:	4668      	mov	r0, sp
 8001362:	f012 fd98 	bl	8013e96 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
    { return this->_M_getval(); }
 8001366:	4640      	mov	r0, r8
 8001368:	f012 fd60 	bl	8013e2c <_ZNSt13random_device9_M_getvalEv>
    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
 800136c:	f506 51f3 	add.w	r1, r6, #7776	@ 0x1e60
      _M_x[0] = __detail::__mod<_UIntType,
 8001370:	f8c4 0e68 	str.w	r0, [r4, #3688]	@ 0xe68
	  __x *= __f;
 8001374:	4814      	ldr	r0, [pc, #80]	@ (80013c8 <_ZN22JointedObstacleManagerC1Ev+0x110>)
 8001376:	3108      	adds	r1, #8
	  _UIntType __x = _M_x[__i - 1];
 8001378:	680a      	ldr	r2, [r1, #0]
	  __x ^= __x >> (__w - 2);
 800137a:	ea82 7292 	eor.w	r2, r2, r2, lsr #30
	  __x += __detail::__mod<_UIntType, __n>(__i);
 800137e:	fb00 7202 	mla	r2, r0, r2, r7
      for (size_t __i = 1; __i < state_size; ++__i)
 8001382:	3701      	adds	r7, #1
 8001384:	f5b7 7f1c 	cmp.w	r7, #624	@ 0x270
	  _M_x[__i] = __detail::__mod<_UIntType,
 8001388:	f841 2f04 	str.w	r2, [r1, #4]!
      for (size_t __i = 1; __i < state_size; ++__i)
 800138c:	d1f4      	bne.n	8001378 <_ZN22JointedObstacleManagerC1Ev+0xc0>
      _M_p = state_size;
 800138e:	f504 5280 	add.w	r2, r4, #4096	@ 0x1000
	: _M_a(__a), _M_b(__b)
 8001392:	2300      	movs	r3, #0
 8001394:	f8c2 7828 	str.w	r7, [r2, #2088]	@ 0x828
 8001398:	f506 5200 	add.w	r2, r6, #8192	@ 0x2000
 800139c:	2101      	movs	r1, #1
 800139e:	f8c2 382c 	str.w	r3, [r2, #2092]	@ 0x82c
 80013a2:	f8c2 1830 	str.w	r1, [r2, #2096]	@ 0x830
    currentObjectX = 500;
    currentObjectY = 500;
    currentObjectWidth = 0;
    currentObjectHeight = 0;
}
 80013a6:	4630      	mov	r0, r6
    currentObjectX = 500;
 80013a8:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80013ac:	f8c4 2490 	str.w	r2, [r4, #1168]	@ 0x490
    currentObjectY = 500;
 80013b0:	f8c4 2494 	str.w	r2, [r4, #1172]	@ 0x494
    currentObjectWidth = 0;
 80013b4:	f8c4 3498 	str.w	r3, [r4, #1176]	@ 0x498
    currentObjectHeight = 0;
 80013b8:	f8c4 349c 	str.w	r3, [r4, #1180]	@ 0x49c
}
 80013bc:	b007      	add	sp, #28
 80013be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80013c2:	bf00      	nop
 80013c4:	08015647 	.word	0x08015647
 80013c8:	6c078965 	.word	0x6c078965
 80013cc:	08016a28 	.word	0x08016a28
 80013d0:	08015650 	.word	0x08015650

080013d4 <_ZN22JointedObstacleManager18initializeEntitiesEv>:

void JointedObstacleManager::initializeEntities() {
 80013d4:	b510      	push	{r4, lr}
 80013d6:	4604      	mov	r4, r0
    obstacleManager.initializeObstacles();
 80013d8:	f000 f93a 	bl	8001650 <_ZN15ObstacleManager19initializeObstaclesEv>
    turtleManager.initializeTurtles();
 80013dc:	f504 50a1 	add.w	r0, r4, #5152	@ 0x1420
 80013e0:	3010      	adds	r0, #16
}
 80013e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    turtleManager.initializeTurtles();
 80013e6:	f000 ba39 	b.w	800185c <_ZN13TurtleManager17initializeTurtlesEv>

080013ea <_ZN22JointedObstacleManager14updateEntitiesEfi>:

void JointedObstacleManager::updateEntities(float speed, int tickCounter) {
 80013ea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (currentEntityType == -1) {
 80013ee:	f500 5480 	add.w	r4, r0, #4096	@ 0x1000
void JointedObstacleManager::updateEntities(float speed, int tickCounter) {
 80013f2:	ed2d 8b02 	vpush	{d8}
    if (currentEntityType == -1) {
 80013f6:	f8d4 34a0 	ldr.w	r3, [r4, #1184]	@ 0x4a0
 80013fa:	3301      	adds	r3, #1
void JointedObstacleManager::updateEntities(float speed, int tickCounter) {
 80013fc:	4607      	mov	r7, r0
 80013fe:	eeb0 8a40 	vmov.f32	s16, s0
 8001402:	460e      	mov	r6, r1
    if (currentEntityType == -1) {
 8001404:	d123      	bne.n	800144e <_ZN22JointedObstacleManager14updateEntitiesEfi+0x64>
	{ return _M_b; }
 8001406:	f500 5300 	add.w	r3, r0, #8192	@ 0x2000
        currentEntityType = dis_entity_type(gen);
 800140a:	f500 59f3 	add.w	r9, r0, #7776	@ 0x1e60
	static_assert( __urngmin < __urngmax,
	    "Uniform random bit generator must define min() < max()");
	constexpr __uctype __urngrange = __urngmax - __urngmin;

	const __uctype __urange
	  = __uctype(__param.b()) - __uctype(__param.a());
 800140e:	f8d3 a830 	ldr.w	sl, [r3, #2096]	@ 0x830
 8001412:	f8d3 582c 	ldr.w	r5, [r3, #2092]	@ 0x82c
	const __uctype __urange
 8001416:	ebaa 0805 	sub.w	r8, sl, r5

	__uctype __ret;
	if (__urngrange > __urange)
 800141a:	f1b8 3fff 	cmp.w	r8, #4294967295
 800141e:	f109 0908 	add.w	r9, r9, #8
 8001422:	d063      	beq.n	80014ec <_ZN22JointedObstacleManager14updateEntitiesEfi+0x102>
	  _Wp __product = _Wp(__g()) * _Wp(__range);
 8001424:	4648      	mov	r0, r9
 8001426:	f7ff fea1 	bl	800116c <_ZNSt23mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EEclEv>
	  {
	    // downscaling

	    const __uctype __uerange = __urange + 1; // __urange can be zero
 800142a:	f108 0801 	add.w	r8, r8, #1
	  _Wp __product = _Wp(__g()) * _Wp(__range);
 800142e:	fba0 3008 	umull	r3, r0, r0, r8
	  if (__low < __range)
 8001432:	4598      	cmp	r8, r3
 8001434:	d908      	bls.n	8001448 <_ZN22JointedObstacleManager14updateEntitiesEfi+0x5e>
	      _Up __threshold = -__range % __range;
 8001436:	1e6a      	subs	r2, r5, #1
 8001438:	eba2 020a 	sub.w	r2, r2, sl
 800143c:	fbb2 f1f8 	udiv	r1, r2, r8
 8001440:	fb08 2a11 	mls	sl, r8, r1, r2
	      while (__low < __threshold)
 8001444:	459a      	cmp	sl, r3
 8001446:	d84b      	bhi.n	80014e0 <_ZN22JointedObstacleManager14updateEntitiesEfi+0xf6>
	    while (__ret > __urange || __ret < __tmp);
	  }
	else
	  __ret = __uctype(__urng()) - __urngmin;

	return __ret + __param.a();
 8001448:	4405      	add	r5, r0
 800144a:	f8c4 54a0 	str.w	r5, [r4, #1184]	@ 0x4a0
    }
    if (currentEntityType == 0)
 800144e:	f8d4 34a0 	ldr.w	r3, [r4, #1184]	@ 0x4a0
 8001452:	bb23      	cbnz	r3, 800149e <_ZN22JointedObstacleManager14updateEntitiesEfi+0xb4>
    {
    	if (!obstacleManager.obstacles[obstacleManager.lastObstacleType].getVisibility())
 8001454:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
        return isVisible;
 8001458:	2230      	movs	r2, #48	@ 0x30
 800145a:	fb02 7303 	mla	r3, r2, r3, r7
 800145e:	f893 2029 	ldrb.w	r2, [r3, #41]	@ 0x29
 8001462:	2a00      	cmp	r2, #0
 8001464:	d146      	bne.n	80014f4 <_ZN22JointedObstacleManager14updateEntitiesEfi+0x10a>
    	{
    	   currentEntityType = -1;
 8001466:	f04f 32ff 	mov.w	r2, #4294967295
 800146a:	f8c4 24a0 	str.w	r2, [r4, #1184]	@ 0x4a0
        this->isVisible = visible;
 800146e:	2201      	movs	r2, #1
 8001470:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
    	   obstacleManager.obstacles[obstacleManager.lastObstacleType].setVisibility(true);
    	} else
		obstacleManager.updateObstacles(speed);
        currentObjectX = obstacleManager.obstacles[obstacleManager.currentObstacleType].getX();
 8001474:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001478:	2230      	movs	r2, #48	@ 0x30
 800147a:	fb02 7303 	mla	r3, r2, r3, r7
        return Image::getX();
 800147e:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8001482:	f8c4 2490 	str.w	r2, [r4, #1168]	@ 0x490
    }

    int getY() const {
        return Image::getY();
 8001486:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 800148a:	f8c4 2494 	str.w	r2, [r4, #1172]	@ 0x494
        currentObjectY = obstacleManager.obstacles[obstacleManager.currentObstacleType].getY();
        currentObjectWidth = obstacleManager.obstacles[obstacleManager.currentObstacleType].getWidth();
 800148e:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
        currentObjectHeight = obstacleManager.obstacles[obstacleManager.currentObstacleType].getHeight();
 8001492:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
        currentObjectWidth = obstacleManager.obstacles[obstacleManager.currentObstacleType].getWidth();
 8001496:	f8c4 2498 	str.w	r2, [r4, #1176]	@ 0x498
        currentObjectHeight = obstacleManager.obstacles[obstacleManager.currentObstacleType].getHeight();
 800149a:	f8c4 349c 	str.w	r3, [r4, #1180]	@ 0x49c
    }
    if (currentEntityType == 1)
 800149e:	f8d4 34a0 	ldr.w	r3, [r4, #1184]	@ 0x4a0
 80014a2:	2b01      	cmp	r3, #1
 80014a4:	d118      	bne.n	80014d8 <_ZN22JointedObstacleManager14updateEntitiesEfi+0xee>
    {  if (!turtleManager.turtles[0].getVisibility()) {
 80014a6:	f894 2459 	ldrb.w	r2, [r4, #1113]	@ 0x459
 80014aa:	bb4a      	cbnz	r2, 8001500 <_ZN22JointedObstacleManager14updateEntitiesEfi+0x116>
        currentEntityType = -1;
 80014ac:	f04f 32ff 	mov.w	r2, #4294967295
 80014b0:	f8c4 24a0 	str.w	r2, [r4, #1184]	@ 0x4a0
        this->isVisible = visible;
 80014b4:	f884 3459 	strb.w	r3, [r4, #1113]	@ 0x459
        return Image::getX();
 80014b8:	f9b4 3434 	ldrsh.w	r3, [r4, #1076]	@ 0x434
 80014bc:	f8c4 3490 	str.w	r3, [r4, #1168]	@ 0x490
        return Image::getY();
 80014c0:	f9b4 3436 	ldrsh.w	r3, [r4, #1078]	@ 0x436
 80014c4:	f8c4 3494 	str.w	r3, [r4, #1172]	@ 0x494
        turtleManager.turtles[0].setVisibility(true);
    } else
        turtleManager.updateTurtles(tickCounter,speed);
        currentObjectX = turtleManager.turtles[0].getX();
        currentObjectY = turtleManager.turtles[0].getY();
        currentObjectWidth = turtleManager.turtles[0].getWidth();
 80014c8:	f9b4 3438 	ldrsh.w	r3, [r4, #1080]	@ 0x438
 80014cc:	f8c4 3498 	str.w	r3, [r4, #1176]	@ 0x498
        currentObjectHeight = turtleManager.turtles[0].getHeight();
 80014d0:	f9b4 343a 	ldrsh.w	r3, [r4, #1082]	@ 0x43a
 80014d4:	f8c4 349c 	str.w	r3, [r4, #1180]	@ 0x49c
    }
}
 80014d8:	ecbd 8b02 	vpop	{d8}
 80014dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		  __product = _Wp(__g()) * _Wp(__range);
 80014e0:	4648      	mov	r0, r9
 80014e2:	f7ff fe43 	bl	800116c <_ZNSt23mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EEclEv>
 80014e6:	fba8 3000 	umull	r3, r0, r8, r0
 80014ea:	e7ab      	b.n	8001444 <_ZN22JointedObstacleManager14updateEntitiesEfi+0x5a>
	  __ret = __uctype(__urng()) - __urngmin;
 80014ec:	4648      	mov	r0, r9
 80014ee:	f7ff fe3d 	bl	800116c <_ZNSt23mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EEclEv>
 80014f2:	e7a9      	b.n	8001448 <_ZN22JointedObstacleManager14updateEntitiesEfi+0x5e>
		obstacleManager.updateObstacles(speed);
 80014f4:	eeb0 0a48 	vmov.f32	s0, s16
 80014f8:	4638      	mov	r0, r7
 80014fa:	f000 f8cb 	bl	8001694 <_ZN15ObstacleManager15updateObstaclesEf>
 80014fe:	e7b9      	b.n	8001474 <_ZN22JointedObstacleManager14updateEntitiesEfi+0x8a>
        turtleManager.updateTurtles(tickCounter,speed);
 8001500:	f507 50a1 	add.w	r0, r7, #5152	@ 0x1420
 8001504:	eeb0 0a48 	vmov.f32	s0, s16
 8001508:	4631      	mov	r1, r6
 800150a:	3010      	adds	r0, #16
 800150c:	f000 f946 	bl	800179c <_ZN13TurtleManager13updateTurtlesEif>
 8001510:	e7d2      	b.n	80014b8 <_ZN22JointedObstacleManager14updateEntitiesEfi+0xce>

08001512 <_ZN6Entity4initEiiN8touchgfx6BitmapEf>:
    void init(int x, int y, touchgfx::Bitmap bitmap, float speed = 1.0f) {
 8001512:	b530      	push	{r4, r5, lr}
 8001514:	ed2d 8b02 	vpush	{d8}
 8001518:	b083      	sub	sp, #12
 800151a:	4604      	mov	r4, r0
 800151c:	f8ad 3004 	strh.w	r3, [sp, #4]
        setX(x);
 8001520:	6803      	ldr	r3, [r0, #0]
 8001522:	b209      	sxth	r1, r1
 8001524:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001526:	4615      	mov	r5, r2
 8001528:	eeb0 8a40 	vmov.f32	s16, s0
 800152c:	4798      	blx	r3
        setY(y);
 800152e:	6823      	ldr	r3, [r4, #0]
 8001530:	b229      	sxth	r1, r5
 8001532:	4620      	mov	r0, r4
 8001534:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001536:	4798      	blx	r3
        this->isVisible = true;
 8001538:	2301      	movs	r3, #1
 800153a:	f884 3029 	strb.w	r3, [r4, #41]	@ 0x29
        this->setBitmap(bitmap);
 800153e:	6823      	ldr	r3, [r4, #0]
        this->speed = speed;
 8001540:	ed84 8a0b 	vstr	s16, [r4, #44]	@ 0x2c
        this->setBitmap(bitmap);
 8001544:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001546:	a901      	add	r1, sp, #4
 8001548:	4620      	mov	r0, r4
 800154a:	4798      	blx	r3
    }
 800154c:	b003      	add	sp, #12
 800154e:	ecbd 8b02 	vpop	{d8}
 8001552:	bd30      	pop	{r4, r5, pc}

08001554 <_ZN15ObstacleManagerC1Ev>:
#include "ObstacleManager.hpp"

ObstacleManager::ObstacleManager() : gen(rd()), dis_obstacle_type(0, 2) {
 8001554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        : Widget(), bitmap(bmp), alpha(255)
 8001558:	f8df b0ec 	ldr.w	fp, [pc, #236]	@ 8001648 <_ZN15ObstacleManagerC1Ev+0xf4>
    Entity() : isVisible(true), speed(1.0f) {
 800155c:	f8df a0ec 	ldr.w	sl, [pc, #236]	@ 800164c <_ZN15ObstacleManagerC1Ev+0xf8>
 8001560:	b087      	sub	sp, #28
 8001562:	4606      	mov	r6, r0
 8001564:	4604      	mov	r4, r0
 8001566:	f100 0990 	add.w	r9, r0, #144	@ 0x90
 800156a:	f64f 78ff 	movw	r8, #65535	@ 0xffff
 800156e:	2500      	movs	r5, #0
          visible(true)
 8001570:	2701      	movs	r7, #1
 8001572:	80a5      	strh	r5, [r4, #4]
 8001574:	80e5      	strh	r5, [r4, #6]
 8001576:	8125      	strh	r5, [r4, #8]
 8001578:	8165      	strh	r5, [r4, #10]
 800157a:	81a5      	strh	r5, [r4, #12]
 800157c:	81e5      	strh	r5, [r4, #14]
 800157e:	8225      	strh	r5, [r4, #16]
 8001580:	8265      	strh	r5, [r4, #18]
          nextDrawChainElement(0),
 8001582:	61e5      	str	r5, [r4, #28]
          cachedAbsX(0),
 8001584:	8425      	strh	r5, [r4, #32]
          cachedAbsY(0),
 8001586:	8465      	strh	r5, [r4, #34]	@ 0x22
          touchable(false),
 8001588:	f884 5024 	strb.w	r5, [r4, #36]	@ 0x24
          visible(true)
 800158c:	f884 7025 	strb.w	r7, [r4, #37]	@ 0x25
 8001590:	f8c4 b000 	str.w	fp, [r4]
 8001594:	f8a4 8026 	strh.w	r8, [r4, #38]	@ 0x26
 8001598:	f884 8028 	strb.w	r8, [r4, #40]	@ 0x28
          nextSibling(0),
 800159c:	e9c4 5505 	strd	r5, r5, [r4, #20]
        Image::setBitmap(bmp);
 80015a0:	4620      	mov	r0, r4
 80015a2:	4669      	mov	r1, sp
 80015a4:	f8ad 8000 	strh.w	r8, [sp]
 80015a8:	f009 ff99 	bl	800b4de <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 80015ac:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80015b0:	f8c4 a000 	str.w	sl, [r4]
 80015b4:	f884 7029 	strb.w	r7, [r4, #41]	@ 0x29
 80015b8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80015ba:	3430      	adds	r4, #48	@ 0x30
 80015bc:	454c      	cmp	r4, r9
 80015be:	d1d6      	bne.n	800156e <_ZN15ObstacleManagerC1Ev+0x1a>
 80015c0:	4a1f      	ldr	r2, [pc, #124]	@ (8001640 <_ZN15ObstacleManagerC1Ev+0xec>)
	: allocator_type(__a), _M_p(__dat) { }
 80015c2:	a802      	add	r0, sp, #8
 80015c4:	1fd1      	subs	r1, r2, #7
 80015c6:	9000      	str	r0, [sp, #0]
 80015c8:	f012 fc7c 	bl	8013ec4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
      { _M_string_length = __length; }
 80015cc:	2307      	movs	r3, #7
 80015ce:	9301      	str	r3, [sp, #4]
 80015d0:	9b00      	ldr	r3, [sp, #0]
 80015d2:	f106 0498 	add.w	r4, r6, #152	@ 0x98
    random_device() { _M_init("default"); }
 80015d6:	4669      	mov	r1, sp
 80015d8:	71dd      	strb	r5, [r3, #7]
 80015da:	4620      	mov	r0, r4
 80015dc:	f012 fbe2 	bl	8013da4 <_ZNSt13random_device7_M_initERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
      { _M_dispose(); }
 80015e0:	4668      	mov	r0, sp
 80015e2:	f012 fc58 	bl	8013e96 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
    { return this->_M_getval(); }
 80015e6:	4620      	mov	r0, r4
 80015e8:	f012 fc20 	bl	8013e2c <_ZNSt13random_device9_M_getvalEv>
      _M_x[0] = __detail::__mod<_UIntType,
 80015ec:	f8c6 0a5c 	str.w	r0, [r6, #2652]	@ 0xa5c
	  __x *= __f;
 80015f0:	4814      	ldr	r0, [pc, #80]	@ (8001644 <_ZN15ObstacleManagerC1Ev+0xf0>)
 80015f2:	f606 215c 	addw	r1, r6, #2652	@ 0xa5c
	  _UIntType __x = _M_x[__i - 1];
 80015f6:	680a      	ldr	r2, [r1, #0]
	  __x ^= __x >> (__w - 2);
 80015f8:	ea82 7292 	eor.w	r2, r2, r2, lsr #30
	  __x += __detail::__mod<_UIntType, __n>(__i);
 80015fc:	fb00 7202 	mla	r2, r0, r2, r7
      for (size_t __i = 1; __i < state_size; ++__i)
 8001600:	3701      	adds	r7, #1
 8001602:	f5b7 7f1c 	cmp.w	r7, #624	@ 0x270
	  _M_x[__i] = __detail::__mod<_UIntType,
 8001606:	f841 2f04 	str.w	r2, [r1, #4]!
      for (size_t __i = 1; __i < state_size; ++__i)
 800160a:	d1f4      	bne.n	80015f6 <_ZN15ObstacleManagerC1Ev+0xa2>
      _M_p = state_size;
 800160c:	f506 5280 	add.w	r2, r6, #4096	@ 0x1000
	: _M_a(__a), _M_b(__b)
 8001610:	2300      	movs	r3, #0
 8001612:	f8c2 3420 	str.w	r3, [r2, #1056]	@ 0x420
 8001616:	2302      	movs	r3, #2
 8001618:	f8c2 3424 	str.w	r3, [r2, #1060]	@ 0x424
 800161c:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8001620:	f8c2 3428 	str.w	r3, [r2, #1064]	@ 0x428
 8001624:	23e6      	movs	r3, #230	@ 0xe6
 8001626:	f8c2 342c 	str.w	r3, [r2, #1068]	@ 0x42c
    currentObstacleType = -1;
    lastObstacleType = -1;
}
 800162a:	4630      	mov	r0, r6
    currentObstacleType = -1;
 800162c:	f04f 33ff 	mov.w	r3, #4294967295
 8001630:	f8c2 741c 	str.w	r7, [r2, #1052]	@ 0x41c
    lastObstacleType = -1;
 8001634:	e9c6 3324 	strd	r3, r3, [r6, #144]	@ 0x90
}
 8001638:	b007      	add	sp, #28
 800163a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800163e:	bf00      	nop
 8001640:	08015647 	.word	0x08015647
 8001644:	6c078965 	.word	0x6c078965
 8001648:	08016a28 	.word	0x08016a28
 800164c:	08015650 	.word	0x08015650

08001650 <_ZN15ObstacleManager19initializeObstaclesEv>:

void ObstacleManager::initializeObstacles() {
 8001650:	b510      	push	{r4, lr}
    // Initialize all obstacles off-screen
    int x =  420 ; // Start off-screen

    obstacles[GREENTREE].init(x, 149, touchgfx::Bitmap(14), 1.0f);
 8001652:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
void ObstacleManager::initializeObstacles() {
 8001656:	4604      	mov	r4, r0
    obstacles[GREENTREE].init(x, 149, touchgfx::Bitmap(14), 1.0f);
 8001658:	f04f 030e 	mov.w	r3, #14
 800165c:	2295      	movs	r2, #149	@ 0x95
 800165e:	f44f 71d2 	mov.w	r1, #420	@ 0x1a4
 8001662:	f7ff ff56 	bl	8001512 <_ZN6Entity4initEiiN8touchgfx6BitmapEf>
    obstacles[PIPE].init(x, 145, touchgfx::Bitmap(11), 1.0f);
 8001666:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 800166a:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800166e:	f04f 030b 	mov.w	r3, #11
 8001672:	2291      	movs	r2, #145	@ 0x91
 8001674:	f44f 71d2 	mov.w	r1, #420	@ 0x1a4
 8001678:	f7ff ff4b 	bl	8001512 <_ZN6Entity4initEiiN8touchgfx6BitmapEf>
    obstacles[TREE].init(x, 161, touchgfx::Bitmap(15), 1.0f);
 800167c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8001680:	f04f 030f 	mov.w	r3, #15
 8001684:	22a1      	movs	r2, #161	@ 0xa1
 8001686:	f44f 71d2 	mov.w	r1, #420	@ 0x1a4
 800168a:	f104 0060 	add.w	r0, r4, #96	@ 0x60
 800168e:	f7ff ff40 	bl	8001512 <_ZN6Entity4initEiiN8touchgfx6BitmapEf>

}
 8001692:	bd10      	pop	{r4, pc}

08001694 <_ZN15ObstacleManager15updateObstaclesEf>:

void ObstacleManager::updateObstacles(float speed) {
 8001694:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    // Check if there's currently an obstacle moving
    if (currentObstacleType == -1) {
 8001698:	f8d0 3090 	ldr.w	r3, [r0, #144]	@ 0x90
 800169c:	3301      	adds	r3, #1
void ObstacleManager::updateObstacles(float speed) {
 800169e:	ed2d 8b02 	vpush	{d8}
 80016a2:	4604      	mov	r4, r0
 80016a4:	eeb0 8a40 	vmov.f32	s16, s0
    if (currentObstacleType == -1) {
 80016a8:	d12e      	bne.n	8001708 <_ZN15ObstacleManager15updateObstaclesEf+0x74>
	{ return _M_b; }
 80016aa:	f500 5680 	add.w	r6, r0, #4096	@ 0x1000
        // Select a random obstacle type
        currentObstacleType = dis_obstacle_type(gen);
 80016ae:	f600 275c 	addw	r7, r0, #2652	@ 0xa5c
	  = __uctype(__param.b()) - __uctype(__param.a());
 80016b2:	f8d6 9424 	ldr.w	r9, [r6, #1060]	@ 0x424
 80016b6:	f8d6 5420 	ldr.w	r5, [r6, #1056]	@ 0x420
	const __uctype __urange
 80016ba:	eba9 0805 	sub.w	r8, r9, r5
	if (__urngrange > __urange)
 80016be:	f1b8 3fff 	cmp.w	r8, #4294967295
 80016c2:	d065      	beq.n	8001790 <_ZN15ObstacleManager15updateObstaclesEf+0xfc>
	  _Wp __product = _Wp(__g()) * _Wp(__range);
 80016c4:	4638      	mov	r0, r7
 80016c6:	f7ff fd51 	bl	800116c <_ZNSt23mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EEclEv>
	    const __uctype __uerange = __urange + 1; // __urange can be zero
 80016ca:	f108 0801 	add.w	r8, r8, #1
	  _Wp __product = _Wp(__g()) * _Wp(__range);
 80016ce:	fba0 3008 	umull	r3, r0, r0, r8
	  if (__low < __range)
 80016d2:	4598      	cmp	r8, r3
 80016d4:	d908      	bls.n	80016e8 <_ZN15ObstacleManager15updateObstaclesEf+0x54>
	      _Up __threshold = -__range % __range;
 80016d6:	1e6a      	subs	r2, r5, #1
 80016d8:	eba2 0209 	sub.w	r2, r2, r9
 80016dc:	fbb2 f1f8 	udiv	r1, r2, r8
 80016e0:	fb08 2911 	mls	r9, r8, r1, r2
	      while (__low < __threshold)
 80016e4:	4599      	cmp	r9, r3
 80016e6:	d84d      	bhi.n	8001784 <_ZN15ObstacleManager15updateObstaclesEf+0xf0>
	return __ret + __param.a();
 80016e8:	4405      	add	r5, r0
        this->isVisible = visible;
 80016ea:	2330      	movs	r3, #48	@ 0x30
 80016ec:	f8c4 5090 	str.w	r5, [r4, #144]	@ 0x90
 80016f0:	435d      	muls	r5, r3
 80016f2:	1960      	adds	r0, r4, r5
 80016f4:	2301      	movs	r3, #1

        // Initialize the chosen obstacle type
        obstacles[currentObstacleType].setVisibility(true);

        // Initialize its position off-screen
        int x = SCREEN_WIDTH + 100; // Start off-screen
 80016f6:	f8d6 1428 	ldr.w	r1, [r6, #1064]	@ 0x428
 80016fa:	f880 3029 	strb.w	r3, [r0, #41]	@ 0x29
        obstacles[currentObstacleType].setX(x);
 80016fe:	5963      	ldr	r3, [r4, r5]
        int x = SCREEN_WIDTH + 100; // Start off-screen
 8001700:	3164      	adds	r1, #100	@ 0x64
        obstacles[currentObstacleType].setX(x);
 8001702:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001704:	b209      	sxth	r1, r1
 8001706:	4798      	blx	r3
    }

    // Move the current obstacle type
    if (obstacles[currentObstacleType].isVisible) {
 8001708:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 800170c:	2530      	movs	r5, #48	@ 0x30
 800170e:	436b      	muls	r3, r5
 8001710:	18e0      	adds	r0, r4, r3
 8001712:	f890 2029 	ldrb.w	r2, [r0, #41]	@ 0x29
 8001716:	b38a      	cbz	r2, 800177c <_ZN15ObstacleManager15updateObstaclesEf+0xe8>
        moveTo(getX() + dx, getY() + dy);
 8001718:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 800171c:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8001798 <_ZN15ObstacleManager15updateObstaclesEf+0x104>
 8001720:	58e3      	ldr	r3, [r4, r3]
 8001722:	ee07 2a90 	vmov	s15, r2
 8001726:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 800172a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800172c:	ee00 2a10 	vmov	s0, r2
 8001730:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001734:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8001738:	ee77 7a87 	vadd.f32	s15, s15, s14
 800173c:	ee30 0a48 	vsub.f32	s0, s0, s16
 8001740:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001744:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8001748:	ee17 2a90 	vmov	r2, s15
 800174c:	ee10 1a10 	vmov	r1, s0
 8001750:	b212      	sxth	r2, r2
 8001752:	b209      	sxth	r1, r1
 8001754:	4798      	blx	r3
        obstacles[currentObstacleType].moveRelative(-speed, 0);

        // Check if obstacle is off-screen
        if (obstacles[currentObstacleType].getX() + obstacles[currentObstacleType].getWidth() < 0) {
 8001756:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
        return rect.x;
 800175a:	fb05 4302 	mla	r3, r5, r2, r4
        return Image::getX();
 800175e:	f9b3 0004 	ldrsh.w	r0, [r3, #4]
 8001762:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8001766:	42c8      	cmn	r0, r1
 8001768:	d508      	bpl.n	800177c <_ZN15ObstacleManager15updateObstaclesEf+0xe8>
        this->isVisible = visible;
 800176a:	2100      	movs	r1, #0
 800176c:	f883 1029 	strb.w	r1, [r3, #41]	@ 0x29
            obstacles[currentObstacleType].setVisibility(false);
            lastObstacleType = currentObstacleType;
            currentObstacleType = -1;
 8001770:	f04f 33ff 	mov.w	r3, #4294967295
            lastObstacleType = currentObstacleType;
 8001774:	f8c4 2094 	str.w	r2, [r4, #148]	@ 0x94
            currentObstacleType = -1;
 8001778:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
        }
    }
}
 800177c:	ecbd 8b02 	vpop	{d8}
 8001780:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		  __product = _Wp(__g()) * _Wp(__range);
 8001784:	4638      	mov	r0, r7
 8001786:	f7ff fcf1 	bl	800116c <_ZNSt23mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EEclEv>
 800178a:	fba8 3000 	umull	r3, r0, r8, r0
 800178e:	e7a9      	b.n	80016e4 <_ZN15ObstacleManager15updateObstaclesEf+0x50>
	  __ret = __uctype(__urng()) - __urngmin;
 8001790:	4638      	mov	r0, r7
 8001792:	f7ff fceb 	bl	800116c <_ZNSt23mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EEclEv>
 8001796:	e7a7      	b.n	80016e8 <_ZN15ObstacleManager15updateObstaclesEf+0x54>
 8001798:	00000000 	.word	0x00000000

0800179c <_ZN13TurtleManager13updateTurtlesEif>:
    // Initialize turtles with the same position and speed
    turtles[0].init(posX, posY, turtle1Bitmap, speed);
    turtles[1].init(posX, posY, turtle2Bitmap, speed);
}

void TurtleManager::updateTurtles(int tickCounter, float speed) {
 800179c:	b570      	push	{r4, r5, r6, lr}
    // Manage visibility based on tickCounter
    switch (tickCounter % 24) {
 800179e:	2318      	movs	r3, #24
 80017a0:	fb91 f2f3 	sdiv	r2, r1, r3
 80017a4:	fb02 1113 	mls	r1, r2, r3, r1
 80017a8:	2914      	cmp	r1, #20
void TurtleManager::updateTurtles(int tickCounter, float speed) {
 80017aa:	ed2d 8b02 	vpush	{d8}
 80017ae:	4604      	mov	r4, r0
 80017b0:	eeb0 8a40 	vmov.f32	s16, s0
    switch (tickCounter % 24) {
 80017b4:	d812      	bhi.n	80017dc <_ZN13TurtleManager13updateTurtlesEif+0x40>
 80017b6:	4b26      	ldr	r3, [pc, #152]	@ (8001850 <_ZN13TurtleManager13updateTurtlesEif+0xb4>)
 80017b8:	2201      	movs	r2, #1
 80017ba:	fa02 f101 	lsl.w	r1, r2, r1
 80017be:	400b      	ands	r3, r1
 80017c0:	b93b      	cbnz	r3, 80017d2 <_ZN13TurtleManager13updateTurtlesEif+0x36>
 80017c2:	4824      	ldr	r0, [pc, #144]	@ (8001854 <_ZN13TurtleManager13updateTurtlesEif+0xb8>)
 80017c4:	4008      	ands	r0, r1
 80017c6:	b148      	cbz	r0, 80017dc <_ZN13TurtleManager13updateTurtlesEif+0x40>
        visible = vis;
 80017c8:	f884 3025 	strb.w	r3, [r4, #37]	@ 0x25
 80017cc:	f884 2055 	strb.w	r2, [r4, #85]	@ 0x55
            turtles[1].setVisible(true);
            break;
    }

    // Update each turtle's position
    for (int i = 0; i < MAX_TURTLES; ++i) {
 80017d0:	e004      	b.n	80017dc <_ZN13TurtleManager13updateTurtlesEif+0x40>
 80017d2:	2300      	movs	r3, #0
 80017d4:	f880 2025 	strb.w	r2, [r0, #37]	@ 0x25
 80017d8:	f880 3055 	strb.w	r3, [r0, #85]	@ 0x55
        moveTo(getX() + dx, getY() + dy);
 80017dc:	eddf 8a1e 	vldr	s17, [pc, #120]	@ 8001858 <_ZN13TurtleManager13updateTurtlesEif+0xbc>
 80017e0:	f104 0560 	add.w	r5, r4, #96	@ 0x60
        this->isVisible = visible;
 80017e4:	2600      	movs	r6, #0
        moveTo(getX() + dx, getY() + dy);
 80017e6:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80017ea:	ee07 3a10 	vmov	s14, r3
 80017ee:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 80017f2:	ee07 3a90 	vmov	s15, r3
 80017f6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80017fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017fe:	ee37 7a28 	vadd.f32	s14, s14, s17
 8001802:	ee77 7ac8 	vsub.f32	s15, s15, s16
 8001806:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 800180a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800180e:	6823      	ldr	r3, [r4, #0]
 8001810:	ee17 2a10 	vmov	r2, s14
 8001814:	ee17 1a90 	vmov	r1, s15
 8001818:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800181a:	b212      	sxth	r2, r2
 800181c:	b209      	sxth	r1, r1
 800181e:	4620      	mov	r0, r4
 8001820:	4798      	blx	r3
            // Move the turtle horizontally
            turtles[i].moveRelative(-speed, 0); // Adjust speed as needed
            if (turtles[i].getX() + turtles[i].getWidth() < 0) {
 8001822:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
        return Image::getX();
 8001826:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 800182a:	42da      	cmn	r2, r3
 800182c:	d509      	bpl.n	8001842 <_ZN13TurtleManager13updateTurtlesEif+0xa6>
                turtles[i].moveTo(SCREEN_WIDTH, turtles[i].getY());
 800182e:	6823      	ldr	r3, [r4, #0]
 8001830:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8001834:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001836:	f44f 71a0 	mov.w	r1, #320	@ 0x140
 800183a:	4620      	mov	r0, r4
 800183c:	4798      	blx	r3
        this->isVisible = visible;
 800183e:	f884 6029 	strb.w	r6, [r4, #41]	@ 0x29
    for (int i = 0; i < MAX_TURTLES; ++i) {
 8001842:	3430      	adds	r4, #48	@ 0x30
 8001844:	42a5      	cmp	r5, r4
 8001846:	d1ce      	bne.n	80017e6 <_ZN13TurtleManager13updateTurtlesEif+0x4a>
                turtles[i].setVisibility(false);
        }
    }
}
 8001848:	ecbd 8b02 	vpop	{d8}
 800184c:	bd70      	pop	{r4, r5, r6, pc}
 800184e:	bf00      	nop
 8001850:	00101101 	.word	0x00101101
 8001854:	00010010 	.word	0x00010010
 8001858:	00000000 	.word	0x00000000

0800185c <_ZN13TurtleManager17initializeTurtlesEv>:
void TurtleManager::initializeTurtles() {
 800185c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001860:	ed2d 8b02 	vpush	{d8}
 8001864:	f5ad 5d9c 	sub.w	sp, sp, #4992	@ 0x1380
 8001868:	b083      	sub	sp, #12
	: allocator_type(__a), _M_p(__dat) { }
 800186a:	f60d 14c4 	addw	r4, sp, #2500	@ 0x9c4
 800186e:	4a52      	ldr	r2, [pc, #328]	@ (80019b8 <_ZN13TurtleManager17initializeTurtlesEv+0x15c>)
 8001870:	4605      	mov	r5, r0
 8001872:	f60d 10cc 	addw	r0, sp, #2508	@ 0x9cc
 8001876:	1fd1      	subs	r1, r2, #7
 8001878:	6020      	str	r0, [r4, #0]
 800187a:	f012 fb23 	bl	8013ec4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
      { _M_string_length = __length; }
 800187e:	2307      	movs	r3, #7
 8001880:	6063      	str	r3, [r4, #4]
 8001882:	6823      	ldr	r3, [r4, #0]
 8001884:	2200      	movs	r2, #0
 8001886:	71da      	strb	r2, [r3, #7]
    random_device() { _M_init("default"); }
 8001888:	4621      	mov	r1, r4
 800188a:	4668      	mov	r0, sp
 800188c:	f012 fa8a 	bl	8013da4 <_ZNSt13random_device7_M_initERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
      { _M_dispose(); }
 8001890:	4620      	mov	r0, r4
 8001892:	f012 fb00 	bl	8013e96 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
    { return this->_M_getval(); }
 8001896:	4668      	mov	r0, sp
 8001898:	f012 fac8 	bl	8013e2c <_ZNSt13random_device9_M_getvalEv>
      _M_x[0] = __detail::__mod<_UIntType,
 800189c:	6020      	str	r0, [r4, #0]
	  __x *= __f;
 800189e:	4847      	ldr	r0, [pc, #284]	@ (80019bc <_ZN13TurtleManager17initializeTurtlesEv+0x160>)
 80018a0:	4621      	mov	r1, r4
      for (size_t __i = 1; __i < state_size; ++__i)
 80018a2:	2201      	movs	r2, #1
	  _UIntType __x = _M_x[__i - 1];
 80018a4:	680b      	ldr	r3, [r1, #0]
	  __x ^= __x >> (__w - 2);
 80018a6:	ea83 7393 	eor.w	r3, r3, r3, lsr #30
	  __x += __detail::__mod<_UIntType, __n>(__i);
 80018aa:	fb00 2303 	mla	r3, r0, r3, r2
      for (size_t __i = 1; __i < state_size; ++__i)
 80018ae:	3201      	adds	r2, #1
 80018b0:	f5b2 7f1c 	cmp.w	r2, #624	@ 0x270
	  _M_x[__i] = __detail::__mod<_UIntType,
 80018b4:	f841 3f04 	str.w	r3, [r1, #4]!
      for (size_t __i = 1; __i < state_size; ++__i)
 80018b8:	d1f4      	bne.n	80018a4 <_ZN13TurtleManager17initializeTurtlesEv+0x48>
      const size_t __log2r = std::log(__r) / std::log(2.0L);
      const size_t __m = std::max<size_t>(1UL,
					  (__b + __log2r - 1UL) / __log2r);
      _RealType __ret;
      _RealType __sum = _RealType(0);
      _RealType __tmp = _RealType(1);
 80018ba:	4f41      	ldr	r7, [pc, #260]	@ (80019c0 <_ZN13TurtleManager17initializeTurtlesEv+0x164>)
      __z ^= (__z << __t) & __c;
 80018bc:	f8df 9118 	ldr.w	r9, [pc, #280]	@ 80019d8 <_ZN13TurtleManager17initializeTurtlesEv+0x17c>
      _M_p = state_size;
 80018c0:	f8c4 29c0 	str.w	r2, [r4, #2496]	@ 0x9c0
 80018c4:	f04f 0802 	mov.w	r8, #2
      _RealType __sum = _RealType(0);
 80018c8:	f04f 0a00 	mov.w	sl, #0
 80018cc:	f04f 0b00 	mov.w	fp, #0
      _RealType __tmp = _RealType(1);
 80018d0:	2600      	movs	r6, #0
      if (_M_p >= state_size)
 80018d2:	f8d4 39c0 	ldr.w	r3, [r4, #2496]	@ 0x9c0
 80018d6:	f5b3 7f1c 	cmp.w	r3, #624	@ 0x270
 80018da:	d302      	bcc.n	80018e2 <_ZN13TurtleManager17initializeTurtlesEv+0x86>
	_M_gen_rand();
 80018dc:	4620      	mov	r0, r4
 80018de:	f7ff fbf7 	bl	80010d0 <_ZNSt23mersenne_twister_engineIjLj32ELj624ELj397ELj31ELj2567483615ELj11ELj4294967295ELj7ELj2636928640ELj15ELj4022730752ELj18ELj1812433253EE11_M_gen_randEv>
      result_type __z = _M_x[_M_p++];
 80018e2:	f8d4 39c0 	ldr.w	r3, [r4, #2496]	@ 0x9c0
 80018e6:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 80018ea:	1c5a      	adds	r2, r3, #1
      __z ^= (__z << __s) & __b;
 80018ec:	4b35      	ldr	r3, [pc, #212]	@ (80019c4 <_ZN13TurtleManager17initializeTurtlesEv+0x168>)
      result_type __z = _M_x[_M_p++];
 80018ee:	f8c4 29c0 	str.w	r2, [r4, #2496]	@ 0x9c0
      __z ^= (__z >> __u) & __d;
 80018f2:	ea80 20d0 	eor.w	r0, r0, r0, lsr #11
      __z ^= (__z << __s) & __b;
 80018f6:	ea03 13c0 	and.w	r3, r3, r0, lsl #7
 80018fa:	4058      	eors	r0, r3
      __z ^= (__z << __t) & __c;
 80018fc:	ea09 33c0 	and.w	r3, r9, r0, lsl #15
 8001900:	4058      	eors	r0, r3
      for (size_t __k = __m; __k != 0; --__k)
	{
	  __sum += _RealType(__urng() - __urng.min()) * __tmp;
 8001902:	ea80 4090 	eor.w	r0, r0, r0, lsr #18
 8001906:	f7fe fe0d 	bl	8000524 <__aeabi_ui2d>
 800190a:	4632      	mov	r2, r6
 800190c:	463b      	mov	r3, r7
 800190e:	f7fe fe83 	bl	8000618 <__aeabi_dmul>
 8001912:	4602      	mov	r2, r0
 8001914:	460b      	mov	r3, r1
 8001916:	4650      	mov	r0, sl
 8001918:	4659      	mov	r1, fp
 800191a:	f7fe fcc7 	bl	80002ac <__adddf3>
	  __tmp *= __r;
 800191e:	4b2a      	ldr	r3, [pc, #168]	@ (80019c8 <_ZN13TurtleManager17initializeTurtlesEv+0x16c>)
	  __sum += _RealType(__urng() - __urng.min()) * __tmp;
 8001920:	4682      	mov	sl, r0
 8001922:	468b      	mov	fp, r1
	  __tmp *= __r;
 8001924:	4630      	mov	r0, r6
 8001926:	4639      	mov	r1, r7
 8001928:	2200      	movs	r2, #0
 800192a:	f7fe fe75 	bl	8000618 <__aeabi_dmul>
      for (size_t __k = __m; __k != 0; --__k)
 800192e:	f1b8 0f01 	cmp.w	r8, #1
	  __tmp *= __r;
 8001932:	4606      	mov	r6, r0
 8001934:	460f      	mov	r7, r1
      for (size_t __k = __m; __k != 0; --__k)
 8001936:	d13c      	bne.n	80019b2 <_ZN13TurtleManager17initializeTurtlesEv+0x156>
	}
      __ret = __sum / __tmp;
 8001938:	4602      	mov	r2, r0
 800193a:	460b      	mov	r3, r1
 800193c:	4650      	mov	r0, sl
 800193e:	4659      	mov	r1, fp
 8001940:	f7fe ff94 	bl	800086c <__aeabi_ddiv>
      if (__builtin_expect(__ret >= _RealType(1), 0))
 8001944:	4b1e      	ldr	r3, [pc, #120]	@ (80019c0 <_ZN13TurtleManager17initializeTurtlesEv+0x164>)
 8001946:	2200      	movs	r2, #0
      __ret = __sum / __tmp;
 8001948:	4606      	mov	r6, r0
 800194a:	460f      	mov	r7, r1
      if (__builtin_expect(__ret >= _RealType(1), 0))
 800194c:	f7ff f8ea 	bl	8000b24 <__aeabi_dcmpge>
 8001950:	b110      	cbz	r0, 8001958 <_ZN13TurtleManager17initializeTurtlesEv+0xfc>
	{
#if _GLIBCXX_USE_C99_MATH_TR1
	  __ret = std::nextafter(_RealType(1), _RealType(0));
 8001952:	4f1e      	ldr	r7, [pc, #120]	@ (80019cc <_ZN13TurtleManager17initializeTurtlesEv+0x170>)
 8001954:	f04f 36ff 	mov.w	r6, #4294967295
	operator()(_UniformRandomNumberGenerator& __urng,
		   const param_type& __p)
	{
	  __detail::_Adaptor<_UniformRandomNumberGenerator, result_type>
	    __aurng(__urng);
	  return (__aurng() * (__p.b() - __p.a())) + __p.a();
 8001958:	4632      	mov	r2, r6
 800195a:	463b      	mov	r3, r7
 800195c:	4630      	mov	r0, r6
 800195e:	4639      	mov	r1, r7
 8001960:	f7fe fca4 	bl	80002ac <__adddf3>
 8001964:	4b16      	ldr	r3, [pc, #88]	@ (80019c0 <_ZN13TurtleManager17initializeTurtlesEv+0x164>)
 8001966:	2200      	movs	r2, #0
 8001968:	f7fe fca0 	bl	80002ac <__adddf3>
    float speed = dis_speed(gen);
 800196c:	f7ff f8ee 	bl	8000b4c <__aeabi_d2f>
    turtles[0].init(posX, posY, turtle1Bitmap, speed);
 8001970:	4b17      	ldr	r3, [pc, #92]	@ (80019d0 <_ZN13TurtleManager17initializeTurtlesEv+0x174>)
    float speed = dis_speed(gen);
 8001972:	ee08 0a10 	vmov	s16, r0
    turtles[0].init(posX, posY, turtle1Bitmap, speed);
 8001976:	881b      	ldrh	r3, [r3, #0]
 8001978:	eeb0 0a48 	vmov.f32	s0, s16
 800197c:	4628      	mov	r0, r5
 800197e:	225f      	movs	r2, #95	@ 0x5f
 8001980:	f44f 71d2 	mov.w	r1, #420	@ 0x1a4
 8001984:	f7ff fdc5 	bl	8001512 <_ZN6Entity4initEiiN8touchgfx6BitmapEf>
    turtles[1].init(posX, posY, turtle2Bitmap, speed);
 8001988:	4b12      	ldr	r3, [pc, #72]	@ (80019d4 <_ZN13TurtleManager17initializeTurtlesEv+0x178>)
 800198a:	eeb0 0a48 	vmov.f32	s0, s16
 800198e:	881b      	ldrh	r3, [r3, #0]
 8001990:	225f      	movs	r2, #95	@ 0x5f
 8001992:	f44f 71d2 	mov.w	r1, #420	@ 0x1a4
 8001996:	f105 0030 	add.w	r0, r5, #48	@ 0x30
 800199a:	f7ff fdba 	bl	8001512 <_ZN6Entity4initEiiN8touchgfx6BitmapEf>
    { _M_fini(); }
 800199e:	4668      	mov	r0, sp
 80019a0:	f012 fa42 	bl	8013e28 <_ZNSt13random_device7_M_finiEv>
}
 80019a4:	f50d 5d9c 	add.w	sp, sp, #4992	@ 0x1380
 80019a8:	b003      	add	sp, #12
 80019aa:	ecbd 8b02 	vpop	{d8}
 80019ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80019b2:	f04f 0801 	mov.w	r8, #1
 80019b6:	e78c      	b.n	80018d2 <_ZN13TurtleManager17initializeTurtlesEv+0x76>
 80019b8:	08015647 	.word	0x08015647
 80019bc:	6c078965 	.word	0x6c078965
 80019c0:	3ff00000 	.word	0x3ff00000
 80019c4:	9d2c5680 	.word	0x9d2c5680
 80019c8:	41f00000 	.word	0x41f00000
 80019cc:	3fefffff 	.word	0x3fefffff
 80019d0:	2000010e 	.word	0x2000010e
 80019d4:	2000010c 	.word	0x2000010c
 80019d8:	efc60000 	.word	0xefc60000

080019dc <_GLOBAL__sub_I_turtle1Bitmap>:
 80019dc:	4b03      	ldr	r3, [pc, #12]	@ (80019ec <_GLOBAL__sub_I_turtle1Bitmap+0x10>)
 80019de:	2211      	movs	r2, #17
 80019e0:	801a      	strh	r2, [r3, #0]
 80019e2:	4b03      	ldr	r3, [pc, #12]	@ (80019f0 <_GLOBAL__sub_I_turtle1Bitmap+0x14>)
 80019e4:	2212      	movs	r2, #18
 80019e6:	801a      	strh	r2, [r3, #0]
}
 80019e8:	4770      	bx	lr
 80019ea:	bf00      	nop
 80019ec:	2000010e 	.word	0x2000010e
 80019f0:	2000010c 	.word	0x2000010c

080019f4 <SPI5_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPI5_Write(uint16_t Value)
{
 80019f4:	b507      	push	{r0, r1, r2, lr}
  HAL_StatusTypeDef status = HAL_OK;

  status = HAL_SPI_Transmit(&hspi5, (uint8_t*) &Value, 1, Spi5Timeout);
 80019f6:	4b06      	ldr	r3, [pc, #24]	@ (8001a10 <SPI5_Write+0x1c>)
{
 80019f8:	f8ad 0006 	strh.w	r0, [sp, #6]
  status = HAL_SPI_Transmit(&hspi5, (uint8_t*) &Value, 1, Spi5Timeout);
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4805      	ldr	r0, [pc, #20]	@ (8001a14 <SPI5_Write+0x20>)
 8001a00:	2201      	movs	r2, #1
 8001a02:	f10d 0106 	add.w	r1, sp, #6
 8001a06:	f005 fa19 	bl	8006e3c <HAL_SPI_Transmit>
  if(status != HAL_OK)
  {
    /* Re-Initialize the BUS */
    SPI5_Error();
  }
}
 8001a0a:	b003      	add	sp, #12
 8001a0c:	f85d fb04 	ldr.w	pc, [sp], #4
 8001a10:	20000004 	.word	0x20000004
 8001a14:	200001f0 	.word	0x200001f0

08001a18 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001a18:	b508      	push	{r3, lr}
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {

	osDelay(1);
 8001a1a:	2001      	movs	r0, #1
 8001a1c:	f005 fedd 	bl	80077da <osDelay>
  for(;;)
 8001a20:	e7fb      	b.n	8001a1a <StartDefaultTask+0x2>
	...

08001a24 <StartHardwarePollingTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartHardwarePollingTask */
void StartHardwarePollingTask(void *argument)
{
 8001a24:	b508      	push	{r3, lr}
  /* USER CODE BEGIN StartHardwarePollingTask */
  /* Infinite loop */
  for(;;)
  {
     HAL_ADC_Start(&hadc1);
 8001a26:	4d0f      	ldr	r5, [pc, #60]	@ (8001a64 <StartHardwarePollingTask+0x40>)
     HAL_ADC_Start(&hadc2);
 8001a28:	4c0f      	ldr	r4, [pc, #60]	@ (8001a68 <StartHardwarePollingTask+0x44>)
     HAL_ADC_Start(&hadc1);
 8001a2a:	4628      	mov	r0, r5
 8001a2c:	f003 fb08 	bl	8005040 <HAL_ADC_Start>
     HAL_ADC_Start(&hadc2);
 8001a30:	4620      	mov	r0, r4
 8001a32:	f003 fb05 	bl	8005040 <HAL_ADC_Start>
     HAL_ADC_PollForConversion (&hadc1, 1);
 8001a36:	2101      	movs	r1, #1
 8001a38:	4628      	mov	r0, r5
 8001a3a:	f003 fb7f 	bl	800513c <HAL_ADC_PollForConversion>
     HAL_ADC_PollForConversion (&hadc2, 1);
 8001a3e:	2101      	movs	r1, #1
 8001a40:	4620      	mov	r0, r4
 8001a42:	f003 fb7b 	bl	800513c <HAL_ADC_PollForConversion>
     JoystickX = HAL_ADC_GetValue(&hadc1);
 8001a46:	4628      	mov	r0, r5
 8001a48:	f003 fbcb 	bl	80051e2 <HAL_ADC_GetValue>
 8001a4c:	4b07      	ldr	r3, [pc, #28]	@ (8001a6c <StartHardwarePollingTask+0x48>)
 8001a4e:	8018      	strh	r0, [r3, #0]
     JoystickY = HAL_ADC_GetValue(&hadc2);
 8001a50:	4620      	mov	r0, r4
 8001a52:	f003 fbc6 	bl	80051e2 <HAL_ADC_GetValue>
 8001a56:	4b06      	ldr	r3, [pc, #24]	@ (8001a70 <StartHardwarePollingTask+0x4c>)
 8001a58:	8018      	strh	r0, [r3, #0]
     osDelay(100);
 8001a5a:	2064      	movs	r0, #100	@ 0x64
 8001a5c:	f005 febd 	bl	80077da <osDelay>
  for(;;)
 8001a60:	e7e3      	b.n	8001a2a <StartHardwarePollingTask+0x6>
 8001a62:	bf00      	nop
 8001a64:	20000174 	.word	0x20000174
 8001a68:	2000012c 	.word	0x2000012c
 8001a6c:	2000012a 	.word	0x2000012a
 8001a70:	20000128 	.word	0x20000128

08001a74 <SystemClock_Config>:
{
 8001a74:	b530      	push	{r4, r5, lr}
 8001a76:	b095      	sub	sp, #84	@ 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a78:	2210      	movs	r2, #16
 8001a7a:	2100      	movs	r1, #0
 8001a7c:	a80a      	add	r0, sp, #40	@ 0x28
 8001a7e:	f012 ff68 	bl	8014952 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a82:	2214      	movs	r2, #20
 8001a84:	2100      	movs	r1, #0
 8001a86:	a803      	add	r0, sp, #12
 8001a88:	f012 ff63 	bl	8014952 <memset>
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a8c:	2400      	movs	r4, #0
 8001a8e:	4b1d      	ldr	r3, [pc, #116]	@ (8001b04 <SystemClock_Config+0x90>)
 8001a90:	9401      	str	r4, [sp, #4]
 8001a92:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001a94:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001a98:	641a      	str	r2, [r3, #64]	@ 0x40
 8001a9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a9c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001aa0:	9301      	str	r3, [sp, #4]
 8001aa2:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001aa4:	4b18      	ldr	r3, [pc, #96]	@ (8001b08 <SystemClock_Config+0x94>)
 8001aa6:	9402      	str	r4, [sp, #8]
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 8001aae:	601a      	str	r2, [r3, #0]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001ab6:	9302      	str	r3, [sp, #8]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001ab8:	2201      	movs	r2, #1
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001aba:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001abc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001ac0:	e9cd 2308 	strd	r2, r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ac4:	2502      	movs	r5, #2
 8001ac6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001aca:	e9cd 530e 	strd	r5, r3, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001ace:	2108      	movs	r1, #8
 8001ad0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001ad4:	e9cd 1310 	strd	r1, r3, [sp, #64]	@ 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ad8:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001ada:	2304      	movs	r3, #4
 8001adc:	9313      	str	r3, [sp, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001ade:	9512      	str	r5, [sp, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ae0:	f004 fc7c 	bl	80063dc <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ae4:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ae6:	e9cd 3503 	strd	r3, r5, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001aea:	f44f 50a0 	mov.w	r0, #5120	@ 0x1400
 8001aee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001af2:	e9cd 0306 	strd	r0, r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001af6:	2105      	movs	r1, #5
 8001af8:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001afa:	9405      	str	r4, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001afc:	f004 fe4a 	bl	8006794 <HAL_RCC_ClockConfig>
}
 8001b00:	b015      	add	sp, #84	@ 0x54
 8001b02:	bd30      	pop	{r4, r5, pc}
 8001b04:	40023800 	.word	0x40023800
 8001b08:	40007000 	.word	0x40007000

08001b0c <main>:
{
 8001b0c:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8001b10:	b09b      	sub	sp, #108	@ 0x6c
  HAL_Init();
 8001b12:	f003 f9af 	bl	8004e74 <HAL_Init>
  SystemClock_Config();
 8001b16:	f7ff ffad 	bl	8001a74 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b1a:	2214      	movs	r2, #20
 8001b1c:	2100      	movs	r1, #0
 8001b1e:	a80d      	add	r0, sp, #52	@ 0x34
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b20:	2400      	movs	r4, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b22:	f012 ff16 	bl	8014952 <memset>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b26:	4bc6      	ldr	r3, [pc, #792]	@ (8001e40 <main+0x334>)
 8001b28:	9400      	str	r4, [sp, #0]
 8001b2a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
  HAL_GPIO_WritePin(GPIOE, VSYNC_FREQ_Pin|RENDER_TIME_Pin|FRAME_RATE_Pin|MCU_ACTIVE_Pin, GPIO_PIN_RESET);
 8001b2c:	48c5      	ldr	r0, [pc, #788]	@ (8001e44 <main+0x338>)
  hi2c3.Instance = I2C3;
 8001b2e:	4ec6      	ldr	r6, [pc, #792]	@ (8001e48 <main+0x33c>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b30:	f042 0210 	orr.w	r2, r2, #16
 8001b34:	631a      	str	r2, [r3, #48]	@ 0x30
 8001b36:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001b38:	f002 0210 	and.w	r2, r2, #16
 8001b3c:	9200      	str	r2, [sp, #0]
 8001b3e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001b40:	9401      	str	r4, [sp, #4]
 8001b42:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001b44:	f042 0220 	orr.w	r2, r2, #32
 8001b48:	631a      	str	r2, [r3, #48]	@ 0x30
 8001b4a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001b4c:	f002 0220 	and.w	r2, r2, #32
 8001b50:	9201      	str	r2, [sp, #4]
 8001b52:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b54:	9402      	str	r4, [sp, #8]
 8001b56:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001b58:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001b5c:	631a      	str	r2, [r3, #48]	@ 0x30
 8001b5e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001b60:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8001b64:	9202      	str	r2, [sp, #8]
 8001b66:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b68:	9403      	str	r4, [sp, #12]
 8001b6a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001b6c:	f042 0204 	orr.w	r2, r2, #4
 8001b70:	631a      	str	r2, [r3, #48]	@ 0x30
 8001b72:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001b74:	f002 0204 	and.w	r2, r2, #4
 8001b78:	9203      	str	r2, [sp, #12]
 8001b7a:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b7c:	9404      	str	r4, [sp, #16]
 8001b7e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001b80:	f042 0201 	orr.w	r2, r2, #1
 8001b84:	631a      	str	r2, [r3, #48]	@ 0x30
 8001b86:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001b88:	f002 0201 	and.w	r2, r2, #1
 8001b8c:	9204      	str	r2, [sp, #16]
 8001b8e:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b90:	9405      	str	r4, [sp, #20]
 8001b92:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001b94:	f042 0202 	orr.w	r2, r2, #2
 8001b98:	631a      	str	r2, [r3, #48]	@ 0x30
 8001b9a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001b9c:	f002 0202 	and.w	r2, r2, #2
 8001ba0:	9205      	str	r2, [sp, #20]
 8001ba2:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001ba4:	9406      	str	r4, [sp, #24]
 8001ba6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001ba8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001bac:	631a      	str	r2, [r3, #48]	@ 0x30
 8001bae:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001bb0:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 8001bb4:	9206      	str	r2, [sp, #24]
 8001bb6:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bb8:	9407      	str	r4, [sp, #28]
 8001bba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001bbc:	f042 0208 	orr.w	r2, r2, #8
 8001bc0:	631a      	str	r2, [r3, #48]	@ 0x30
 8001bc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bc4:	f003 0308 	and.w	r3, r3, #8
 8001bc8:	9307      	str	r3, [sp, #28]
  HAL_GPIO_WritePin(GPIOE, VSYNC_FREQ_Pin|RENDER_TIME_Pin|FRAME_RATE_Pin|MCU_ACTIVE_Pin, GPIO_PIN_RESET);
 8001bca:	4622      	mov	r2, r4
 8001bcc:	213c      	movs	r1, #60	@ 0x3c
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bce:	9b07      	ldr	r3, [sp, #28]
  HAL_GPIO_WritePin(GPIOE, VSYNC_FREQ_Pin|RENDER_TIME_Pin|FRAME_RATE_Pin|MCU_ACTIVE_Pin, GPIO_PIN_RESET);
 8001bd0:	f003 fdee 	bl	80057b0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8001bd4:	489d      	ldr	r0, [pc, #628]	@ (8001e4c <main+0x340>)
 8001bd6:	4622      	mov	r2, r4
 8001bd8:	2104      	movs	r1, #4
 8001bda:	f003 fde9 	bl	80057b0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 8001bde:	4622      	mov	r2, r4
 8001be0:	489b      	ldr	r0, [pc, #620]	@ (8001e50 <main+0x344>)
 8001be2:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001be6:	2501      	movs	r5, #1
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 8001be8:	f003 fde2 	bl	80057b0 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bec:	f04f 0a03 	mov.w	sl, #3
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bf0:	233c      	movs	r3, #60	@ 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001bf2:	4894      	ldr	r0, [pc, #592]	@ (8001e44 <main+0x338>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bf4:	f8cd a040 	str.w	sl, [sp, #64]	@ 0x40
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001bf8:	a90d      	add	r1, sp, #52	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001bfa:	f04f 0b02 	mov.w	fp, #2
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001bfe:	2704      	movs	r7, #4
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c00:	e9cd 350d 	strd	r3, r5, [sp, #52]	@ 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c04:	940f      	str	r4, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c06:	f003 fce9 	bl	80055dc <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c0a:	4890      	ldr	r0, [pc, #576]	@ (8001e4c <main+0x340>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c0c:	f8cd b040 	str.w	fp, [sp, #64]	@ 0x40
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c10:	a90d      	add	r1, sp, #52	@ 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c12:	e9cd 750d 	strd	r7, r5, [sp, #52]	@ 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c16:	940f      	str	r4, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c18:	f003 fce0 	bl	80055dc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001c1c:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c20:	488b      	ldr	r0, [pc, #556]	@ (8001e50 <main+0x344>)
 8001c22:	a90d      	add	r1, sp, #52	@ 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c24:	e9cd 350d 	strd	r3, r5, [sp, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c28:	e9cd 4b0f 	strd	r4, fp, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c2c:	f003 fcd6 	bl	80055dc <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c30:	4888      	ldr	r0, [pc, #544]	@ (8001e54 <main+0x348>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c32:	940f      	str	r4, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c34:	a90d      	add	r1, sp, #52	@ 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c36:	e9cd 540d 	strd	r5, r4, [sp, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c3a:	f003 fccf 	bl	80055dc <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001c3e:	a90d      	add	r1, sp, #52	@ 0x34
  GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3;
 8001c40:	230c      	movs	r3, #12
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001c42:	4885      	ldr	r0, [pc, #532]	@ (8001e58 <main+0x34c>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c44:	950f      	str	r5, [sp, #60]	@ 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c46:	e9cd 340d 	strd	r3, r4, [sp, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001c4a:	f003 fcc7 	bl	80055dc <HAL_GPIO_Init>
  hcrc.Instance = CRC;
 8001c4e:	4883      	ldr	r0, [pc, #524]	@ (8001e5c <main+0x350>)
 8001c50:	4b83      	ldr	r3, [pc, #524]	@ (8001e60 <main+0x354>)
 8001c52:	6003      	str	r3, [r0, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001c54:	f003 fbb6 	bl	80053c4 <HAL_CRC_Init>
  hi2c3.Init.ClockSpeed = 100000;
 8001c58:	4a82      	ldr	r2, [pc, #520]	@ (8001e64 <main+0x358>)
 8001c5a:	4b83      	ldr	r3, [pc, #524]	@ (8001e68 <main+0x35c>)
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c5c:	6234      	str	r4, [r6, #32]
  hi2c3.Init.ClockSpeed = 100000;
 8001c5e:	e9c6 2300 	strd	r2, r3, [r6]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001c62:	4630      	mov	r0, r6
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c64:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c68:	e9c6 3404 	strd	r3, r4, [r6, #16]
  hi2c3.Init.OwnAddress1 = 0;
 8001c6c:	e9c6 4402 	strd	r4, r4, [r6, #8]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c70:	e9c6 4406 	strd	r4, r4, [r6, #24]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001c74:	f003 ff98 	bl	8005ba8 <HAL_I2C_Init>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_DISABLE) != HAL_OK)
 8001c78:	2110      	movs	r1, #16
 8001c7a:	4630      	mov	r0, r6
 8001c7c:	f004 f9d4 	bl	8006028 <HAL_I2CEx_ConfigAnalogFilter>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001c80:	4621      	mov	r1, r4
 8001c82:	4630      	mov	r0, r6
 8001c84:	f004 f9ef 	bl	8006066 <HAL_I2CEx_ConfigDigitalFilter>
  hspi5.Instance = SPI5;
 8001c88:	4878      	ldr	r0, [pc, #480]	@ (8001e6c <main+0x360>)
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001c8a:	4979      	ldr	r1, [pc, #484]	@ (8001e70 <main+0x364>)
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c8c:	6284      	str	r4, [r0, #40]	@ 0x28
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001c8e:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8001c92:	e9c0 1300 	strd	r1, r3, [r0]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001c96:	f44f 7600 	mov.w	r6, #512	@ 0x200
 8001c9a:	2318      	movs	r3, #24
 8001c9c:	e9c0 6306 	strd	r6, r3, [r0, #24]
  hspi5.Init.CRCPolynomial = 10;
 8001ca0:	230a      	movs	r3, #10
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001ca2:	4e74      	ldr	r6, [pc, #464]	@ (8001e74 <main+0x368>)
  hspi5.Init.CRCPolynomial = 10;
 8001ca4:	62c3      	str	r3, [r0, #44]	@ 0x2c
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ca6:	e9c0 4402 	strd	r4, r4, [r0, #8]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001caa:	e9c0 4404 	strd	r4, r4, [r0, #16]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001cae:	e9c0 4408 	strd	r4, r4, [r0, #32]
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001cb2:	f005 f867 	bl	8006d84 <HAL_SPI_Init>
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001cb6:	4b70      	ldr	r3, [pc, #448]	@ (8001e78 <main+0x36c>)
  SdramTiming.LoadToActiveDelay = 2;
 8001cb8:	f8cd b034 	str.w	fp, [sp, #52]	@ 0x34
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001cbc:	f04f 0910 	mov.w	r9, #16
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8001cc0:	e9c6 3500 	strd	r3, r5, [r6]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001cc4:	2340      	movs	r3, #64	@ 0x40
 8001cc6:	e9c6 9304 	strd	r9, r3, [r6, #16]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8001cca:	f44f 73c0 	mov.w	r3, #384	@ 0x180
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001cce:	e9c6 3406 	strd	r3, r4, [r6, #24]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8001cd2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8001cd6:	e9c6 3408 	strd	r3, r4, [r6, #32]
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8001cda:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001cde:	62b3      	str	r3, [r6, #40]	@ 0x28
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001ce0:	a90d      	add	r1, sp, #52	@ 0x34
  SdramTiming.ExitSelfRefreshDelay = 7;
 8001ce2:	2307      	movs	r3, #7
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001ce4:	4630      	mov	r0, r6
  SdramTiming.WriteRecoveryTime = 3;
 8001ce6:	e9cd 3a10 	strd	r3, sl, [sp, #64]	@ 0x40
  SdramTiming.SelfRefreshTime = 4;
 8001cea:	e9cd 370e 	strd	r3, r7, [sp, #56]	@ 0x38
  Command->CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8001cee:	f04f 0808 	mov.w	r8, #8
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8001cf2:	e9c6 4702 	strd	r4, r7, [r6, #8]
  SdramTiming.RCDDelay = 2;
 8001cf6:	e9cd bb12 	strd	fp, fp, [sp, #72]	@ 0x48
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001cfa:	f004 ff3f 	bl	8006b7c <HAL_SDRAM_Init>
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8001cfe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001d02:	a909      	add	r1, sp, #36	@ 0x24
 8001d04:	4630      	mov	r0, r6
  Command->AutoRefreshNumber       = 1;
 8001d06:	e9cd 850a 	strd	r8, r5, [sp, #40]	@ 0x28
 __IO uint32_t tmpmrd =0;
 8001d0a:	9408      	str	r4, [sp, #32]
  Command->CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 8001d0c:	9509      	str	r5, [sp, #36]	@ 0x24
  Command->ModeRegisterDefinition  = 0;
 8001d0e:	940c      	str	r4, [sp, #48]	@ 0x30
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8001d10:	f004 ff54 	bl	8006bbc <HAL_SDRAM_SendCommand>
  HAL_Delay(1);
 8001d14:	4628      	mov	r0, r5
 8001d16:	f003 f8d9 	bl	8004ecc <HAL_Delay>
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8001d1a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001d1e:	a909      	add	r1, sp, #36	@ 0x24
 8001d20:	4630      	mov	r0, r6
  Command->CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8001d22:	e9cd b809 	strd	fp, r8, [sp, #36]	@ 0x24
  Command->ModeRegisterDefinition  = 0;
 8001d26:	e9cd 540b 	strd	r5, r4, [sp, #44]	@ 0x2c
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8001d2a:	f004 ff47 	bl	8006bbc <HAL_SDRAM_SendCommand>
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8001d2e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001d32:	a909      	add	r1, sp, #36	@ 0x24
 8001d34:	4630      	mov	r0, r6
  Command->CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8001d36:	e9cd a809 	strd	sl, r8, [sp, #36]	@ 0x24
  Command->ModeRegisterDefinition  = 0;
 8001d3a:	e9cd 740b 	strd	r7, r4, [sp, #44]	@ 0x2c
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8001d3e:	f004 ff3d 	bl	8006bbc <HAL_SDRAM_SendCommand>
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8001d42:	f44f 730c 	mov.w	r3, #560	@ 0x230
 8001d46:	9308      	str	r3, [sp, #32]
  Command->ModeRegisterDefinition  = tmpmrd;
 8001d48:	9b08      	ldr	r3, [sp, #32]
 8001d4a:	930c      	str	r3, [sp, #48]	@ 0x30
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8001d4c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001d50:	a909      	add	r1, sp, #36	@ 0x24
 8001d52:	4630      	mov	r0, r6
  Command->CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8001d54:	e9cd 7809 	strd	r7, r8, [sp, #36]	@ 0x24
  Command->AutoRefreshNumber       = 1;
 8001d58:	950b      	str	r5, [sp, #44]	@ 0x2c
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8001d5a:	f004 ff2f 	bl	8006bbc <HAL_SDRAM_SendCommand>
  HAL_SDRAM_ProgramRefreshRate(hsdram, REFRESH_COUNT);
 8001d5e:	f240 516a 	movw	r1, #1386	@ 0x56a
 8001d62:	4630      	mov	r0, r6
 8001d64:	f004 ff48 	bl	8006bf8 <HAL_SDRAM_ProgramRefreshRate>
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001d68:	2234      	movs	r2, #52	@ 0x34
 8001d6a:	4621      	mov	r1, r4
 8001d6c:	eb0d 0002 	add.w	r0, sp, r2
 8001d70:	f012 fdef 	bl	8014952 <memset>
  hltdc.Instance = LTDC;
 8001d74:	4e41      	ldr	r6, [pc, #260]	@ (8001e7c <main+0x370>)
 8001d76:	4b42      	ldr	r3, [pc, #264]	@ (8001e80 <main+0x374>)
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001d78:	6134      	str	r4, [r6, #16]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001d7a:	e9c6 3400 	strd	r3, r4, [r6]
  hltdc.Init.HorizontalSync = 9;
 8001d7e:	2309      	movs	r3, #9
  hltdc.Init.VerticalSync = 1;
 8001d80:	e9c6 3505 	strd	r3, r5, [r6, #20]
  hltdc.Init.AccumulatedHBP = 29;
 8001d84:	231d      	movs	r3, #29
  hltdc.Init.AccumulatedActiveH = 323;
 8001d86:	f240 1c0d 	movw	ip, #269	@ 0x10d
  hltdc.Init.AccumulatedVBP = 3;
 8001d8a:	e9c6 3a07 	strd	r3, sl, [r6, #28]
  hltdc.Init.AccumulatedActiveH = 323;
 8001d8e:	f240 1343 	movw	r3, #323	@ 0x143
 8001d92:	e9c6 c309 	strd	ip, r3, [r6, #36]	@ 0x24
  hltdc.Init.TotalHeigh = 327;
 8001d96:	f240 1e17 	movw	lr, #279	@ 0x117
 8001d9a:	f240 1347 	movw	r3, #327	@ 0x147
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001d9e:	4630      	mov	r0, r6
  hltdc.Init.TotalHeigh = 327;
 8001da0:	e9c6 e30b 	strd	lr, r3, [r6, #44]	@ 0x2c
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001da4:	e9c6 4402 	strd	r4, r4, [r6, #8]
  hltdc.Init.Backcolor.Blue = 0;
 8001da8:	86b4      	strh	r4, [r6, #52]	@ 0x34
  hltdc.Init.Backcolor.Red = 0;
 8001daa:	f886 4036 	strb.w	r4, [r6, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001dae:	f004 f9ff 	bl	80061b0 <HAL_LTDC_Init>
  pLayerCfg.Alpha = 255;
 8001db2:	21ff      	movs	r1, #255	@ 0xff
  pLayerCfg.WindowX1 = 240;
 8001db4:	22f0      	movs	r2, #240	@ 0xf0
  pLayerCfg.Alpha0 = 0;
 8001db6:	e9cd 1412 	strd	r1, r4, [sp, #72]	@ 0x48
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001dba:	f04f 0a05 	mov.w	sl, #5
 8001dbe:	f44f 6180 	mov.w	r1, #1024	@ 0x400
  pLayerCfg.WindowY1 = 320;
 8001dc2:	f44f 73a0 	mov.w	r3, #320	@ 0x140
  pLayerCfg.WindowY0 = 0;
 8001dc6:	e9cd 240e 	strd	r2, r4, [sp, #56]	@ 0x38
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001dca:	e9cd 1a14 	strd	r1, sl, [sp, #80]	@ 0x50
  pLayerCfg.ImageWidth = 240;
 8001dce:	e9cd 4216 	strd	r4, r2, [sp, #88]	@ 0x58
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001dd2:	a90d      	add	r1, sp, #52	@ 0x34
 8001dd4:	4622      	mov	r2, r4
 8001dd6:	4630      	mov	r0, r6
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8001dd8:	e9cd 3b10 	strd	r3, fp, [sp, #64]	@ 0x40
  LcdDrv = &ili9341_drv;
 8001ddc:	4e29      	ldr	r6, [pc, #164]	@ (8001e84 <main+0x378>)
  pLayerCfg.ImageHeight = 320;
 8001dde:	9318      	str	r3, [sp, #96]	@ 0x60
  pLayerCfg.WindowX0 = 0;
 8001de0:	940d      	str	r4, [sp, #52]	@ 0x34
  pLayerCfg.Backcolor.Blue = 0;
 8001de2:	f8ad 4064 	strh.w	r4, [sp, #100]	@ 0x64
  pLayerCfg.Backcolor.Red = 0;
 8001de6:	f88d 4066 	strb.w	r4, [sp, #102]	@ 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001dea:	f004 faac 	bl	8006346 <HAL_LTDC_ConfigLayer>
  LcdDrv = &ili9341_drv;
 8001dee:	4b26      	ldr	r3, [pc, #152]	@ (8001e88 <main+0x37c>)
 8001df0:	6033      	str	r3, [r6, #0]
  LcdDrv->Init();
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4798      	blx	r3
  LcdDrv->DisplayOff();
 8001df6:	6833      	ldr	r3, [r6, #0]
  hdma2d.Instance = DMA2D;
 8001df8:	4e24      	ldr	r6, [pc, #144]	@ (8001e8c <main+0x380>)
  LcdDrv->DisplayOff();
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	4798      	blx	r3
  hdma2d.Instance = DMA2D;
 8001dfe:	4b24      	ldr	r3, [pc, #144]	@ (8001e90 <main+0x384>)
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001e00:	4630      	mov	r0, r6
  hdma2d.Init.Mode = DMA2D_M2M;
 8001e02:	e9c6 3400 	strd	r3, r4, [r6]
  hdma2d.Init.OutputOffset = 0;
 8001e06:	e9c6 b402 	strd	fp, r4, [r6, #8]
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 8001e0a:	e9c6 4b0a 	strd	r4, fp, [r6, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8001e0e:	e9c6 440c 	strd	r4, r4, [r6, #48]	@ 0x30
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001e12:	f003 fae7 	bl	80053e4 <HAL_DMA2D_Init>
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8001e16:	4629      	mov	r1, r5
 8001e18:	4630      	mov	r0, r6
 8001e1a:	f003 fb9b 	bl	8005554 <HAL_DMA2D_ConfigLayer>
  MX_TouchGFX_Init();
 8001e1e:	f000 fce1 	bl	80027e4 <MX_TouchGFX_Init>
  ADC_ChannelConfTypeDef sConfig = {0};
 8001e22:	464a      	mov	r2, r9
 8001e24:	4621      	mov	r1, r4
 8001e26:	a80d      	add	r0, sp, #52	@ 0x34
 8001e28:	f012 fd93 	bl	8014952 <memset>
  hadc1.Instance = ADC1;
 8001e2c:	4e19      	ldr	r6, [pc, #100]	@ (8001e94 <main+0x388>)
 8001e2e:	4b1a      	ldr	r3, [pc, #104]	@ (8001e98 <main+0x38c>)
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001e30:	f8df b068 	ldr.w	fp, [pc, #104]	@ 8001e9c <main+0x390>
  hadc1.Init.ScanConvMode = DISABLE;
 8001e34:	6134      	str	r4, [r6, #16]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001e36:	e9c6 3400 	strd	r3, r4, [r6]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001e3a:	4630      	mov	r0, r6
 8001e3c:	e030      	b.n	8001ea0 <main+0x394>
 8001e3e:	bf00      	nop
 8001e40:	40023800 	.word	0x40023800
 8001e44:	40021000 	.word	0x40021000
 8001e48:	200002f0 	.word	0x200002f0
 8001e4c:	40020800 	.word	0x40020800
 8001e50:	40020c00 	.word	0x40020c00
 8001e54:	40020000 	.word	0x40020000
 8001e58:	40021800 	.word	0x40021800
 8001e5c:	20000384 	.word	0x20000384
 8001e60:	40023000 	.word	0x40023000
 8001e64:	40005c00 	.word	0x40005c00
 8001e68:	000186a0 	.word	0x000186a0
 8001e6c:	200001f0 	.word	0x200001f0
 8001e70:	40015000 	.word	0x40015000
 8001e74:	200001bc 	.word	0x200001bc
 8001e78:	a0000140 	.word	0xa0000140
 8001e7c:	20000248 	.word	0x20000248
 8001e80:	40016800 	.word	0x40016800
 8001e84:	20000110 	.word	0x20000110
 8001e88:	20000014 	.word	0x20000014
 8001e8c:	20000344 	.word	0x20000344
 8001e90:	4002b000 	.word	0x4002b000
 8001e94:	20000174 	.word	0x20000174
 8001e98:	40012000 	.word	0x40012000
 8001e9c:	0f000001 	.word	0x0f000001
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8001ea0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001ea4:	60b3      	str	r3, [r6, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001ea6:	7634      	strb	r4, [r6, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001ea8:	f886 4020 	strb.w	r4, [r6, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001eac:	62f4      	str	r4, [r6, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001eae:	f8c6 b028 	str.w	fp, [r6, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001eb2:	60f4      	str	r4, [r6, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001eb4:	61f5      	str	r5, [r6, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001eb6:	f886 4030 	strb.w	r4, [r6, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001eba:	6175      	str	r5, [r6, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001ebc:	f003 f81a 	bl	8004ef4 <HAL_ADC_Init>
  sConfig.Channel = ADC_CHANNEL_13;
 8001ec0:	220d      	movs	r2, #13
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ec2:	a90d      	add	r1, sp, #52	@ 0x34
 8001ec4:	4630      	mov	r0, r6
  sConfig.Rank = 1;
 8001ec6:	e9cd 250d 	strd	r2, r5, [sp, #52]	@ 0x34
  hadc2.Instance = ADC2;
 8001eca:	4e26      	ldr	r6, [pc, #152]	@ (8001f64 <main+0x458>)
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001ecc:	940f      	str	r4, [sp, #60]	@ 0x3c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ece:	f003 f98b 	bl	80051e8 <HAL_ADC_ConfigChannel>
  ADC_ChannelConfTypeDef sConfig = {0};
 8001ed2:	4621      	mov	r1, r4
 8001ed4:	464a      	mov	r2, r9
 8001ed6:	a80d      	add	r0, sp, #52	@ 0x34
 8001ed8:	f012 fd3b 	bl	8014952 <memset>
  hadc2.Instance = ADC2;
 8001edc:	4a22      	ldr	r2, [pc, #136]	@ (8001f68 <main+0x45c>)
  hadc2.Init.ScanConvMode = DISABLE;
 8001ede:	6134      	str	r4, [r6, #16]
  hadc2.Init.Resolution = ADC_RESOLUTION_8B;
 8001ee0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001ee4:	4630      	mov	r0, r6
  hadc2.Init.Resolution = ADC_RESOLUTION_8B;
 8001ee6:	60b3      	str	r3, [r6, #8]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001ee8:	e9c6 2400 	strd	r2, r4, [r6]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001eec:	e9c6 b40a 	strd	fp, r4, [r6, #40]	@ 0x28
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001ef0:	7634      	strb	r4, [r6, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001ef2:	f886 4020 	strb.w	r4, [r6, #32]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001ef6:	60f4      	str	r4, [r6, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001ef8:	61f5      	str	r5, [r6, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001efa:	f886 4030 	strb.w	r4, [r6, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001efe:	6175      	str	r5, [r6, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001f00:	f002 fff8 	bl	8004ef4 <HAL_ADC_Init>
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001f04:	a90d      	add	r1, sp, #52	@ 0x34
 8001f06:	4630      	mov	r0, r6
  sConfig.Rank = 1;
 8001f08:	e9cd a50d 	strd	sl, r5, [sp, #52]	@ 0x34
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001f0c:	940f      	str	r4, [sp, #60]	@ 0x3c
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001f0e:	f003 f96b 	bl	80051e8 <HAL_ADC_ConfigChannel>
  osKernelInitialize();
 8001f12:	f005 fbef 	bl	80076f4 <osKernelInitialize>
  Queue1Handle = osMessageQueueNew (8, sizeof(uint8_t), &Queue1_attributes);
 8001f16:	4a15      	ldr	r2, [pc, #84]	@ (8001f6c <main+0x460>)
 8001f18:	4629      	mov	r1, r5
 8001f1a:	4640      	mov	r0, r8
 8001f1c:	f005 fd11 	bl	8007942 <osMessageQueueNew>
 8001f20:	4b13      	ldr	r3, [pc, #76]	@ (8001f70 <main+0x464>)
  myQueue01Handle = osMessageQueueNew (16, sizeof(uint32_t), &myQueue01_attributes);
 8001f22:	4a14      	ldr	r2, [pc, #80]	@ (8001f74 <main+0x468>)
  Queue1Handle = osMessageQueueNew (8, sizeof(uint8_t), &Queue1_attributes);
 8001f24:	6018      	str	r0, [r3, #0]
  myQueue01Handle = osMessageQueueNew (16, sizeof(uint32_t), &myQueue01_attributes);
 8001f26:	4639      	mov	r1, r7
 8001f28:	4648      	mov	r0, r9
 8001f2a:	f005 fd0a 	bl	8007942 <osMessageQueueNew>
 8001f2e:	4b12      	ldr	r3, [pc, #72]	@ (8001f78 <main+0x46c>)
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001f30:	4a12      	ldr	r2, [pc, #72]	@ (8001f7c <main+0x470>)
  myQueue01Handle = osMessageQueueNew (16, sizeof(uint32_t), &myQueue01_attributes);
 8001f32:	6018      	str	r0, [r3, #0]
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001f34:	4621      	mov	r1, r4
 8001f36:	4812      	ldr	r0, [pc, #72]	@ (8001f80 <main+0x474>)
 8001f38:	f005 fc08 	bl	800774c <osThreadNew>
 8001f3c:	4b11      	ldr	r3, [pc, #68]	@ (8001f84 <main+0x478>)
  polling_taskHandle = osThreadNew(StartHardwarePollingTask, NULL, &polling_task_attributes);
 8001f3e:	4a12      	ldr	r2, [pc, #72]	@ (8001f88 <main+0x47c>)
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001f40:	6018      	str	r0, [r3, #0]
  polling_taskHandle = osThreadNew(StartHardwarePollingTask, NULL, &polling_task_attributes);
 8001f42:	4621      	mov	r1, r4
 8001f44:	4811      	ldr	r0, [pc, #68]	@ (8001f8c <main+0x480>)
 8001f46:	f005 fc01 	bl	800774c <osThreadNew>
 8001f4a:	4b11      	ldr	r3, [pc, #68]	@ (8001f90 <main+0x484>)
  GUI_TaskHandle = osThreadNew(TouchGFX_Task, NULL, &GUI_Task_attributes);
 8001f4c:	4a11      	ldr	r2, [pc, #68]	@ (8001f94 <main+0x488>)
  polling_taskHandle = osThreadNew(StartHardwarePollingTask, NULL, &polling_task_attributes);
 8001f4e:	6018      	str	r0, [r3, #0]
  GUI_TaskHandle = osThreadNew(TouchGFX_Task, NULL, &GUI_Task_attributes);
 8001f50:	4621      	mov	r1, r4
 8001f52:	4811      	ldr	r0, [pc, #68]	@ (8001f98 <main+0x48c>)
 8001f54:	f005 fbfa 	bl	800774c <osThreadNew>
 8001f58:	4b10      	ldr	r3, [pc, #64]	@ (8001f9c <main+0x490>)
 8001f5a:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8001f5c:	f005 fbdc 	bl	8007718 <osKernelStart>
  while (1)
 8001f60:	e7fe      	b.n	8001f60 <main+0x454>
 8001f62:	bf00      	nop
 8001f64:	2000012c 	.word	0x2000012c
 8001f68:	40012100 	.word	0x40012100
 8001f6c:	08015700 	.word	0x08015700
 8001f70:	20000118 	.word	0x20000118
 8001f74:	080156e8 	.word	0x080156e8
 8001f78:	20000114 	.word	0x20000114
 8001f7c:	08015760 	.word	0x08015760
 8001f80:	08001a19 	.word	0x08001a19
 8001f84:	20000124 	.word	0x20000124
 8001f88:	08015718 	.word	0x08015718
 8001f8c:	08001a25 	.word	0x08001a25
 8001f90:	2000011c 	.word	0x2000011c
 8001f94:	0801573c 	.word	0x0801573c
 8001f98:	080027e9 	.word	0x080027e9
 8001f9c:	20000120 	.word	0x20000120

08001fa0 <IOE_Init>:
void IOE_Init(void)
 8001fa0:	4770      	bx	lr

08001fa2 <IOE_ITConfig>:
void IOE_ITConfig(void)
 8001fa2:	4770      	bx	lr

08001fa4 <IOE_Write>:
{
 8001fa4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  status = HAL_I2C_Mem_Write(&hi2c3, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2c3Timeout);
 8001fa6:	4b09      	ldr	r3, [pc, #36]	@ (8001fcc <IOE_Write+0x28>)
 8001fa8:	f88d 2017 	strb.w	r2, [sp, #23]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	9302      	str	r3, [sp, #8]
 8001fb0:	f10d 0217 	add.w	r2, sp, #23
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	9200      	str	r2, [sp, #0]
 8001fb8:	9301      	str	r3, [sp, #4]
 8001fba:	460a      	mov	r2, r1
 8001fbc:	4601      	mov	r1, r0
 8001fbe:	4804      	ldr	r0, [pc, #16]	@ (8001fd0 <IOE_Write+0x2c>)
 8001fc0:	f003 fe9a 	bl	8005cf8 <HAL_I2C_Mem_Write>
}
 8001fc4:	b007      	add	sp, #28
 8001fc6:	f85d fb04 	ldr.w	pc, [sp], #4
 8001fca:	bf00      	nop
 8001fcc:	20000008 	.word	0x20000008
 8001fd0:	200002f0 	.word	0x200002f0

08001fd4 <IOE_Read>:
{
 8001fd4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint8_t value = 0;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	f88d 3017 	strb.w	r3, [sp, #23]
  status = HAL_I2C_Mem_Read(&hi2c3, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2c3Timeout);
 8001fdc:	4b08      	ldr	r3, [pc, #32]	@ (8002000 <IOE_Read+0x2c>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	9302      	str	r3, [sp, #8]
{
 8001fe2:	460a      	mov	r2, r1
  status = HAL_I2C_Mem_Read(&hi2c3, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2c3Timeout);
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	f10d 0117 	add.w	r1, sp, #23
 8001fea:	9100      	str	r1, [sp, #0]
 8001fec:	9301      	str	r3, [sp, #4]
 8001fee:	4601      	mov	r1, r0
 8001ff0:	4804      	ldr	r0, [pc, #16]	@ (8002004 <IOE_Read+0x30>)
 8001ff2:	f003 ff11 	bl	8005e18 <HAL_I2C_Mem_Read>
}
 8001ff6:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8001ffa:	b007      	add	sp, #28
 8001ffc:	f85d fb04 	ldr.w	pc, [sp], #4
 8002000:	20000008 	.word	0x20000008
 8002004:	200002f0 	.word	0x200002f0

08002008 <IOE_ReadMultiple>:
{
 8002008:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  status = HAL_I2C_Mem_Read(&hi2c3, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, pBuffer, Length, I2c3Timeout);
 800200a:	4c08      	ldr	r4, [pc, #32]	@ (800202c <IOE_ReadMultiple+0x24>)
 800200c:	6824      	ldr	r4, [r4, #0]
 800200e:	9200      	str	r2, [sp, #0]
 8002010:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8002014:	460a      	mov	r2, r1
 8002016:	2301      	movs	r3, #1
 8002018:	4601      	mov	r1, r0
 800201a:	4805      	ldr	r0, [pc, #20]	@ (8002030 <IOE_ReadMultiple+0x28>)
 800201c:	f003 fefc 	bl	8005e18 <HAL_I2C_Mem_Read>
}
 8002020:	3800      	subs	r0, #0
 8002022:	bf18      	it	ne
 8002024:	2001      	movne	r0, #1
 8002026:	b004      	add	sp, #16
 8002028:	bd10      	pop	{r4, pc}
 800202a:	bf00      	nop
 800202c:	20000008 	.word	0x20000008
 8002030:	200002f0 	.word	0x200002f0

08002034 <IOE_Delay>:
void IOE_Delay(uint32_t Delay)
 8002034:	f002 bf4a 	b.w	8004ecc <HAL_Delay>

08002038 <LCD_IO_Init>:
{
 8002038:	b510      	push	{r4, lr}
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 800203a:	4c06      	ldr	r4, [pc, #24]	@ (8002054 <LCD_IO_Init+0x1c>)
 800203c:	2200      	movs	r2, #0
 800203e:	4620      	mov	r0, r4
 8002040:	2104      	movs	r1, #4
 8002042:	f003 fbb5 	bl	80057b0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 8002046:	4620      	mov	r0, r4
 8002048:	2201      	movs	r2, #1
}
 800204a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 800204e:	2104      	movs	r1, #4
 8002050:	f003 bbae 	b.w	80057b0 <HAL_GPIO_WritePin>
 8002054:	40020800 	.word	0x40020800

08002058 <LCD_IO_WriteData>:
{
 8002058:	b538      	push	{r3, r4, r5, lr}
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 800205a:	4d0b      	ldr	r5, [pc, #44]	@ (8002088 <LCD_IO_WriteData+0x30>)
{
 800205c:	4604      	mov	r4, r0
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 800205e:	2201      	movs	r2, #1
 8002060:	480a      	ldr	r0, [pc, #40]	@ (800208c <LCD_IO_WriteData+0x34>)
 8002062:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002066:	f003 fba3 	bl	80057b0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 800206a:	2200      	movs	r2, #0
 800206c:	2104      	movs	r1, #4
 800206e:	4628      	mov	r0, r5
 8002070:	f003 fb9e 	bl	80057b0 <HAL_GPIO_WritePin>
  SPI5_Write(RegValue);
 8002074:	4620      	mov	r0, r4
 8002076:	f7ff fcbd 	bl	80019f4 <SPI5_Write>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 800207a:	4628      	mov	r0, r5
 800207c:	2201      	movs	r2, #1
}
 800207e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 8002082:	2104      	movs	r1, #4
 8002084:	f003 bb94 	b.w	80057b0 <HAL_GPIO_WritePin>
 8002088:	40020800 	.word	0x40020800
 800208c:	40020c00 	.word	0x40020c00

08002090 <LCD_IO_WriteReg>:
{
 8002090:	b538      	push	{r3, r4, r5, lr}
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8002092:	4d0b      	ldr	r5, [pc, #44]	@ (80020c0 <LCD_IO_WriteReg+0x30>)
{
 8002094:	4604      	mov	r4, r0
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8002096:	2200      	movs	r2, #0
 8002098:	480a      	ldr	r0, [pc, #40]	@ (80020c4 <LCD_IO_WriteReg+0x34>)
 800209a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800209e:	f003 fb87 	bl	80057b0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 80020a2:	2200      	movs	r2, #0
 80020a4:	2104      	movs	r1, #4
 80020a6:	4628      	mov	r0, r5
 80020a8:	f003 fb82 	bl	80057b0 <HAL_GPIO_WritePin>
  SPI5_Write(Reg);
 80020ac:	4620      	mov	r0, r4
 80020ae:	f7ff fca1 	bl	80019f4 <SPI5_Write>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 80020b2:	4628      	mov	r0, r5
 80020b4:	2201      	movs	r2, #1
}
 80020b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 80020ba:	2104      	movs	r1, #4
 80020bc:	f003 bb78 	b.w	80057b0 <HAL_GPIO_WritePin>
 80020c0:	40020800 	.word	0x40020800
 80020c4:	40020c00 	.word	0x40020c00

080020c8 <LCD_IO_ReadData>:
{
 80020c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 80020ca:	4e14      	ldr	r6, [pc, #80]	@ (800211c <LCD_IO_ReadData+0x54>)
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 80020cc:	4f14      	ldr	r7, [pc, #80]	@ (8002120 <LCD_IO_ReadData+0x58>)
{
 80020ce:	4605      	mov	r5, r0
 80020d0:	460c      	mov	r4, r1
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 80020d2:	4630      	mov	r0, r6
 80020d4:	2200      	movs	r2, #0
 80020d6:	2104      	movs	r1, #4
 80020d8:	f003 fb6a 	bl	80057b0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 80020dc:	2200      	movs	r2, #0
 80020de:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80020e2:	4638      	mov	r0, r7
 80020e4:	f003 fb64 	bl	80057b0 <HAL_GPIO_WritePin>
  SPI5_Write(RegValue);
 80020e8:	4628      	mov	r0, r5
 80020ea:	f7ff fc83 	bl	80019f4 <SPI5_Write>
  status = HAL_SPI_Receive(&hspi5, (uint8_t*) &readvalue, ReadSize, Spi5Timeout);
 80020ee:	4b0d      	ldr	r3, [pc, #52]	@ (8002124 <LCD_IO_ReadData+0x5c>)
 80020f0:	480d      	ldr	r0, [pc, #52]	@ (8002128 <LCD_IO_ReadData+0x60>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4622      	mov	r2, r4
 80020f6:	a901      	add	r1, sp, #4
 80020f8:	f005 f83f 	bl	800717a <HAL_SPI_Receive>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 80020fc:	4638      	mov	r0, r7
 80020fe:	2201      	movs	r2, #1
 8002100:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
  return readvalue;
 8002104:	9c01      	ldr	r4, [sp, #4]
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8002106:	f003 fb53 	bl	80057b0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 800210a:	4630      	mov	r0, r6
 800210c:	2201      	movs	r2, #1
 800210e:	2104      	movs	r1, #4
 8002110:	f003 fb4e 	bl	80057b0 <HAL_GPIO_WritePin>
}
 8002114:	4620      	mov	r0, r4
 8002116:	b003      	add	sp, #12
 8002118:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800211a:	bf00      	nop
 800211c:	40020800 	.word	0x40020800
 8002120:	40020c00 	.word	0x40020c00
 8002124:	20000004 	.word	0x20000004
 8002128:	200001f0 	.word	0x200001f0

0800212c <LCD_Delay>:
  HAL_Delay(Delay);
 800212c:	f002 bece 	b.w	8004ecc <HAL_Delay>

08002130 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002130:	6802      	ldr	r2, [r0, #0]
 8002132:	4b03      	ldr	r3, [pc, #12]	@ (8002140 <HAL_TIM_PeriodElapsedCallback+0x10>)
 8002134:	429a      	cmp	r2, r3
 8002136:	d101      	bne.n	800213c <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8002138:	f002 beb6 	b.w	8004ea8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800213c:	4770      	bx	lr
 800213e:	bf00      	nop
 8002140:	40001000 	.word	0x40001000

08002144 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002144:	4770      	bx	lr
	...

08002148 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002148:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800214a:	4b0e      	ldr	r3, [pc, #56]	@ (8002184 <HAL_MspInit+0x3c>)
 800214c:	2200      	movs	r2, #0
 800214e:	9200      	str	r2, [sp, #0]
 8002150:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8002152:	f441 4180 	orr.w	r1, r1, #16384	@ 0x4000
 8002156:	6459      	str	r1, [r3, #68]	@ 0x44
 8002158:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 800215a:	f401 4180 	and.w	r1, r1, #16384	@ 0x4000
 800215e:	9100      	str	r1, [sp, #0]
 8002160:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002162:	9201      	str	r2, [sp, #4]
 8002164:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8002166:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 800216a:	6419      	str	r1, [r3, #64]	@ 0x40
 800216c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800216e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002172:	9301      	str	r3, [sp, #4]
 8002174:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002176:	210f      	movs	r1, #15
 8002178:	f06f 0001 	mvn.w	r0, #1

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800217c:	b002      	add	sp, #8
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800217e:	f003 b8e1 	b.w	8005344 <HAL_NVIC_SetPriority>
 8002182:	bf00      	nop
 8002184:	40023800 	.word	0x40023800

08002188 <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 8002188:	6802      	ldr	r2, [r0, #0]
 800218a:	4b09      	ldr	r3, [pc, #36]	@ (80021b0 <HAL_CRC_MspInit+0x28>)
 800218c:	429a      	cmp	r2, r3
{
 800218e:	b082      	sub	sp, #8
  if(hcrc->Instance==CRC)
 8002190:	d10b      	bne.n	80021aa <HAL_CRC_MspInit+0x22>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002192:	2300      	movs	r3, #0
 8002194:	9301      	str	r3, [sp, #4]
 8002196:	4b07      	ldr	r3, [pc, #28]	@ (80021b4 <HAL_CRC_MspInit+0x2c>)
 8002198:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800219a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800219e:	631a      	str	r2, [r3, #48]	@ 0x30
 80021a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021a2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80021a6:	9301      	str	r3, [sp, #4]
 80021a8:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80021aa:	b002      	add	sp, #8
 80021ac:	4770      	bx	lr
 80021ae:	bf00      	nop
 80021b0:	40023000 	.word	0x40023000
 80021b4:	40023800 	.word	0x40023800

080021b8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80021b8:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021ba:	2214      	movs	r2, #20
{
 80021bc:	b08a      	sub	sp, #40	@ 0x28
 80021be:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021c0:	2100      	movs	r1, #0
 80021c2:	eb0d 0002 	add.w	r0, sp, r2
 80021c6:	f012 fbc4 	bl	8014952 <memset>
  if(hadc->Instance==ADC1)
 80021ca:	6823      	ldr	r3, [r4, #0]
 80021cc:	4a21      	ldr	r2, [pc, #132]	@ (8002254 <HAL_ADC_MspInit+0x9c>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d11f      	bne.n	8002212 <HAL_ADC_MspInit+0x5a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80021d2:	4b21      	ldr	r3, [pc, #132]	@ (8002258 <HAL_ADC_MspInit+0xa0>)
    PC3     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021d4:	4821      	ldr	r0, [pc, #132]	@ (800225c <HAL_ADC_MspInit+0xa4>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 80021d6:	2100      	movs	r1, #0
 80021d8:	9101      	str	r1, [sp, #4]
 80021da:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80021dc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80021e0:	645a      	str	r2, [r3, #68]	@ 0x44
 80021e2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80021e4:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 80021e8:	9201      	str	r2, [sp, #4]
 80021ea:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021ec:	9102      	str	r1, [sp, #8]
 80021ee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80021f0:	f042 0204 	orr.w	r2, r2, #4
 80021f4:	631a      	str	r2, [r3, #48]	@ 0x30
 80021f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021f8:	f003 0304 	and.w	r3, r3, #4
 80021fc:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021fe:	2108      	movs	r1, #8
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002200:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002202:	2303      	movs	r3, #3
 8002204:	e9cd 1305 	strd	r1, r3, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002208:	a905      	add	r1, sp, #20
    PA5     ------> ADC2_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800220a:	f003 f9e7 	bl	80055dc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800220e:	b00a      	add	sp, #40	@ 0x28
 8002210:	bd10      	pop	{r4, pc}
  else if(hadc->Instance==ADC2)
 8002212:	4a13      	ldr	r2, [pc, #76]	@ (8002260 <HAL_ADC_MspInit+0xa8>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d1fa      	bne.n	800220e <HAL_ADC_MspInit+0x56>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8002218:	4b0f      	ldr	r3, [pc, #60]	@ (8002258 <HAL_ADC_MspInit+0xa0>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800221a:	4812      	ldr	r0, [pc, #72]	@ (8002264 <HAL_ADC_MspInit+0xac>)
    __HAL_RCC_ADC2_CLK_ENABLE();
 800221c:	2100      	movs	r1, #0
 800221e:	9103      	str	r1, [sp, #12]
 8002220:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002222:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002226:	645a      	str	r2, [r3, #68]	@ 0x44
 8002228:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800222a:	f402 7200 	and.w	r2, r2, #512	@ 0x200
 800222e:	9203      	str	r2, [sp, #12]
 8002230:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002232:	9104      	str	r1, [sp, #16]
 8002234:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002236:	f042 0201 	orr.w	r2, r2, #1
 800223a:	631a      	str	r2, [r3, #48]	@ 0x30
 800223c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800223e:	f003 0301 	and.w	r3, r3, #1
 8002242:	9304      	str	r3, [sp, #16]
 8002244:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002246:	2220      	movs	r2, #32
 8002248:	2303      	movs	r3, #3
 800224a:	e9cd 2305 	strd	r2, r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800224e:	a905      	add	r1, sp, #20
 8002250:	e7db      	b.n	800220a <HAL_ADC_MspInit+0x52>
 8002252:	bf00      	nop
 8002254:	40012000 	.word	0x40012000
 8002258:	40023800 	.word	0x40023800
 800225c:	40020800 	.word	0x40020800
 8002260:	40012100 	.word	0x40012100
 8002264:	40020000 	.word	0x40020000

08002268 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8002268:	b507      	push	{r0, r1, r2, lr}
  if(hdma2d->Instance==DMA2D)
 800226a:	4b0f      	ldr	r3, [pc, #60]	@ (80022a8 <HAL_DMA2D_MspInit+0x40>)
 800226c:	6802      	ldr	r2, [r0, #0]
 800226e:	429a      	cmp	r2, r3
 8002270:	d116      	bne.n	80022a0 <HAL_DMA2D_MspInit+0x38>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002272:	2200      	movs	r2, #0
 8002274:	f5a3 43f0 	sub.w	r3, r3, #30720	@ 0x7800
 8002278:	9201      	str	r2, [sp, #4]
 800227a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800227c:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8002280:	6319      	str	r1, [r3, #48]	@ 0x30
 8002282:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002284:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002288:	9301      	str	r3, [sp, #4]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 800228a:	2105      	movs	r1, #5
 800228c:	205a      	movs	r0, #90	@ 0x5a
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800228e:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8002290:	f003 f858 	bl	8005344 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8002294:	205a      	movs	r0, #90	@ 0x5a
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8002296:	b003      	add	sp, #12
 8002298:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 800229c:	f003 b884 	b.w	80053a8 <HAL_NVIC_EnableIRQ>
}
 80022a0:	b003      	add	sp, #12
 80022a2:	f85d fb04 	ldr.w	pc, [sp], #4
 80022a6:	bf00      	nop
 80022a8:	4002b000 	.word	0x4002b000

080022ac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80022ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80022b0:	4604      	mov	r4, r0
 80022b2:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022b4:	2214      	movs	r2, #20
 80022b6:	2100      	movs	r1, #0
 80022b8:	a803      	add	r0, sp, #12
 80022ba:	f012 fb4a 	bl	8014952 <memset>
  if(hi2c->Instance==I2C3)
 80022be:	6822      	ldr	r2, [r4, #0]
 80022c0:	4b24      	ldr	r3, [pc, #144]	@ (8002354 <HAL_I2C_MspInit+0xa8>)
 80022c2:	429a      	cmp	r2, r3
 80022c4:	d143      	bne.n	800234e <HAL_I2C_MspInit+0xa2>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80022c6:	4c24      	ldr	r4, [pc, #144]	@ (8002358 <HAL_I2C_MspInit+0xac>)
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022c8:	4824      	ldr	r0, [pc, #144]	@ (800235c <HAL_I2C_MspInit+0xb0>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80022ca:	2500      	movs	r5, #0
 80022cc:	9500      	str	r5, [sp, #0]
 80022ce:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80022d0:	f043 0304 	orr.w	r3, r3, #4
 80022d4:	6323      	str	r3, [r4, #48]	@ 0x30
 80022d6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80022d8:	f003 0304 	and.w	r3, r3, #4
 80022dc:	9300      	str	r3, [sp, #0]
 80022de:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022e0:	9501      	str	r5, [sp, #4]
 80022e2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80022e4:	f043 0301 	orr.w	r3, r3, #1
 80022e8:	6323      	str	r3, [r4, #48]	@ 0x30
 80022ea:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80022ec:	f003 0301 	and.w	r3, r3, #1
 80022f0:	9301      	str	r3, [sp, #4]
 80022f2:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80022f4:	f04f 0912 	mov.w	r9, #18
 80022f8:	f44f 7300 	mov.w	r3, #512	@ 0x200
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022fc:	f04f 0801 	mov.w	r8, #1
 8002300:	2703      	movs	r7, #3
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002302:	2604      	movs	r6, #4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002304:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002306:	e9cd 3903 	strd	r3, r9, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800230a:	e9cd 8705 	strd	r8, r7, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800230e:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002310:	f003 f964 	bl	80055dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002314:	f44f 7380 	mov.w	r3, #256	@ 0x100
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002318:	4811      	ldr	r0, [pc, #68]	@ (8002360 <HAL_I2C_MspInit+0xb4>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800231a:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800231c:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800231e:	e9cd 3903 	strd	r3, r9, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002322:	e9cd 8705 	strd	r8, r7, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002326:	f003 f959 	bl	80055dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800232a:	9502      	str	r5, [sp, #8]
 800232c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800232e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002332:	6423      	str	r3, [r4, #64]	@ 0x40
 8002334:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002336:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800233a:	9302      	str	r3, [sp, #8]
 800233c:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */
  /* Force the I2C Peripheral Clock Reset */  
    __HAL_RCC_I2C3_FORCE_RESET();
 800233e:	6a23      	ldr	r3, [r4, #32]
 8002340:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002344:	6223      	str	r3, [r4, #32]
      
    /* Release the I2C Peripheral Clock Reset */  
    __HAL_RCC_I2C3_RELEASE_RESET(); 
 8002346:	6a23      	ldr	r3, [r4, #32]
 8002348:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800234c:	6223      	str	r3, [r4, #32]
  /* USER CODE END I2C3_MspInit 1 */
  }

}
 800234e:	b009      	add	sp, #36	@ 0x24
 8002350:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002354:	40005c00 	.word	0x40005c00
 8002358:	40023800 	.word	0x40023800
 800235c:	40020800 	.word	0x40020800
 8002360:	40020000 	.word	0x40020000

08002364 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002364:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002366:	b099      	sub	sp, #100	@ 0x64
 8002368:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800236a:	2214      	movs	r2, #20
 800236c:	2100      	movs	r1, #0
 800236e:	a807      	add	r0, sp, #28
 8002370:	f012 faef 	bl	8014952 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002374:	2230      	movs	r2, #48	@ 0x30
 8002376:	eb0d 0002 	add.w	r0, sp, r2
 800237a:	2100      	movs	r1, #0
 800237c:	f012 fae9 	bl	8014952 <memset>
  if(hltdc->Instance==LTDC)
 8002380:	6822      	ldr	r2, [r4, #0]
 8002382:	4b5e      	ldr	r3, [pc, #376]	@ (80024fc <HAL_LTDC_MspInit+0x198>)
 8002384:	429a      	cmp	r2, r3
 8002386:	f040 80b7 	bne.w	80024f8 <HAL_LTDC_MspInit+0x194>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800238a:	2308      	movs	r3, #8
 800238c:	930c      	str	r3, [sp, #48]	@ 0x30
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 800238e:	23c0      	movs	r3, #192	@ 0xc0
 8002390:	9310      	str	r3, [sp, #64]	@ 0x40
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8002392:	2304      	movs	r3, #4
 8002394:	9312      	str	r3, [sp, #72]	@ 0x48
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002396:	a80c      	add	r0, sp, #48	@ 0x30
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8002398:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800239c:	9315      	str	r3, [sp, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800239e:	f004 fac1 	bl	8006924 <HAL_RCCEx_PeriphCLKConfig>
 80023a2:	b108      	cbz	r0, 80023a8 <HAL_LTDC_MspInit+0x44>
    {
      Error_Handler();
 80023a4:	f7ff fece 	bl	8002144 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80023a8:	4b55      	ldr	r3, [pc, #340]	@ (8002500 <HAL_LTDC_MspInit+0x19c>)
    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80023aa:	4856      	ldr	r0, [pc, #344]	@ (8002504 <HAL_LTDC_MspInit+0x1a0>)
    __HAL_RCC_LTDC_CLK_ENABLE();
 80023ac:	2400      	movs	r4, #0
 80023ae:	9400      	str	r4, [sp, #0]
 80023b0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80023b2:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 80023b6:	645a      	str	r2, [r3, #68]	@ 0x44
 80023b8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80023ba:	f002 6280 	and.w	r2, r2, #67108864	@ 0x4000000
 80023be:	9200      	str	r2, [sp, #0]
 80023c0:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80023c2:	9401      	str	r4, [sp, #4]
 80023c4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80023c6:	f042 0220 	orr.w	r2, r2, #32
 80023ca:	631a      	str	r2, [r3, #48]	@ 0x30
 80023cc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80023ce:	f002 0220 	and.w	r2, r2, #32
 80023d2:	9201      	str	r2, [sp, #4]
 80023d4:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023d6:	9402      	str	r4, [sp, #8]
 80023d8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80023da:	f042 0201 	orr.w	r2, r2, #1
 80023de:	631a      	str	r2, [r3, #48]	@ 0x30
 80023e0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80023e2:	f002 0201 	and.w	r2, r2, #1
 80023e6:	9202      	str	r2, [sp, #8]
 80023e8:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023ea:	9403      	str	r4, [sp, #12]
 80023ec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80023ee:	f042 0202 	orr.w	r2, r2, #2
 80023f2:	631a      	str	r2, [r3, #48]	@ 0x30
 80023f4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80023f6:	f002 0202 	and.w	r2, r2, #2
 80023fa:	9203      	str	r2, [sp, #12]
 80023fc:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80023fe:	9404      	str	r4, [sp, #16]
 8002400:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002402:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002406:	631a      	str	r2, [r3, #48]	@ 0x30
 8002408:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800240a:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 800240e:	9204      	str	r2, [sp, #16]
 8002410:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002412:	9405      	str	r4, [sp, #20]
 8002414:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002416:	f042 0204 	orr.w	r2, r2, #4
 800241a:	631a      	str	r2, [r3, #48]	@ 0x30
 800241c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800241e:	f002 0204 	and.w	r2, r2, #4
 8002422:	9205      	str	r2, [sp, #20]
 8002424:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002426:	9406      	str	r4, [sp, #24]
 8002428:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800242a:	f042 0208 	orr.w	r2, r2, #8
 800242e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002430:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002432:	f003 0308 	and.w	r3, r3, #8
 8002436:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002438:	2502      	movs	r5, #2
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800243a:	260e      	movs	r6, #14
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800243c:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800243e:	960b      	str	r6, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002440:	f44f 6380 	mov.w	r3, #1024	@ 0x400
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002444:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002446:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800244a:	e9cd 4509 	strd	r4, r5, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800244e:	f003 f8c5 	bl	80055dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_11
 8002452:	f641 0358 	movw	r3, #6232	@ 0x1858
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002456:	482c      	ldr	r0, [pc, #176]	@ (8002508 <HAL_LTDC_MspInit+0x1a4>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002458:	960b      	str	r6, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800245a:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800245c:	e9cd 3507 	strd	r3, r5, [sp, #28]

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002460:	2709      	movs	r7, #9
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002462:	e9cd 4509 	strd	r4, r5, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002466:	f003 f8b9 	bl	80055dc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800246a:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800246c:	4827      	ldr	r0, [pc, #156]	@ (800250c <HAL_LTDC_MspInit+0x1a8>)
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800246e:	970b      	str	r7, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002470:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002472:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002476:	e9cd 4509 	strd	r4, r5, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800247a:	f003 f8af 	bl	80055dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_9;
 800247e:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002482:	4822      	ldr	r0, [pc, #136]	@ (800250c <HAL_LTDC_MspInit+0x1a8>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002484:	960b      	str	r6, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002486:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002488:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800248c:	e9cd 4509 	strd	r4, r5, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002490:	f003 f8a4 	bl	80055dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_11;
 8002494:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002498:	481d      	ldr	r0, [pc, #116]	@ (8002510 <HAL_LTDC_MspInit+0x1ac>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800249a:	960b      	str	r6, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800249c:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800249e:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80024a2:	e9cd 4509 	strd	r4, r5, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80024a6:	f003 f899 	bl	80055dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80024aa:	23c0      	movs	r3, #192	@ 0xc0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024ac:	4819      	ldr	r0, [pc, #100]	@ (8002514 <HAL_LTDC_MspInit+0x1b0>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80024ae:	960b      	str	r6, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024b0:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024b2:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80024b6:	e9cd 4509 	strd	r4, r5, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024ba:	f003 f88f 	bl	80055dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80024be:	2308      	movs	r3, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80024c0:	4815      	ldr	r0, [pc, #84]	@ (8002518 <HAL_LTDC_MspInit+0x1b4>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80024c2:	960b      	str	r6, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80024c4:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024c6:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80024ca:	e9cd 4509 	strd	r4, r5, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80024ce:	f003 f885 	bl	80055dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 80024d2:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80024d6:	480e      	ldr	r0, [pc, #56]	@ (8002510 <HAL_LTDC_MspInit+0x1ac>)
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80024d8:	970b      	str	r7, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80024da:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024dc:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80024e0:	e9cd 4509 	strd	r4, r5, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80024e4:	f003 f87a 	bl	80055dc <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 80024e8:	2058      	movs	r0, #88	@ 0x58
 80024ea:	4622      	mov	r2, r4
 80024ec:	2105      	movs	r1, #5
 80024ee:	f002 ff29 	bl	8005344 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80024f2:	2058      	movs	r0, #88	@ 0x58
 80024f4:	f002 ff58 	bl	80053a8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 80024f8:	b019      	add	sp, #100	@ 0x64
 80024fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024fc:	40016800 	.word	0x40016800
 8002500:	40023800 	.word	0x40023800
 8002504:	40021400 	.word	0x40021400
 8002508:	40020000 	.word	0x40020000
 800250c:	40020400 	.word	0x40020400
 8002510:	40021800 	.word	0x40021800
 8002514:	40020800 	.word	0x40020800
 8002518:	40020c00 	.word	0x40020c00

0800251c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800251c:	b510      	push	{r4, lr}
 800251e:	4604      	mov	r4, r0
 8002520:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002522:	2214      	movs	r2, #20
 8002524:	2100      	movs	r1, #0
 8002526:	a803      	add	r0, sp, #12
 8002528:	f012 fa13 	bl	8014952 <memset>
  if(hspi->Instance==SPI5)
 800252c:	6822      	ldr	r2, [r4, #0]
 800252e:	4b14      	ldr	r3, [pc, #80]	@ (8002580 <HAL_SPI_MspInit+0x64>)
 8002530:	429a      	cmp	r2, r3
 8002532:	d123      	bne.n	800257c <HAL_SPI_MspInit+0x60>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8002534:	f503 4368 	add.w	r3, r3, #59392	@ 0xe800
 8002538:	2100      	movs	r1, #0
 800253a:	9101      	str	r1, [sp, #4]
 800253c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800253e:	4811      	ldr	r0, [pc, #68]	@ (8002584 <HAL_SPI_MspInit+0x68>)
    __HAL_RCC_SPI5_CLK_ENABLE();
 8002540:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8002544:	645a      	str	r2, [r3, #68]	@ 0x44
 8002546:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002548:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800254c:	9201      	str	r2, [sp, #4]
 800254e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002550:	9102      	str	r1, [sp, #8]
 8002552:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002554:	f042 0220 	orr.w	r2, r2, #32
 8002558:	631a      	str	r2, [r3, #48]	@ 0x30
 800255a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800255c:	f003 0320 	and.w	r3, r3, #32
 8002560:	9302      	str	r3, [sp, #8]
 8002562:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002564:	f44f 7260 	mov.w	r2, #896	@ 0x380
 8002568:	2302      	movs	r3, #2
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 800256a:	2103      	movs	r1, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800256c:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8002570:	2305      	movs	r3, #5
 8002572:	e9cd 1306 	strd	r1, r3, [sp, #24]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002576:	a903      	add	r1, sp, #12
 8002578:	f003 f830 	bl	80055dc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 800257c:	b008      	add	sp, #32
 800257e:	bd10      	pop	{r4, pc}
 8002580:	40015000 	.word	0x40015000
 8002584:	40021400 	.word	0x40021400

08002588 <HAL_SDRAM_MspInit>:
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8002588:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800258c:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800258e:	2300      	movs	r3, #0
 8002590:	9303      	str	r3, [sp, #12]
  if (FMC_Initialized) {
 8002592:	4b2b      	ldr	r3, [pc, #172]	@ (8002640 <HAL_SDRAM_MspInit+0xb8>)
 8002594:	681c      	ldr	r4, [r3, #0]
 8002596:	2c00      	cmp	r4, #0
 8002598:	d14f      	bne.n	800263a <HAL_SDRAM_MspInit+0xb2>
  FMC_Initialized = 1;
 800259a:	f04f 0801 	mov.w	r8, #1
 800259e:	f8c3 8000 	str.w	r8, [r3]
  __HAL_RCC_FMC_CLK_ENABLE();
 80025a2:	4b28      	ldr	r3, [pc, #160]	@ (8002644 <HAL_SDRAM_MspInit+0xbc>)
 80025a4:	9400      	str	r4, [sp, #0]
 80025a6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80025a8:	4827      	ldr	r0, [pc, #156]	@ (8002648 <HAL_SDRAM_MspInit+0xc0>)
  __HAL_RCC_FMC_CLK_ENABLE();
 80025aa:	ea42 0208 	orr.w	r2, r2, r8
 80025ae:	639a      	str	r2, [r3, #56]	@ 0x38
 80025b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025b2:	ea03 0308 	and.w	r3, r3, r8
 80025b6:	9300      	str	r3, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025b8:	2702      	movs	r7, #2
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80025ba:	2603      	movs	r6, #3
 80025bc:	250c      	movs	r5, #12
  __HAL_RCC_FMC_CLK_ENABLE();
 80025be:	9b00      	ldr	r3, [sp, #0]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80025c0:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025c2:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 80025c6:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80025ca:	e9cd 6504 	strd	r6, r5, [sp, #16]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80025ce:	f003 f805 	bl	80055dc <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025d2:	481e      	ldr	r0, [pc, #120]	@ (800264c <HAL_SDRAM_MspInit+0xc4>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80025d4:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025d6:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025d8:	e9cd 8701 	strd	r8, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025dc:	e9cd 4603 	strd	r4, r6, [sp, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025e0:	f002 fffc 	bl	80055dc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 80025e4:	f248 1333 	movw	r3, #33075	@ 0x8133
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80025e8:	4819      	ldr	r0, [pc, #100]	@ (8002650 <HAL_SDRAM_MspInit+0xc8>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80025ea:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80025ec:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025ee:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025f2:	e9cd 4603 	strd	r4, r6, [sp, #12]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80025f6:	f002 fff1 	bl	80055dc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80025fa:	f64f 7383 	movw	r3, #65411	@ 0xff83
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80025fe:	4815      	ldr	r0, [pc, #84]	@ (8002654 <HAL_SDRAM_MspInit+0xcc>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002600:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002602:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002604:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002608:	e9cd 4603 	strd	r4, r6, [sp, #12]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800260c:	f002 ffe6 	bl	80055dc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8002610:	f24c 7303 	movw	r3, #50947	@ 0xc703
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002614:	4810      	ldr	r0, [pc, #64]	@ (8002658 <HAL_SDRAM_MspInit+0xd0>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002616:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002618:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800261a:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800261e:	e9cd 4603 	strd	r4, r6, [sp, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002622:	f002 ffdb 	bl	80055dc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002626:	2360      	movs	r3, #96	@ 0x60
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002628:	480c      	ldr	r0, [pc, #48]	@ (800265c <HAL_SDRAM_MspInit+0xd4>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800262a:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800262c:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800262e:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002632:	e9cd 4603 	strd	r4, r6, [sp, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002636:	f002 ffd1 	bl	80055dc <HAL_GPIO_Init>
  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800263a:	b006      	add	sp, #24
 800263c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002640:	2000038c 	.word	0x2000038c
 8002644:	40023800 	.word	0x40023800
 8002648:	40021400 	.word	0x40021400
 800264c:	40020800 	.word	0x40020800
 8002650:	40021800 	.word	0x40021800
 8002654:	40021000 	.word	0x40021000
 8002658:	40020c00 	.word	0x40020c00
 800265c:	40020400 	.word	0x40020400

08002660 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002660:	b530      	push	{r4, r5, lr}
 8002662:	4601      	mov	r1, r0
 8002664:	b089      	sub	sp, #36	@ 0x24
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8002666:	2200      	movs	r2, #0
 8002668:	2036      	movs	r0, #54	@ 0x36
 800266a:	f002 fe6b 	bl	8005344 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800266e:	2036      	movs	r0, #54	@ 0x36
 8002670:	f002 fe9a 	bl	80053a8 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002674:	2500      	movs	r5, #0
 8002676:	4b15      	ldr	r3, [pc, #84]	@ (80026cc <HAL_InitTick+0x6c>)
 8002678:	9502      	str	r5, [sp, #8]
 800267a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800267c:	4c14      	ldr	r4, [pc, #80]	@ (80026d0 <HAL_InitTick+0x70>)
  __HAL_RCC_TIM6_CLK_ENABLE();
 800267e:	f042 0210 	orr.w	r2, r2, #16
 8002682:	641a      	str	r2, [r3, #64]	@ 0x40
 8002684:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002686:	f003 0310 	and.w	r3, r3, #16
 800268a:	9302      	str	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800268c:	a901      	add	r1, sp, #4
 800268e:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002690:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002692:	f004 f929 	bl	80068e8 <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002696:	f004 f917 	bl	80068c8 <HAL_RCC_GetPCLK1Freq>
  htim6.Instance = TIM6;
 800269a:	4b0e      	ldr	r3, [pc, #56]	@ (80026d4 <HAL_InitTick+0x74>)
 800269c:	6023      	str	r3, [r4, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800269e:	f240 33e7 	movw	r3, #999	@ 0x3e7
 80026a2:	60e3      	str	r3, [r4, #12]
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80026a4:	0040      	lsls	r0, r0, #1
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80026a6:	4b0c      	ldr	r3, [pc, #48]	@ (80026d8 <HAL_InitTick+0x78>)
 80026a8:	fbb0 f0f3 	udiv	r0, r0, r3
 80026ac:	3801      	subs	r0, #1
  htim6.Init.Prescaler = uwPrescalerValue;
 80026ae:	6060      	str	r0, [r4, #4]
  htim6.Init.ClockDivision = 0;
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80026b0:	4620      	mov	r0, r4
  htim6.Init.ClockDivision = 0;
 80026b2:	6125      	str	r5, [r4, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026b4:	60a5      	str	r5, [r4, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80026b6:	f004 ff45 	bl	8007544 <HAL_TIM_Base_Init>
 80026ba:	b920      	cbnz	r0, 80026c6 <HAL_InitTick+0x66>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80026bc:	4620      	mov	r0, r4
 80026be:	f004 fdfb 	bl	80072b8 <HAL_TIM_Base_Start_IT>
  }

  /* Return function status */
  return HAL_ERROR;
}
 80026c2:	b009      	add	sp, #36	@ 0x24
 80026c4:	bd30      	pop	{r4, r5, pc}
  return HAL_ERROR;
 80026c6:	2001      	movs	r0, #1
 80026c8:	e7fb      	b.n	80026c2 <HAL_InitTick+0x62>
 80026ca:	bf00      	nop
 80026cc:	40023800 	.word	0x40023800
 80026d0:	20000390 	.word	0x20000390
 80026d4:	40001000 	.word	0x40001000
 80026d8:	000f4240 	.word	0x000f4240

080026dc <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80026dc:	4770      	bx	lr

080026de <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80026de:	e7fe      	b.n	80026de <HardFault_Handler>

080026e0 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80026e0:	e7fe      	b.n	80026e0 <MemManage_Handler>

080026e2 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80026e2:	e7fe      	b.n	80026e2 <BusFault_Handler>

080026e4 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80026e4:	e7fe      	b.n	80026e4 <UsageFault_Handler>

080026e6 <DebugMon_Handler>:
}

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 80026e6:	4770      	bx	lr

080026e8 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80026e8:	4801      	ldr	r0, [pc, #4]	@ (80026f0 <TIM6_DAC_IRQHandler+0x8>)
 80026ea:	f004 be23 	b.w	8007334 <HAL_TIM_IRQHandler>
 80026ee:	bf00      	nop
 80026f0:	20000390 	.word	0x20000390

080026f4 <LTDC_IRQHandler>:
void LTDC_IRQHandler(void)
{
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80026f4:	4801      	ldr	r0, [pc, #4]	@ (80026fc <LTDC_IRQHandler+0x8>)
 80026f6:	f003 bdc9 	b.w	800628c <HAL_LTDC_IRQHandler>
 80026fa:	bf00      	nop
 80026fc:	20000248 	.word	0x20000248

08002700 <DMA2D_IRQHandler>:
void DMA2D_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8002700:	4801      	ldr	r0, [pc, #4]	@ (8002708 <DMA2D_IRQHandler+0x8>)
 8002702:	f002 be9d 	b.w	8005440 <HAL_DMA2D_IRQHandler>
 8002706:	bf00      	nop
 8002708:	20000344 	.word	0x20000344

0800270c <EXTI0_IRQHandler>:
  /* USER CODE END DMA2D_IRQn 1 */
}

/* USER CODE BEGIN 1 */
void EXTI0_IRQHandler(void)
{
 800270c:	b513      	push	{r0, r1, r4, lr}
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	uint32_t count = osMessageQueueGetCount(Queue1Handle);
 800270e:	4c0b      	ldr	r4, [pc, #44]	@ (800273c <EXTI0_IRQHandler+0x30>)
 8002710:	6820      	ldr	r0, [r4, #0]
 8002712:	f005 f9b2 	bl	8007a7a <osMessageQueueGetCount>
	if (count < 2)
 8002716:	2801      	cmp	r0, #1
 8002718:	d809      	bhi.n	800272e <EXTI0_IRQHandler+0x22>
	{
		uint8_t x = 'A';
 800271a:	2341      	movs	r3, #65	@ 0x41
 800271c:	f88d 3007 	strb.w	r3, [sp, #7]
		osMessageQueuePut(Queue1Handle, &x, 0, 200);
 8002720:	6820      	ldr	r0, [r4, #0]
 8002722:	23c8      	movs	r3, #200	@ 0xc8
 8002724:	2200      	movs	r2, #0
 8002726:	f10d 0107 	add.w	r1, sp, #7
 800272a:	f005 f945 	bl	80079b8 <osMessageQueuePut>
	}
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800272e:	2001      	movs	r0, #1
  /* USER CODE BEGIN EXTI0_IRQn 1 */
  /* USER CODE END EXTI0_IRQn 1 */
}
 8002730:	b002      	add	sp, #8
 8002732:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002736:	f003 b84b 	b.w	80057d0 <HAL_GPIO_EXTI_IRQHandler>
 800273a:	bf00      	nop
 800273c:	20000118 	.word	0x20000118

08002740 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8002740:	2001      	movs	r0, #1
 8002742:	4770      	bx	lr

08002744 <_kill>:

int _kill(int pid, int sig)
{
 8002744:	b508      	push	{r3, lr}
	errno = EINVAL;
 8002746:	f012 f9a7 	bl	8014a98 <__errno>
 800274a:	2316      	movs	r3, #22
 800274c:	6003      	str	r3, [r0, #0]
	return -1;
}
 800274e:	f04f 30ff 	mov.w	r0, #4294967295
 8002752:	bd08      	pop	{r3, pc}

08002754 <_exit>:

void _exit (int status)
{
 8002754:	b508      	push	{r3, lr}
	errno = EINVAL;
 8002756:	f012 f99f 	bl	8014a98 <__errno>
 800275a:	2316      	movs	r3, #22
 800275c:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 800275e:	e7fe      	b.n	800275e <_exit+0xa>

08002760 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002760:	b570      	push	{r4, r5, r6, lr}
 8002762:	460d      	mov	r5, r1
 8002764:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002766:	460e      	mov	r6, r1
 8002768:	1b73      	subs	r3, r6, r5
 800276a:	429c      	cmp	r4, r3
 800276c:	dc01      	bgt.n	8002772 <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 800276e:	4620      	mov	r0, r4
 8002770:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8002772:	f3af 8000 	nop.w
 8002776:	f806 0b01 	strb.w	r0, [r6], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800277a:	e7f5      	b.n	8002768 <_read+0x8>

0800277c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800277c:	b570      	push	{r4, r5, r6, lr}
 800277e:	460d      	mov	r5, r1
 8002780:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002782:	460e      	mov	r6, r1
 8002784:	1b73      	subs	r3, r6, r5
 8002786:	429c      	cmp	r4, r3
 8002788:	dc01      	bgt.n	800278e <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 800278a:	4620      	mov	r0, r4
 800278c:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 800278e:	f816 0b01 	ldrb.w	r0, [r6], #1
 8002792:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002796:	e7f5      	b.n	8002784 <_write+0x8>

08002798 <_close>:

int _close(int file)
{
	return -1;
}
 8002798:	f04f 30ff 	mov.w	r0, #4294967295
 800279c:	4770      	bx	lr

0800279e <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 800279e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80027a2:	604b      	str	r3, [r1, #4]
	return 0;
}
 80027a4:	2000      	movs	r0, #0
 80027a6:	4770      	bx	lr

080027a8 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80027a8:	2001      	movs	r0, #1
 80027aa:	4770      	bx	lr

080027ac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80027ac:	2000      	movs	r0, #0
 80027ae:	4770      	bx	lr

080027b0 <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80027b0:	4a0a      	ldr	r2, [pc, #40]	@ (80027dc <_sbrk+0x2c>)
 80027b2:	6811      	ldr	r1, [r2, #0]
{
 80027b4:	b508      	push	{r3, lr}
 80027b6:	4603      	mov	r3, r0
	if (heap_end == 0)
 80027b8:	b909      	cbnz	r1, 80027be <_sbrk+0xe>
		heap_end = &end;
 80027ba:	4909      	ldr	r1, [pc, #36]	@ (80027e0 <_sbrk+0x30>)
 80027bc:	6011      	str	r1, [r2, #0]

	prev_heap_end = heap_end;
 80027be:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 80027c0:	4669      	mov	r1, sp
 80027c2:	4403      	add	r3, r0
 80027c4:	428b      	cmp	r3, r1
 80027c6:	d906      	bls.n	80027d6 <_sbrk+0x26>
	{
		errno = ENOMEM;
 80027c8:	f012 f966 	bl	8014a98 <__errno>
 80027cc:	230c      	movs	r3, #12
 80027ce:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 80027d0:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 80027d4:	bd08      	pop	{r3, pc}
	heap_end += incr;
 80027d6:	6013      	str	r3, [r2, #0]
	return (caddr_t) prev_heap_end;
 80027d8:	e7fc      	b.n	80027d4 <_sbrk+0x24>
 80027da:	bf00      	nop
 80027dc:	200003d8 	.word	0x200003d8
 80027e0:	20015718 	.word	0x20015718

080027e4 <MX_TouchGFX_Init>:
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
  // Calling forward to touchgfx_init in C++ domain
  touchgfx_init();
 80027e4:	f000 bcba 	b.w	800315c <touchgfx_init>

080027e8 <TouchGFX_Task>:
 * TouchGFX application thread
 */
void TouchGFX_Task(void *argument)
{
  // Calling forward to touchgfx_taskEntry in C++ domain
  touchgfx_taskEntry();
 80027e8:	f000 bd2c 	b.w	8003244 <touchgfx_taskEntry>

080027ec <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 80027ec:	4770      	bx	lr

080027ee <_ZN20STM32TouchControllerD0Ev>:
 80027ee:	b510      	push	{r4, lr}
 80027f0:	2104      	movs	r1, #4
 80027f2:	4604      	mov	r4, r0
 80027f4:	f011 faaf 	bl	8013d56 <_ZdlPvj>
 80027f8:	4620      	mov	r0, r4
 80027fa:	bd10      	pop	{r4, pc}

080027fc <_Z11BSP_TS_Inittt>:
  * @param  XSize: The maximum X size of the TS area on LCD
  * @param  YSize: The maximum Y size of the TS area on LCD
  * @retval TS_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t XSize, uint16_t YSize)
{
 80027fc:	b538      	push	{r3, r4, r5, lr}
    uint8_t ret = TS_ERROR;

    /* Initialize x and y positions boundaries */
    TsXBoundary = XSize;
 80027fe:	4b0c      	ldr	r3, [pc, #48]	@ (8002830 <_Z11BSP_TS_Inittt+0x34>)
    TsYBoundary = YSize;

    /* Read ID and verify if the IO expander is ready */
    if (stmpe811_ts_drv.ReadID(TS_I2C_ADDRESS) == STMPE811_ID)
 8002800:	4c0c      	ldr	r4, [pc, #48]	@ (8002834 <_Z11BSP_TS_Inittt+0x38>)
    TsXBoundary = XSize;
 8002802:	8018      	strh	r0, [r3, #0]
    TsYBoundary = YSize;
 8002804:	4b0c      	ldr	r3, [pc, #48]	@ (8002838 <_Z11BSP_TS_Inittt+0x3c>)
    if (stmpe811_ts_drv.ReadID(TS_I2C_ADDRESS) == STMPE811_ID)
 8002806:	2082      	movs	r0, #130	@ 0x82
    TsYBoundary = YSize;
 8002808:	8019      	strh	r1, [r3, #0]
    if (stmpe811_ts_drv.ReadID(TS_I2C_ADDRESS) == STMPE811_ID)
 800280a:	6863      	ldr	r3, [r4, #4]
 800280c:	4798      	blx	r3
 800280e:	f640 0311 	movw	r3, #2065	@ 0x811
 8002812:	4298      	cmp	r0, r3
 8002814:	d10a      	bne.n	800282c <_Z11BSP_TS_Inittt+0x30>
    {
        /* Initialize the TS driver structure */
        TsDrv = &stmpe811_ts_drv;
 8002816:	4d09      	ldr	r5, [pc, #36]	@ (800283c <_Z11BSP_TS_Inittt+0x40>)
    }

    if (ret == TS_OK)
    {
        /* Initialize the LL TS Driver */
        TsDrv->Init(TS_I2C_ADDRESS);
 8002818:	6823      	ldr	r3, [r4, #0]
        TsDrv = &stmpe811_ts_drv;
 800281a:	602c      	str	r4, [r5, #0]
        TsDrv->Init(TS_I2C_ADDRESS);
 800281c:	2082      	movs	r0, #130	@ 0x82
 800281e:	4798      	blx	r3
        TsDrv->Start(TS_I2C_ADDRESS);
 8002820:	682b      	ldr	r3, [r5, #0]
 8002822:	2082      	movs	r0, #130	@ 0x82
 8002824:	68db      	ldr	r3, [r3, #12]
 8002826:	4798      	blx	r3
 8002828:	2000      	movs	r0, #0
    }

    return ret;
}
 800282a:	bd38      	pop	{r3, r4, r5, pc}
    uint8_t ret = TS_ERROR;
 800282c:	2001      	movs	r0, #1
 800282e:	e7fc      	b.n	800282a <_Z11BSP_TS_Inittt+0x2e>
 8002830:	200003e6 	.word	0x200003e6
 8002834:	2000004c 	.word	0x2000004c
 8002838:	200003e4 	.word	0x200003e4
 800283c:	200003e8 	.word	0x200003e8

08002840 <_ZN20STM32TouchController4initEv>:
    BSP_TS_Init(240, 320);
 8002840:	f44f 71a0 	mov.w	r1, #320	@ 0x140
 8002844:	20f0      	movs	r0, #240	@ 0xf0
 8002846:	f7ff bfd9 	b.w	80027fc <_Z11BSP_TS_Inittt>
	...

0800284c <_Z15BSP_TS_GetStateP15TS_StateTypeDef>:
/**
  * @brief  Returns status and positions of the touch screen.
  * @param  TsState: Pointer to touch screen current state structure
  */
void BSP_TS_GetState(TS_StateTypeDef* TsState)
{
 800284c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    static uint32_t _x = 0, _y = 0;
    uint16_t xDiff, yDiff, x, y, xr, yr;

    TsState->TouchDetected = TsDrv->DetectTouch(TS_I2C_ADDRESS);
 800284e:	4d33      	ldr	r5, [pc, #204]	@ (800291c <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0xd0>)
 8002850:	682b      	ldr	r3, [r5, #0]
{
 8002852:	4604      	mov	r4, r0
    TsState->TouchDetected = TsDrv->DetectTouch(TS_I2C_ADDRESS);
 8002854:	691b      	ldr	r3, [r3, #16]
 8002856:	2082      	movs	r0, #130	@ 0x82
 8002858:	4798      	blx	r3
 800285a:	8020      	strh	r0, [r4, #0]

    if (TsState->TouchDetected)
 800285c:	2800      	cmp	r0, #0
 800285e:	d04a      	beq.n	80028f6 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0xaa>
    {
        TsDrv->GetXY(TS_I2C_ADDRESS, &x, &y);
 8002860:	682b      	ldr	r3, [r5, #0]
 8002862:	f10d 0206 	add.w	r2, sp, #6
 8002866:	695b      	ldr	r3, [r3, #20]
 8002868:	a901      	add	r1, sp, #4
 800286a:	2082      	movs	r0, #130	@ 0x82
 800286c:	4798      	blx	r3

        //Ensures the coordinates is within the screen
        if (y > 3700)
 800286e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8002872:	f640 6274 	movw	r2, #3700	@ 0xe74
 8002876:	4293      	cmp	r3, r2
 8002878:	d93f      	bls.n	80028fa <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0xae>
        {
            y = 3700;
 800287a:	f8ad 2006 	strh.w	r2, [sp, #6]

        /* Y value first correction */
        y -= 180;

        /* Y value second correction */
        y = 3520 - y;
 800287e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8002882:	1ad2      	subs	r2, r2, r3
 8002884:	b292      	uxth	r2, r2

        /* Y value third correction */
        yr = y / 11;

        /* Return y position value */
        if (yr <= 0)
 8002886:	2a0a      	cmp	r2, #10
 8002888:	d93d      	bls.n	8002906 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0xba>
        yr = y / 11;
 800288a:	230b      	movs	r3, #11
 800288c:	fbb2 f2f3 	udiv	r2, r2, r3
        {
            yr = 0;
        }
        else if (yr > TsYBoundary)
 8002890:	4b23      	ldr	r3, [pc, #140]	@ (8002920 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0xd4>)
 8002892:	881b      	ldrh	r3, [r3, #0]
 8002894:	429a      	cmp	r2, r3
 8002896:	d901      	bls.n	800289c <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x50>
        {
            yr = TsYBoundary - 1;
 8002898:	3b01      	subs	r3, #1
 800289a:	b29a      	uxth	r2, r3
        {
        }
        y = yr;

        /* X value first correction */
        if (x <= 3000)
 800289c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80028a0:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 80028a4:	428b      	cmp	r3, r1
 80028a6:	d830      	bhi.n	800290a <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0xbe>
        {
            x = 3870 - x;
 80028a8:	f5c3 6371 	rsb	r3, r3, #3856	@ 0xf10
 80028ac:	330e      	adds	r3, #14
 80028ae:	b29b      	uxth	r3, r3
        {
            x = 3800 - x;
        }

        /* X value second correction */
        xr = x / 15;
 80028b0:	210f      	movs	r1, #15
 80028b2:	fbb3 f3f1 	udiv	r3, r3, r1
        /* Return X position value */
        if (xr <= 0)
        {
            xr = 0;
        }
        else if (xr > TsXBoundary)
 80028b6:	491b      	ldr	r1, [pc, #108]	@ (8002924 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0xd8>)
 80028b8:	8809      	ldrh	r1, [r1, #0]
 80028ba:	428b      	cmp	r3, r1
 80028bc:	d901      	bls.n	80028c2 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x76>
        {
            xr = TsXBoundary - 1;
 80028be:	3901      	subs	r1, #1
 80028c0:	b28b      	uxth	r3, r1
        else
        {
        }

        x = xr;
        xDiff = x > _x ? (x - _x) : (_x - x);
 80028c2:	4e19      	ldr	r6, [pc, #100]	@ (8002928 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0xdc>)
        yDiff = y > _y ? (y - _y) : (_y - y);
 80028c4:	4d19      	ldr	r5, [pc, #100]	@ (800292c <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0xe0>)
        xDiff = x > _x ? (x - _x) : (_x - x);
 80028c6:	6830      	ldr	r0, [r6, #0]
        yDiff = y > _y ? (y - _y) : (_y - y);
 80028c8:	682f      	ldr	r7, [r5, #0]
        xDiff = x > _x ? (x - _x) : (_x - x);
 80028ca:	4283      	cmp	r3, r0
 80028cc:	b281      	uxth	r1, r0
 80028ce:	bf8c      	ite	hi
 80028d0:	1a59      	subhi	r1, r3, r1
 80028d2:	1ac9      	subls	r1, r1, r3
        yDiff = y > _y ? (y - _y) : (_y - y);
 80028d4:	b2b8      	uxth	r0, r7
 80028d6:	42ba      	cmp	r2, r7
 80028d8:	bf8c      	ite	hi
 80028da:	1a10      	subhi	r0, r2, r0
 80028dc:	1a80      	subls	r0, r0, r2
        xDiff = x > _x ? (x - _x) : (_x - x);
 80028de:	b289      	uxth	r1, r1
        yDiff = y > _y ? (y - _y) : (_y - y);
 80028e0:	b280      	uxth	r0, r0

        if (xDiff + yDiff > 5)
 80028e2:	4401      	add	r1, r0
 80028e4:	2905      	cmp	r1, #5
        {
            _x = x;
 80028e6:	bfc8      	it	gt
 80028e8:	6033      	strgt	r3, [r6, #0]
            _y = y;
        }

        /* Update the X position */
        TsState->X = _x;
 80028ea:	6833      	ldr	r3, [r6, #0]
            _y = y;
 80028ec:	bfc8      	it	gt
 80028ee:	602a      	strgt	r2, [r5, #0]
        TsState->X = _x;
 80028f0:	8063      	strh	r3, [r4, #2]

        /* Update the Y position */
        TsState->Y = _y;
 80028f2:	682b      	ldr	r3, [r5, #0]
 80028f4:	80a3      	strh	r3, [r4, #4]
    }
}
 80028f6:	b003      	add	sp, #12
 80028f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        else if (y < 180)
 80028fa:	2bb3      	cmp	r3, #179	@ 0xb3
            y = 180;
 80028fc:	bf9c      	itt	ls
 80028fe:	23b4      	movls	r3, #180	@ 0xb4
 8002900:	f8ad 3006 	strhls.w	r3, [sp, #6]
 8002904:	e7bb      	b.n	800287e <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x32>
            yr = 0;
 8002906:	2200      	movs	r2, #0
 8002908:	e7c8      	b.n	800289c <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x50>
            x = 3800 - x;
 800290a:	f5c3 636d 	rsb	r3, r3, #3792	@ 0xed0
 800290e:	3308      	adds	r3, #8
 8002910:	b29b      	uxth	r3, r3
        if (xr <= 0)
 8002912:	2b0e      	cmp	r3, #14
 8002914:	d8cc      	bhi.n	80028b0 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x64>
            xr = 0;
 8002916:	2300      	movs	r3, #0
 8002918:	e7d3      	b.n	80028c2 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x76>
 800291a:	bf00      	nop
 800291c:	200003e8 	.word	0x200003e8
 8002920:	200003e4 	.word	0x200003e4
 8002924:	200003e6 	.word	0x200003e6
 8002928:	200003e0 	.word	0x200003e0
 800292c:	200003dc 	.word	0x200003dc

08002930 <_ZN20STM32TouchController11sampleTouchERlS0_>:
{
 8002930:	b537      	push	{r0, r1, r2, r4, r5, lr}
    BSP_TS_GetState(&state);
 8002932:	4668      	mov	r0, sp
{
 8002934:	460d      	mov	r5, r1
 8002936:	4614      	mov	r4, r2
    BSP_TS_GetState(&state);
 8002938:	f7ff ff88 	bl	800284c <_Z15BSP_TS_GetStateP15TS_StateTypeDef>
    if (state.TouchDetected)
 800293c:	f8bd 0000 	ldrh.w	r0, [sp]
 8002940:	b130      	cbz	r0, 8002950 <_ZN20STM32TouchController11sampleTouchERlS0_+0x20>
        x = state.X;
 8002942:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8002946:	602b      	str	r3, [r5, #0]
        y = state.Y;
 8002948:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800294c:	6023      	str	r3, [r4, #0]
        return true;
 800294e:	2001      	movs	r0, #1
}
 8002950:	b003      	add	sp, #12
 8002952:	bd30      	pop	{r4, r5, pc}

08002954 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:
/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
    switch (id)
 8002954:	2803      	cmp	r0, #3
 8002956:	d821      	bhi.n	800299c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x48>
 8002958:	e8df f000 	tbb	[pc, r0]
 800295c:	19120b02 	.word	0x19120b02
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_SET(id));
 8002960:	4b0f      	ldr	r3, [pc, #60]	@ (80029a0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x4c>)
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	fab2 f282 	clz	r2, r2
 8002968:	0952      	lsrs	r2, r2, #5
 800296a:	2104      	movs	r1, #4
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
 800296c:	480d      	ldr	r0, [pc, #52]	@ (80029a4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x50>)
 800296e:	f002 bf1f 	b.w	80057b0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_SET(id));
 8002972:	4b0b      	ldr	r3, [pc, #44]	@ (80029a0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x4c>)
 8002974:	685a      	ldr	r2, [r3, #4]
 8002976:	fab2 f282 	clz	r2, r2
 800297a:	0952      	lsrs	r2, r2, #5
 800297c:	2108      	movs	r1, #8
 800297e:	e7f5      	b.n	800296c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
 8002980:	4b07      	ldr	r3, [pc, #28]	@ (80029a0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x4c>)
 8002982:	689a      	ldr	r2, [r3, #8]
 8002984:	fab2 f282 	clz	r2, r2
 8002988:	0952      	lsrs	r2, r2, #5
 800298a:	2110      	movs	r1, #16
 800298c:	e7ee      	b.n	800296c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
 800298e:	4b04      	ldr	r3, [pc, #16]	@ (80029a0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x4c>)
 8002990:	68da      	ldr	r2, [r3, #12]
 8002992:	fab2 f282 	clz	r2, r2
 8002996:	0952      	lsrs	r2, r2, #5
 8002998:	2120      	movs	r1, #32
 800299a:	e7e7      	b.n	800296c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>
#endif
        break;
    }
}
 800299c:	4770      	bx	lr
 800299e:	bf00      	nop
 80029a0:	200003ec 	.word	0x200003ec
 80029a4:	40021000 	.word	0x40021000

080029a8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:
/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
    switch (id)
 80029a8:	2803      	cmp	r0, #3
 80029aa:	d821      	bhi.n	80029f0 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x48>
 80029ac:	e8df f000 	tbb	[pc, r0]
 80029b0:	19120b02 	.word	0x19120b02
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_RESET(id));
 80029b4:	4b0f      	ldr	r3, [pc, #60]	@ (80029f4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x4c>)
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	3a00      	subs	r2, #0
 80029ba:	bf18      	it	ne
 80029bc:	2201      	movne	r2, #1
 80029be:	2104      	movs	r1, #4
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 80029c0:	480d      	ldr	r0, [pc, #52]	@ (80029f8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x50>)
 80029c2:	f002 bef5 	b.w	80057b0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_RESET(id));
 80029c6:	4b0b      	ldr	r3, [pc, #44]	@ (80029f4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x4c>)
 80029c8:	685a      	ldr	r2, [r3, #4]
 80029ca:	3a00      	subs	r2, #0
 80029cc:	bf18      	it	ne
 80029ce:	2201      	movne	r2, #1
 80029d0:	2108      	movs	r1, #8
 80029d2:	e7f5      	b.n	80029c0 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
 80029d4:	4b07      	ldr	r3, [pc, #28]	@ (80029f4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x4c>)
 80029d6:	689a      	ldr	r2, [r3, #8]
 80029d8:	3a00      	subs	r2, #0
 80029da:	bf18      	it	ne
 80029dc:	2201      	movne	r2, #1
 80029de:	2110      	movs	r1, #16
 80029e0:	e7ee      	b.n	80029c0 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 80029e2:	4b04      	ldr	r3, [pc, #16]	@ (80029f4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x4c>)
 80029e4:	68da      	ldr	r2, [r3, #12]
 80029e6:	3a00      	subs	r2, #0
 80029e8:	bf18      	it	ne
 80029ea:	2201      	movne	r2, #1
 80029ec:	2120      	movs	r1, #32
 80029ee:	e7e7      	b.n	80029c0 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>
#endif
        break;
    }
}
 80029f0:	4770      	bx	lr
 80029f2:	bf00      	nop
 80029f4:	200003ec 	.word	0x200003ec
 80029f8:	40021000 	.word	0x40021000

080029fc <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:
/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
    switch (id)
 80029fc:	2803      	cmp	r0, #3
 80029fe:	d80d      	bhi.n	8002a1c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x20>
 8002a00:	e8df f000 	tbb	[pc, r0]
 8002a04:	0a080602 	.word	0x0a080602
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 8002a08:	2104      	movs	r1, #4
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8002a0a:	4805      	ldr	r0, [pc, #20]	@ (8002a20 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x24>)
 8002a0c:	f002 bed5 	b.w	80057ba <HAL_GPIO_TogglePin>
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8002a10:	2108      	movs	r1, #8
 8002a12:	e7fa      	b.n	8002a0a <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0xe>
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 8002a14:	2110      	movs	r1, #16
 8002a16:	e7f8      	b.n	8002a0a <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0xe>
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8002a18:	2120      	movs	r1, #32
 8002a1a:	e7f6      	b.n	8002a0a <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0xe>
#endif
        break;
    }
}
 8002a1c:	4770      	bx	lr
 8002a1e:	bf00      	nop
 8002a20:	40021000 	.word	0x40021000

08002a24 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE>:

/*
 * Gets the state of a pin.
 */
bool GPIO::get(GPIO_ID id)
{
 8002a24:	b508      	push	{r3, lr}
    GPIO_PinState bitstatus = GPIO_PIN_RESET;
    switch (id)
 8002a26:	2803      	cmp	r0, #3
 8002a28:	d811      	bhi.n	8002a4e <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x2a>
 8002a2a:	e8df f000 	tbb	[pc, r0]
 8002a2e:	0a02      	.short	0x0a02
 8002a30:	0e0c      	.short	0x0e0c
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        bitstatus = HAL_GPIO_ReadPin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 8002a32:	2104      	movs	r1, #4
        bitstatus = HAL_GPIO_ReadPin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        bitstatus = HAL_GPIO_ReadPin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8002a34:	4807      	ldr	r0, [pc, #28]	@ (8002a54 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x30>)
 8002a36:	f002 feb5 	bl	80057a4 <HAL_GPIO_ReadPin>
#endif
        break;
    }
    return (bitstatus == GPIO_PIN_SET);
}
 8002a3a:	1e43      	subs	r3, r0, #1
 8002a3c:	4258      	negs	r0, r3
 8002a3e:	4158      	adcs	r0, r3
 8002a40:	bd08      	pop	{r3, pc}
        bitstatus = HAL_GPIO_ReadPin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8002a42:	2108      	movs	r1, #8
 8002a44:	e7f6      	b.n	8002a34 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x10>
        bitstatus = HAL_GPIO_ReadPin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 8002a46:	2110      	movs	r1, #16
 8002a48:	e7f4      	b.n	8002a34 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x10>
        bitstatus = HAL_GPIO_ReadPin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8002a4a:	2120      	movs	r1, #32
 8002a4c:	e7f2      	b.n	8002a34 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x10>
    switch (id)
 8002a4e:	2000      	movs	r0, #0
 8002a50:	e7f3      	b.n	8002a3a <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x16>
 8002a52:	bf00      	nop
 8002a54:	40021000 	.word	0x40021000

08002a58 <_ZN8touchgfx4GPIO4initEv>:
{
 8002a58:	b570      	push	{r4, r5, r6, lr}
 8002a5a:	4d08      	ldr	r5, [pc, #32]	@ (8002a7c <_ZN8touchgfx4GPIO4initEv+0x24>)
    for (int id = 0; id <= 4; id++)
 8002a5c:	2400      	movs	r4, #0
                GPIO_InvertedLevels[id] = 1;
 8002a5e:	2601      	movs	r6, #1
        if (GPIO::get(static_cast<GPIO_ID>(id)))
 8002a60:	b2e0      	uxtb	r0, r4
 8002a62:	f7ff ffdf 	bl	8002a24 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE>
 8002a66:	b118      	cbz	r0, 8002a70 <_ZN8touchgfx4GPIO4initEv+0x18>
            if (GPIO_InvertedLevels[id] != 1)
 8002a68:	682b      	ldr	r3, [r5, #0]
 8002a6a:	2b01      	cmp	r3, #1
                GPIO_InvertedLevels[id] = 1;
 8002a6c:	bf18      	it	ne
 8002a6e:	602e      	strne	r6, [r5, #0]
    for (int id = 0; id <= 4; id++)
 8002a70:	3401      	adds	r4, #1
 8002a72:	2c05      	cmp	r4, #5
 8002a74:	f105 0504 	add.w	r5, r5, #4
 8002a78:	d1f2      	bne.n	8002a60 <_ZN8touchgfx4GPIO4initEv+0x8>
}
 8002a7a:	bd70      	pop	{r4, r5, r6, pc}
 8002a7c:	200003ec 	.word	0x200003ec

08002a80 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
     * @note A screen transition must occur before this takes effect!
     */
    virtual void setDisplayOrientation(DisplayOrientation orientation)
    {
        requestedOrientation = orientation;
        displayOrientationChangeRequested = true;
 8002a80:	2301      	movs	r3, #1
        requestedOrientation = orientation;
 8002a82:	f880 1078 	strb.w	r1, [r0, #120]	@ 0x78
        displayOrientationChangeRequested = true;
 8002a86:	f880 3079 	strb.w	r3, [r0, #121]	@ 0x79
    }
 8002a8a:	4770      	bx	lr

08002a8c <_ZN8touchgfx3HAL9sampleKeyERh>:
     */
    virtual bool sampleKey(uint8_t& key)
    {
        (void)key; // Unused variable
        return false;
    }
 8002a8c:	2000      	movs	r0, #0
 8002a8e:	4770      	bx	lr

08002a90 <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
     * @see setFrameBufferStartAddresses
     */
    virtual void setAnimationStorage(void* animationStorage)
    {
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8002a90:	4b03      	ldr	r3, [pc, #12]	@ (8002aa0 <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x10>)
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 8002a92:	6441      	str	r1, [r0, #68]	@ 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8002a94:	3900      	subs	r1, #0
 8002a96:	bf18      	it	ne
 8002a98:	2101      	movne	r1, #1
 8002a9a:	7019      	strb	r1, [r3, #0]
    }
 8002a9c:	4770      	bx	lr
 8002a9e:	bf00      	nop
 8002aa0:	20014f53 	.word	0x20014f53

08002aa4 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
    {
        return 0;
    }
 8002aa4:	2000      	movs	r0, #0
 8002aa6:	4770      	bx	lr

08002aa8 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
    {
        if (taskDelayFunc)
 8002aa8:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8002aaa:	b10b      	cbz	r3, 8002ab0 <_ZN8touchgfx3HAL9taskDelayEt+0x8>
        {
            taskDelayFunc(ms);
 8002aac:	4608      	mov	r0, r1
 8002aae:	4718      	bx	r3
        }
    }
 8002ab0:	4770      	bx	lr

08002ab2 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
    {
        return 0xFFFFu;
    }
 8002ab2:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002ab6:	4770      	bx	lr

08002ab8 <_ZN8touchgfx3HAL10getDMATypeEv>:
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
    {
        return dma.getDMAType();
 8002ab8:	6840      	ldr	r0, [r0, #4]
 8002aba:	6803      	ldr	r3, [r0, #0]
 8002abc:	699b      	ldr	r3, [r3, #24]
 8002abe:	4718      	bx	r3

08002ac0 <_ZN8touchgfx3HAL15InvalidateCacheEv>:
     * Called by setRenderingMethod when changing rendering method
     * from Hardware to Software indicating the cache should be invalidated.
     */
    virtual void InvalidateCache()
    {
    }
 8002ac0:	4770      	bx	lr

08002ac2 <_ZN8touchgfx3HAL10FlushCacheEv>:
     * Called by setRenderingMethod when changing rendering method
     * from Software to Hardware indicating the cache should be invalidated.
     */
    virtual void FlushCache()
    {
    }
 8002ac2:	4770      	bx	lr

08002ac4 <_ZN11TouchGFXHALD1Ev>:
 *
 * @brief HAL implementation for TouchGFX.
 *
 * @sa HAL
 */
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8002ac4:	4770      	bx	lr
	...

08002ac8 <_ZN11TouchGFXHAL10initializeEv>:

LOCATION_PRAGMA("TouchGFX_Framebuffer")
uint32_t animationStorage[(240 * 320 * 2 + 3) / 4] LOCATION_ATTRIBUTE("TouchGFX_Framebuffer");

void TouchGFXHAL::initialize()
{
 8002ac8:	b570      	push	{r4, r5, r6, lr}
 8002aca:	4604      	mov	r4, r0
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 8002acc:	f000 fc5a 	bl	8003384 <_ZN20TouchGFXGeneratedHAL10initializeEv>

    // existing frame buffers are re-used. just add animation storage
    setFrameBufferStartAddresses((void*)frameBuffer0, (void*)frameBuffer1, (void*)animationStorage);
 8002ad0:	6823      	ldr	r3, [r4, #0]
 8002ad2:	f8d3 5088 	ldr.w	r5, [r3, #136]	@ 0x88
 8002ad6:	4b04      	ldr	r3, [pc, #16]	@ (8002ae8 <_ZN11TouchGFXHAL10initializeEv+0x20>)
 8002ad8:	e9d4 120f 	ldrd	r1, r2, [r4, #60]	@ 0x3c
 8002adc:	4620      	mov	r0, r4
 8002ade:	46ac      	mov	ip, r5
}
 8002ae0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    setFrameBufferStartAddresses((void*)frameBuffer0, (void*)frameBuffer1, (void*)animationStorage);
 8002ae4:	4760      	bx	ip
 8002ae6:	bf00      	nop
 8002ae8:	d0000000 	.word	0xd0000000

08002aec <_ZN11TouchGFXHAL9taskEntryEv>:

void TouchGFXHAL::taskEntry()
{
 8002aec:	b508      	push	{r3, lr}
    enableLCDControllerInterrupt();
 8002aee:	6803      	ldr	r3, [r0, #0]
{
 8002af0:	4604      	mov	r4, r0
    enableLCDControllerInterrupt();
 8002af2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002af6:	4798      	blx	r3
    enableInterrupts();
 8002af8:	6823      	ldr	r3, [r4, #0]
 8002afa:	4620      	mov	r0, r4
 8002afc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002afe:	4798      	blx	r3

    OSWrappers::waitForVSync();
 8002b00:	f000 f8ec 	bl	8002cdc <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
    backPorchExited();
 8002b04:	6823      	ldr	r3, [r4, #0]
 8002b06:	4620      	mov	r0, r4
 8002b08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b0a:	4798      	blx	r3

    LCD_IO_WriteReg(0x29);
 8002b0c:	2029      	movs	r0, #41	@ 0x29
 8002b0e:	f7ff fabf 	bl	8002090 <LCD_IO_WriteReg>

    for (;;)
    {
        OSWrappers::waitForVSync();
 8002b12:	f000 f8e3 	bl	8002cdc <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
        backPorchExited();
 8002b16:	6823      	ldr	r3, [r4, #0]
 8002b18:	4620      	mov	r0, r4
 8002b1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b1c:	4798      	blx	r3
    for (;;)
 8002b1e:	e7f8      	b.n	8002b12 <_ZN11TouchGFXHAL9taskEntryEv+0x26>

08002b20 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    virtual void backPorchExited()
 8002b20:	b510      	push	{r4, lr}
 8002b22:	4604      	mov	r4, r0
        swapFrameBuffers();
 8002b24:	f007 ff3c 	bl	800a9a0 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8002b28:	6823      	ldr	r3, [r4, #0]
 8002b2a:	4620      	mov	r0, r4
 8002b2c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
    }
 8002b30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        tick();
 8002b34:	4718      	bx	r3

08002b36 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 8002b36:	f000 bc17 	b.w	8003368 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>

08002b3a <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 8002b3a:	f000 bc1b 	b.w	8003374 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>

08002b3e <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8002b3e:	f000 bc47 	b.w	80033d0 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>

08002b42 <_ZN11TouchGFXHAL19configureInterruptsEv>:
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 8002b42:	f000 bbed 	b.w	8003320 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>

08002b46 <_ZN11TouchGFXHAL16enableInterruptsEv>:
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 8002b46:	f000 bc47 	b.w	80033d8 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>

08002b4a <_ZN11TouchGFXHAL17disableInterruptsEv>:
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 8002b4a:	f000 bc4f 	b.w	80033ec <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>

08002b4e <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 8002b4e:	f000 bbf1 	b.w	8003334 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>

08002b52 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
    {
        HAL::flushFrameBuffer();
 8002b52:	f007 b985 	b.w	8009e60 <_ZN8touchgfx3HAL16flushFrameBufferEv>

08002b56 <_ZN11TouchGFXHALD0Ev>:
 8002b56:	b510      	push	{r4, lr}
 8002b58:	217c      	movs	r1, #124	@ 0x7c
 8002b5a:	4604      	mov	r4, r0
 8002b5c:	f011 f8fb 	bl	8013d56 <_ZdlPvj>
 8002b60:	4620      	mov	r0, r4
 8002b62:	bd10      	pop	{r4, pc}

08002b64 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:
    virtual void performDisplayOrientationChange()
 8002b64:	b510      	push	{r4, lr}
        if (requestedOrientation != nativeDisplayOrientation)
 8002b66:	f890 1034 	ldrb.w	r1, [r0, #52]	@ 0x34
 8002b6a:	f890 4078 	ldrb.w	r4, [r0, #120]	@ 0x78
            if (DISPLAY_ROTATION == rotate0)
 8002b6e:	4b0c      	ldr	r3, [pc, #48]	@ (8002ba0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>)
        if (requestedOrientation != nativeDisplayOrientation)
 8002b70:	428c      	cmp	r4, r1
            if (DISPLAY_ROTATION == rotate0)
 8002b72:	781a      	ldrb	r2, [r3, #0]
        if (requestedOrientation != nativeDisplayOrientation)
 8002b74:	d009      	beq.n	8002b8a <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x26>
            if (DISPLAY_ROTATION == rotate0)
 8002b76:	b93a      	cbnz	r2, 8002b88 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8002b78:	4a0a      	ldr	r2, [pc, #40]	@ (8002ba4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
                const uint16_t tmp = DISPLAY_HEIGHT;
 8002b7a:	490b      	ldr	r1, [pc, #44]	@ (8002ba8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8002b7c:	8814      	ldrh	r4, [r2, #0]
                const uint16_t tmp = DISPLAY_HEIGHT;
 8002b7e:	8808      	ldrh	r0, [r1, #0]
                DISPLAY_WIDTH = tmp;
 8002b80:	8010      	strh	r0, [r2, #0]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8002b82:	800c      	strh	r4, [r1, #0]
                DISPLAY_ROTATION = rotate90;
 8002b84:	2201      	movs	r2, #1
            DISPLAY_ROTATION = rotate0;
 8002b86:	701a      	strb	r2, [r3, #0]
    }
 8002b88:	bd10      	pop	{r4, pc}
        else if (DISPLAY_ROTATION != rotate0)
 8002b8a:	2a00      	cmp	r2, #0
 8002b8c:	d0fc      	beq.n	8002b88 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8002b8e:	4a05      	ldr	r2, [pc, #20]	@ (8002ba4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
            const uint16_t tmp = DISPLAY_HEIGHT;
 8002b90:	4905      	ldr	r1, [pc, #20]	@ (8002ba8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8002b92:	8814      	ldrh	r4, [r2, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
 8002b94:	8808      	ldrh	r0, [r1, #0]
            DISPLAY_WIDTH = tmp;
 8002b96:	8010      	strh	r0, [r2, #0]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8002b98:	800c      	strh	r4, [r1, #0]
            DISPLAY_ROTATION = rotate0;
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	e7f3      	b.n	8002b86 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x22>
 8002b9e:	bf00      	nop
 8002ba0:	20014f4c 	.word	0x20014f4c
 8002ba4:	20014f48 	.word	0x20014f48
 8002ba8:	20014f4a 	.word	0x20014f4a

08002bac <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 8002bac:	b570      	push	{r4, r5, r6, lr}
 8002bae:	460d      	mov	r5, r1
 8002bb0:	4619      	mov	r1, r3
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 8002bb2:	b935      	cbnz	r5, 8002bc2 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x16>
 8002bb4:	4b09      	ldr	r3, [pc, #36]	@ (8002bdc <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x30>)
 8002bb6:	4a0a      	ldr	r2, [pc, #40]	@ (8002be0 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x34>)
 8002bb8:	480a      	ldr	r0, [pc, #40]	@ (8002be4 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x38>)
 8002bba:	f240 21d2 	movw	r1, #722	@ 0x2d2
 8002bbe:	f011 f9b7 	bl	8013f30 <__assert_func>
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8002bc2:	e9c0 520f 	strd	r5, r2, [r0, #60]	@ 0x3c
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8002bc6:	4b08      	ldr	r3, [pc, #32]	@ (8002be8 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x3c>)
 8002bc8:	3a00      	subs	r2, #0
 8002bca:	bf18      	it	ne
 8002bcc:	2201      	movne	r2, #1
 8002bce:	701a      	strb	r2, [r3, #0]
        setAnimationStorage(animationStorage);
 8002bd0:	6803      	ldr	r3, [r0, #0]
    }
 8002bd2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setAnimationStorage(animationStorage);
 8002bd6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002bda:	4718      	bx	r3
 8002bdc:	0801579c 	.word	0x0801579c
 8002be0:	080157d4 	.word	0x080157d4
 8002be4:	08015822 	.word	0x08015822
 8002be8:	20014f52 	.word	0x20014f52

08002bec <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 8002bec:	b508      	push	{r3, lr}
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 8002bee:	4b09      	ldr	r3, [pc, #36]	@ (8002c14 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x28>)
 8002bf0:	881b      	ldrh	r3, [r3, #0]
 8002bf2:	428b      	cmp	r3, r1
 8002bf4:	d803      	bhi.n	8002bfe <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x12>
 8002bf6:	4b08      	ldr	r3, [pc, #32]	@ (8002c18 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x2c>)
 8002bf8:	881b      	ldrh	r3, [r3, #0]
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d905      	bls.n	8002c0a <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x1e>
 8002bfe:	4b07      	ldr	r3, [pc, #28]	@ (8002c1c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>)
 8002c00:	4a07      	ldr	r2, [pc, #28]	@ (8002c20 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x34>)
 8002c02:	4808      	ldr	r0, [pc, #32]	@ (8002c24 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x38>)
 8002c04:	219e      	movs	r1, #158	@ 0x9e
 8002c06:	f011 f993 	bl	8013f30 <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 8002c0a:	4b07      	ldr	r3, [pc, #28]	@ (8002c28 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x3c>)
 8002c0c:	8019      	strh	r1, [r3, #0]
        FRAME_BUFFER_HEIGHT = height;
 8002c0e:	4b07      	ldr	r3, [pc, #28]	@ (8002c2c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x40>)
 8002c10:	801a      	strh	r2, [r3, #0]
    }
 8002c12:	bd08      	pop	{r3, pc}
 8002c14:	20014f48 	.word	0x20014f48
 8002c18:	20014f4a 	.word	0x20014f4a
 8002c1c:	08015867 	.word	0x08015867
 8002c20:	080158ca 	.word	0x080158ca
 8002c24:	08015822 	.word	0x08015822
 8002c28:	20014f4e 	.word	0x20014f4e
 8002c2c:	20014f50 	.word	0x20014f50

08002c30 <_ZN8touchgfx3HAL11getBlitCapsEv>:
    virtual BlitOperations getBlitCaps()
 8002c30:	4603      	mov	r3, r0
        if (useDMAAcceleration)
 8002c32:	f890 007a 	ldrb.w	r0, [r0, #122]	@ 0x7a
 8002c36:	b118      	cbz	r0, 8002c40 <_ZN8touchgfx3HAL11getBlitCapsEv+0x10>
 8002c38:	6858      	ldr	r0, [r3, #4]
            return dma.getBlitCaps();
 8002c3a:	6803      	ldr	r3, [r0, #0]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4718      	bx	r3
    }
 8002c40:	4770      	bx	lr
	...

08002c44 <_ZN8touchgfx10OSWrappers10initializeEv>:
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8002c44:	2101      	movs	r1, #1
{
 8002c46:	b508      	push	{r3, lr}
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8002c48:	2200      	movs	r2, #0
 8002c4a:	4608      	mov	r0, r1
 8002c4c:	f004 fdd1 	bl	80077f2 <osSemaphoreNew>
 8002c50:	4b0a      	ldr	r3, [pc, #40]	@ (8002c7c <_ZN8touchgfx10OSWrappers10initializeEv+0x38>)
 8002c52:	6018      	str	r0, [r3, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 8002c54:	b928      	cbnz	r0, 8002c62 <_ZN8touchgfx10OSWrappers10initializeEv+0x1e>
 8002c56:	4b0a      	ldr	r3, [pc, #40]	@ (8002c80 <_ZN8touchgfx10OSWrappers10initializeEv+0x3c>)
 8002c58:	4a0a      	ldr	r2, [pc, #40]	@ (8002c84 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 8002c5a:	2128      	movs	r1, #40	@ 0x28

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8002c5c:	480a      	ldr	r0, [pc, #40]	@ (8002c88 <_ZN8touchgfx10OSWrappers10initializeEv+0x44>)
 8002c5e:	f011 f967 	bl	8013f30 <__assert_func>
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 8002c62:	2200      	movs	r2, #0
 8002c64:	2104      	movs	r1, #4
 8002c66:	2001      	movs	r0, #1
 8002c68:	f004 fe6b 	bl	8007942 <osMessageQueueNew>
 8002c6c:	4b07      	ldr	r3, [pc, #28]	@ (8002c8c <_ZN8touchgfx10OSWrappers10initializeEv+0x48>)
 8002c6e:	6018      	str	r0, [r3, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8002c70:	b918      	cbnz	r0, 8002c7a <_ZN8touchgfx10OSWrappers10initializeEv+0x36>
 8002c72:	4b07      	ldr	r3, [pc, #28]	@ (8002c90 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>)
 8002c74:	4a03      	ldr	r2, [pc, #12]	@ (8002c84 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 8002c76:	212c      	movs	r1, #44	@ 0x2c
 8002c78:	e7f0      	b.n	8002c5c <_ZN8touchgfx10OSWrappers10initializeEv+0x18>
}
 8002c7a:	bd08      	pop	{r3, pc}
 8002c7c:	20000400 	.word	0x20000400
 8002c80:	080159e8 	.word	0x080159e8
 8002c84:	08015a31 	.word	0x08015a31
 8002c88:	08015a60 	.word	0x08015a60
 8002c8c:	200003fc 	.word	0x200003fc
 8002c90:	08015ab1 	.word	0x08015ab1

08002c94 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:
/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 8002c94:	4b02      	ldr	r3, [pc, #8]	@ (8002ca0 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0xc>)
 8002c96:	f04f 31ff 	mov.w	r1, #4294967295
 8002c9a:	6818      	ldr	r0, [r3, #0]
 8002c9c:	f004 bdf3 	b.w	8007886 <osSemaphoreAcquire>
 8002ca0:	20000400 	.word	0x20000400

08002ca4 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:
/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
    osSemaphoreRelease(frame_buffer_sem);
 8002ca4:	4b01      	ldr	r3, [pc, #4]	@ (8002cac <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x8>)
 8002ca6:	6818      	ldr	r0, [r3, #0]
 8002ca8:	f004 be19 	b.w	80078de <osSemaphoreRelease>
 8002cac:	20000400 	.word	0x20000400

08002cb0 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, 0);
 8002cb0:	4b02      	ldr	r3, [pc, #8]	@ (8002cbc <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0xc>)
 8002cb2:	2100      	movs	r1, #0
 8002cb4:	6818      	ldr	r0, [r3, #0]
 8002cb6:	f004 bde6 	b.w	8007886 <osSemaphoreAcquire>
 8002cba:	bf00      	nop
 8002cbc:	20000400 	.word	0x20000400

08002cc0 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 * from ISR.
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
 8002cc0:	f7ff bff0 	b.w	8002ca4 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08002cc4 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 8002cc4:	4803      	ldr	r0, [pc, #12]	@ (8002cd4 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x10>)
 8002cc6:	4904      	ldr	r1, [pc, #16]	@ (8002cd8 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x14>)
 8002cc8:	6800      	ldr	r0, [r0, #0]
 8002cca:	2300      	movs	r3, #0
 8002ccc:	461a      	mov	r2, r3
 8002cce:	f004 be73 	b.w	80079b8 <osMessageQueuePut>
 8002cd2:	bf00      	nop
 8002cd4:	200003fc 	.word	0x200003fc
 8002cd8:	2000000c 	.word	0x2000000c

08002cdc <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8002cdc:	b513      	push	{r0, r1, r4, lr}
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 8002cde:	4c08      	ldr	r4, [pc, #32]	@ (8002d00 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x24>)
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	461a      	mov	r2, r3
 8002ce4:	a901      	add	r1, sp, #4
 8002ce6:	6820      	ldr	r0, [r4, #0]
 8002ce8:	f004 fe97 	bl	8007a1a <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 8002cec:	6820      	ldr	r0, [r4, #0]
 8002cee:	f04f 33ff 	mov.w	r3, #4294967295
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	a901      	add	r1, sp, #4
 8002cf6:	f004 fe90 	bl	8007a1a <osMessageQueueGet>
}
 8002cfa:	b002      	add	sp, #8
 8002cfc:	bd10      	pop	{r4, pc}
 8002cfe:	bf00      	nop
 8002d00:	200003fc 	.word	0x200003fc

08002d04 <_ZN8touchgfx13DMA_Interface5flushEv>:
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
    {
        waitForFrameBufferSemaphore();
 8002d04:	6803      	ldr	r3, [r0, #0]
 8002d06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d08:	4718      	bx	r3

08002d0a <_ZN8STM32DMA10getDMATypeEv>:
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
    {
        return touchgfx::DMA_TYPE_CHROMART;
    }
 8002d0a:	2001      	movs	r0, #1
 8002d0c:	4770      	bx	lr

08002d0e <_ZN8STM32DMA18signalDMAInterruptEv>:
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
    {
        executeCompleted();
 8002d0e:	6803      	ldr	r3, [r0, #0]
 8002d10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d12:	4718      	bx	r3

08002d14 <_ZN8STM32DMA10initializeEv>:
    /* Disable DMA2D global Interrupt */
    NVIC_DisableIRQ(DMA2D_IRQn);
}

void STM32DMA::initialize()
{
 8002d14:	b082      	sub	sp, #8
    /* Ensure DMA2D Clock is enabled */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002d16:	2300      	movs	r3, #0
 8002d18:	9301      	str	r3, [sp, #4]
 8002d1a:	4b0d      	ldr	r3, [pc, #52]	@ (8002d50 <_ZN8STM32DMA10initializeEv+0x3c>)
 8002d1c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002d1e:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8002d22:	631a      	str	r2, [r3, #48]	@ 0x30
 8002d24:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002d26:	f402 0200 	and.w	r2, r2, #8388608	@ 0x800000
 8002d2a:	9201      	str	r2, [sp, #4]
 8002d2c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_DMA2D_FORCE_RESET();
 8002d2e:	691a      	ldr	r2, [r3, #16]
 8002d30:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8002d34:	611a      	str	r2, [r3, #16]
    __HAL_RCC_DMA2D_RELEASE_RESET();
 8002d36:	691a      	ldr	r2, [r3, #16]
 8002d38:	f422 0200 	bic.w	r2, r2, #8388608	@ 0x800000
 8002d3c:	611a      	str	r2, [r3, #16]

    /* Add transfer complete callback function */
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 8002d3e:	4b05      	ldr	r3, [pc, #20]	@ (8002d54 <_ZN8STM32DMA10initializeEv+0x40>)
 8002d40:	4a05      	ldr	r2, [pc, #20]	@ (8002d58 <_ZN8STM32DMA10initializeEv+0x44>)
 8002d42:	611a      	str	r2, [r3, #16]
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d44:	4b05      	ldr	r3, [pc, #20]	@ (8002d5c <_ZN8STM32DMA10initializeEv+0x48>)
 8002d46:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002d4a:	609a      	str	r2, [r3, #8]

    /* Enable DMA2D global Interrupt */
    NVIC_EnableIRQ(DMA2D_IRQn);
}
 8002d4c:	b002      	add	sp, #8
 8002d4e:	4770      	bx	lr
 8002d50:	40023800 	.word	0x40023800
 8002d54:	20000344 	.word	0x20000344
 8002d58:	08002fed 	.word	0x08002fed
 8002d5c:	e000e100 	.word	0xe000e100

08002d60 <_ZN8STM32DMA11getBlitCapsEv>:
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
}
 8002d60:	f240 30ef 	movw	r0, #1007	@ 0x3ef
 8002d64:	4770      	bx	lr
	...

08002d68 <_ZN8STM32DMAD1Ev>:
STM32DMA::~STM32DMA()
 8002d68:	4b05      	ldr	r3, [pc, #20]	@ (8002d80 <_ZN8STM32DMAD1Ev+0x18>)
 8002d6a:	6003      	str	r3, [r0, #0]
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d6c:	4b05      	ldr	r3, [pc, #20]	@ (8002d84 <_ZN8STM32DMAD1Ev+0x1c>)
 8002d6e:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002d72:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002d76:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002d7a:	f3bf 8f6f 	isb	sy
}
 8002d7e:	4770      	bx	lr
 8002d80:	08015c54 	.word	0x08015c54
 8002d84:	e000e100 	.word	0xe000e100

08002d88 <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 8002d88:	b510      	push	{r4, lr}
 8002d8a:	4604      	mov	r4, r0
}
 8002d8c:	f44f 615a 	mov.w	r1, #3488	@ 0xda0
 8002d90:	f7ff ffea 	bl	8002d68 <_ZN8STM32DMAD1Ev>
 8002d94:	4620      	mov	r0, r4
 8002d96:	f010 ffde 	bl	8013d56 <_ZdlPvj>
 8002d9a:	4620      	mov	r0, r4
 8002d9c:	bd10      	pop	{r4, pc}
	...

08002da0 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>:
inline uint32_t STM32DMA::getChromARTOutputFormat(Bitmap::BitmapFormat format)
 8002da0:	b508      	push	{r3, lr}
    switch (format)
 8002da2:	280a      	cmp	r0, #10
 8002da4:	d809      	bhi.n	8002dba <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x1a>
 8002da6:	e8df f000 	tbb	[pc, r0]
 8002daa:	1006      	.short	0x1006
 8002dac:	0808080e 	.word	0x0808080e
 8002db0:	10101008 	.word	0x10101008
 8002db4:	10          	.byte	0x10
 8002db5:	00          	.byte	0x00
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 8002db6:	2002      	movs	r0, #2
}
 8002db8:	bd08      	pop	{r3, pc}
        assert(0 && "Unsupported Format!");
 8002dba:	4b05      	ldr	r3, [pc, #20]	@ (8002dd0 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x30>)
 8002dbc:	4a05      	ldr	r2, [pc, #20]	@ (8002dd4 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x34>)
 8002dbe:	4806      	ldr	r0, [pc, #24]	@ (8002dd8 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x38>)
 8002dc0:	2187      	movs	r1, #135	@ 0x87
 8002dc2:	f011 f8b5 	bl	8013f30 <__assert_func>
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8002dc6:	2000      	movs	r0, #0
 8002dc8:	e7f6      	b.n	8002db8 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
    switch (format)
 8002dca:	2001      	movs	r0, #1
    return dma2dColorMode;
 8002dcc:	e7f4      	b.n	8002db8 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
 8002dce:	bf00      	nop
 8002dd0:	08015af3 	.word	0x08015af3
 8002dd4:	08015b0e 	.word	0x08015b0e
 8002dd8:	08015b59 	.word	0x08015b59

08002ddc <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 8002ddc:	b538      	push	{r3, r4, r5, lr}
 8002dde:	460c      	mov	r4, r1
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002de0:	7f88      	ldrb	r0, [r1, #30]
 8002de2:	f7ff ffdd 	bl	8002da0 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002de6:	8aa5      	ldrh	r5, [r4, #20]
 8002de8:	8ae2      	ldrh	r2, [r4, #22]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8002dea:	4b16      	ldr	r3, [pc, #88]	@ (8002e44 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x68>)

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002dec:	6921      	ldr	r1, [r4, #16]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8002dee:	6358      	str	r0, [r3, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002df0:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 8002df4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002df6:	8b62      	ldrh	r2, [r4, #26]
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002df8:	63d9      	str	r1, [r3, #60]	@ 0x3c
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002dfa:	1b52      	subs	r2, r2, r5
 8002dfc:	641a      	str	r2, [r3, #64]	@ 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 8002dfe:	6825      	ldr	r5, [r4, #0]
 8002e00:	2d08      	cmp	r5, #8
 8002e02:	d10e      	bne.n	8002e22 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x46>
    {
        /* DMA2D BGOR register configuration */
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002e04:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration */
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002e06:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002e08:	6258      	str	r0, [r3, #36]	@ 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 8002e0a:	7f20      	ldrb	r0, [r4, #28]
 8002e0c:	4a0e      	ldr	r2, [pc, #56]	@ (8002e48 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x6c>)
 8002e0e:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 8002e12:	61da      	str	r2, [r3, #28]
        return color;
 8002e14:	68e2      	ldr	r2, [r4, #12]

        /* DMA2D FGCOLR register configuration */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8002e16:	621a      	str	r2, [r3, #32]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
 8002e18:	4a0c      	ldr	r2, [pc, #48]	@ (8002e4c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x70>)
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002e1a:	6159      	str	r1, [r3, #20]
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002e1c:	60d9      	str	r1, [r3, #12]

        /* Set color */
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 8002e1e:	601a      	str	r2, [r3, #0]
    }
}
 8002e20:	bd38      	pop	{r3, r4, r5, pc}
        WRITE_REG(DMA2D->FGOR, 0);
 8002e22:	2200      	movs	r2, #0
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 8002e24:	61d8      	str	r0, [r3, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 8002e26:	611a      	str	r2, [r3, #16]
 8002e28:	68e1      	ldr	r1, [r4, #12]
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));
 8002e2a:	0a0a      	lsrs	r2, r1, #8
 8002e2c:	0948      	lsrs	r0, r1, #5
 8002e2e:	f402 4278 	and.w	r2, r2, #63488	@ 0xf800
 8002e32:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8002e36:	4302      	orrs	r2, r0
 8002e38:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 8002e3c:	430a      	orrs	r2, r1
 8002e3e:	639a      	str	r2, [r3, #56]	@ 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 8002e40:	4a03      	ldr	r2, [pc, #12]	@ (8002e50 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x74>)
 8002e42:	e7ec      	b.n	8002e1e <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x42>
 8002e44:	4002b000 	.word	0x4002b000
 8002e48:	00010009 	.word	0x00010009
 8002e4c:	00020201 	.word	0x00020201
 8002e50:	00030201 	.word	0x00030201

08002e54 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>:
inline uint32_t STM32DMA::getChromARTInputFormat(Bitmap::BitmapFormat format)
 8002e54:	b508      	push	{r3, lr}
    switch (format)
 8002e56:	280b      	cmp	r0, #11
 8002e58:	d80b      	bhi.n	8002e72 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x1e>
 8002e5a:	e8df f000 	tbb	[pc, r0]
 8002e5e:	1206      	.short	0x1206
 8002e60:	0a0a0a10 	.word	0x0a0a0a10
 8002e64:	0808080a 	.word	0x0808080a
 8002e68:	0808      	.short	0x0808
        dma2dColorMode = DMA2D_INPUT_RGB565;
 8002e6a:	2002      	movs	r0, #2
}
 8002e6c:	bd08      	pop	{r3, pc}
        dma2dColorMode = DMA2D_INPUT_L8;
 8002e6e:	2005      	movs	r0, #5
        break;
 8002e70:	e7fc      	b.n	8002e6c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
        assert(0 && "Unsupported Format!");
 8002e72:	4b05      	ldr	r3, [pc, #20]	@ (8002e88 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x34>)
 8002e74:	4a05      	ldr	r2, [pc, #20]	@ (8002e8c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x38>)
 8002e76:	4806      	ldr	r0, [pc, #24]	@ (8002e90 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x3c>)
 8002e78:	2166      	movs	r1, #102	@ 0x66
 8002e7a:	f011 f859 	bl	8013f30 <__assert_func>
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8002e7e:	2000      	movs	r0, #0
 8002e80:	e7f4      	b.n	8002e6c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
    switch (format)
 8002e82:	2001      	movs	r0, #1
    return dma2dColorMode;
 8002e84:	e7f2      	b.n	8002e6c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
 8002e86:	bf00      	nop
 8002e88:	08015af3 	.word	0x08015af3
 8002e8c:	08015ba8 	.word	0x08015ba8
 8002e90:	08015b59 	.word	0x08015b59

08002e94 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
{
 8002e94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8002e98:	f891 801d 	ldrb.w	r8, [r1, #29]
{
 8002e9c:	460c      	mov	r4, r1
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8002e9e:	4640      	mov	r0, r8
 8002ea0:	f7ff ffd8 	bl	8002e54 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002ea4:	7fa7      	ldrb	r7, [r4, #30]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8002ea6:	4605      	mov	r5, r0
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002ea8:	4638      	mov	r0, r7
 8002eaa:	f7ff ffd3 	bl	8002e54 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>
 8002eae:	4606      	mov	r6, r0
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002eb0:	4638      	mov	r0, r7
 8002eb2:	f7ff ff75 	bl	8002da0 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002eb6:	8aa1      	ldrh	r1, [r4, #20]
 8002eb8:	8b62      	ldrh	r2, [r4, #26]
 8002eba:	4b44      	ldr	r3, [pc, #272]	@ (8002fcc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x138>)
 8002ebc:	1a52      	subs	r2, r2, r1
 8002ebe:	641a      	str	r2, [r3, #64]	@ 0x40
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002ec0:	619a      	str	r2, [r3, #24]
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8002ec2:	8b22      	ldrh	r2, [r4, #24]
 8002ec4:	1a52      	subs	r2, r2, r1
 8002ec6:	611a      	str	r2, [r3, #16]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002ec8:	8ae2      	ldrh	r2, [r4, #22]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8002eca:	6358      	str	r0, [r3, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002ecc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002ed0:	645a      	str	r2, [r3, #68]	@ 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002ed2:	6921      	ldr	r1, [r4, #16]
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8002ed4:	6862      	ldr	r2, [r4, #4]
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002ed6:	63d9      	str	r1, [r3, #60]	@ 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8002ed8:	60da      	str	r2, [r3, #12]
    switch (blitOp.operation)
 8002eda:	6820      	ldr	r0, [r4, #0]
 8002edc:	2880      	cmp	r0, #128	@ 0x80
 8002ede:	d028      	beq.n	8002f32 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x9e>
 8002ee0:	7f22      	ldrb	r2, [r4, #28]
 8002ee2:	d80f      	bhi.n	8002f04 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x70>
 8002ee4:	2820      	cmp	r0, #32
 8002ee6:	d067      	beq.n	8002fb8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x124>
 8002ee8:	2840      	cmp	r0, #64	@ 0x40
 8002eea:	d065      	beq.n	8002fb8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x124>
 8002eec:	2804      	cmp	r0, #4
 8002eee:	d01a      	beq.n	8002f26 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x92>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002ef0:	4b36      	ldr	r3, [pc, #216]	@ (8002fcc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x138>)
 8002ef2:	ea45 6502 	orr.w	r5, r5, r2, lsl #24
 8002ef6:	f445 3500 	orr.w	r5, r5, #131072	@ 0x20000
        if (blitOp.srcFormat != blitOp.dstFormat)
 8002efa:	45b8      	cmp	r8, r7
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002efc:	61dd      	str	r5, [r3, #28]
        if (blitOp.srcFormat != blitOp.dstFormat)
 8002efe:	d061      	beq.n	8002fc4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x130>
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 8002f00:	4a33      	ldr	r2, [pc, #204]	@ (8002fd0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13c>)
 8002f02:	e044      	b.n	8002f8e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xfa>
    switch (blitOp.operation)
 8002f04:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 8002f08:	d004      	beq.n	8002f14 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x80>
 8002f0a:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 8002f0e:	d1ef      	bne.n	8002ef0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x5c>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002f10:	4830      	ldr	r0, [pc, #192]	@ (8002fd4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x140>)
 8002f12:	e000      	b.n	8002f16 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x82>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002f14:	4830      	ldr	r0, [pc, #192]	@ (8002fd8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x144>)
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002f16:	ea40 6202 	orr.w	r2, r0, r2, lsl #24
 8002f1a:	61da      	str	r2, [r3, #28]
 8002f1c:	68e2      	ldr	r2, [r4, #12]
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8002f1e:	621a      	str	r2, [r3, #32]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002f20:	625e      	str	r6, [r3, #36]	@ 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002f22:	6159      	str	r1, [r3, #20]
 8002f24:	e032      	b.n	8002f8c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf8>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002f26:	ea45 6202 	orr.w	r2, r5, r2, lsl #24
 8002f2a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002f2e:	61da      	str	r2, [r3, #28]
 8002f30:	e7f6      	b.n	8002f20 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x8c>
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 8002f32:	68a0      	ldr	r0, [r4, #8]
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 8002f34:	1d02      	adds	r2, r0, #4
 8002f36:	62da      	str	r2, [r3, #44]	@ 0x2c
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002f38:	7f22      	ldrb	r2, [r4, #28]
 8002f3a:	ea45 6502 	orr.w	r5, r5, r2, lsl #24
 8002f3e:	f445 3500 	orr.w	r5, r5, #131072	@ 0x20000
 8002f42:	61dd      	str	r5, [r3, #28]
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002f44:	625e      	str	r6, [r3, #36]	@ 0x24
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002f46:	6159      	str	r1, [r3, #20]
            switch ((Bitmap::ClutFormat)palette->format)
 8002f48:	7801      	ldrb	r1, [r0, #0]
 8002f4a:	b141      	cbz	r1, 8002f5e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xca>
 8002f4c:	2901      	cmp	r1, #1
 8002f4e:	d021      	beq.n	8002f94 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x100>
                assert(0 && "Unsupported format");
 8002f50:	4b22      	ldr	r3, [pc, #136]	@ (8002fdc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x148>)
 8002f52:	4a23      	ldr	r2, [pc, #140]	@ (8002fe0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x14c>)
 8002f54:	4823      	ldr	r0, [pc, #140]	@ (8002fe4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x150>)
 8002f56:	f240 1111 	movw	r1, #273	@ 0x111
 8002f5a:	f010 ffe9 	bl	8013f30 <__assert_func>
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 8002f5e:	69da      	ldr	r2, [r3, #28]
 8002f60:	8841      	ldrh	r1, [r0, #2]
 8002f62:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8002f66:	3901      	subs	r1, #1
 8002f68:	f022 0210 	bic.w	r2, r2, #16
 8002f6c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002f70:	61da      	str	r2, [r3, #28]
            bool blend = true;
 8002f72:	2101      	movs	r1, #1
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 8002f74:	4b15      	ldr	r3, [pc, #84]	@ (8002fcc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x138>)
 8002f76:	69da      	ldr	r2, [r3, #28]
 8002f78:	f042 0220 	orr.w	r2, r2, #32
 8002f7c:	61da      	str	r2, [r3, #28]
            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 8002f7e:	69da      	ldr	r2, [r3, #28]
 8002f80:	0692      	lsls	r2, r2, #26
 8002f82:	d4fc      	bmi.n	8002f7e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xea>
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 8002f84:	2210      	movs	r2, #16
 8002f86:	609a      	str	r2, [r3, #8]
            if (blend)
 8002f88:	2900      	cmp	r1, #0
 8002f8a:	d0b9      	beq.n	8002f00 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x6c>
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8002f8c:	4a16      	ldr	r2, [pc, #88]	@ (8002fe8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x154>)
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 8002f8e:	601a      	str	r2, [r3, #0]
}
 8002f90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                if (blitOp.alpha == 255)
 8002f94:	f1b2 01ff 	subs.w	r1, r2, #255	@ 0xff
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8002f98:	69da      	ldr	r2, [r3, #28]
 8002f9a:	8840      	ldrh	r0, [r0, #2]
 8002f9c:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8002fa0:	f100 30ff 	add.w	r0, r0, #4294967295
 8002fa4:	f022 0210 	bic.w	r2, r2, #16
 8002fa8:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8002fac:	f042 0210 	orr.w	r2, r2, #16
                if (blitOp.alpha == 255)
 8002fb0:	bf18      	it	ne
 8002fb2:	2101      	movne	r1, #1
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8002fb4:	61da      	str	r2, [r3, #28]
                break;
 8002fb6:	e7dd      	b.n	8002f74 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xe0>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002fb8:	ea45 6202 	orr.w	r2, r5, r2, lsl #24
 8002fbc:	4b03      	ldr	r3, [pc, #12]	@ (8002fcc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x138>)
 8002fbe:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8002fc2:	e7b4      	b.n	8002f2e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x9a>
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 8002fc4:	f240 2201 	movw	r2, #513	@ 0x201
 8002fc8:	e7e1      	b.n	8002f8e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xfa>
 8002fca:	bf00      	nop
 8002fcc:	4002b000 	.word	0x4002b000
 8002fd0:	00010201 	.word	0x00010201
 8002fd4:	00020009 	.word	0x00020009
 8002fd8:	0002000a 	.word	0x0002000a
 8002fdc:	08015bf2 	.word	0x08015bf2
 8002fe0:	08015c0c 	.word	0x08015c0c
 8002fe4:	08015b59 	.word	0x08015b59
 8002fe8:	00020201 	.word	0x00020201

08002fec <DMA2D_XferCpltCallback>:
        return instance;
 8002fec:	4b02      	ldr	r3, [pc, #8]	@ (8002ff8 <DMA2D_XferCpltCallback+0xc>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	6858      	ldr	r0, [r3, #4]
        dma.signalDMAInterrupt();
 8002ff2:	6803      	ldr	r3, [r0, #0]
 8002ff4:	695b      	ldr	r3, [r3, #20]
 8002ff6:	4718      	bx	r3
 8002ff8:	20014f54 	.word	0x20014f54

08002ffc <_ZN8STM32DMAC1Ev>:
STM32DMA::STM32DMA()
 8002ffc:	b570      	push	{r4, r5, r6, lr}
 8002ffe:	4604      	mov	r4, r0
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 8003000:	4625      	mov	r5, r4
 8003002:	4b0a      	ldr	r3, [pc, #40]	@ (800302c <_ZN8STM32DMAC1Ev+0x30>)
 8003004:	300c      	adds	r0, #12
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 8003006:	2600      	movs	r6, #0
 8003008:	6060      	str	r0, [r4, #4]
 800300a:	7226      	strb	r6, [r4, #8]
 800300c:	7266      	strb	r6, [r4, #9]
 800300e:	f845 3b20 	str.w	r3, [r5], #32
 8003012:	2260      	movs	r2, #96	@ 0x60
 8003014:	4629      	mov	r1, r5
 8003016:	f007 fe01 	bl	800ac1c <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 800301a:	f504 635a 	add.w	r3, r4, #3488	@ 0xda0
        : color(0)
 800301e:	60ee      	str	r6, [r5, #12]
 8003020:	3524      	adds	r5, #36	@ 0x24
 8003022:	429d      	cmp	r5, r3
 8003024:	d1fb      	bne.n	800301e <_ZN8STM32DMAC1Ev+0x22>
}
 8003026:	4620      	mov	r0, r4
 8003028:	bd70      	pop	{r4, r5, r6, pc}
 800302a:	bf00      	nop
 800302c:	08015c54 	.word	0x08015c54

08003030 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    };

    virtual uint16_t capacity() const
    {
        return NUMBER_OF_ELEMENTS;
    }
 8003030:	2001      	movs	r0, #1
 8003032:	4770      	bx	lr

08003034 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
    {
        return sizeof(stBlocks[0]);
    }
 8003034:	200c      	movs	r0, #12
 8003036:	4770      	bx	lr

08003038 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
    {
        return &stBlocks[index];
 8003038:	230c      	movs	r3, #12
 800303a:	fb03 0001 	mla	r0, r3, r1, r0
    }
 800303e:	3008      	adds	r0, #8
 8003040:	4770      	bx	lr

08003042 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
    {
        return &stBlocks[index];
 8003042:	230c      	movs	r3, #12
 8003044:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8003048:	3008      	adds	r0, #8
 800304a:	4770      	bx	lr

0800304c <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 800304c:	2001      	movs	r0, #1
 800304e:	4770      	bx	lr

08003050 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 8003050:	f642 4034 	movw	r0, #11316	@ 0x2c34
 8003054:	4770      	bx	lr

08003056 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8003056:	f642 4334 	movw	r3, #11316	@ 0x2c34
 800305a:	fb03 0001 	mla	r0, r3, r1, r0
    }
 800305e:	3008      	adds	r0, #8
 8003060:	4770      	bx	lr

08003062 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8003062:	f642 4334 	movw	r3, #11316	@ 0x2c34
 8003066:	fb03 0001 	mla	r0, r3, r1, r0
    }
 800306a:	3008      	adds	r0, #8
 800306c:	4770      	bx	lr

0800306e <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 800306e:	2001      	movs	r0, #1
 8003070:	4770      	bx	lr

08003072 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 8003072:	2010      	movs	r0, #16
 8003074:	4770      	bx	lr

08003076 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8003076:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 800307a:	3008      	adds	r0, #8
 800307c:	4770      	bx	lr

0800307e <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 800307e:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 8003082:	3008      	adds	r0, #8
 8003084:	4770      	bx	lr

08003086 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
    {
        app.gotoScreen1ScreenNoTransition();
 8003086:	4608      	mov	r0, r1
 8003088:	f000 bb9a 	b.w	80037c0 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>

0800308c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
class Partition : public AbstractPartition
 800308c:	b510      	push	{r4, lr}
 800308e:	4b03      	ldr	r3, [pc, #12]	@ (800309c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8003090:	6003      	str	r3, [r0, #0]
 8003092:	4604      	mov	r4, r0
 8003094:	f006 fc39 	bl	800990a <_ZN8touchgfx17AbstractPartitionD1Ev>
 8003098:	4620      	mov	r0, r4
 800309a:	bd10      	pop	{r4, pc}
 800309c:	08015d0c 	.word	0x08015d0c

080030a0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
 80030a0:	b510      	push	{r4, lr}
 80030a2:	4604      	mov	r4, r0
 80030a4:	f7ff fff2 	bl	800308c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 80030a8:	4620      	mov	r0, r4
 80030aa:	2114      	movs	r1, #20
 80030ac:	f010 fe53 	bl	8013d56 <_ZdlPvj>
 80030b0:	4620      	mov	r0, r4
 80030b2:	bd10      	pop	{r4, pc}

080030b4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 80030b4:	b510      	push	{r4, lr}
 80030b6:	4b03      	ldr	r3, [pc, #12]	@ (80030c4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 80030b8:	6003      	str	r3, [r0, #0]
 80030ba:	4604      	mov	r4, r0
 80030bc:	f006 fc25 	bl	800990a <_ZN8touchgfx17AbstractPartitionD1Ev>
 80030c0:	4620      	mov	r0, r4
 80030c2:	bd10      	pop	{r4, pc}
 80030c4:	08015cd8 	.word	0x08015cd8

080030c8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 80030c8:	b510      	push	{r4, lr}
 80030ca:	4604      	mov	r4, r0
 80030cc:	f7ff fff2 	bl	80030b4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80030d0:	4620      	mov	r0, r4
 80030d2:	f642 413c 	movw	r1, #11324	@ 0x2c3c
 80030d6:	f010 fe3e 	bl	8013d56 <_ZdlPvj>
 80030da:	4620      	mov	r0, r4
 80030dc:	bd10      	pop	{r4, pc}
	...

080030e0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 80030e0:	b510      	push	{r4, lr}
 80030e2:	4b03      	ldr	r3, [pc, #12]	@ (80030f0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 80030e4:	6003      	str	r3, [r0, #0]
 80030e6:	4604      	mov	r4, r0
 80030e8:	f006 fc0f 	bl	800990a <_ZN8touchgfx17AbstractPartitionD1Ev>
 80030ec:	4620      	mov	r0, r4
 80030ee:	bd10      	pop	{r4, pc}
 80030f0:	08015ca4 	.word	0x08015ca4

080030f4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 80030f4:	b510      	push	{r4, lr}
 80030f6:	4604      	mov	r4, r0
 80030f8:	f7ff fff2 	bl	80030e0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80030fc:	4620      	mov	r0, r4
 80030fe:	2118      	movs	r1, #24
 8003100:	f010 fe29 	bl	8013d56 <_ZdlPvj>
 8003104:	4620      	mov	r0, r4
 8003106:	bd10      	pop	{r4, pc}

08003108 <_ZN12FrontendHeapD1Ev>:
#ifndef FRONTENDHEAP_HPP
#define FRONTENDHEAP_HPP

#include <gui_generated/common/FrontendHeapBase.hpp>

class FrontendHeap : public FrontendHeapBase
 8003108:	b510      	push	{r4, lr}
 800310a:	4b09      	ldr	r3, [pc, #36]	@ (8003130 <_ZN12FrontendHeapD1Ev+0x28>)
 800310c:	6003      	str	r3, [r0, #0]
 800310e:	4604      	mov	r4, r0
 8003110:	f500 5031 	add.w	r0, r0, #11328	@ 0x2c40
 8003114:	3028      	adds	r0, #40	@ 0x28
 8003116:	f7ff ffb9 	bl	800308c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 800311a:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 800311e:	f7ff ffc9 	bl	80030b4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8003122:	f104 0014 	add.w	r0, r4, #20
 8003126:	f7ff ffdb 	bl	80030e0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800312a:	4620      	mov	r0, r4
 800312c:	bd10      	pop	{r4, pc}
 800312e:	bf00      	nop
 8003130:	08015d40 	.word	0x08015d40

08003134 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 8003134:	b508      	push	{r3, lr}
 8003136:	4802      	ldr	r0, [pc, #8]	@ (8003140 <__tcf_0+0xc>)
 8003138:	f7ff ffe6 	bl	8003108 <_ZN12FrontendHeapD1Ev>
 800313c:	bd08      	pop	{r3, pc}
 800313e:	bf00      	nop
 8003140:	200012b8 	.word	0x200012b8

08003144 <_ZN12FrontendHeapD0Ev>:
class FrontendHeap : public FrontendHeapBase
 8003144:	b510      	push	{r4, lr}
 8003146:	4604      	mov	r4, r0
 8003148:	f7ff ffde 	bl	8003108 <_ZN12FrontendHeapD1Ev>
 800314c:	4620      	mov	r0, r4
 800314e:	f642 51e4 	movw	r1, #11748	@ 0x2de4
 8003152:	f010 fe00 	bl	8013d56 <_ZdlPvj>
 8003156:	4620      	mov	r0, r4
 8003158:	bd10      	pop	{r4, pc}
	...

0800315c <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 240, 320);

void touchgfx_init()
{
 800315c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 8003160:	f000 f9b4 	bl	80034cc <_ZN14BitmapDatabase11getInstanceEv>
 8003164:	4605      	mov	r5, r0
 8003166:	f000 f9b5 	bl	80034d4 <_ZN14BitmapDatabase15getInstanceSizeEv>
 800316a:	2400      	movs	r4, #0
 800316c:	4601      	mov	r1, r0
 800316e:	4623      	mov	r3, r4
 8003170:	4628      	mov	r0, r5
 8003172:	4622      	mov	r2, r4
 8003174:	9400      	str	r4, [sp, #0]
 8003176:	f00d ff7b 	bl	8011070 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
    {
        texts = t;
 800317a:	4b26      	ldr	r3, [pc, #152]	@ (8003214 <touchgfx_init+0xb8>)
 800317c:	4a26      	ldr	r2, [pc, #152]	@ (8003218 <touchgfx_init+0xbc>)
        static FrontendHeap instance;
 800317e:	4d27      	ldr	r5, [pc, #156]	@ (800321c <touchgfx_init+0xc0>)
 8003180:	601a      	str	r2, [r3, #0]
    TypedText::registerTexts(&texts);
    Texts::setLanguage(0);
 8003182:	4620      	mov	r0, r4
 8003184:	f001 f8c0 	bl	8004308 <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 8003188:	4825      	ldr	r0, [pc, #148]	@ (8003220 <touchgfx_init+0xc4>)
 800318a:	f00d fed9 	bl	8010f40 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>
 800318e:	682b      	ldr	r3, [r5, #0]
 8003190:	f3bf 8f5b 	dmb	ish
 8003194:	07db      	lsls	r3, r3, #31
 8003196:	d436      	bmi.n	8003206 <touchgfx_init+0xaa>
 8003198:	4628      	mov	r0, r5
 800319a:	f010 fdde 	bl	8013d5a <__cxa_guard_acquire>
 800319e:	b390      	cbz	r0, 8003206 <touchgfx_init+0xaa>
     */
    MVPHeap(AbstractPartition& pres,
            AbstractPartition& scr,
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
 80031a0:	4c20      	ldr	r4, [pc, #128]	@ (8003224 <touchgfx_init+0xc8>)
          screenStorage(scr),
          transitionStorage(tra),
 80031a2:	4f21      	ldr	r7, [pc, #132]	@ (8003228 <touchgfx_init+0xcc>)
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
                     app(model, *this)
 80031a4:	4b21      	ldr	r3, [pc, #132]	@ (800322c <touchgfx_init+0xd0>)
 80031a6:	6023      	str	r3, [r4, #0]
          frontendApplication(app)
 80031a8:	f107 0620 	add.w	r6, r7, #32
        : presenterStorage(pres),
 80031ac:	f104 0014 	add.w	r0, r4, #20
          screenStorage(scr),
 80031b0:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
        : presenterStorage(pres),
 80031b4:	6060      	str	r0, [r4, #4]
          screenStorage(scr),
 80031b6:	f8c4 8008 	str.w	r8, [r4, #8]
          transitionStorage(tra),
 80031ba:	60e7      	str	r7, [r4, #12]
          frontendApplication(app)
 80031bc:	6126      	str	r6, [r4, #16]
 80031be:	f006 fba5 	bl	800990c <_ZN8touchgfx17AbstractPartitionC1Ev>
 80031c2:	4b1b      	ldr	r3, [pc, #108]	@ (8003230 <touchgfx_init+0xd4>)
 80031c4:	6163      	str	r3, [r4, #20]
 80031c6:	4640      	mov	r0, r8
 80031c8:	f006 fba0 	bl	800990c <_ZN8touchgfx17AbstractPartitionC1Ev>
 80031cc:	4b19      	ldr	r3, [pc, #100]	@ (8003234 <touchgfx_init+0xd8>)
 80031ce:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80031d0:	4638      	mov	r0, r7
 80031d2:	f006 fb9b 	bl	800990c <_ZN8touchgfx17AbstractPartitionC1Ev>
 80031d6:	f504 5300 	add.w	r3, r4, #8192	@ 0x2000
 80031da:	f603 407c 	addw	r0, r3, #3196	@ 0xc7c
 80031de:	4a16      	ldr	r2, [pc, #88]	@ (8003238 <touchgfx_init+0xdc>)
 80031e0:	f8c3 2c68 	str.w	r2, [r3, #3176]	@ 0xc68
 80031e4:	f001 f916 	bl	8004414 <_ZN5ModelC1Ev>
 80031e8:	4622      	mov	r2, r4
 80031ea:	f107 0114 	add.w	r1, r7, #20
 80031ee:	4630      	mov	r0, r6
 80031f0:	f001 f906 	bl	8004400 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
 80031f4:	4630      	mov	r0, r6
 80031f6:	f000 fae3 	bl	80037c0 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
        static FrontendHeap instance;
 80031fa:	4810      	ldr	r0, [pc, #64]	@ (800323c <touchgfx_init+0xe0>)
 80031fc:	f010 feb6 	bl	8013f6c <atexit>
 8003200:	4628      	mov	r0, r5
 8003202:	f010 fdb6 	bl	8013d72 <__cxa_guard_release>
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 8003206:	480e      	ldr	r0, [pc, #56]	@ (8003240 <touchgfx_init+0xe4>)
}
 8003208:	b002      	add	sp, #8
 800320a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    hal.initialize();
 800320e:	f7ff bc5b 	b.w	8002ac8 <_ZN11TouchGFXHAL10initializeEv>
 8003212:	bf00      	nop
 8003214:	20014fb0 	.word	0x20014fb0
 8003218:	20000480 	.word	0x20000480
 800321c:	200012b4 	.word	0x200012b4
 8003220:	20000010 	.word	0x20000010
 8003224:	200012b8 	.word	0x200012b8
 8003228:	20003f20 	.word	0x20003f20
 800322c:	08015d40 	.word	0x08015d40
 8003230:	08015ca4 	.word	0x08015ca4
 8003234:	08015cd8 	.word	0x08015cd8
 8003238:	08015d0c 	.word	0x08015d0c
 800323c:	08003135 	.word	0x08003135
 8003240:	20000404 	.word	0x20000404

08003244 <touchgfx_taskEntry>:
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 8003244:	4801      	ldr	r0, [pc, #4]	@ (800324c <touchgfx_taskEntry+0x8>)
 8003246:	f7ff bc51 	b.w	8002aec <_ZN11TouchGFXHAL9taskEntryEv>
 800324a:	bf00      	nop
 800324c:	20000404 	.word	0x20000404

08003250 <_GLOBAL__sub_I_touchgfx_init>:
}
 8003250:	b570      	push	{r4, r5, r6, lr}
static STM32DMA dma;
 8003252:	4e22      	ldr	r6, [pc, #136]	@ (80032dc <_GLOBAL__sub_I_touchgfx_init+0x8c>)
{
public:

    STM32TouchController() {}
 8003254:	4c22      	ldr	r4, [pc, #136]	@ (80032e0 <_GLOBAL__sub_I_touchgfx_init+0x90>)
static LCD16bpp display;
 8003256:	4d23      	ldr	r5, [pc, #140]	@ (80032e4 <_GLOBAL__sub_I_touchgfx_init+0x94>)
 8003258:	4b23      	ldr	r3, [pc, #140]	@ (80032e8 <_GLOBAL__sub_I_touchgfx_init+0x98>)
 800325a:	6023      	str	r3, [r4, #0]
static STM32DMA dma;
 800325c:	4630      	mov	r0, r6
 800325e:	f7ff fecd 	bl	8002ffc <_ZN8STM32DMAC1Ev>
static LCD16bpp display;
 8003262:	4628      	mov	r0, r5
 8003264:	f00e fd64 	bl	8011d30 <_ZN8touchgfx8LCD16bppC1Ev>
        : dma(dmaInterface),
 8003268:	4b20      	ldr	r3, [pc, #128]	@ (80032ec <_GLOBAL__sub_I_touchgfx_init+0x9c>)
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 800326a:	4821      	ldr	r0, [pc, #132]	@ (80032f0 <_GLOBAL__sub_I_touchgfx_init+0xa0>)
          touchController(touchCtrl),
 800326c:	60dc      	str	r4, [r3, #12]
          mcuInstrumentation(0),
 800326e:	2200      	movs	r2, #0
          refreshStrategy(REFRESH_STRATEGY_DEFAULT),
 8003270:	f44f 7180 	mov.w	r1, #256	@ 0x100
          auxiliaryLCD(0),
 8003274:	e9c3 1212 	strd	r1, r2, [r3, #72]	@ 0x48
          touchSampleRate(1),
 8003278:	491e      	ldr	r1, [pc, #120]	@ (80032f4 <_GLOBAL__sub_I_touchgfx_init+0xa4>)
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
        : drag(), listener(0), dragThresholdValue(0)
 800327a:	861a      	strh	r2, [r3, #48]	@ 0x30
          vSyncCompensationEnabled(false),
 800327c:	e9c3 121a 	strd	r1, r2, [r3, #104]	@ 0x68
          requestedOrientation(ORIENTATION_LANDSCAPE),
 8003280:	491d      	ldr	r1, [pc, #116]	@ (80032f8 <_GLOBAL__sub_I_touchgfx_init+0xa8>)
 8003282:	6799      	str	r1, [r3, #120]	@ 0x78
        instance = this;
 8003284:	491d      	ldr	r1, [pc, #116]	@ (80032fc <_GLOBAL__sub_I_touchgfx_init+0xac>)
          useAuxiliaryLCD(false),
 8003286:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
        instance = this;
 800328a:	600b      	str	r3, [r1, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 800328c:	21f0      	movs	r1, #240	@ 0xf0
 800328e:	8001      	strh	r1, [r0, #0]
 8003290:	481b      	ldr	r0, [pc, #108]	@ (8003300 <_GLOBAL__sub_I_touchgfx_init+0xb0>)
          lastY(0),
 8003292:	665a      	str	r2, [r3, #100]	@ 0x64
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 8003294:	8001      	strh	r1, [r0, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8003296:	481b      	ldr	r0, [pc, #108]	@ (8003304 <_GLOBAL__sub_I_touchgfx_init+0xb4>)
          updateMCULoad(0),
 8003298:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 800329c:	f44f 71a0 	mov.w	r1, #320	@ 0x140
          buttonController(0),
 80032a0:	e9c3 2204 	strd	r2, r2, [r3, #16]
 80032a4:	e9c3 2206 	strd	r2, r2, [r3, #24]
 80032a8:	e9c3 2208 	strd	r2, r2, [r3, #32]
 80032ac:	e9c3 220a 	strd	r2, r2, [r3, #40]	@ 0x28
          frameBuffer0(0),
 80032b0:	e9c3 220e 	strd	r2, r2, [r3, #56]	@ 0x38
          frameBuffer2(0),
 80032b4:	e9c3 2210 	strd	r2, r2, [r3, #64]	@ 0x40
        : x(0), y(0), width(0), height(0)
 80032b8:	e9c3 2214 	strd	r2, r2, [r3, #80]	@ 0x50
          lastX(0),
 80032bc:	e9c3 2217 	strd	r2, r2, [r3, #92]	@ 0x5c
          cc_begin(0),
 80032c0:	675a      	str	r2, [r3, #116]	@ 0x74
          lcdRef(display),
 80032c2:	e9c3 6501 	strd	r6, r5, [r3, #4]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 80032c6:	8001      	strh	r1, [r0, #0]
 80032c8:	480f      	ldr	r0, [pc, #60]	@ (8003308 <_GLOBAL__sub_I_touchgfx_init+0xb8>)
 80032ca:	8001      	strh	r1, [r0, #0]
        DISPLAY_ROTATION = rotate0;
 80032cc:	490f      	ldr	r1, [pc, #60]	@ (800330c <_GLOBAL__sub_I_touchgfx_init+0xbc>)
 80032ce:	700a      	strb	r2, [r1, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 80032d0:	2201      	movs	r2, #1
 80032d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
     * @param [in,out] display Reference to LCD interface.
     * @param [in,out] tc      Reference to Touch Controller driver.
     * @param width            Width of the display.
     * @param height           Height of the display.
     */
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 80032d6:	4a0e      	ldr	r2, [pc, #56]	@ (8003310 <_GLOBAL__sub_I_touchgfx_init+0xc0>)
 80032d8:	601a      	str	r2, [r3, #0]
}
 80032da:	bd70      	pop	{r4, r5, r6, pc}
 80032dc:	20000510 	.word	0x20000510
 80032e0:	200012b0 	.word	0x200012b0
 80032e4:	20000484 	.word	0x20000484
 80032e8:	0801578c 	.word	0x0801578c
 80032ec:	20000404 	.word	0x20000404
 80032f0:	20014f48 	.word	0x20014f48
 80032f4:	01000001 	.word	0x01000001
 80032f8:	01010000 	.word	0x01010000
 80032fc:	20014f54 	.word	0x20014f54
 8003300:	20014f4e 	.word	0x20014f4e
 8003304:	20014f4a 	.word	0x20014f4a
 8003308:	20014f50 	.word	0x20014f50
 800330c:	20014f4c 	.word	0x20014f4c
 8003310:	08015918 	.word	0x08015918

08003314 <_GLOBAL__sub_D_touchgfx_init>:
static STM32DMA dma;
 8003314:	4801      	ldr	r0, [pc, #4]	@ (800331c <_GLOBAL__sub_D_touchgfx_init+0x8>)
 8003316:	f7ff bd27 	b.w	8002d68 <_ZN8STM32DMAD1Ev>
 800331a:	bf00      	nop
 800331c:	20000510 	.word	0x20000510

08003320 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003320:	4b03      	ldr	r3, [pc, #12]	@ (8003330 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv+0x10>)
 8003322:	2290      	movs	r2, #144	@ 0x90
 8003324:	f883 235a 	strb.w	r2, [r3, #858]	@ 0x35a
 8003328:	f883 2358 	strb.w	r2, [r3, #856]	@ 0x358

void TouchGFXGeneratedHAL::configureInterrupts()
{
    NVIC_SetPriority(DMA2D_IRQn, 9);
    NVIC_SetPriority(LTDC_IRQn, 9);
}
 800332c:	4770      	bx	lr
 800332e:	bf00      	nop
 8003330:	e000e100 	.word	0xe000e100

08003334 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:
    NVIC_DisableIRQ(LTDC_IRQn);
}

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8003334:	4a09      	ldr	r2, [pc, #36]	@ (800335c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x28>)
 8003336:	490a      	ldr	r1, [pc, #40]	@ (8003360 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x2c>)
 8003338:	68d3      	ldr	r3, [r2, #12]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 800333a:	480a      	ldr	r0, [pc, #40]	@ (8003364 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x30>)
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 800333c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003340:	3b01      	subs	r3, #1
 8003342:	b29b      	uxth	r3, r3
 8003344:	800b      	strh	r3, [r1, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 8003346:	6911      	ldr	r1, [r2, #16]
 8003348:	f3c1 010a 	ubfx	r1, r1, #0, #11
 800334c:	3901      	subs	r1, #1
 800334e:	8001      	strh	r1, [r0, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 8003350:	6413      	str	r3, [r2, #64]	@ 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 8003352:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 8003354:	f043 0301 	orr.w	r3, r3, #1
 8003358:	6353      	str	r3, [r2, #52]	@ 0x34
}
 800335a:	4770      	bx	lr
 800335c:	40016800 	.word	0x40016800
 8003360:	2000409e 	.word	0x2000409e
 8003364:	2000409c 	.word	0x2000409c

08003368 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:
    HAL::endFrame();
}

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
    return (uint16_t*)LTDC_Layer1->CFBAR;
 8003368:	4b01      	ldr	r3, [pc, #4]	@ (8003370 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x8>)
 800336a:	f8d3 00ac 	ldr.w	r0, [r3, #172]	@ 0xac
}
 800336e:	4770      	bx	lr
 8003370:	40016800 	.word	0x40016800

08003374 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 8003374:	4b02      	ldr	r3, [pc, #8]	@ (8003380 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0xc>)

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 8003376:	2201      	movs	r2, #1
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 8003378:	f8c3 10ac 	str.w	r1, [r3, #172]	@ 0xac
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 800337c:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800337e:	4770      	bx	lr
 8003380:	40016800 	.word	0x40016800

08003384 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
{
 8003384:	b570      	push	{r4, r5, r6, lr}
 8003386:	4604      	mov	r4, r0
    HAL::initialize();
 8003388:	f006 fdbf 	bl	8009f0a <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 800338c:	6823      	ldr	r3, [r4, #0]
 800338e:	6e5d      	ldr	r5, [r3, #100]	@ 0x64
 8003390:	f00a f9f0 	bl	800d774 <_ZN8touchgfx11Application11getInstanceEv>
 8003394:	4601      	mov	r1, r0
 8003396:	4620      	mov	r0, r4
 8003398:	47a8      	blx	r5
    setFrameBufferStartAddresses((void*)frameBuf, (void*)(frameBuf + sizeof(frameBuf) / (sizeof(uint32_t) * 2)), (void*)0);
 800339a:	6823      	ldr	r3, [r4, #0]
 800339c:	4a05      	ldr	r2, [pc, #20]	@ (80033b4 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x30>)
 800339e:	f8d3 5088 	ldr.w	r5, [r3, #136]	@ 0x88
 80033a2:	4620      	mov	r0, r4
 80033a4:	46ac      	mov	ip, r5
 80033a6:	2300      	movs	r3, #0
}
 80033a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    setFrameBufferStartAddresses((void*)frameBuf, (void*)(frameBuf + sizeof(frameBuf) / (sizeof(uint32_t) * 2)), (void*)0);
 80033ac:	f5a2 3116 	sub.w	r1, r2, #153600	@ 0x25800
 80033b0:	4760      	bx	ip
 80033b2:	bf00      	nop
 80033b4:	d004b000 	.word	0xd004b000

080033b8 <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:
    return HAL::beginFrame();
 80033b8:	f006 bd8e 	b.w	8009ed8 <_ZN8touchgfx3HAL10beginFrameEv>

080033bc <_ZN20TouchGFXGeneratedHAL8endFrameEv>:
    if (frameBufferUpdatedThisFrame)
 80033bc:	f890 304b 	ldrb.w	r3, [r0, #75]	@ 0x4b
 80033c0:	b113      	cbz	r3, 80033c8 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0xc>
        refreshRequested = true;
 80033c2:	4b02      	ldr	r3, [pc, #8]	@ (80033cc <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x10>)
 80033c4:	2201      	movs	r2, #1
 80033c6:	701a      	strb	r2, [r3, #0]
    HAL::endFrame();
 80033c8:	f006 bd92 	b.w	8009ef0 <_ZN8touchgfx3HAL8endFrameEv>
 80033cc:	200040a0 	.word	0x200040a0

080033d0 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
    HAL::flushFrameBuffer(rect);
 80033d0:	f006 bd4c 	b.w	8009e6c <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>

080033d4 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:
}

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
    return HAL::blockCopy(dest, src, numBytes);
 80033d4:	f006 bead 	b.w	800a132 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>

080033d8 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033d8:	4b03      	ldr	r3, [pc, #12]	@ (80033e8 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv+0x10>)
 80033da:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80033de:	609a      	str	r2, [r3, #8]
 80033e0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80033e4:	609a      	str	r2, [r3, #8]
}
 80033e6:	4770      	bx	lr
 80033e8:	e000e100 	.word	0xe000e100

080033ec <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033ec:	4b08      	ldr	r3, [pc, #32]	@ (8003410 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv+0x24>)
 80033ee:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80033f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 80033f6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80033fa:	f3bf 8f6f 	isb	sy
 80033fe:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003402:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 8003406:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800340a:	f3bf 8f6f 	isb	sy
}
 800340e:	4770      	bx	lr
 8003410:	e000e100 	.word	0xe000e100

08003414 <HAL_LTDC_LineEventCallback>:
}

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef* hltdc)
    {
 8003414:	b510      	push	{r4, lr}
        return instance;
 8003416:	4c14      	ldr	r4, [pc, #80]	@ (8003468 <HAL_LTDC_LineEventCallback+0x54>)
        if (!HAL::getInstance())
 8003418:	6823      	ldr	r3, [r4, #0]
 800341a:	b323      	cbz	r3, 8003466 <HAL_LTDC_LineEventCallback+0x52>
        {
            return;
        }

        if (LTDC->LIPCR == lcd_int_active_line)
 800341c:	4b13      	ldr	r3, [pc, #76]	@ (800346c <HAL_LTDC_LineEventCallback+0x58>)
 800341e:	4a14      	ldr	r2, [pc, #80]	@ (8003470 <HAL_LTDC_LineEventCallback+0x5c>)
 8003420:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003422:	8811      	ldrh	r1, [r2, #0]
 8003424:	428b      	cmp	r3, r1
 8003426:	d113      	bne.n	8003450 <HAL_LTDC_LineEventCallback+0x3c>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 8003428:	4b12      	ldr	r3, [pc, #72]	@ (8003474 <HAL_LTDC_LineEventCallback+0x60>)
 800342a:	8819      	ldrh	r1, [r3, #0]
 800342c:	f002 ffb8 	bl	80063a0 <HAL_LTDC_ProgramLineEvent>
 8003430:	6822      	ldr	r2, [r4, #0]
        vSyncCnt++;
 8003432:	f892 306a 	ldrb.w	r3, [r2, #106]	@ 0x6a
 8003436:	3301      	adds	r3, #1
 8003438:	f882 306a 	strb.w	r3, [r2, #106]	@ 0x6a
            HAL::getInstance()->vSync();
            OSWrappers::signalVSync();
 800343c:	f7ff fc42 	bl	8002cc4 <_ZN8touchgfx10OSWrappers11signalVSyncEv>

            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 8003440:	6820      	ldr	r0, [r4, #0]
 8003442:	f007 faad 	bl	800a9a0 <_ZN8touchgfx3HAL16swapFrameBuffersEv>

            // Signal to the framework that display update has finished.
            HAL::getInstance()->frontPorchEntered();
            GPIO::clear(GPIO::VSYNC_FREQ);
        }
    }
 8003446:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            GPIO::set(GPIO::VSYNC_FREQ);
 800344a:	2000      	movs	r0, #0
 800344c:	f7ff ba82 	b.w	8002954 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 8003450:	f002 ffa6 	bl	80063a0 <HAL_LTDC_ProgramLineEvent>
        return instance;
 8003454:	6820      	ldr	r0, [r4, #0]
        allowDMATransfers();
 8003456:	6803      	ldr	r3, [r0, #0]
 8003458:	6a1b      	ldr	r3, [r3, #32]
 800345a:	4798      	blx	r3
    }
 800345c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            GPIO::clear(GPIO::VSYNC_FREQ);
 8003460:	2000      	movs	r0, #0
 8003462:	f7ff baa1 	b.w	80029a8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
    }
 8003466:	bd10      	pop	{r4, pc}
 8003468:	20014f54 	.word	0x20014f54
 800346c:	40016800 	.word	0x40016800
 8003470:	2000409e 	.word	0x2000409e
 8003474:	2000409c 	.word	0x2000409c

08003478 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId MARIO = 4;    // Grand9KPixel_15_4bpp
    static const touchgfx::FontId GAMEOVER = 5; // Grand9KPixel_30_4bpp
    static const uint16_t NUMBER_OF_FONTS = 6;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 8003478:	4770      	bx	lr

0800347a <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 800347a:	b508      	push	{r3, lr}
    switch (typography)
 800347c:	2905      	cmp	r1, #5
 800347e:	d81c      	bhi.n	80034ba <_ZN23ApplicationFontProvider7getFontEt+0x40>
 8003480:	e8df f001 	tbb	[pc, r1]
 8003484:	0f0b0703 	.word	0x0f0b0703
 8003488:	1713      	.short	0x1713
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 800348a:	f000 ff89 	bl	80043a0 <_ZN17TypedTextDatabase8getFontsEv>
 800348e:	6800      	ldr	r0, [r0, #0]
        // Grand9KPixel_30_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[5]);
    default:
        return 0;
    }
}
 8003490:	bd08      	pop	{r3, pc}
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 8003492:	f000 ff85 	bl	80043a0 <_ZN17TypedTextDatabase8getFontsEv>
 8003496:	6840      	ldr	r0, [r0, #4]
 8003498:	e7fa      	b.n	8003490 <_ZN23ApplicationFontProvider7getFontEt+0x16>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 800349a:	f000 ff81 	bl	80043a0 <_ZN17TypedTextDatabase8getFontsEv>
 800349e:	6880      	ldr	r0, [r0, #8]
 80034a0:	e7f6      	b.n	8003490 <_ZN23ApplicationFontProvider7getFontEt+0x16>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[3]);
 80034a2:	f000 ff7d 	bl	80043a0 <_ZN17TypedTextDatabase8getFontsEv>
 80034a6:	68c0      	ldr	r0, [r0, #12]
 80034a8:	e7f2      	b.n	8003490 <_ZN23ApplicationFontProvider7getFontEt+0x16>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[4]);
 80034aa:	f000 ff79 	bl	80043a0 <_ZN17TypedTextDatabase8getFontsEv>
 80034ae:	6900      	ldr	r0, [r0, #16]
 80034b0:	e7ee      	b.n	8003490 <_ZN23ApplicationFontProvider7getFontEt+0x16>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[5]);
 80034b2:	f000 ff75 	bl	80043a0 <_ZN17TypedTextDatabase8getFontsEv>
 80034b6:	6940      	ldr	r0, [r0, #20]
 80034b8:	e7ea      	b.n	8003490 <_ZN23ApplicationFontProvider7getFontEt+0x16>
    switch (typography)
 80034ba:	2000      	movs	r0, #0
 80034bc:	e7e8      	b.n	8003490 <_ZN23ApplicationFontProvider7getFontEt+0x16>

080034be <_ZN23ApplicationFontProviderD0Ev>:
 80034be:	b510      	push	{r4, lr}
 80034c0:	2104      	movs	r1, #4
 80034c2:	4604      	mov	r4, r0
 80034c4:	f010 fc47 	bl	8013d56 <_ZdlPvj>
 80034c8:	4620      	mov	r0, r4
 80034ca:	bd10      	pop	{r4, pc}

080034cc <_ZN14BitmapDatabase11getInstanceEv>:
namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
    return bitmap_database;
}
 80034cc:	4800      	ldr	r0, [pc, #0]	@ (80034d0 <_ZN14BitmapDatabase11getInstanceEv+0x4>)
 80034ce:	4770      	bx	lr
 80034d0:	08015d60 	.word	0x08015d60

080034d4 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
}
 80034d4:	2014      	movs	r0, #20
 80034d6:	4770      	bx	lr

080034d8 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 80034d8:	b513      	push	{r0, r1, r4, lr}
 80034da:	2400      	movs	r4, #0
    {
        if (unicode == 0)
 80034dc:	b151      	cbz	r1, 80034f4 <_ZNK8touchgfx4Font8getGlyphEt+0x1c>
        {
            return 0;
        }
        const uint8_t* dummyPixelDataPointer = 0;
        uint8_t bitsPerPixelDummy = 0;
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 80034de:	6803      	ldr	r3, [r0, #0]
        const uint8_t* dummyPixelDataPointer = 0;
 80034e0:	9401      	str	r4, [sp, #4]
        uint8_t bitsPerPixelDummy = 0;
 80034e2:	f88d 4003 	strb.w	r4, [sp, #3]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 80034e6:	aa01      	add	r2, sp, #4
 80034e8:	689c      	ldr	r4, [r3, #8]
 80034ea:	f10d 0303 	add.w	r3, sp, #3
 80034ee:	47a0      	blx	r4
        return glyph;
    }
 80034f0:	b002      	add	sp, #8
 80034f2:	bd10      	pop	{r4, pc}
            return 0;
 80034f4:	4608      	mov	r0, r1
 80034f6:	e7fb      	b.n	80034f0 <_ZNK8touchgfx4Font8getGlyphEt+0x18>

080034f8 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
    {
        return fallbackCharacter;
    }
 80034f8:	89c0      	ldrh	r0, [r0, #14]
 80034fa:	4770      	bx	lr

080034fc <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
    {
        return ellipsisCharacter;
    }
 80034fc:	8a00      	ldrh	r0, [r0, #16]
 80034fe:	4770      	bx	lr

08003500 <_ZNK8touchgfx4Font11getBaselineEv>:
     *       getHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getBaseline() const
    {
        return baselineHeight;
    }
 8003500:	88c0      	ldrh	r0, [r0, #6]
 8003502:	4770      	bx	lr

08003504 <_ZNK8touchgfx4Font9getHeightEv>:
     * @return The font height.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getHeight() const
    {
        return fontHeight;
    }
 8003504:	8880      	ldrh	r0, [r0, #4]
 8003506:	4770      	bx	lr

08003508 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
    {
        return bPerPixel;
 8003508:	7a80      	ldrb	r0, [r0, #10]
    }
 800350a:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 800350e:	4770      	bx	lr

08003510 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
    {
        return bAlignRow;
 8003510:	7a80      	ldrb	r0, [r0, #10]
    }
 8003512:	09c0      	lsrs	r0, r0, #7
 8003514:	4770      	bx	lr

08003516 <_ZNK8touchgfx4Font17isVectorBasedFontEv>:
     * @return True if this Font is vector based.
     */
    virtual bool isVectorBasedFont() const
    {
        return false;
    }
 8003516:	2000      	movs	r0, #0
 8003518:	4770      	bx	lr
	...

0800351c <_ZNK8touchgfx4Font14getScaleFactorEv>:
     * @return The scale factor
     */
    virtual float getScaleFactor() const
    {
        return 0;
    }
 800351c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8003524 <_ZNK8touchgfx4Font14getScaleFactorEv+0x8>
 8003520:	4770      	bx	lr
 8003522:	bf00      	nop
 8003524:	00000000 	.word	0x00000000

08003528 <_ZN8touchgfx9TypedTextD1Ev>:
    }
 8003528:	4770      	bx	lr

0800352a <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 800352a:	b510      	push	{r4, lr}
    }
 800352c:	2108      	movs	r1, #8
    virtual ~TypedText()
 800352e:	4604      	mov	r4, r0
    }
 8003530:	f010 fc11 	bl	8013d56 <_ZdlPvj>
 8003534:	4620      	mov	r0, r4
 8003536:	bd10      	pop	{r4, pc}

08003538 <_ZN8touchgfx11Application19changeToStartScreenEv>:
     *       this is explicitly done in your
     *       FrontendApplication::changeToStartScreen().
     */
    virtual void changeToStartScreen()
    {
    }
 8003538:	4770      	bx	lr

0800353a <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
    {
        (void)screenId; // Unused variable
    }
 800353a:	4770      	bx	lr

0800353c <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
    {
        redraw = rect;
 800353c:	f500 7398 	add.w	r3, r0, #304	@ 0x130
 8003540:	6808      	ldr	r0, [r1, #0]
 8003542:	6849      	ldr	r1, [r1, #4]
 8003544:	c303      	stmia	r3!, {r0, r1}
    }
 8003546:	4770      	bx	lr

08003548 <_ZN8touchgfx10Transition8tearDownEv>:
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
    {
    }
 8003548:	4770      	bx	lr

0800354a <_ZN8touchgfx10Transition4initEv>:
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
    {
    }
 800354a:	4770      	bx	lr

0800354c <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
    {
        screenContainer = &cont;
 800354c:	6041      	str	r1, [r0, #4]
    }
 800354e:	4770      	bx	lr

08003550 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 8003550:	4770      	bx	lr
	...

08003554 <_ZN23FrontendApplicationBase19changeToStartScreenEv>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8003554:	4b06      	ldr	r3, [pc, #24]	@ (8003570 <_ZN23FrontendApplicationBase19changeToStartScreenEv+0x1c>)
 8003556:	f8c0 314c 	str.w	r3, [r0, #332]	@ 0x14c
 800355a:	2300      	movs	r3, #0
 800355c:	f8c0 3150 	str.w	r3, [r0, #336]	@ 0x150
// Screen1

void FrontendApplicationBase::gotoScreen1ScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
 8003560:	f500 73a2 	add.w	r3, r0, #324	@ 0x144
 8003564:	f8c0 0148 	str.w	r0, [r0, #328]	@ 0x148
 8003568:	f8c0 3140 	str.w	r3, [r0, #320]	@ 0x140

    virtual void changeToStartScreen()
    {
        gotoScreen1ScreenNoTransition();
    }
 800356c:	4770      	bx	lr
 800356e:	bf00      	nop
 8003570:	08003615 	.word	0x08003615

08003574 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
    {
        done = true;
 8003574:	2301      	movs	r3, #1
 8003576:	7203      	strb	r3, [r0, #8]
    }
 8003578:	4770      	bx	lr

0800357a <_ZN8touchgfx12NoTransitionD1Ev>:
class NoTransition : public Transition
 800357a:	4770      	bx	lr

0800357c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
 800357c:	4770      	bx	lr

0800357e <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 800357e:	b410      	push	{r4}
    {
        (pobject->*pmemfun)();
 8003580:	68c2      	ldr	r2, [r0, #12]
 8003582:	6841      	ldr	r1, [r0, #4]
 8003584:	1054      	asrs	r4, r2, #1
    virtual void execute()
 8003586:	4603      	mov	r3, r0
        (pobject->*pmemfun)();
 8003588:	eb01 0062 	add.w	r0, r1, r2, asr #1
 800358c:	07d2      	lsls	r2, r2, #31
 800358e:	bf48      	it	mi
 8003590:	590a      	ldrmi	r2, [r1, r4]
 8003592:	689b      	ldr	r3, [r3, #8]
    }
 8003594:	f85d 4b04 	ldr.w	r4, [sp], #4
        (pobject->*pmemfun)();
 8003598:	bf48      	it	mi
 800359a:	58d3      	ldrmi	r3, [r2, r3]
 800359c:	4718      	bx	r3

0800359e <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 800359e:	4603      	mov	r3, r0
    {
        return (pobject != 0) && (pmemfun != 0);
 80035a0:	6840      	ldr	r0, [r0, #4]
 80035a2:	b130      	cbz	r0, 80035b2 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x14>
 80035a4:	689a      	ldr	r2, [r3, #8]
 80035a6:	b91a      	cbnz	r2, 80035b0 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x12>
 80035a8:	68d8      	ldr	r0, [r3, #12]
 80035aa:	f000 0001 	and.w	r0, r0, #1
 80035ae:	4770      	bx	lr
 80035b0:	2001      	movs	r0, #1
    }
 80035b2:	4770      	bx	lr

080035b4 <_ZN8touchgfx12NoTransitionD0Ev>:
 80035b4:	b510      	push	{r4, lr}
 80035b6:	210c      	movs	r1, #12
 80035b8:	4604      	mov	r4, r0
 80035ba:	f010 fbcc 	bl	8013d56 <_ZdlPvj>
 80035be:	4620      	mov	r0, r4
 80035c0:	bd10      	pop	{r4, pc}

080035c2 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 80035c2:	b510      	push	{r4, lr}
 80035c4:	2110      	movs	r1, #16
 80035c6:	4604      	mov	r4, r0
 80035c8:	f010 fbc5 	bl	8013d56 <_ZdlPvj>
 80035cc:	4620      	mov	r0, r4
 80035ce:	bd10      	pop	{r4, pc}

080035d0 <_ZN23FrontendApplicationBaseD0Ev>:
    virtual ~FrontendApplicationBase() { }
 80035d0:	b510      	push	{r4, lr}
 80035d2:	f44f 71ae 	mov.w	r1, #348	@ 0x15c
 80035d6:	4604      	mov	r4, r0
 80035d8:	f010 fbbd 	bl	8013d56 <_ZdlPvj>
 80035dc:	4620      	mov	r0, r4
 80035de:	bd10      	pop	{r4, pc}

080035e0 <_ZN8touchgfx10Transition10invalidateEv>:
    virtual void invalidate()
 80035e0:	b510      	push	{r4, lr}
        Application::getInstance()->invalidate();
 80035e2:	f00a f8c7 	bl	800d774 <_ZN8touchgfx11Application11getInstanceEv>
 80035e6:	6803      	ldr	r3, [r0, #0]
    }
 80035e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Application::getInstance()->invalidate();
 80035ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035ee:	4718      	bx	r3

080035f0 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 80035f0:	b510      	push	{r4, lr}
 80035f2:	4604      	mov	r4, r0
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 80035f4:	f8d0 0140 	ldr.w	r0, [r0, #320]	@ 0x140
 80035f8:	b158      	cbz	r0, 8003612 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
 80035fa:	6803      	ldr	r3, [r0, #0]
 80035fc:	68db      	ldr	r3, [r3, #12]
 80035fe:	4798      	blx	r3
 8003600:	b138      	cbz	r0, 8003612 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
        {
            pendingScreenTransitionCallback->execute();
 8003602:	f8d4 0140 	ldr.w	r0, [r4, #320]	@ 0x140
 8003606:	6803      	ldr	r3, [r0, #0]
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 800360c:	2300      	movs	r3, #0
 800360e:	f8c4 3140 	str.w	r3, [r4, #320]	@ 0x140
    }
 8003612:	bd10      	pop	{r4, pc}

08003614 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv>:
}

void FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl()
{
 8003614:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8003618:	e9d0 6a55 	ldrd	r6, sl, [r0, #340]	@ 0x154
{
 800361c:	4607      	mov	r7, r0
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800361e:	68b0      	ldr	r0, [r6, #8]
 8003620:	6803      	ldr	r3, [r0, #0]
 8003622:	6a1b      	ldr	r3, [r3, #32]
 8003624:	4798      	blx	r3
 8003626:	f642 4333 	movw	r3, #11315	@ 0x2c33
 800362a:	4298      	cmp	r0, r3
 800362c:	d805      	bhi.n	800363a <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x26>
 800362e:	4b44      	ldr	r3, [pc, #272]	@ (8003740 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x12c>)
 8003630:	4a44      	ldr	r2, [pc, #272]	@ (8003744 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x130>)
 8003632:	21a3      	movs	r1, #163	@ 0xa3
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8003634:	4844      	ldr	r0, [pc, #272]	@ (8003748 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x134>)
 8003636:	f010 fc7b 	bl	8013f30 <__assert_func>
 800363a:	6870      	ldr	r0, [r6, #4]
 800363c:	6803      	ldr	r3, [r0, #0]
 800363e:	6a1b      	ldr	r3, [r3, #32]
 8003640:	4798      	blx	r3
 8003642:	280f      	cmp	r0, #15
 8003644:	d803      	bhi.n	800364e <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x3a>
 8003646:	4b41      	ldr	r3, [pc, #260]	@ (800374c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x138>)
 8003648:	4a3e      	ldr	r2, [pc, #248]	@ (8003744 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x130>)
 800364a:	21a4      	movs	r1, #164	@ 0xa4
 800364c:	e7f2      	b.n	8003634 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x20>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800364e:	68f0      	ldr	r0, [r6, #12]
 8003650:	6803      	ldr	r3, [r0, #0]
 8003652:	6a1b      	ldr	r3, [r3, #32]
 8003654:	4798      	blx	r3
 8003656:	280b      	cmp	r0, #11
 8003658:	d803      	bhi.n	8003662 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x4e>
 800365a:	4b3d      	ldr	r3, [pc, #244]	@ (8003750 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x13c>)
 800365c:	4a39      	ldr	r2, [pc, #228]	@ (8003744 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x130>)
 800365e:	21a5      	movs	r1, #165	@ 0xa5
 8003660:	e7e8      	b.n	8003634 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x20>
    Application::getInstance()->clearAllTimerWidgets();
 8003662:	f00a f887 	bl	800d774 <_ZN8touchgfx11Application11getInstanceEv>
    if (*currentTrans)
 8003666:	f8df 90f0 	ldr.w	r9, [pc, #240]	@ 8003758 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x144>

    /** Clears all currently registered timer widgets. */

    void clearAllTimerWidgets()
    {
        timerWidgets.clear();
 800366a:	3004      	adds	r0, #4
 800366c:	f00a f8a7 	bl	800d7be <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 8003670:	f8d9 0000 	ldr.w	r0, [r9]
 8003674:	b110      	cbz	r0, 800367c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x68>
        (*currentTrans)->tearDown();
 8003676:	6803      	ldr	r3, [r0, #0]
 8003678:	68db      	ldr	r3, [r3, #12]
 800367a:	4798      	blx	r3
    if (*currentTrans)
 800367c:	f8d9 0000 	ldr.w	r0, [r9]
 8003680:	b110      	cbz	r0, 8003688 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x74>
        (*currentTrans)->~Transition();
 8003682:	6803      	ldr	r3, [r0, #0]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4798      	blx	r3
    if (*currentScreen)
 8003688:	f8df 80d0 	ldr.w	r8, [pc, #208]	@ 800375c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x148>
 800368c:	f8d8 0000 	ldr.w	r0, [r8]
 8003690:	b110      	cbz	r0, 8003698 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x84>
        (*currentScreen)->tearDownScreen();
 8003692:	6803      	ldr	r3, [r0, #0]
 8003694:	695b      	ldr	r3, [r3, #20]
 8003696:	4798      	blx	r3
    if (*currentPresenter)
 8003698:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 800369c:	b110      	cbz	r0, 80036a4 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x90>
        (*currentPresenter)->deactivate();
 800369e:	6803      	ldr	r3, [r0, #0]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	4798      	blx	r3
    if (*currentScreen)
 80036a4:	f8d8 0000 	ldr.w	r0, [r8]
 80036a8:	b110      	cbz	r0, 80036b0 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x9c>
        (*currentScreen)->~Screen();
 80036aa:	6803      	ldr	r3, [r0, #0]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4798      	blx	r3
    if (*currentPresenter)
 80036b0:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 80036b4:	b110      	cbz	r0, 80036bc <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0xa8>
        (*currentPresenter)->~Presenter();
 80036b6:	6803      	ldr	r3, [r0, #0]
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	4798      	blx	r3

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 80036bc:	68f0      	ldr	r0, [r6, #12]
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
    {
        return *static_cast<T*>(element(index));
 80036be:	6803      	ldr	r3, [r0, #0]
 80036c0:	2100      	movs	r1, #0
 80036c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036c4:	4798      	blx	r3
        : screenContainer(0), done(false)
 80036c6:	f04f 0b00 	mov.w	fp, #0
 80036ca:	4b22      	ldr	r3, [pc, #136]	@ (8003754 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x140>)
 80036cc:	f8c0 b004 	str.w	fp, [r0, #4]
 80036d0:	4604      	mov	r4, r0
 80036d2:	f880 b008 	strb.w	fp, [r0, #8]
 80036d6:	6003      	str	r3, [r0, #0]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 80036d8:	68b0      	ldr	r0, [r6, #8]
 80036da:	6803      	ldr	r3, [r0, #0]
 80036dc:	4659      	mov	r1, fp
 80036de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036e0:	4798      	blx	r3
 80036e2:	4605      	mov	r5, r0
 80036e4:	f000 ff46 	bl	8004574 <_ZN11Screen1ViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 80036e8:	6870      	ldr	r0, [r6, #4]
 80036ea:	6803      	ldr	r3, [r0, #0]
 80036ec:	4659      	mov	r1, fp
 80036ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036f0:	4798      	blx	r3
 80036f2:	4629      	mov	r1, r5
 80036f4:	4606      	mov	r6, r0
 80036f6:	f000 fea7 	bl	8004448 <_ZN16Screen1PresenterC1ER11Screen1View>
    *currentTrans = newTransition;
    *currentPresenter = newPresenter;
    *currentScreen = newScreen;
    model->bind(newPresenter);
 80036fa:	1d33      	adds	r3, r6, #4
    *currentPresenter = newPresenter;
 80036fc:	f8c7 613c 	str.w	r6, [r7, #316]	@ 0x13c
public:
    Model();
    long modelTickCount = 0;
    void bind(ModelListener* listener)
    {
        modelListener = listener;
 8003700:	f8ca 3008 	str.w	r3, [sl, #8]
    newScreen->setupScreen();
 8003704:	682b      	ldr	r3, [r5, #0]
    
    virtual ~ModelListener() {}

    void bind(Model* m)
    {
        model = m;
 8003706:	f8c6 a008 	str.w	sl, [r6, #8]
 800370a:	4628      	mov	r0, r5
 800370c:	68db      	ldr	r3, [r3, #12]
    *currentTrans = newTransition;
 800370e:	f8c9 4000 	str.w	r4, [r9]
    *currentScreen = newScreen;
 8003712:	f8c8 5000 	str.w	r5, [r8]
     *
     * @param [in] newPresenter The specific Presenter to be associated with the View.
     */
    void bind(T& newPresenter)
    {
        presenter = &newPresenter;
 8003716:	63ee      	str	r6, [r5, #60]	@ 0x3c
    newScreen->setupScreen();
 8003718:	4798      	blx	r3
    newPresenter->activate();
 800371a:	6833      	ldr	r3, [r6, #0]
 800371c:	4630      	mov	r0, r6
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8003722:	4621      	mov	r1, r4
 8003724:	4628      	mov	r0, r5
 8003726:	f00b fccb 	bl	800f0c0 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800372a:	6823      	ldr	r3, [r4, #0]
 800372c:	4620      	mov	r0, r4
 800372e:	691b      	ldr	r3, [r3, #16]
 8003730:	4798      	blx	r3
    newTransition->invalidate();
 8003732:	6823      	ldr	r3, [r4, #0]
 8003734:	695b      	ldr	r3, [r3, #20]
 8003736:	4620      	mov	r0, r4
}
 8003738:	b001      	add	sp, #4
 800373a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800373e:	4718      	bx	r3
 8003740:	08015f00 	.word	0x08015f00
 8003744:	08015f8e 	.word	0x08015f8e
 8003748:	08016060 	.word	0x08016060
 800374c:	080160a7 	.word	0x080160a7
 8003750:	0801614a 	.word	0x0801614a
 8003754:	08016264 	.word	0x08016264
 8003758:	20014f94 	.word	0x20014f94
 800375c:	20014f90 	.word	0x20014f90

08003760 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 8003760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003762:	4604      	mov	r4, r0
 8003764:	4617      	mov	r7, r2
 8003766:	460e      	mov	r6, r1
          pendingScreenTransitionCallback(0)
 8003768:	f00a f8c6 	bl	800d8f8 <_ZN8touchgfx11ApplicationC1Ev>
        instance = this;
 800376c:	4b10      	ldr	r3, [pc, #64]	@ (80037b0 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x50>)
        : currentPresenter(0),
 800376e:	2500      	movs	r5, #0
      model(m)
 8003770:	e9c4 7655 	strd	r7, r6, [r4, #340]	@ 0x154
        return instance;
 8003774:	4e0f      	ldr	r6, [pc, #60]	@ (80037b4 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x54>)
        instance = this;
 8003776:	601c      	str	r4, [r3, #0]
        : pobject(0), pmemfun(0)
 8003778:	e9c4 5553 	strd	r5, r5, [r4, #332]	@ 0x14c
 800377c:	4b0e      	ldr	r3, [pc, #56]	@ (80037b8 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x58>)
 800377e:	6830      	ldr	r0, [r6, #0]
 8003780:	6023      	str	r3, [r4, #0]
 8003782:	4b0e      	ldr	r3, [pc, #56]	@ (80037bc <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x5c>)
 8003784:	e9c4 3551 	strd	r3, r5, [r4, #324]	@ 0x144
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 8003788:	6803      	ldr	r3, [r0, #0]
 800378a:	4629      	mov	r1, r5
 800378c:	689b      	ldr	r3, [r3, #8]
          pendingScreenTransitionCallback(0)
 800378e:	e9c4 554f 	strd	r5, r5, [r4, #316]	@ 0x13c
 8003792:	4798      	blx	r3
    touchgfx::Texts::setLanguage(GB);
 8003794:	4628      	mov	r0, r5
 8003796:	f000 fdb7 	bl	8004308 <_ZN8touchgfx5Texts11setLanguageEt>
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 800379a:	6833      	ldr	r3, [r6, #0]
 800379c:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 80037a0:	b10a      	cbz	r2, 80037a6 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x46>
 80037a2:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80037a4:	b900      	cbnz	r0, 80037a8 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x48>
        return instance->lcdRef;
 80037a6:	6898      	ldr	r0, [r3, #8]
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableDecompressorL8_L4();
 80037a8:	f00f fda8 	bl	80132fc <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev>
}
 80037ac:	4620      	mov	r0, r4
 80037ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80037b0:	20014fa0 	.word	0x20014fa0
 80037b4:	20014f54 	.word	0x20014f54
 80037b8:	08016210 	.word	0x08016210
 80037bc:	080161f8 	.word	0x080161f8

080037c0 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 80037c0:	4b06      	ldr	r3, [pc, #24]	@ (80037dc <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv+0x1c>)
 80037c2:	f8c0 314c 	str.w	r3, [r0, #332]	@ 0x14c
 80037c6:	2300      	movs	r3, #0
 80037c8:	f8c0 3150 	str.w	r3, [r0, #336]	@ 0x150
    pendingScreenTransitionCallback = &transitionCallback;
 80037cc:	f500 73a2 	add.w	r3, r0, #324	@ 0x144
 80037d0:	f8c0 0148 	str.w	r0, [r0, #328]	@ 0x148
 80037d4:	f8c0 3140 	str.w	r3, [r0, #320]	@ 0x140
}
 80037d8:	4770      	bx	lr
 80037da:	bf00      	nop
 80037dc:	08003615 	.word	0x08003615

080037e0 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
    {
        return gsubTable;
    }
 80037e0:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 80037e2:	4770      	bx	lr

080037e4 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return arabicTable;
    }
 80037e4:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 80037e6:	4770      	bx	lr

080037e8 <_ZN8touchgfx13GeneratedFontD1Ev>:
class GeneratedFont : public ConstFont
 80037e8:	4770      	bx	lr

080037ea <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:
}

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 80037ea:	888b      	ldrh	r3, [r1, #4]
 80037ec:	69c0      	ldr	r0, [r0, #28]
 80037ee:	680a      	ldr	r2, [r1, #0]
 80037f0:	0adb      	lsrs	r3, r3, #11
 80037f2:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
}
 80037f6:	4410      	add	r0, r2
 80037f8:	4770      	bx	lr

080037fa <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 80037fa:	b510      	push	{r4, lr}
 80037fc:	4604      	mov	r4, r0
    if (!glyph || glyph->kerningTableSize == 0)
 80037fe:	b1ba      	cbz	r2, 8003830 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
 8003800:	7b10      	ldrb	r0, [r2, #12]
 8003802:	b168      	cbz	r0, 8003820 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 8003804:	7b53      	ldrb	r3, [r2, #13]
 8003806:	7ad2      	ldrb	r2, [r2, #11]
 8003808:	021b      	lsls	r3, r3, #8
 800380a:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
    {
        return 0;
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 800380e:	431a      	orrs	r2, r3
 8003810:	6a23      	ldr	r3, [r4, #32]
 8003812:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
    {
        if (prevChar == kerndata->unicodePrevChar)
 8003816:	881a      	ldrh	r2, [r3, #0]
 8003818:	428a      	cmp	r2, r1
 800381a:	d102      	bne.n	8003822 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x28>
        {
            return kerndata->distance;
 800381c:	f993 0002 	ldrsb.w	r0, [r3, #2]
        {
            break;
        }
    }
    return 0;
}
 8003820:	bd10      	pop	{r4, pc}
        if (prevChar < kerndata->unicodePrevChar)
 8003822:	d805      	bhi.n	8003830 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8003824:	3801      	subs	r0, #1
 8003826:	b280      	uxth	r0, r0
 8003828:	3304      	adds	r3, #4
 800382a:	2800      	cmp	r0, #0
 800382c:	d1f3      	bne.n	8003816 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 800382e:	e7f7      	b.n	8003820 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>
        return 0;
 8003830:	2000      	movs	r0, #0
 8003832:	e7f5      	b.n	8003820 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>

08003834 <_ZN8touchgfx13GeneratedFontD0Ev>:
 8003834:	b510      	push	{r4, lr}
 8003836:	212c      	movs	r1, #44	@ 0x2c
 8003838:	4604      	mov	r4, r0
 800383a:	f010 fa8c 	bl	8013d56 <_ZdlPvj>
 800383e:	4620      	mov	r0, r4
 8003840:	bd10      	pop	{r4, pc}
	...

08003844 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 8003844:	b530      	push	{r4, r5, lr}
 8003846:	b08b      	sub	sp, #44	@ 0x2c
 8003848:	4604      	mov	r4, r0
      arabicTable(formsTable)
 800384a:	f8bd 5060 	ldrh.w	r5, [sp, #96]	@ 0x60
 800384e:	9508      	str	r5, [sp, #32]
 8003850:	f8bd 505c 	ldrh.w	r5, [sp, #92]	@ 0x5c
 8003854:	9507      	str	r5, [sp, #28]
 8003856:	f89d 5050 	ldrb.w	r5, [sp, #80]	@ 0x50
 800385a:	9506      	str	r5, [sp, #24]
 800385c:	f89d 504c 	ldrb.w	r5, [sp, #76]	@ 0x4c
 8003860:	9505      	str	r5, [sp, #20]
 8003862:	f89d 5048 	ldrb.w	r5, [sp, #72]	@ 0x48
 8003866:	9504      	str	r5, [sp, #16]
 8003868:	f89d 5044 	ldrb.w	r5, [sp, #68]	@ 0x44
 800386c:	9503      	str	r5, [sp, #12]
 800386e:	f89d 5040 	ldrb.w	r5, [sp, #64]	@ 0x40
 8003872:	9502      	str	r5, [sp, #8]
 8003874:	f89d 503c 	ldrb.w	r5, [sp, #60]	@ 0x3c
 8003878:	9501      	str	r5, [sp, #4]
 800387a:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 800387e:	9500      	str	r5, [sp, #0]
 8003880:	f00b f878 	bl	800e974 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>
 8003884:	4b06      	ldr	r3, [pc, #24]	@ (80038a0 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x5c>)
 8003886:	6023      	str	r3, [r4, #0]
      glyphData(glyphDataInternalFlash),
 8003888:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800388a:	61e3      	str	r3, [r4, #28]
      kerningData(kerningList),
 800388c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800388e:	6223      	str	r3, [r4, #32]
      gsubTable(gsubData),
 8003890:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8003892:	6263      	str	r3, [r4, #36]	@ 0x24
      arabicTable(formsTable)
 8003894:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8003896:	62a3      	str	r3, [r4, #40]	@ 0x28
}
 8003898:	4620      	mov	r0, r4
 800389a:	b00b      	add	sp, #44	@ 0x2c
 800389c:	bd30      	pop	{r4, r5, pc}
 800389e:	bf00      	nop
 80038a0:	08016288 	.word	0x08016288

080038a4 <_ZN8touchgfx6Screen11setupScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
    {
    }
 80038a4:	4770      	bx	lr

080038a6 <_ZN8touchgfx6Screen15afterTransitionEv>:
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
    {
    }
 80038a6:	4770      	bx	lr

080038a8 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
    {
    }
 80038a8:	4770      	bx	lr

080038aa <_ZN8touchgfx6Screen15handleTickEventEv>:
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
    {
    }
 80038aa:	4770      	bx	lr

080038ac <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
    {
        (void)key; // Unused variable
    }
 80038ac:	4770      	bx	lr

080038ae <_ZN8touchgfx8TextArea8setWidthEs>:
    TextArea()
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
    {
    }

    virtual void setWidth(int16_t width)
 80038ae:	b530      	push	{r4, r5, lr}
    {
        Widget::setWidth(width);
        boundingArea = calculateBoundingArea();
 80038b0:	6803      	ldr	r3, [r0, #0]
        rect.width = width;
 80038b2:	8101      	strh	r1, [r0, #8]
    virtual void setWidth(int16_t width)
 80038b4:	b085      	sub	sp, #20
        boundingArea = calculateBoundingArea();
 80038b6:	466d      	mov	r5, sp
 80038b8:	4601      	mov	r1, r0
 80038ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
    virtual void setWidth(int16_t width)
 80038be:	4604      	mov	r4, r0
        boundingArea = calculateBoundingArea();
 80038c0:	4628      	mov	r0, r5
 80038c2:	4798      	blx	r3
 80038c4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80038c8:	343c      	adds	r4, #60	@ 0x3c
 80038ca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    }
 80038ce:	b005      	add	sp, #20
 80038d0:	bd30      	pop	{r4, r5, pc}

080038d2 <_ZN8touchgfx8TextArea9setHeightEs>:

    virtual void setHeight(int16_t height)
 80038d2:	b530      	push	{r4, r5, lr}
    {
        Widget::setHeight(height);
        boundingArea = calculateBoundingArea();
 80038d4:	6803      	ldr	r3, [r0, #0]
        rect.height = height;
 80038d6:	8141      	strh	r1, [r0, #10]
    virtual void setHeight(int16_t height)
 80038d8:	b085      	sub	sp, #20
        boundingArea = calculateBoundingArea();
 80038da:	466d      	mov	r5, sp
 80038dc:	4601      	mov	r1, r0
 80038de:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
    virtual void setHeight(int16_t height)
 80038e2:	4604      	mov	r4, r0
        boundingArea = calculateBoundingArea();
 80038e4:	4628      	mov	r0, r5
 80038e6:	4798      	blx	r3
 80038e8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80038ec:	343c      	adds	r4, #60	@ 0x3c
 80038ee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    }
 80038f2:	b005      	add	sp, #20
 80038f4:	bd30      	pop	{r4, r5, pc}

080038f6 <_ZNK8touchgfx8TextArea12getSolidRectEv>:
 80038f6:	2200      	movs	r2, #0
 80038f8:	8002      	strh	r2, [r0, #0]
 80038fa:	8042      	strh	r2, [r0, #2]
 80038fc:	8082      	strh	r2, [r0, #4]
 80038fe:	80c2      	strh	r2, [r0, #6]

    virtual Rect getSolidRect() const
    {
        return Rect();
    }
 8003900:	4770      	bx	lr

08003902 <_ZN8touchgfx8TextArea8setAlphaEh>:
    /**
     * @copydoc Image::setAlpha
     */
    virtual void setAlpha(uint8_t newAlpha)
    {
        alpha = newAlpha;
 8003902:	f880 1036 	strb.w	r1, [r0, #54]	@ 0x36
    }
 8003906:	4770      	bx	lr

08003908 <_ZN8touchgfx8TextArea13setXBaselineYEss>:
     * @param  x         The x coordinate of the TextArea.
     * @param  baselineY The y coordinate of the baseline of the text.
     *
     * @note setTypedText() must be called prior to setting the baseline.
     */
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
 8003908:	b570      	push	{r4, r5, r6, lr}
    {
        setX(x);
 800390a:	6803      	ldr	r3, [r0, #0]
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
 800390c:	4604      	mov	r4, r0
        setX(x);
 800390e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
 8003910:	4615      	mov	r5, r2
        setX(x);
 8003912:	4798      	blx	r3
        setBaselineY(baselineY);
 8003914:	6823      	ldr	r3, [r4, #0]
 8003916:	4629      	mov	r1, r5
 8003918:	4620      	mov	r0, r4
 800391a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
    }
 800391c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setBaselineY(baselineY);
 8003920:	4718      	bx	r3

08003922 <_ZNK8touchgfx8TextArea12getWildcard2Ev>:
     * @see TextAreaWithOneWildcard, TextAreaWithTwoWildcards
     */
    virtual const Unicode::UnicodeChar* getWildcard2() const
    {
        return 0;
    }
 8003922:	2000      	movs	r0, #0
 8003924:	4770      	bx	lr

08003926 <_ZNK8touchgfx23TextAreaWithOneWildcard12getWildcard1Ev>:
    }

    virtual const Unicode::UnicodeChar* getWildcard1() const
    {
        return wc1;
    }
 8003926:	6c80      	ldr	r0, [r0, #72]	@ 0x48
 8003928:	4770      	bx	lr

0800392a <_ZN15Screen1ViewBaseD1Ev>:
}

Screen1ViewBase::~Screen1ViewBase()
{

}
 800392a:	4770      	bx	lr

0800392c <_ZN15Screen1ViewBase11setupScreenEv>:

void Screen1ViewBase::setupScreen()
{

}
 800392c:	4770      	bx	lr

0800392e <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
 800392e:	4770      	bx	lr

08003930 <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
 8003930:	b510      	push	{r4, lr}
 8003932:	214c      	movs	r1, #76	@ 0x4c
 8003934:	4604      	mov	r4, r0
 8003936:	f010 fa0e 	bl	8013d56 <_ZdlPvj>
 800393a:	4620      	mov	r0, r4
 800393c:	bd10      	pop	{r4, pc}

0800393e <_ZN15Screen1ViewBaseD0Ev>:
Screen1ViewBase::~Screen1ViewBase()
 800393e:	b510      	push	{r4, lr}
}
 8003940:	f44f 7161 	mov.w	r1, #900	@ 0x384
Screen1ViewBase::~Screen1ViewBase()
 8003944:	4604      	mov	r4, r0
}
 8003946:	f010 fa06 	bl	8013d56 <_ZdlPvj>
 800394a:	4620      	mov	r0, r4
 800394c:	bd10      	pop	{r4, pc}

0800394e <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv>:
    virtual void invalidateContent() const
 800394e:	b508      	push	{r3, lr}
        Widget::invalidateContent();
 8003950:	f7fd fb1a 	bl	8000f88 <_ZNK8touchgfx8Drawable17invalidateContentEv>
    }
 8003954:	bd08      	pop	{r3, pc}
	...

08003958 <_ZN8touchgfx8TextArea12setBaselineYEs>:
        setY(baselineY - getTypedText().getFont()->getBaseline());
 8003958:	6803      	ldr	r3, [r0, #0]
    virtual void setBaselineY(int16_t baselineY)
 800395a:	b570      	push	{r4, r5, r6, lr}
        setY(baselineY - getTypedText().getFont()->getBaseline());
 800395c:	6b5e      	ldr	r6, [r3, #52]	@ 0x34
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 800395e:	4b12      	ldr	r3, [pc, #72]	@ (80039a8 <_ZN8touchgfx8TextArea12setBaselineYEs+0x50>)
 8003960:	681b      	ldr	r3, [r3, #0]
    virtual void setBaselineY(int16_t baselineY)
 8003962:	4604      	mov	r4, r0
        setY(baselineY - getTypedText().getFont()->getBaseline());
 8003964:	b28d      	uxth	r5, r1
 8003966:	b92b      	cbnz	r3, 8003974 <_ZN8touchgfx8TextArea12setBaselineYEs+0x1c>
 8003968:	4b10      	ldr	r3, [pc, #64]	@ (80039ac <_ZN8touchgfx8TextArea12setBaselineYEs+0x54>)
 800396a:	4a11      	ldr	r2, [pc, #68]	@ (80039b0 <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 800396c:	216c      	movs	r1, #108	@ 0x6c
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 800396e:	4811      	ldr	r0, [pc, #68]	@ (80039b4 <_ZN8touchgfx8TextArea12setBaselineYEs+0x5c>)
 8003970:	f010 fade 	bl	8013f30 <__assert_func>
        return typedTextId < numberOfTypedTexts;
 8003974:	4910      	ldr	r1, [pc, #64]	@ (80039b8 <_ZN8touchgfx8TextArea12setBaselineYEs+0x60>)
 8003976:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8003978:	8809      	ldrh	r1, [r1, #0]
 800397a:	4291      	cmp	r1, r2
 800397c:	d803      	bhi.n	8003986 <_ZN8touchgfx8TextArea12setBaselineYEs+0x2e>
 800397e:	4b0f      	ldr	r3, [pc, #60]	@ (80039bc <_ZN8touchgfx8TextArea12setBaselineYEs+0x64>)
 8003980:	4a0b      	ldr	r2, [pc, #44]	@ (80039b0 <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 8003982:	216d      	movs	r1, #109	@ 0x6d
 8003984:	e7f3      	b.n	800396e <_ZN8touchgfx8TextArea12setBaselineYEs+0x16>
        return fonts[typedTexts[typedTextId].fontIdx];
 8003986:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 800398a:	4b0d      	ldr	r3, [pc, #52]	@ (80039c0 <_ZN8touchgfx8TextArea12setBaselineYEs+0x68>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8003992:	6803      	ldr	r3, [r0, #0]
 8003994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003996:	4798      	blx	r3
 8003998:	1a29      	subs	r1, r5, r0
 800399a:	4633      	mov	r3, r6
 800399c:	4620      	mov	r0, r4
 800399e:	b209      	sxth	r1, r1
    }
 80039a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setY(baselineY - getTypedText().getFont()->getBaseline());
 80039a4:	4718      	bx	r3
 80039a6:	bf00      	nop
 80039a8:	20014fa4 	.word	0x20014fa4
 80039ac:	080162e8 	.word	0x080162e8
 80039b0:	0801632a 	.word	0x0801632a
 80039b4:	08016365 	.word	0x08016365
 80039b8:	20014fa8 	.word	0x20014fa8
 80039bc:	080163ac 	.word	0x080163ac
 80039c0:	20014fac 	.word	0x20014fac

080039c4 <_ZNK8touchgfx24TextAreaWithWildcardBase21calculateBoundingAreaEv>:

        /**
         * Initializes a new instance of the BoundingArea class which is invalid by default.
         */
        BoundingArea()
            : rect(Rect(0, 0, -1, -1)), // Negative width and height means invalid rectangle
 80039c4:	2200      	movs	r2, #0
 80039c6:	f04f 31ff 	mov.w	r1, #4294967295
 80039ca:	e9c0 2100 	strd	r2, r1, [r0]
              text(0)
 80039ce:	6082      	str	r2, [r0, #8]
    }
 80039d0:	4770      	bx	lr
	...

080039d4 <_ZN8touchgfx6WidgetC1Ev>:
 80039d4:	2200      	movs	r2, #0
 80039d6:	e9c0 2201 	strd	r2, r2, [r0, #4]
 80039da:	e9c0 2203 	strd	r2, r2, [r0, #12]
          nextSibling(0),
 80039de:	e9c0 2205 	strd	r2, r2, [r0, #20]
          cachedAbsX(0),
 80039e2:	e9c0 2207 	strd	r2, r2, [r0, #28]
          touchable(false),
 80039e6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80039ea:	8482      	strh	r2, [r0, #36]	@ 0x24
class Widget : public Drawable
 80039ec:	4a01      	ldr	r2, [pc, #4]	@ (80039f4 <_ZN8touchgfx6WidgetC1Ev+0x20>)
 80039ee:	6002      	str	r2, [r0, #0]
 80039f0:	4770      	bx	lr
 80039f2:	bf00      	nop
 80039f4:	08016440 	.word	0x08016440

080039f8 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>:
    Image(const Bitmap& bmp = Bitmap())
 80039f8:	b538      	push	{r3, r4, r5, lr}
        : Widget(), bitmap(bmp), alpha(255)
 80039fa:	2226      	movs	r2, #38	@ 0x26
    Image(const Bitmap& bmp = Bitmap())
 80039fc:	4604      	mov	r4, r0
 80039fe:	460d      	mov	r5, r1
        : Widget(), bitmap(bmp), alpha(255)
 8003a00:	2100      	movs	r1, #0
 8003a02:	f010 ffa6 	bl	8014952 <memset>
 8003a06:	4620      	mov	r0, r4
 8003a08:	f7ff ffe4 	bl	80039d4 <_ZN8touchgfx6WidgetC1Ev>
 8003a0c:	4b06      	ldr	r3, [pc, #24]	@ (8003a28 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE+0x30>)
 8003a0e:	6023      	str	r3, [r4, #0]
 8003a10:	882b      	ldrh	r3, [r5, #0]
 8003a12:	84e3      	strh	r3, [r4, #38]	@ 0x26
 8003a14:	23ff      	movs	r3, #255	@ 0xff
        Image::setBitmap(bmp);
 8003a16:	4620      	mov	r0, r4
        : Widget(), bitmap(bmp), alpha(255)
 8003a18:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
        Image::setBitmap(bmp);
 8003a1c:	4629      	mov	r1, r5
 8003a1e:	f007 fd5e 	bl	800b4de <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    }
 8003a22:	4620      	mov	r0, r4
 8003a24:	bd38      	pop	{r3, r4, r5, pc}
 8003a26:	bf00      	nop
 8003a28:	08016a28 	.word	0x08016a28

08003a2c <_ZN8touchgfx8TextAreaC1Ev>:
    TextArea()
 8003a2c:	b510      	push	{r4, lr}
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 8003a2e:	2226      	movs	r2, #38	@ 0x26
    TextArea()
 8003a30:	4604      	mov	r4, r0
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 8003a32:	2100      	movs	r1, #0
 8003a34:	f010 ff8d 	bl	8014952 <memset>
 8003a38:	4620      	mov	r0, r4
 8003a3a:	f7ff ffcb 	bl	80039d4 <_ZN8touchgfx6WidgetC1Ev>
 8003a3e:	4b0a      	ldr	r3, [pc, #40]	@ (8003a68 <_ZN8touchgfx8TextAreaC1Ev+0x3c>)
 8003a40:	6023      	str	r3, [r4, #0]
        : typedTextId(id)
 8003a42:	4b0a      	ldr	r3, [pc, #40]	@ (8003a6c <_ZN8touchgfx8TextAreaC1Ev+0x40>)
 8003a44:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003a46:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003a4a:	85a3      	strh	r3, [r4, #44]	@ 0x2c
 8003a4c:	f44f 027f 	mov.w	r2, #16711680	@ 0xff0000
 8003a50:	2300      	movs	r3, #0
 8003a52:	e9c4 320c 	strd	r3, r2, [r4, #48]	@ 0x30
 8003a56:	8723      	strh	r3, [r4, #56]	@ 0x38
     * @param  rectY      The y coordinate.
     * @param  rectWidth  The width.
     * @param  rectHeight The height.
     */
    Rect(int16_t rectX, int16_t rectY, int16_t rectWidth, int16_t rectHeight)
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8003a58:	f04f 32ff 	mov.w	r2, #4294967295
              text(0)
 8003a5c:	e9c4 2310 	strd	r2, r3, [r4, #64]	@ 0x40
 8003a60:	63e3      	str	r3, [r4, #60]	@ 0x3c
    }
 8003a62:	4620      	mov	r0, r4
 8003a64:	bd10      	pop	{r4, pc}
 8003a66:	bf00      	nop
 8003a68:	08016930 	.word	0x08016930
 8003a6c:	08015ef8 	.word	0x08015ef8

08003a70 <_ZN15Screen1ViewBaseC1Ev>:
Screen1ViewBase::Screen1ViewBase()
 8003a70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a74:	4604      	mov	r4, r0
 8003a76:	b093      	sub	sp, #76	@ 0x4c
 8003a78:	4627      	mov	r7, r4
        : presenter(0)
 8003a7a:	2500      	movs	r5, #0
 8003a7c:	f00b f974 	bl	800ed68 <_ZN8touchgfx6ScreenC1Ev>
 8003a80:	4bd4      	ldr	r3, [pc, #848]	@ (8003dd4 <_ZN15Screen1ViewBaseC1Ev+0x364>)
 8003a82:	63e5      	str	r5, [r4, #60]	@ 0x3c
 8003a84:	f847 3b40 	str.w	r3, [r7], #64
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
        : Widget(), alpha(255), color(0)
 8003a88:	2226      	movs	r2, #38	@ 0x26
 8003a8a:	4629      	mov	r1, r5
 8003a8c:	4638      	mov	r0, r7
 8003a8e:	f010 ff60 	bl	8014952 <memset>
 8003a92:	4638      	mov	r0, r7
 8003a94:	f7ff ff9e 	bl	80039d4 <_ZN8touchgfx6WidgetC1Ev>
 8003a98:	4bcf      	ldr	r3, [pc, #828]	@ (8003dd8 <_ZN15Screen1ViewBaseC1Ev+0x368>)
 8003a9a:	6423      	str	r3, [r4, #64]	@ 0x40
 8003a9c:	f104 0b6c 	add.w	fp, r4, #108	@ 0x6c
 8003aa0:	23ff      	movs	r3, #255	@ 0xff
 8003aa2:	f64f 76ff 	movw	r6, #65535	@ 0xffff
 8003aa6:	f884 3066 	strb.w	r3, [r4, #102]	@ 0x66
 8003aaa:	f104 0a98 	add.w	sl, r4, #152	@ 0x98
 8003aae:	a910      	add	r1, sp, #64	@ 0x40
 8003ab0:	4658      	mov	r0, fp
        : color(col)
 8003ab2:	66a5      	str	r5, [r4, #104]	@ 0x68
 8003ab4:	f104 09c4 	add.w	r9, r4, #196	@ 0xc4
 8003ab8:	f8ad 6040 	strh.w	r6, [sp, #64]	@ 0x40
 8003abc:	f7ff ff9c 	bl	80039f8 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8003ac0:	a910      	add	r1, sp, #64	@ 0x40
 8003ac2:	4650      	mov	r0, sl
 8003ac4:	f104 08f0 	add.w	r8, r4, #240	@ 0xf0
 8003ac8:	f8ad 6040 	strh.w	r6, [sp, #64]	@ 0x40
 8003acc:	f7ff ff94 	bl	80039f8 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8003ad0:	a910      	add	r1, sp, #64	@ 0x40
 8003ad2:	4648      	mov	r0, r9
 8003ad4:	f8ad 6040 	strh.w	r6, [sp, #64]	@ 0x40
 8003ad8:	f7ff ff8e 	bl	80039f8 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8003adc:	a910      	add	r1, sp, #64	@ 0x40
 8003ade:	4640      	mov	r0, r8
 8003ae0:	f8ad 6040 	strh.w	r6, [sp, #64]	@ 0x40
 8003ae4:	f7ff ff88 	bl	80039f8 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8003ae8:	f504 738e 	add.w	r3, r4, #284	@ 0x11c
 8003aec:	a910      	add	r1, sp, #64	@ 0x40
 8003aee:	4618      	mov	r0, r3
 8003af0:	9304      	str	r3, [sp, #16]
 8003af2:	f8ad 6040 	strh.w	r6, [sp, #64]	@ 0x40
 8003af6:	f7ff ff7f 	bl	80039f8 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8003afa:	f504 73a4 	add.w	r3, r4, #328	@ 0x148
 8003afe:	a910      	add	r1, sp, #64	@ 0x40
 8003b00:	4618      	mov	r0, r3
 8003b02:	9305      	str	r3, [sp, #20]
 8003b04:	f8ad 6040 	strh.w	r6, [sp, #64]	@ 0x40
 8003b08:	f7ff ff76 	bl	80039f8 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8003b0c:	f504 73ba 	add.w	r3, r4, #372	@ 0x174
 8003b10:	a910      	add	r1, sp, #64	@ 0x40
 8003b12:	4618      	mov	r0, r3
 8003b14:	9306      	str	r3, [sp, #24]
 8003b16:	f8ad 6040 	strh.w	r6, [sp, #64]	@ 0x40
 8003b1a:	f7ff ff6d 	bl	80039f8 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8003b1e:	f504 73d0 	add.w	r3, r4, #416	@ 0x1a0
 8003b22:	a910      	add	r1, sp, #64	@ 0x40
 8003b24:	4618      	mov	r0, r3
 8003b26:	9307      	str	r3, [sp, #28]
 8003b28:	f8ad 6040 	strh.w	r6, [sp, #64]	@ 0x40
 8003b2c:	f7ff ff64 	bl	80039f8 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8003b30:	f504 73e6 	add.w	r3, r4, #460	@ 0x1cc
 8003b34:	a910      	add	r1, sp, #64	@ 0x40
 8003b36:	4618      	mov	r0, r3
 8003b38:	9308      	str	r3, [sp, #32]
 8003b3a:	f8ad 6040 	strh.w	r6, [sp, #64]	@ 0x40
 8003b3e:	f7ff ff5b 	bl	80039f8 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8003b42:	f504 73fc 	add.w	r3, r4, #504	@ 0x1f8
 8003b46:	a910      	add	r1, sp, #64	@ 0x40
 8003b48:	4618      	mov	r0, r3
 8003b4a:	9309      	str	r3, [sp, #36]	@ 0x24
 8003b4c:	f8ad 6040 	strh.w	r6, [sp, #64]	@ 0x40
 8003b50:	f7ff ff52 	bl	80039f8 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8003b54:	f504 7309 	add.w	r3, r4, #548	@ 0x224
 8003b58:	a910      	add	r1, sp, #64	@ 0x40
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	930a      	str	r3, [sp, #40]	@ 0x28
 8003b5e:	f8ad 6040 	strh.w	r6, [sp, #64]	@ 0x40
 8003b62:	f7ff ff49 	bl	80039f8 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8003b66:	f504 7314 	add.w	r3, r4, #592	@ 0x250
 8003b6a:	a910      	add	r1, sp, #64	@ 0x40
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003b70:	f8ad 6040 	strh.w	r6, [sp, #64]	@ 0x40
 8003b74:	f7ff ff40 	bl	80039f8 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8003b78:	f504 731f 	add.w	r3, r4, #636	@ 0x27c
        : TextArea()
 8003b7c:	4618      	mov	r0, r3
        : TextAreaWithWildcardBase(), wc1(0)
 8003b7e:	4e97      	ldr	r6, [pc, #604]	@ (8003ddc <_ZN15Screen1ViewBaseC1Ev+0x36c>)
 8003b80:	9301      	str	r3, [sp, #4]
        : TextArea()
 8003b82:	f7ff ff53 	bl	8003a2c <_ZN8touchgfx8TextAreaC1Ev>
 8003b86:	f504 7332 	add.w	r3, r4, #712	@ 0x2c8
        : TextAreaWithWildcardBase(), wc1(0)
 8003b8a:	f8c4 627c 	str.w	r6, [r4, #636]	@ 0x27c
        : TextArea()
 8003b8e:	4618      	mov	r0, r3
        : TextAreaWithWildcardBase(), wc1(0)
 8003b90:	f8c4 52c4 	str.w	r5, [r4, #708]	@ 0x2c4
 8003b94:	9302      	str	r3, [sp, #8]
        : TextArea()
 8003b96:	f7ff ff49 	bl	8003a2c <_ZN8touchgfx8TextAreaC1Ev>
 8003b9a:	f504 7345 	add.w	r3, r4, #788	@ 0x314
 8003b9e:	4618      	mov	r0, r3
        : TextAreaWithWildcardBase(), wc1(0)
 8003ba0:	f8c4 62c8 	str.w	r6, [r4, #712]	@ 0x2c8
 8003ba4:	f8c4 5310 	str.w	r5, [r4, #784]	@ 0x310
 8003ba8:	9303      	str	r3, [sp, #12]
 8003baa:	f7ff ff3f 	bl	8003a2c <_ZN8touchgfx8TextAreaC1Ev>
        setXY(x, y);
 8003bae:	462a      	mov	r2, r5
 8003bb0:	4638      	mov	r0, r7
 8003bb2:	4629      	mov	r1, r5
 8003bb4:	f7fd f9fe 	bl	8000fb4 <_ZN8touchgfx8Drawable5setXYEss>
        setWidth(width);
 8003bb8:	4638      	mov	r0, r7
 8003bba:	f44f 71a0 	mov.w	r1, #320	@ 0x140
 8003bbe:	f7fd f9bc 	bl	8000f3a <_ZN8touchgfx8Drawable8setWidthEs>
        setHeight(height);
 8003bc2:	4638      	mov	r0, r7
 8003bc4:	21f0      	movs	r1, #240	@ 0xf0
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
    {
        container.add(d);
 8003bc6:	1d26      	adds	r6, r4, #4
 8003bc8:	f7fd f9b9 	bl	8000f3e <_ZN8touchgfx8Drawable9setHeightEs>
     *
     * @see getColor, Color::getColorFromRGB
     */
    void setColor(colortype newColor)
    {
        color = newColor;
 8003bcc:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
 8003bd0:	66a3      	str	r3, [r4, #104]	@ 0x68
 8003bd2:	4639      	mov	r1, r7
 8003bd4:	4630      	mov	r0, r6
 8003bd6:	f005 fead 	bl	8009934 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    image1.setXY(0, 0);
 8003bda:	462a      	mov	r2, r5
 8003bdc:	4658      	mov	r0, fp
 8003bde:	4629      	mov	r1, r5
 8003be0:	f7fd f9e8 	bl	8000fb4 <_ZN8touchgfx8Drawable5setXYEss>
    image1.setBitmap(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_CONTAINERS_MEDIUM_WIDE_OUTLINED_NEUTRAL_ID));
 8003be4:	4658      	mov	r0, fp
 8003be6:	a910      	add	r1, sp, #64	@ 0x40
 8003be8:	f8ad 5040 	strh.w	r5, [sp, #64]	@ 0x40
 8003bec:	f007 fc77 	bl	800b4de <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8003bf0:	4659      	mov	r1, fp
 8003bf2:	4630      	mov	r0, r6
 8003bf4:	f005 fe9e 	bl	8009934 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    background3.setXY(-260, 220);
 8003bf8:	22dc      	movs	r2, #220	@ 0xdc
 8003bfa:	4650      	mov	r0, sl
 8003bfc:	4978      	ldr	r1, [pc, #480]	@ (8003de0 <_ZN15Screen1ViewBaseC1Ev+0x370>)
 8003bfe:	f7fd f9d9 	bl	8000fb4 <_ZN8touchgfx8Drawable5setXYEss>
 8003c02:	f04f 0b02 	mov.w	fp, #2
    background3.setBitmap(touchgfx::Bitmap(BITMAP_GROUND_ID));
 8003c06:	4650      	mov	r0, sl
 8003c08:	a910      	add	r1, sp, #64	@ 0x40
 8003c0a:	f8ad b040 	strh.w	fp, [sp, #64]	@ 0x40
 8003c0e:	f007 fc66 	bl	800b4de <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8003c12:	4651      	mov	r1, sl
 8003c14:	4630      	mov	r0, r6
        visible = vis;
 8003c16:	f884 50bd 	strb.w	r5, [r4, #189]	@ 0xbd
 8003c1a:	f005 fe8b 	bl	8009934 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    background2.setXY(-250, 220);
 8003c1e:	22dc      	movs	r2, #220	@ 0xdc
 8003c20:	4648      	mov	r0, r9
 8003c22:	f06f 01f9 	mvn.w	r1, #249	@ 0xf9
 8003c26:	f7fd f9c5 	bl	8000fb4 <_ZN8touchgfx8Drawable5setXYEss>
    background2.setBitmap(touchgfx::Bitmap(BITMAP_GROUND_ID));
 8003c2a:	4648      	mov	r0, r9
 8003c2c:	a910      	add	r1, sp, #64	@ 0x40
 8003c2e:	f8ad b040 	strh.w	fp, [sp, #64]	@ 0x40
 8003c32:	f007 fc54 	bl	800b4de <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8003c36:	4649      	mov	r1, r9
 8003c38:	4630      	mov	r0, r6
 8003c3a:	f884 50e9 	strb.w	r5, [r4, #233]	@ 0xe9
 8003c3e:	f005 fe79 	bl	8009934 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    background1.setXY(-240, 220);
 8003c42:	22dc      	movs	r2, #220	@ 0xdc
 8003c44:	4640      	mov	r0, r8
 8003c46:	f06f 01ef 	mvn.w	r1, #239	@ 0xef
 8003c4a:	f7fd f9b3 	bl	8000fb4 <_ZN8touchgfx8Drawable5setXYEss>
    background1.setBitmap(touchgfx::Bitmap(BITMAP_GROUND_ID));
 8003c4e:	4640      	mov	r0, r8
 8003c50:	a910      	add	r1, sp, #64	@ 0x40
 8003c52:	f8ad b040 	strh.w	fp, [sp, #64]	@ 0x40
 8003c56:	f007 fc42 	bl	800b4de <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8003c5a:	4641      	mov	r1, r8
 8003c5c:	4630      	mov	r0, r6
 8003c5e:	f005 fe69 	bl	8009934 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    mario1.setXY(40, 147);
 8003c62:	2293      	movs	r2, #147	@ 0x93
 8003c64:	9804      	ldr	r0, [sp, #16]
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8003c66:	f8df 918c 	ldr.w	r9, [pc, #396]	@ 8003df4 <_ZN15Screen1ViewBaseC1Ev+0x384>
 8003c6a:	2128      	movs	r1, #40	@ 0x28
 8003c6c:	f7fd f9a2 	bl	8000fb4 <_ZN8touchgfx8Drawable5setXYEss>
 8003c70:	2307      	movs	r3, #7
    mario1.setBitmap(touchgfx::Bitmap(BITMAP_MARIO5_ID));
 8003c72:	9804      	ldr	r0, [sp, #16]
 8003c74:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8003c78:	a910      	add	r1, sp, #64	@ 0x40
 8003c7a:	f007 fc30 	bl	800b4de <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8003c7e:	9904      	ldr	r1, [sp, #16]
 8003c80:	f884 5141 	strb.w	r5, [r4, #321]	@ 0x141
 8003c84:	4630      	mov	r0, r6
 8003c86:	f005 fe55 	bl	8009934 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    mario2.setXY(40, 147);
 8003c8a:	2293      	movs	r2, #147	@ 0x93
 8003c8c:	9805      	ldr	r0, [sp, #20]
 8003c8e:	2128      	movs	r1, #40	@ 0x28
 8003c90:	f7fd f990 	bl	8000fb4 <_ZN8touchgfx8Drawable5setXYEss>
 8003c94:	2305      	movs	r3, #5
    mario2.setBitmap(touchgfx::Bitmap(BITMAP_MARIO3_ID));
 8003c96:	9805      	ldr	r0, [sp, #20]
 8003c98:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8003c9c:	a910      	add	r1, sp, #64	@ 0x40
 8003c9e:	f007 fc1e 	bl	800b4de <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8003ca2:	9905      	ldr	r1, [sp, #20]
 8003ca4:	f884 516d 	strb.w	r5, [r4, #365]	@ 0x16d
 8003ca8:	4630      	mov	r0, r6
 8003caa:	f005 fe43 	bl	8009934 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    mario3.setXY(40, 147);
 8003cae:	2293      	movs	r2, #147	@ 0x93
 8003cb0:	9806      	ldr	r0, [sp, #24]
 8003cb2:	2128      	movs	r1, #40	@ 0x28
 8003cb4:	f7fd f97e 	bl	8000fb4 <_ZN8touchgfx8Drawable5setXYEss>
 8003cb8:	2306      	movs	r3, #6
    mario3.setBitmap(touchgfx::Bitmap(BITMAP_MARIO4_ID));
 8003cba:	9806      	ldr	r0, [sp, #24]
 8003cbc:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8003cc0:	a910      	add	r1, sp, #64	@ 0x40
 8003cc2:	f007 fc0c 	bl	800b4de <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8003cc6:	9906      	ldr	r1, [sp, #24]
 8003cc8:	f884 5199 	strb.w	r5, [r4, #409]	@ 0x199
 8003ccc:	4630      	mov	r0, r6
 8003cce:	f005 fe31 	bl	8009934 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    mario4.setXY(40, 168);
 8003cd2:	22a8      	movs	r2, #168	@ 0xa8
 8003cd4:	9807      	ldr	r0, [sp, #28]
 8003cd6:	2128      	movs	r1, #40	@ 0x28
 8003cd8:	f7fd f96c 	bl	8000fb4 <_ZN8touchgfx8Drawable5setXYEss>
 8003cdc:	2309      	movs	r3, #9
    mario4.setBitmap(touchgfx::Bitmap(BITMAP_MARIO7_ID));
 8003cde:	9807      	ldr	r0, [sp, #28]
 8003ce0:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8003ce4:	a910      	add	r1, sp, #64	@ 0x40
 8003ce6:	f007 fbfa 	bl	800b4de <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8003cea:	9907      	ldr	r1, [sp, #28]
 8003cec:	f884 51c5 	strb.w	r5, [r4, #453]	@ 0x1c5
 8003cf0:	4630      	mov	r0, r6
 8003cf2:	f005 fe1f 	bl	8009934 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    mario5.setXY(40, 168);
 8003cf6:	22a8      	movs	r2, #168	@ 0xa8
 8003cf8:	9808      	ldr	r0, [sp, #32]
 8003cfa:	2128      	movs	r1, #40	@ 0x28
 8003cfc:	f7fd f95a 	bl	8000fb4 <_ZN8touchgfx8Drawable5setXYEss>
 8003d00:	f04f 030a 	mov.w	r3, #10
    mario5.setBitmap(touchgfx::Bitmap(BITMAP_MARIO8_ID));
 8003d04:	9808      	ldr	r0, [sp, #32]
 8003d06:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8003d0a:	a910      	add	r1, sp, #64	@ 0x40
 8003d0c:	f007 fbe7 	bl	800b4de <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8003d10:	9908      	ldr	r1, [sp, #32]
 8003d12:	f884 51f1 	strb.w	r5, [r4, #497]	@ 0x1f1
 8003d16:	4630      	mov	r0, r6
 8003d18:	f005 fe0c 	bl	8009934 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    mario6.setXY(40, 147);
 8003d1c:	2293      	movs	r2, #147	@ 0x93
 8003d1e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003d20:	2128      	movs	r1, #40	@ 0x28
 8003d22:	f7fd f947 	bl	8000fb4 <_ZN8touchgfx8Drawable5setXYEss>
 8003d26:	f04f 0a03 	mov.w	sl, #3
    mario6.setBitmap(touchgfx::Bitmap(BITMAP_MARIO1_ID));
 8003d2a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003d2c:	f8ad a040 	strh.w	sl, [sp, #64]	@ 0x40
 8003d30:	a910      	add	r1, sp, #64	@ 0x40
 8003d32:	f007 fbd4 	bl	800b4de <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8003d36:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8003d38:	f884 521d 	strb.w	r5, [r4, #541]	@ 0x21d
 8003d3c:	4630      	mov	r0, r6
 8003d3e:	f005 fdf9 	bl	8009934 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    turtle1.setXY(60, 103);
 8003d42:	2267      	movs	r2, #103	@ 0x67
 8003d44:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8003d46:	213c      	movs	r1, #60	@ 0x3c
 8003d48:	f7fd f934 	bl	8000fb4 <_ZN8touchgfx8Drawable5setXYEss>
 8003d4c:	2311      	movs	r3, #17
    turtle1.setBitmap(touchgfx::Bitmap(BITMAP_TURTLE1_ID));
 8003d4e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8003d50:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8003d54:	a910      	add	r1, sp, #64	@ 0x40
 8003d56:	f007 fbc2 	bl	800b4de <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8003d5a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8003d5c:	f884 5249 	strb.w	r5, [r4, #585]	@ 0x249
 8003d60:	4630      	mov	r0, r6
 8003d62:	f005 fde7 	bl	8009934 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    turtle2.setXY(161, 103);
 8003d66:	2267      	movs	r2, #103	@ 0x67
 8003d68:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8003d6a:	21a1      	movs	r1, #161	@ 0xa1
 8003d6c:	f7fd f922 	bl	8000fb4 <_ZN8touchgfx8Drawable5setXYEss>
 8003d70:	2312      	movs	r3, #18
    turtle2.setBitmap(touchgfx::Bitmap(BITMAP_TURTLE2_ID));
 8003d72:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8003d74:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8003d78:	a910      	add	r1, sp, #64	@ 0x40
 8003d7a:	f007 fbb0 	bl	800b4de <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8003d7e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8003d80:	f884 5275 	strb.w	r5, [r4, #629]	@ 0x275
 8003d84:	4630      	mov	r0, r6
 8003d86:	f005 fdd5 	bl	8009934 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    scores.setXY(265, 27);
 8003d8a:	221b      	movs	r2, #27
 8003d8c:	9801      	ldr	r0, [sp, #4]
 8003d8e:	f240 1109 	movw	r1, #265	@ 0x109
 8003d92:	f7fd f90f 	bl	8000fb4 <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 8003d96:	4b13      	ldr	r3, [pc, #76]	@ (8003de4 <_ZN15Screen1ViewBaseC1Ev+0x374>)
 8003d98:	f8c4 32ac 	str.w	r3, [r4, #684]	@ 0x2ac
        boundingArea = calculateBoundingArea();
 8003d9c:	f8d4 327c 	ldr.w	r3, [r4, #636]	@ 0x27c
 8003da0:	9901      	ldr	r1, [sp, #4]
 8003da2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
        linespace = space;
 8003da6:	f8a4 52b0 	strh.w	r5, [r4, #688]	@ 0x2b0
        boundingArea = calculateBoundingArea();
 8003daa:	af0c      	add	r7, sp, #48	@ 0x30
 8003dac:	4638      	mov	r0, r7
 8003dae:	4798      	blx	r3
 8003db0:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8003db4:	f504 732e 	add.w	r3, r4, #696	@ 0x2b8
 8003db8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003dbc:	f8d9 3000 	ldr.w	r3, [r9]
    Unicode::snprintf(scoresBuffer, SCORES_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_EMJD).getText());
 8003dc0:	f504 7857 	add.w	r8, r4, #860	@ 0x35c
 8003dc4:	b9c3      	cbnz	r3, 8003df8 <_ZN15Screen1ViewBaseC1Ev+0x388>
 8003dc6:	4b08      	ldr	r3, [pc, #32]	@ (8003de8 <_ZN15Screen1ViewBaseC1Ev+0x378>)
 8003dc8:	4a08      	ldr	r2, [pc, #32]	@ (8003dec <_ZN15Screen1ViewBaseC1Ev+0x37c>)
 8003dca:	2160      	movs	r1, #96	@ 0x60
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8003dcc:	4808      	ldr	r0, [pc, #32]	@ (8003df0 <_ZN15Screen1ViewBaseC1Ev+0x380>)
 8003dce:	f010 f8af 	bl	8013f30 <__assert_func>
 8003dd2:	bf00      	nop
 8003dd4:	08016538 	.word	0x08016538
 8003dd8:	080169c0 	.word	0x080169c0
 8003ddc:	080164a8 	.word	0x080164a8
 8003de0:	fffffefc 	.word	0xfffffefc
 8003de4:	fff5e6e6 	.word	0xfff5e6e6
 8003de8:	080162e8 	.word	0x080162e8
 8003dec:	080163ea 	.word	0x080163ea
 8003df0:	08016365 	.word	0x08016365
 8003df4:	20014fa4 	.word	0x20014fa4
 8003df8:	4b45      	ldr	r3, [pc, #276]	@ (8003f10 <_ZN15Screen1ViewBaseC1Ev+0x4a0>)
 8003dfa:	881b      	ldrh	r3, [r3, #0]
 8003dfc:	2b03      	cmp	r3, #3
 8003dfe:	d803      	bhi.n	8003e08 <_ZN15Screen1ViewBaseC1Ev+0x398>
 8003e00:	4b44      	ldr	r3, [pc, #272]	@ (8003f14 <_ZN15Screen1ViewBaseC1Ev+0x4a4>)
 8003e02:	4a45      	ldr	r2, [pc, #276]	@ (8003f18 <_ZN15Screen1ViewBaseC1Ev+0x4a8>)
 8003e04:	2161      	movs	r1, #97	@ 0x61
 8003e06:	e7e1      	b.n	8003dcc <_ZN15Screen1ViewBaseC1Ev+0x35c>
        return texts->getText(typedTextId);
 8003e08:	4b44      	ldr	r3, [pc, #272]	@ (8003f1c <_ZN15Screen1ViewBaseC1Ev+0x4ac>)
 8003e0a:	4651      	mov	r1, sl
 8003e0c:	6818      	ldr	r0, [r3, #0]
 8003e0e:	f000 fab7 	bl	8004380 <_ZNK8touchgfx5Texts7getTextEt>
 8003e12:	4a43      	ldr	r2, [pc, #268]	@ (8003f20 <_ZN15Screen1ViewBaseC1Ev+0x4b0>)
 8003e14:	4603      	mov	r3, r0
 8003e16:	210a      	movs	r1, #10
 8003e18:	4640      	mov	r0, r8
 8003e1a:	f00d f883 	bl	8010f24 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    scores.resizeToCurrentText();
 8003e1e:	9801      	ldr	r0, [sp, #4]
        wc1 = value;
 8003e20:	f8c4 82c4 	str.w	r8, [r4, #708]	@ 0x2c4
 8003e24:	f007 fa74 	bl	800b310 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
        : typedTextId(id)
 8003e28:	f8df 80fc 	ldr.w	r8, [pc, #252]	@ 8003f28 <_ZN15Screen1ViewBaseC1Ev+0x4b8>
    scores.setTypedText(touchgfx::TypedText(T___SINGLEUSE_UYCL));
 8003e2c:	9801      	ldr	r0, [sp, #4]
 8003e2e:	f8cd 8040 	str.w	r8, [sp, #64]	@ 0x40
 8003e32:	2304      	movs	r3, #4
 8003e34:	a910      	add	r1, sp, #64	@ 0x40
 8003e36:	f8ad 3044 	strh.w	r3, [sp, #68]	@ 0x44
 8003e3a:	f007 fa89 	bl	800b350 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8003e3e:	9901      	ldr	r1, [sp, #4]
 8003e40:	4630      	mov	r0, r6
 8003e42:	f005 fd77 	bl	8009934 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    hiScores.setXY(172, 27);
 8003e46:	9802      	ldr	r0, [sp, #8]
 8003e48:	221b      	movs	r2, #27
 8003e4a:	21ac      	movs	r1, #172	@ 0xac
 8003e4c:	f7fd f8b2 	bl	8000fb4 <_ZN8touchgfx8Drawable5setXYEss>
 8003e50:	f8d4 32c8 	ldr.w	r3, [r4, #712]	@ 0x2c8
        color = newColor;
 8003e54:	4a33      	ldr	r2, [pc, #204]	@ (8003f24 <_ZN15Screen1ViewBaseC1Ev+0x4b4>)
        boundingArea = calculateBoundingArea();
 8003e56:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e5a:	9902      	ldr	r1, [sp, #8]
        color = newColor;
 8003e5c:	f8c4 22f8 	str.w	r2, [r4, #760]	@ 0x2f8
        boundingArea = calculateBoundingArea();
 8003e60:	4638      	mov	r0, r7
        linespace = space;
 8003e62:	f8a4 52fc 	strh.w	r5, [r4, #764]	@ 0x2fc
        boundingArea = calculateBoundingArea();
 8003e66:	4798      	blx	r3
 8003e68:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8003e6c:	f504 7341 	add.w	r3, r4, #772	@ 0x304
 8003e70:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8003e74:	f8d9 3000 	ldr.w	r3, [r9]
    Unicode::snprintf(hiScoresBuffer, HISCORES_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_QBA3).getText());
 8003e78:	f504 7a5c 	add.w	sl, r4, #880	@ 0x370
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d0a2      	beq.n	8003dc6 <_ZN15Screen1ViewBaseC1Ev+0x356>
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8003e80:	4923      	ldr	r1, [pc, #140]	@ (8003f10 <_ZN15Screen1ViewBaseC1Ev+0x4a0>)
 8003e82:	880b      	ldrh	r3, [r1, #0]
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	d9bb      	bls.n	8003e00 <_ZN15Screen1ViewBaseC1Ev+0x390>
        return texts->getText(typedTextId);
 8003e88:	4b24      	ldr	r3, [pc, #144]	@ (8003f1c <_ZN15Screen1ViewBaseC1Ev+0x4ac>)
 8003e8a:	2101      	movs	r1, #1
 8003e8c:	6818      	ldr	r0, [r3, #0]
 8003e8e:	f000 fa77 	bl	8004380 <_ZNK8touchgfx5Texts7getTextEt>
 8003e92:	4a23      	ldr	r2, [pc, #140]	@ (8003f20 <_ZN15Screen1ViewBaseC1Ev+0x4b0>)
 8003e94:	4603      	mov	r3, r0
 8003e96:	210a      	movs	r1, #10
 8003e98:	4650      	mov	r0, sl
 8003e9a:	f00d f843 	bl	8010f24 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    hiScores.resizeToCurrentText();
 8003e9e:	9802      	ldr	r0, [sp, #8]
 8003ea0:	f8c4 a310 	str.w	sl, [r4, #784]	@ 0x310
 8003ea4:	f007 fa34 	bl	800b310 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    hiScores.setTypedText(touchgfx::TypedText(T___SINGLEUSE_PIMC));
 8003ea8:	9802      	ldr	r0, [sp, #8]
        : typedTextId(id)
 8003eaa:	f8cd 8040 	str.w	r8, [sp, #64]	@ 0x40
 8003eae:	a910      	add	r1, sp, #64	@ 0x40
 8003eb0:	f8ad b044 	strh.w	fp, [sp, #68]	@ 0x44
 8003eb4:	f007 fa4c 	bl	800b350 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8003eb8:	9902      	ldr	r1, [sp, #8]
 8003eba:	f884 52ed 	strb.w	r5, [r4, #749]	@ 0x2ed
 8003ebe:	4630      	mov	r0, r6
 8003ec0:	f005 fd38 	bl	8009934 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    gameover.setXY(81, 96);
 8003ec4:	9803      	ldr	r0, [sp, #12]
 8003ec6:	2260      	movs	r2, #96	@ 0x60
 8003ec8:	2151      	movs	r1, #81	@ 0x51
 8003eca:	f7fd f873 	bl	8000fb4 <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 8003ece:	4a15      	ldr	r2, [pc, #84]	@ (8003f24 <_ZN15Screen1ViewBaseC1Ev+0x4b4>)
        boundingArea = calculateBoundingArea();
 8003ed0:	9903      	ldr	r1, [sp, #12]
        color = newColor;
 8003ed2:	f8c4 2344 	str.w	r2, [r4, #836]	@ 0x344
        boundingArea = calculateBoundingArea();
 8003ed6:	4638      	mov	r0, r7
        linespace = space;
 8003ed8:	f8a4 5348 	strh.w	r5, [r4, #840]	@ 0x348
        boundingArea = calculateBoundingArea();
 8003edc:	f006 ff90 	bl	800ae00 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8003ee0:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8003ee4:	f504 7354 	add.w	r3, r4, #848	@ 0x350
 8003ee8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    gameover.setTypedText(touchgfx::TypedText(T___SINGLEUSE_0C4T));
 8003eec:	9803      	ldr	r0, [sp, #12]
 8003eee:	f8cd 8040 	str.w	r8, [sp, #64]	@ 0x40
 8003ef2:	a910      	add	r1, sp, #64	@ 0x40
 8003ef4:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 8003ef8:	f007 fa2a 	bl	800b350 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8003efc:	4630      	mov	r0, r6
 8003efe:	9903      	ldr	r1, [sp, #12]
 8003f00:	f884 5339 	strb.w	r5, [r4, #825]	@ 0x339
 8003f04:	f005 fd16 	bl	8009934 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 8003f08:	4620      	mov	r0, r4
 8003f0a:	b013      	add	sp, #76	@ 0x4c
 8003f0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f10:	20014fa8 	.word	0x20014fa8
 8003f14:	080163ac 	.word	0x080163ac
 8003f18:	080163ea 	.word	0x080163ea
 8003f1c:	20014fb0 	.word	0x20014fb0
 8003f20:	08016435 	.word	0x08016435
 8003f24:	fff5e6e6 	.word	0xfff5e6e6
 8003f28:	08015ef8 	.word	0x08015ef8

08003f2c <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_Grand9KPixel_15_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_Grand9KPixel_15_4bpp();

touchgfx::GeneratedFont& getFont_Grand9KPixel_15_4bpp()
{
    static touchgfx::GeneratedFont Grand9KPixel_15_4bpp(glyphs_Grand9KPixel_15_4bpp, 95, 17, 15, 0, 0, 4, 1, 0, 0, unicodes_Grand9KPixel_15_4bpp, kerning_Grand9KPixel_15_4bpp, 63, 0, 0, 0);
 8003f2c:	4770      	bx	lr
	...

08003f30 <_Z28getFont_Grand9KPixel_15_4bppv>:
{
 8003f30:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont Grand9KPixel_15_4bpp(glyphs_Grand9KPixel_15_4bpp, 95, 17, 15, 0, 0, 4, 1, 0, 0, unicodes_Grand9KPixel_15_4bpp, kerning_Grand9KPixel_15_4bpp, 63, 0, 0, 0);
 8003f32:	4d17      	ldr	r5, [pc, #92]	@ (8003f90 <_Z28getFont_Grand9KPixel_15_4bppv+0x60>)
 8003f34:	682c      	ldr	r4, [r5, #0]
 8003f36:	f3bf 8f5b 	dmb	ish
 8003f3a:	f014 0401 	ands.w	r4, r4, #1
{
 8003f3e:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont Grand9KPixel_15_4bpp(glyphs_Grand9KPixel_15_4bpp, 95, 17, 15, 0, 0, 4, 1, 0, 0, unicodes_Grand9KPixel_15_4bpp, kerning_Grand9KPixel_15_4bpp, 63, 0, 0, 0);
 8003f40:	d122      	bne.n	8003f88 <_Z28getFont_Grand9KPixel_15_4bppv+0x58>
 8003f42:	4628      	mov	r0, r5
 8003f44:	f00f ff09 	bl	8013d5a <__cxa_guard_acquire>
 8003f48:	b1f0      	cbz	r0, 8003f88 <_Z28getFont_Grand9KPixel_15_4bppv+0x58>
 8003f4a:	233f      	movs	r3, #63	@ 0x3f
 8003f4c:	9309      	str	r3, [sp, #36]	@ 0x24
 8003f4e:	4b11      	ldr	r3, [pc, #68]	@ (8003f94 <_Z28getFont_Grand9KPixel_15_4bppv+0x64>)
 8003f50:	9308      	str	r3, [sp, #32]
 8003f52:	4b11      	ldr	r3, [pc, #68]	@ (8003f98 <_Z28getFont_Grand9KPixel_15_4bppv+0x68>)
 8003f54:	4911      	ldr	r1, [pc, #68]	@ (8003f9c <_Z28getFont_Grand9KPixel_15_4bppv+0x6c>)
 8003f56:	4812      	ldr	r0, [pc, #72]	@ (8003fa0 <_Z28getFont_Grand9KPixel_15_4bppv+0x70>)
 8003f58:	940a      	str	r4, [sp, #40]	@ 0x28
 8003f5a:	e9cd 4306 	strd	r4, r3, [sp, #24]
 8003f5e:	2201      	movs	r2, #1
 8003f60:	2304      	movs	r3, #4
 8003f62:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8003f66:	230f      	movs	r3, #15
 8003f68:	9300      	str	r3, [sp, #0]
 8003f6a:	225f      	movs	r2, #95	@ 0x5f
 8003f6c:	2311      	movs	r3, #17
 8003f6e:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 8003f72:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8003f76:	9405      	str	r4, [sp, #20]
 8003f78:	f7ff fc64 	bl	8003844 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8003f7c:	4809      	ldr	r0, [pc, #36]	@ (8003fa4 <_Z28getFont_Grand9KPixel_15_4bppv+0x74>)
 8003f7e:	f00f fff5 	bl	8013f6c <atexit>
 8003f82:	4628      	mov	r0, r5
 8003f84:	f00f fef5 	bl	8013d72 <__cxa_guard_release>
    return Grand9KPixel_15_4bpp;
}
 8003f88:	4805      	ldr	r0, [pc, #20]	@ (8003fa0 <_Z28getFont_Grand9KPixel_15_4bppv+0x70>)
 8003f8a:	b00f      	add	sp, #60	@ 0x3c
 8003f8c:	bd30      	pop	{r4, r5, pc}
 8003f8e:	bf00      	nop
 8003f90:	200040a4 	.word	0x200040a4
 8003f94:	0801e1cc 	.word	0x0801e1cc
 8003f98:	0801e384 	.word	0x0801e384
 8003f9c:	0801d190 	.word	0x0801d190
 8003fa0:	200040a8 	.word	0x200040a8
 8003fa4:	08003f2d 	.word	0x08003f2d

08003fa8 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_Grand9KPixel_30_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_Grand9KPixel_30_4bpp();

touchgfx::GeneratedFont& getFont_Grand9KPixel_30_4bpp()
{
    static touchgfx::GeneratedFont Grand9KPixel_30_4bpp(glyphs_Grand9KPixel_30_4bpp, 9, 30, 30, 0, 0, 4, 1, 0, 0, unicodes_Grand9KPixel_30_4bpp, kerning_Grand9KPixel_30_4bpp, 63, 0, 0, 0);
 8003fa8:	4770      	bx	lr
	...

08003fac <_Z28getFont_Grand9KPixel_30_4bppv>:
{
 8003fac:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont Grand9KPixel_30_4bpp(glyphs_Grand9KPixel_30_4bpp, 9, 30, 30, 0, 0, 4, 1, 0, 0, unicodes_Grand9KPixel_30_4bpp, kerning_Grand9KPixel_30_4bpp, 63, 0, 0, 0);
 8003fae:	4d16      	ldr	r5, [pc, #88]	@ (8004008 <_Z28getFont_Grand9KPixel_30_4bppv+0x5c>)
 8003fb0:	682c      	ldr	r4, [r5, #0]
 8003fb2:	f3bf 8f5b 	dmb	ish
 8003fb6:	f014 0401 	ands.w	r4, r4, #1
{
 8003fba:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont Grand9KPixel_30_4bpp(glyphs_Grand9KPixel_30_4bpp, 9, 30, 30, 0, 0, 4, 1, 0, 0, unicodes_Grand9KPixel_30_4bpp, kerning_Grand9KPixel_30_4bpp, 63, 0, 0, 0);
 8003fbc:	d121      	bne.n	8004002 <_Z28getFont_Grand9KPixel_30_4bppv+0x56>
 8003fbe:	4628      	mov	r0, r5
 8003fc0:	f00f fecb 	bl	8013d5a <__cxa_guard_acquire>
 8003fc4:	b1e8      	cbz	r0, 8004002 <_Z28getFont_Grand9KPixel_30_4bppv+0x56>
 8003fc6:	233f      	movs	r3, #63	@ 0x3f
 8003fc8:	9309      	str	r3, [sp, #36]	@ 0x24
 8003fca:	4b10      	ldr	r3, [pc, #64]	@ (800400c <_Z28getFont_Grand9KPixel_30_4bppv+0x60>)
 8003fcc:	9308      	str	r3, [sp, #32]
 8003fce:	4b10      	ldr	r3, [pc, #64]	@ (8004010 <_Z28getFont_Grand9KPixel_30_4bppv+0x64>)
 8003fd0:	4910      	ldr	r1, [pc, #64]	@ (8004014 <_Z28getFont_Grand9KPixel_30_4bppv+0x68>)
 8003fd2:	4811      	ldr	r0, [pc, #68]	@ (8004018 <_Z28getFont_Grand9KPixel_30_4bppv+0x6c>)
 8003fd4:	940a      	str	r4, [sp, #40]	@ 0x28
 8003fd6:	e9cd 4306 	strd	r4, r3, [sp, #24]
 8003fda:	2201      	movs	r2, #1
 8003fdc:	2304      	movs	r3, #4
 8003fde:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8003fe2:	231e      	movs	r3, #30
 8003fe4:	9300      	str	r3, [sp, #0]
 8003fe6:	2209      	movs	r2, #9
 8003fe8:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 8003fec:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8003ff0:	9405      	str	r4, [sp, #20]
 8003ff2:	f7ff fc27 	bl	8003844 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8003ff6:	4809      	ldr	r0, [pc, #36]	@ (800401c <_Z28getFont_Grand9KPixel_30_4bppv+0x70>)
 8003ff8:	f00f ffb8 	bl	8013f6c <atexit>
 8003ffc:	4628      	mov	r0, r5
 8003ffe:	f00f feb8 	bl	8013d72 <__cxa_guard_release>
    return Grand9KPixel_30_4bpp;
}
 8004002:	4805      	ldr	r0, [pc, #20]	@ (8004018 <_Z28getFont_Grand9KPixel_30_4bppv+0x6c>)
 8004004:	b00f      	add	sp, #60	@ 0x3c
 8004006:	bd30      	pop	{r4, r5, pc}
 8004008:	200040d4 	.word	0x200040d4
 800400c:	0801e1d0 	.word	0x0801e1d0
 8004010:	0801e388 	.word	0x0801e388
 8004014:	0801d6c4 	.word	0x0801d6c4
 8004018:	200040d8 	.word	0x200040d8
 800401c:	08003fa9 	.word	0x08003fa9

08004020 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8004020:	4770      	bx	lr
	...

08004024 <_Z23getFont_verdana_10_4bppv>:
{
 8004024:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8004026:	4d16      	ldr	r5, [pc, #88]	@ (8004080 <_Z23getFont_verdana_10_4bppv+0x5c>)
 8004028:	682c      	ldr	r4, [r5, #0]
 800402a:	f3bf 8f5b 	dmb	ish
 800402e:	f014 0401 	ands.w	r4, r4, #1
{
 8004032:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8004034:	d120      	bne.n	8004078 <_Z23getFont_verdana_10_4bppv+0x54>
 8004036:	4628      	mov	r0, r5
 8004038:	f00f fe8f 	bl	8013d5a <__cxa_guard_acquire>
 800403c:	b1e0      	cbz	r0, 8004078 <_Z23getFont_verdana_10_4bppv+0x54>
 800403e:	233f      	movs	r3, #63	@ 0x3f
 8004040:	9309      	str	r3, [sp, #36]	@ 0x24
 8004042:	4b10      	ldr	r3, [pc, #64]	@ (8004084 <_Z23getFont_verdana_10_4bppv+0x60>)
 8004044:	9308      	str	r3, [sp, #32]
 8004046:	4b10      	ldr	r3, [pc, #64]	@ (8004088 <_Z23getFont_verdana_10_4bppv+0x64>)
 8004048:	4910      	ldr	r1, [pc, #64]	@ (800408c <_Z23getFont_verdana_10_4bppv+0x68>)
 800404a:	4811      	ldr	r0, [pc, #68]	@ (8004090 <_Z23getFont_verdana_10_4bppv+0x6c>)
 800404c:	940a      	str	r4, [sp, #40]	@ 0x28
 800404e:	2201      	movs	r2, #1
 8004050:	e9cd 4306 	strd	r4, r3, [sp, #24]
 8004054:	2304      	movs	r3, #4
 8004056:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800405a:	230a      	movs	r3, #10
 800405c:	9300      	str	r3, [sp, #0]
 800405e:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 8004062:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8004066:	9405      	str	r4, [sp, #20]
 8004068:	f7ff fbec 	bl	8003844 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800406c:	4809      	ldr	r0, [pc, #36]	@ (8004094 <_Z23getFont_verdana_10_4bppv+0x70>)
 800406e:	f00f ff7d 	bl	8013f6c <atexit>
 8004072:	4628      	mov	r0, r5
 8004074:	f00f fe7d 	bl	8013d72 <__cxa_guard_release>
    return verdana_10_4bpp;
}
 8004078:	4805      	ldr	r0, [pc, #20]	@ (8004090 <_Z23getFont_verdana_10_4bppv+0x6c>)
 800407a:	b00f      	add	sp, #60	@ 0x3c
 800407c:	bd30      	pop	{r4, r5, pc}
 800407e:	bf00      	nop
 8004080:	20004104 	.word	0x20004104
 8004084:	0801e1d4 	.word	0x0801e1d4
 8004088:	0801e38c 	.word	0x0801e38c
 800408c:	0801d744 	.word	0x0801d744
 8004090:	20004108 	.word	0x20004108
 8004094:	08004021 	.word	0x08004021

08004098 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 95, 24, 20, 0, 0, 4, 1, 1, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8004098:	4770      	bx	lr
	...

0800409c <_Z23getFont_verdana_20_4bppv>:
{
 800409c:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 95, 24, 20, 0, 0, 4, 1, 1, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 800409e:	4d17      	ldr	r5, [pc, #92]	@ (80040fc <_Z23getFont_verdana_20_4bppv+0x60>)
 80040a0:	682c      	ldr	r4, [r5, #0]
 80040a2:	f3bf 8f5b 	dmb	ish
 80040a6:	f014 0401 	ands.w	r4, r4, #1
{
 80040aa:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 95, 24, 20, 0, 0, 4, 1, 1, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 80040ac:	d122      	bne.n	80040f4 <_Z23getFont_verdana_20_4bppv+0x58>
 80040ae:	4628      	mov	r0, r5
 80040b0:	f00f fe53 	bl	8013d5a <__cxa_guard_acquire>
 80040b4:	b1f0      	cbz	r0, 80040f4 <_Z23getFont_verdana_20_4bppv+0x58>
 80040b6:	233f      	movs	r3, #63	@ 0x3f
 80040b8:	9309      	str	r3, [sp, #36]	@ 0x24
 80040ba:	4b11      	ldr	r3, [pc, #68]	@ (8004100 <_Z23getFont_verdana_20_4bppv+0x64>)
 80040bc:	9308      	str	r3, [sp, #32]
 80040be:	4b11      	ldr	r3, [pc, #68]	@ (8004104 <_Z23getFont_verdana_20_4bppv+0x68>)
 80040c0:	9307      	str	r3, [sp, #28]
 80040c2:	2301      	movs	r3, #1
 80040c4:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80040c8:	9304      	str	r3, [sp, #16]
 80040ca:	2304      	movs	r3, #4
 80040cc:	e9cd 4302 	strd	r4, r3, [sp, #8]
 80040d0:	2314      	movs	r3, #20
 80040d2:	490d      	ldr	r1, [pc, #52]	@ (8004108 <_Z23getFont_verdana_20_4bppv+0x6c>)
 80040d4:	9300      	str	r3, [sp, #0]
 80040d6:	225f      	movs	r2, #95	@ 0x5f
 80040d8:	2318      	movs	r3, #24
 80040da:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 80040de:	480b      	ldr	r0, [pc, #44]	@ (800410c <_Z23getFont_verdana_20_4bppv+0x70>)
 80040e0:	940a      	str	r4, [sp, #40]	@ 0x28
 80040e2:	9401      	str	r4, [sp, #4]
 80040e4:	f7ff fbae 	bl	8003844 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80040e8:	4809      	ldr	r0, [pc, #36]	@ (8004110 <_Z23getFont_verdana_20_4bppv+0x74>)
 80040ea:	f00f ff3f 	bl	8013f6c <atexit>
 80040ee:	4628      	mov	r0, r5
 80040f0:	f00f fe3f 	bl	8013d72 <__cxa_guard_release>
    return verdana_20_4bpp;
}
 80040f4:	4805      	ldr	r0, [pc, #20]	@ (800410c <_Z23getFont_verdana_20_4bppv+0x70>)
 80040f6:	b00f      	add	sp, #60	@ 0x3c
 80040f8:	bd30      	pop	{r4, r5, pc}
 80040fa:	bf00      	nop
 80040fc:	20004134 	.word	0x20004134
 8004100:	0801e1d8 	.word	0x0801e1d8
 8004104:	0801e390 	.word	0x0801e390
 8004108:	0801d754 	.word	0x0801d754
 800410c:	20004138 	.word	0x20004138
 8004110:	08004099 	.word	0x08004099

08004114 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8004114:	4770      	bx	lr
	...

08004118 <_Z23getFont_verdana_40_4bppv>:
{
 8004118:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 800411a:	4d16      	ldr	r5, [pc, #88]	@ (8004174 <_Z23getFont_verdana_40_4bppv+0x5c>)
 800411c:	682c      	ldr	r4, [r5, #0]
 800411e:	f3bf 8f5b 	dmb	ish
 8004122:	f014 0401 	ands.w	r4, r4, #1
{
 8004126:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8004128:	d120      	bne.n	800416c <_Z23getFont_verdana_40_4bppv+0x54>
 800412a:	4628      	mov	r0, r5
 800412c:	f00f fe15 	bl	8013d5a <__cxa_guard_acquire>
 8004130:	b1e0      	cbz	r0, 800416c <_Z23getFont_verdana_40_4bppv+0x54>
 8004132:	233f      	movs	r3, #63	@ 0x3f
 8004134:	9309      	str	r3, [sp, #36]	@ 0x24
 8004136:	4b10      	ldr	r3, [pc, #64]	@ (8004178 <_Z23getFont_verdana_40_4bppv+0x60>)
 8004138:	9308      	str	r3, [sp, #32]
 800413a:	4b10      	ldr	r3, [pc, #64]	@ (800417c <_Z23getFont_verdana_40_4bppv+0x64>)
 800413c:	4910      	ldr	r1, [pc, #64]	@ (8004180 <_Z23getFont_verdana_40_4bppv+0x68>)
 800413e:	4811      	ldr	r0, [pc, #68]	@ (8004184 <_Z23getFont_verdana_40_4bppv+0x6c>)
 8004140:	940a      	str	r4, [sp, #40]	@ 0x28
 8004142:	2201      	movs	r2, #1
 8004144:	e9cd 4306 	strd	r4, r3, [sp, #24]
 8004148:	2304      	movs	r3, #4
 800414a:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800414e:	2328      	movs	r3, #40	@ 0x28
 8004150:	9300      	str	r3, [sp, #0]
 8004152:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 8004156:	e9cd 4401 	strd	r4, r4, [sp, #4]
 800415a:	9405      	str	r4, [sp, #20]
 800415c:	f7ff fb72 	bl	8003844 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8004160:	4809      	ldr	r0, [pc, #36]	@ (8004188 <_Z23getFont_verdana_40_4bppv+0x70>)
 8004162:	f00f ff03 	bl	8013f6c <atexit>
 8004166:	4628      	mov	r0, r5
 8004168:	f00f fe03 	bl	8013d72 <__cxa_guard_release>
    return verdana_40_4bpp;
}
 800416c:	4805      	ldr	r0, [pc, #20]	@ (8004184 <_Z23getFont_verdana_40_4bppv+0x6c>)
 800416e:	b00f      	add	sp, #60	@ 0x3c
 8004170:	bd30      	pop	{r4, r5, pc}
 8004172:	bf00      	nop
 8004174:	20004164 	.word	0x20004164
 8004178:	0801e37c 	.word	0x0801e37c
 800417c:	0801e394 	.word	0x0801e394
 8004180:	0801dc88 	.word	0x0801dc88
 8004184:	20004168 	.word	0x20004168
 8004188:	08004115 	.word	0x08004115

0800418c <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdanaz_22_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdanaz_22_4bpp();

touchgfx::GeneratedFont& getFont_verdanaz_22_4bpp()
{
    static touchgfx::GeneratedFont verdanaz_22_4bpp(glyphs_verdanaz_22_4bpp, 95, 27, 22, 0, 0, 4, 1, 3, 3, unicodes_verdanaz_22_4bpp, kerning_verdanaz_22_4bpp, 63, 0, 0, 0);
 800418c:	4770      	bx	lr
	...

08004190 <_Z24getFont_verdanaz_22_4bppv>:
{
 8004190:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdanaz_22_4bpp(glyphs_verdanaz_22_4bpp, 95, 27, 22, 0, 0, 4, 1, 3, 3, unicodes_verdanaz_22_4bpp, kerning_verdanaz_22_4bpp, 63, 0, 0, 0);
 8004192:	4d17      	ldr	r5, [pc, #92]	@ (80041f0 <_Z24getFont_verdanaz_22_4bppv+0x60>)
 8004194:	682c      	ldr	r4, [r5, #0]
 8004196:	f3bf 8f5b 	dmb	ish
 800419a:	f014 0401 	ands.w	r4, r4, #1
{
 800419e:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont verdanaz_22_4bpp(glyphs_verdanaz_22_4bpp, 95, 27, 22, 0, 0, 4, 1, 3, 3, unicodes_verdanaz_22_4bpp, kerning_verdanaz_22_4bpp, 63, 0, 0, 0);
 80041a0:	d123      	bne.n	80041ea <_Z24getFont_verdanaz_22_4bppv+0x5a>
 80041a2:	4628      	mov	r0, r5
 80041a4:	f00f fdd9 	bl	8013d5a <__cxa_guard_acquire>
 80041a8:	b1f8      	cbz	r0, 80041ea <_Z24getFont_verdanaz_22_4bppv+0x5a>
 80041aa:	233f      	movs	r3, #63	@ 0x3f
 80041ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80041ae:	4b11      	ldr	r3, [pc, #68]	@ (80041f4 <_Z24getFont_verdanaz_22_4bppv+0x64>)
 80041b0:	9308      	str	r3, [sp, #32]
 80041b2:	4b11      	ldr	r3, [pc, #68]	@ (80041f8 <_Z24getFont_verdanaz_22_4bppv+0x68>)
 80041b4:	9307      	str	r3, [sp, #28]
 80041b6:	2303      	movs	r3, #3
 80041b8:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80041bc:	2201      	movs	r2, #1
 80041be:	2304      	movs	r3, #4
 80041c0:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80041c4:	2316      	movs	r3, #22
 80041c6:	490d      	ldr	r1, [pc, #52]	@ (80041fc <_Z24getFont_verdanaz_22_4bppv+0x6c>)
 80041c8:	9300      	str	r3, [sp, #0]
 80041ca:	225f      	movs	r2, #95	@ 0x5f
 80041cc:	231b      	movs	r3, #27
 80041ce:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 80041d2:	e9cd 4401 	strd	r4, r4, [sp, #4]
 80041d6:	480a      	ldr	r0, [pc, #40]	@ (8004200 <_Z24getFont_verdanaz_22_4bppv+0x70>)
 80041d8:	940a      	str	r4, [sp, #40]	@ 0x28
 80041da:	f7ff fb33 	bl	8003844 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80041de:	4809      	ldr	r0, [pc, #36]	@ (8004204 <_Z24getFont_verdanaz_22_4bppv+0x74>)
 80041e0:	f00f fec4 	bl	8013f6c <atexit>
 80041e4:	4628      	mov	r0, r5
 80041e6:	f00f fdc4 	bl	8013d72 <__cxa_guard_release>
    return verdanaz_22_4bpp;
}
 80041ea:	4805      	ldr	r0, [pc, #20]	@ (8004200 <_Z24getFont_verdanaz_22_4bppv+0x70>)
 80041ec:	b00f      	add	sp, #60	@ 0x3c
 80041ee:	bd30      	pop	{r4, r5, pc}
 80041f0:	20004194 	.word	0x20004194
 80041f4:	0801e380 	.word	0x0801e380
 80041f8:	0801e398 	.word	0x0801e398
 80041fc:	0801dc98 	.word	0x0801dc98
 8004200:	20004198 	.word	0x20004198
 8004204:	0800418d 	.word	0x0800418d

08004208 <_ZNK8touchgfx4Font12getGSUBTableEv>:
    }
 8004208:	2000      	movs	r0, #0
 800420a:	4770      	bx	lr

0800420c <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
    }
 800420c:	2000      	movs	r0, #0
 800420e:	4770      	bx	lr

08004210 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8004210:	b40e      	push	{r1, r2, r3}
 8004212:	b503      	push	{r0, r1, lr}
 8004214:	ab03      	add	r3, sp, #12
    va_list pArg;
    va_start(pArg, text);
    uint16_t width = getStringWidthRTL(TEXT_DIRECTION_LTR, text, pArg);
 8004216:	2100      	movs	r1, #0
{
 8004218:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(pArg, text);
 800421c:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthRTL(TEXT_DIRECTION_LTR, text, pArg);
 800421e:	f00a f9f5 	bl	800e60c <_ZNK8touchgfx4Font17getStringWidthRTLEhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 8004222:	b002      	add	sp, #8
 8004224:	f85d eb04 	ldr.w	lr, [sp], #4
 8004228:	b003      	add	sp, #12
 800422a:	4770      	bx	lr

0800422c <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 800422c:	b40c      	push	{r2, r3}
 800422e:	b507      	push	{r0, r1, r2, lr}
 8004230:	ab04      	add	r3, sp, #16
 8004232:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list pArg;
    va_start(pArg, text);
 8004236:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthRTL(textDirection, text, pArg);
 8004238:	f00a f9e8 	bl	800e60c <_ZNK8touchgfx4Font17getStringWidthRTLEhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 800423c:	b003      	add	sp, #12
 800423e:	f85d eb04 	ldr.w	lr, [sp], #4
 8004242:	b002      	add	sp, #8
 8004244:	4770      	bx	lr
	...

08004248 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
 8004248:	b510      	push	{r4, lr}
 800424a:	4604      	mov	r4, r0
    nextCharacters.replaceAt0(unicodeConverter(direction));
 800424c:	f00a ffc4 	bl	800f1d8 <_ZN8touchgfx12TextProvider16unicodeConverterEh>
            replaceAt(++used - 1, newChar);
        }

        FORCE_INLINE_FUNCTION void replaceAt0(Unicode::UnicodeChar newChar)
        {
            buffer[pos] = newChar;
 8004250:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8004252:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8004256:	8458      	strh	r0, [r3, #34]	@ 0x22
    if (fontGsubTable && nextCharacters.peekChar())
 8004258:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800425a:	b35b      	cbz	r3, 80042b4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x6c>
            assert(used > 0);
 800425c:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 800425e:	b92b      	cbnz	r3, 800426c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x24>
 8004260:	4b17      	ldr	r3, [pc, #92]	@ (80042c0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x78>)
 8004262:	4a18      	ldr	r2, [pc, #96]	@ (80042c4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x7c>)
 8004264:	21c5      	movs	r1, #197	@ 0xc5
            assert(offset < used);
 8004266:	4818      	ldr	r0, [pc, #96]	@ (80042c8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x80>)
 8004268:	f00f fe62 	bl	8013f30 <__assert_func>
 800426c:	b310      	cbz	r0, 80042b4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x6c>
    {
        substituteGlyphs();
 800426e:	4620      	mov	r0, r4
 8004270:	f00c f8af 	bl	80103d2 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
 8004274:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 8004276:	2b01      	cmp	r3, #1
 8004278:	d803      	bhi.n	8004282 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x3a>
 800427a:	4b14      	ldr	r3, [pc, #80]	@ (80042cc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x84>)
 800427c:	4a14      	ldr	r2, [pc, #80]	@ (80042d0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x88>)
 800427e:	21cb      	movs	r1, #203	@ 0xcb
 8004280:	e7f1      	b.n	8004266 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x1e>
            const uint16_t index = pos + offset;
 8004282:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 8004284:	1c53      	adds	r3, r2, #1
 8004286:	b29b      	uxth	r3, r3
            return buffer[index < size ? index : index - size];
 8004288:	2b09      	cmp	r3, #9
 800428a:	4619      	mov	r1, r3
 800428c:	bf88      	it	hi
 800428e:	f1a3 010a 	subhi.w	r1, r3, #10
 8004292:	eb04 0141 	add.w	r1, r4, r1, lsl #1
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 8004296:	f640 103f 	movw	r0, #2367	@ 0x93f
 800429a:	8c49      	ldrh	r1, [r1, #34]	@ 0x22
 800429c:	4281      	cmp	r1, r0
 800429e:	d109      	bne.n	80042b4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x6c>
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
 80042a0:	2b0a      	cmp	r3, #10
 80042a2:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 80042a6:	bf28      	it	cs
 80042a8:	2300      	movcs	r3, #0

        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
            const uint16_t index = pos + 1;
            buffer[index < size ? index : 0] = newChar;
 80042aa:	eb04 0343 	add.w	r3, r4, r3, lsl #1
            return buffer[pos];
 80042ae:	8c50      	ldrh	r0, [r2, #34]	@ 0x22
            buffer[index < size ? index : 0] = newChar;
 80042b0:	8458      	strh	r0, [r3, #34]	@ 0x22
            buffer[pos] = newChar;
 80042b2:	8451      	strh	r1, [r2, #34]	@ 0x22
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
            nextCharacters.replaceAt0(0x093F);
        }
    }
    return getNextChar();
 80042b4:	4620      	mov	r0, r4
}
 80042b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return getNextChar();
 80042ba:	f00b bf8d 	b.w	80101d8 <_ZN8touchgfx12TextProvider11getNextCharEv>
 80042be:	bf00      	nop
 80042c0:	08016564 	.word	0x08016564
 80042c4:	0801656d 	.word	0x0801656d
 80042c8:	08016618 	.word	0x08016618
 80042cc:	08016662 	.word	0x08016662
 80042d0:	08016670 	.word	0x08016670

080042d4 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
 80042d4:	b510      	push	{r4, lr}
 80042d6:	4604      	mov	r4, r0
    fillInputBuffer();
 80042d8:	f00b ff45 	bl	8010166 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
    unicodeConverterInit();
 80042dc:	4620      	mov	r0, r4
}
 80042de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    unicodeConverterInit();
 80042e2:	f00a bf74 	b.w	800f1ce <_ZN8touchgfx12TextProvider20unicodeConverterInitEv>

080042e6 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 80042e6:	b510      	push	{r4, lr}
 80042e8:	b086      	sub	sp, #24
 80042ea:	ac02      	add	r4, sp, #8
 80042ec:	e884 0006 	stmia.w	r4, {r1, r2}
 80042f0:	461a      	mov	r2, r3
    va_list pArg;
    va_start(pArg, format);
 80042f2:	ab0a      	add	r3, sp, #40	@ 0x28
 80042f4:	9305      	str	r3, [sp, #20]
    drawStringRTL(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 80042f6:	9301      	str	r3, [sp, #4]
 80042f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80042fa:	9300      	str	r3, [sp, #0]
 80042fc:	4621      	mov	r1, r4
 80042fe:	9b08      	ldr	r3, [sp, #32]
 8004300:	f008 fdbe 	bl	800ce80 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 8004304:	b006      	add	sp, #24
 8004306:	bd10      	pop	{r4, pc}

08004308 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 8004308:	b538      	push	{r3, r4, r5, lr}
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
    if (id < 1)
 800430a:	bb18      	cbnz	r0, 8004354 <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
    {
        if (languagesArray[id] != 0)
 800430c:	4b12      	ldr	r3, [pc, #72]	@ (8004358 <_ZN8touchgfx5Texts11setLanguageEt+0x50>)
 800430e:	4813      	ldr	r0, [pc, #76]	@ (800435c <_ZN8touchgfx5Texts11setLanguageEt+0x54>)
 8004310:	681c      	ldr	r4, [r3, #0]
 8004312:	4913      	ldr	r1, [pc, #76]	@ (8004360 <_ZN8touchgfx5Texts11setLanguageEt+0x58>)
 8004314:	b1b4      	cbz	r4, 8004344 <_ZN8touchgfx5Texts11setLanguageEt+0x3c>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8004316:	6822      	ldr	r2, [r4, #0]
 8004318:	4422      	add	r2, r4
 800431a:	6002      	str	r2, [r0, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 800431c:	6862      	ldr	r2, [r4, #4]
 800431e:	4422      	add	r2, r4
 8004320:	600a      	str	r2, [r1, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 8004322:	68a2      	ldr	r2, [r4, #8]
 8004324:	4414      	add	r4, r2
        }
    }

    if (currentLanguageTypedText)
    {
        currentLanguage = id;
 8004326:	4b0f      	ldr	r3, [pc, #60]	@ (8004364 <_ZN8touchgfx5Texts11setLanguageEt+0x5c>)
 8004328:	2200      	movs	r2, #0
 800432a:	801a      	strh	r2, [r3, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 800432c:	f000 f838 	bl	80043a0 <_ZN17TypedTextDatabase8getFontsEv>
 8004330:	4605      	mov	r5, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 8004332:	f000 f833 	bl	800439c <_ZN17TypedTextDatabase15getInstanceSizeEv>
        typedTexts = data;
 8004336:	4b0c      	ldr	r3, [pc, #48]	@ (8004368 <_ZN8touchgfx5Texts11setLanguageEt+0x60>)
 8004338:	601c      	str	r4, [r3, #0]
        fonts = f;
 800433a:	4b0c      	ldr	r3, [pc, #48]	@ (800436c <_ZN8touchgfx5Texts11setLanguageEt+0x64>)
 800433c:	601d      	str	r5, [r3, #0]
        numberOfTypedTexts = n;
 800433e:	4b0c      	ldr	r3, [pc, #48]	@ (8004370 <_ZN8touchgfx5Texts11setLanguageEt+0x68>)
 8004340:	8018      	strh	r0, [r3, #0]
    }
}
 8004342:	e007      	b.n	8004354 <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
            currentLanguagePtr = texts_all_languages;
 8004344:	4b0b      	ldr	r3, [pc, #44]	@ (8004374 <_ZN8touchgfx5Texts11setLanguageEt+0x6c>)
 8004346:	6003      	str	r3, [r0, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 8004348:	4b0b      	ldr	r3, [pc, #44]	@ (8004378 <_ZN8touchgfx5Texts11setLanguageEt+0x70>)
 800434a:	600b      	str	r3, [r1, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 800434c:	4b0b      	ldr	r3, [pc, #44]	@ (800437c <_ZN8touchgfx5Texts11setLanguageEt+0x74>)
 800434e:	681c      	ldr	r4, [r3, #0]
    if (currentLanguageTypedText)
 8004350:	2c00      	cmp	r4, #0
 8004352:	d1e8      	bne.n	8004326 <_ZN8touchgfx5Texts11setLanguageEt+0x1e>
}
 8004354:	bd38      	pop	{r3, r4, r5, pc}
 8004356:	bf00      	nop
 8004358:	200041d0 	.word	0x200041d0
 800435c:	200041c8 	.word	0x200041c8
 8004360:	200041c4 	.word	0x200041c4
 8004364:	200041cc 	.word	0x200041cc
 8004368:	20014fa4 	.word	0x20014fa4
 800436c:	20014fac 	.word	0x20014fac
 8004370:	20014fa8 	.word	0x20014fa8
 8004374:	0801e3b0 	.word	0x0801e3b0
 8004378:	0801e39c 	.word	0x0801e39c
 800437c:	0801e3dc 	.word	0x0801e3dc

08004380 <_ZNK8touchgfx5Texts7getTextEt>:
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
    return &currentLanguagePtr[currentLanguageIndices[id]];
 8004380:	4b04      	ldr	r3, [pc, #16]	@ (8004394 <_ZNK8touchgfx5Texts7getTextEt+0x14>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8004388:	4b03      	ldr	r3, [pc, #12]	@ (8004398 <_ZNK8touchgfx5Texts7getTextEt+0x18>)
 800438a:	681b      	ldr	r3, [r3, #0]
}
 800438c:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8004390:	4770      	bx	lr
 8004392:	bf00      	nop
 8004394:	200041c4 	.word	0x200041c4
 8004398:	200041c8 	.word	0x200041c8

0800439c <_ZN17TypedTextDatabase15getInstanceSizeEv>:
}

uint16_t getInstanceSize()
{
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
}
 800439c:	2005      	movs	r0, #5
 800439e:	4770      	bx	lr

080043a0 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
    return touchgfx_fonts;
}
 80043a0:	4800      	ldr	r0, [pc, #0]	@ (80043a4 <_ZN17TypedTextDatabase8getFontsEv+0x4>)
 80043a2:	4770      	bx	lr
 80043a4:	200041d4 	.word	0x200041d4

080043a8 <_GLOBAL__sub_I_touchgfx_fonts>:
    case 5:
        touchgfx_fonts[5] = &(getFont_Grand9KPixel_30_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 80043a8:	b510      	push	{r4, lr}
    &(getFont_verdana_20_4bpp()),
 80043aa:	f7ff fe77 	bl	800409c <_Z23getFont_verdana_20_4bppv>
};
 80043ae:	4c09      	ldr	r4, [pc, #36]	@ (80043d4 <_GLOBAL__sub_I_touchgfx_fonts+0x2c>)
 80043b0:	6020      	str	r0, [r4, #0]
    &(getFont_verdana_40_4bpp()),
 80043b2:	f7ff feb1 	bl	8004118 <_Z23getFont_verdana_40_4bppv>
};
 80043b6:	6060      	str	r0, [r4, #4]
    &(getFont_verdana_10_4bpp()),
 80043b8:	f7ff fe34 	bl	8004024 <_Z23getFont_verdana_10_4bppv>
};
 80043bc:	60a0      	str	r0, [r4, #8]
    &(getFont_verdanaz_22_4bpp()),
 80043be:	f7ff fee7 	bl	8004190 <_Z24getFont_verdanaz_22_4bppv>
};
 80043c2:	60e0      	str	r0, [r4, #12]
    &(getFont_Grand9KPixel_15_4bpp()),
 80043c4:	f7ff fdb4 	bl	8003f30 <_Z28getFont_Grand9KPixel_15_4bppv>
};
 80043c8:	6120      	str	r0, [r4, #16]
    &(getFont_Grand9KPixel_30_4bpp())
 80043ca:	f7ff fdef 	bl	8003fac <_Z28getFont_Grand9KPixel_30_4bppv>
};
 80043ce:	6160      	str	r0, [r4, #20]
} // namespace TypedTextDatabase
 80043d0:	bd10      	pop	{r4, pc}
 80043d2:	bf00      	nop
 80043d4:	200041d4 	.word	0x200041d4

080043d8 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 80043d8:	4770      	bx	lr

080043da <_ZN19FrontendApplicationD0Ev>:
 80043da:	b510      	push	{r4, lr}
 80043dc:	f44f 71ae 	mov.w	r1, #348	@ 0x15c
 80043e0:	4604      	mov	r4, r0
 80043e2:	f00f fcb8 	bl	8013d56 <_ZdlPvj>
 80043e6:	4620      	mov	r0, r4
 80043e8:	bd10      	pop	{r4, pc}

080043ea <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 80043ea:	b510      	push	{r4, lr}
 80043ec:	4604      	mov	r4, r0
    {
        model.tick();
 80043ee:	f8d0 0158 	ldr.w	r0, [r0, #344]	@ 0x158
 80043f2:	f000 f817 	bl	8004424 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 80043f6:	4620      	mov	r0, r4
    }
 80043f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        FrontendApplicationBase::handleTickEvent();
 80043fc:	f009 ba3c 	b.w	800d878 <_ZN8touchgfx11Application15handleTickEventEv>

08004400 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 8004400:	b510      	push	{r4, lr}
 8004402:	4604      	mov	r4, r0
    : FrontendApplicationBase(m, heap)
 8004404:	f7ff f9ac 	bl	8003760 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 8004408:	4b01      	ldr	r3, [pc, #4]	@ (8004410 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x10>)
 800440a:	6023      	str	r3, [r4, #0]
{

}
 800440c:	4620      	mov	r0, r4
 800440e:	bd10      	pop	{r4, pc}
 8004410:	0801674c 	.word	0x0801674c

08004414 <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : ImageX(95),ImageY(160), modelListener(0)
 8004414:	4902      	ldr	r1, [pc, #8]	@ (8004420 <_ZN5ModelC1Ev+0xc>)
 8004416:	2200      	movs	r2, #0
 8004418:	e9c0 2100 	strd	r2, r1, [r0]
 800441c:	6082      	str	r2, [r0, #8]
{
	modelTickCount = 0;
}
 800441e:	4770      	bx	lr
 8004420:	00a0005f 	.word	0x00a0005f

08004424 <_ZN5Model4tickEv>:

void Model::tick()
{
	modelTickCount++;
 8004424:	6803      	ldr	r3, [r0, #0]
 8004426:	3301      	adds	r3, #1
 8004428:	6003      	str	r3, [r0, #0]
}
 800442a:	4770      	bx	lr

0800442c <_ZN16Screen1PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen1Presenter() {};
 800442c:	4770      	bx	lr

0800442e <_ZThn4_N16Screen1PresenterD1Ev>:
 800442e:	3804      	subs	r0, #4
 8004430:	4770      	bx	lr

08004432 <_ZN16Screen1Presenter10deactivateEv>:
}

void Screen1Presenter::activate()
{

}
 8004432:	4770      	bx	lr

08004434 <_ZN16Screen1PresenterD0Ev>:
 8004434:	b510      	push	{r4, lr}
 8004436:	2110      	movs	r1, #16
 8004438:	4604      	mov	r4, r0
 800443a:	f00f fc8c 	bl	8013d56 <_ZdlPvj>
 800443e:	4620      	mov	r0, r4
 8004440:	bd10      	pop	{r4, pc}

08004442 <_ZThn4_N16Screen1PresenterD0Ev>:
 8004442:	f1a0 0004 	sub.w	r0, r0, #4
 8004446:	e7f5      	b.n	8004434 <_ZN16Screen1PresenterD0Ev>

08004448 <_ZN16Screen1PresenterC1ER11Screen1View>:
    ModelListener() : model(0) {}
 8004448:	2200      	movs	r2, #0
 800444a:	6082      	str	r2, [r0, #8]
    : view(v)
 800444c:	4a02      	ldr	r2, [pc, #8]	@ (8004458 <_ZN16Screen1PresenterC1ER11Screen1View+0x10>)
 800444e:	6002      	str	r2, [r0, #0]
 8004450:	3218      	adds	r2, #24
 8004452:	6042      	str	r2, [r0, #4]
 8004454:	60c1      	str	r1, [r0, #12]
}
 8004456:	4770      	bx	lr
 8004458:	080167a0 	.word	0x080167a0

0800445c <_ZN11Screen1View14tearDownScreenEv>:
}

void Screen1View::tearDownScreen()
{
    Screen1ViewBase::tearDownScreen();
}
 800445c:	4770      	bx	lr

0800445e <_ZN11Screen1View9resetGameEv>:
    Unicode::snprintf(hiScoresBuffer, HISCORES_SIZE, "%05d", newValue); // %05d ensures 5 digits with leading zeros
    hiScores.setWildcard(hiScoresBuffer);
    hiScores.invalidate();
}

void Screen1View::resetGame() {
 800445e:	b538      	push	{r3, r4, r5, lr}
	gamePaused = true;
	if (tickCounter > hiScore*5){
 8004460:	e9d0 13e1 	ldrd	r1, r3, [r0, #900]	@ 0x384
 8004464:	eb03 0383 	add.w	r3, r3, r3, lsl #2
	gamePaused = true;
 8004468:	2501      	movs	r5, #1
	if (tickCounter > hiScore*5){
 800446a:	4299      	cmp	r1, r3
void Screen1View::resetGame() {
 800446c:	4604      	mov	r4, r0
	gamePaused = true;
 800446e:	f880 5391 	strb.w	r5, [r0, #913]	@ 0x391
	if (tickCounter > hiScore*5){
 8004472:	dd09      	ble.n	8004488 <_ZN11Screen1View9resetGameEv+0x2a>
        hiScore = tickCounter / 5; // Update hiScore if current score is higher
 8004474:	2305      	movs	r3, #5
 8004476:	fb91 f1f3 	sdiv	r1, r1, r3
        updateHiScores(hiScore);
 800447a:	6803      	ldr	r3, [r0, #0]
        hiScore = tickCounter / 5; // Update hiScore if current score is higher
 800447c:	f8c0 1388 	str.w	r1, [r0, #904]	@ 0x388
        updateHiScores(hiScore);
 8004480:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004482:	4798      	blx	r3
 8004484:	f884 52ed 	strb.w	r5, [r4, #749]	@ 0x2ed
 8004488:	2301      	movs	r3, #1
 800448a:	f884 3339 	strb.w	r3, [r4, #825]	@ 0x339
	    hiScores.setVisible(true);
	    	    }
	gameover.setVisible(true);
}
 800448e:	bd38      	pop	{r3, r4, r5, pc}

08004490 <_ZN11Screen1View12updateScoresEi>:
{
 8004490:	b538      	push	{r3, r4, r5, lr}
 8004492:	4604      	mov	r4, r0
    Unicode::snprintf(scoresBuffer, SCORES_SIZE, "%05d", newValue); // %05d ensures 5 digits with leading zeros
 8004494:	f500 7557 	add.w	r5, r0, #860	@ 0x35c
{
 8004498:	460b      	mov	r3, r1
    Unicode::snprintf(scoresBuffer, SCORES_SIZE, "%05d", newValue); // %05d ensures 5 digits with leading zeros
 800449a:	4628      	mov	r0, r5
 800449c:	4a05      	ldr	r2, [pc, #20]	@ (80044b4 <_ZN11Screen1View12updateScoresEi+0x24>)
 800449e:	210a      	movs	r1, #10
 80044a0:	f00c fd40 	bl	8010f24 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 80044a4:	f8c4 52c4 	str.w	r5, [r4, #708]	@ 0x2c4
    scores.invalidate();
 80044a8:	f504 701f 	add.w	r0, r4, #636	@ 0x27c
}
 80044ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    scores.invalidate();
 80044b0:	f00a b9b3 	b.w	800e81a <_ZNK8touchgfx8Drawable10invalidateEv>
 80044b4:	080167c0 	.word	0x080167c0

080044b8 <_ZN11Screen1View14updateHiScoresEi>:
{
 80044b8:	b538      	push	{r3, r4, r5, lr}
 80044ba:	4604      	mov	r4, r0
    Unicode::snprintf(hiScoresBuffer, HISCORES_SIZE, "%05d", newValue); // %05d ensures 5 digits with leading zeros
 80044bc:	f500 755c 	add.w	r5, r0, #880	@ 0x370
{
 80044c0:	460b      	mov	r3, r1
    Unicode::snprintf(hiScoresBuffer, HISCORES_SIZE, "%05d", newValue); // %05d ensures 5 digits with leading zeros
 80044c2:	4628      	mov	r0, r5
 80044c4:	4a05      	ldr	r2, [pc, #20]	@ (80044dc <_ZN11Screen1View14updateHiScoresEi+0x24>)
 80044c6:	210a      	movs	r1, #10
 80044c8:	f00c fd2c 	bl	8010f24 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 80044cc:	f8c4 5310 	str.w	r5, [r4, #784]	@ 0x310
    hiScores.invalidate();
 80044d0:	f504 7032 	add.w	r0, r4, #712	@ 0x2c8
}
 80044d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    hiScores.invalidate();
 80044d8:	f00a b99f 	b.w	800e81a <_ZNK8touchgfx8Drawable10invalidateEv>
 80044dc:	080167c0 	.word	0x080167c0

080044e0 <_ZN11Screen1ViewD1Ev>:
#include "JointedObstacleManager.hpp"
class Screen1View : public Screen1ViewBase
{
public:
    Screen1View();
    virtual ~Screen1View() {}
 80044e0:	b538      	push	{r3, r4, r5, lr}
    struct array
 80044e2:	f500 5500 	add.w	r5, r0, #8192	@ 0x2000
 80044e6:	4b1c      	ldr	r3, [pc, #112]	@ (8004558 <_ZN11Screen1ViewD1Ev+0x78>)
 80044e8:	6003      	str	r3, [r0, #0]
 80044ea:	f8d5 3bf8 	ldr.w	r3, [r5, #3064]	@ 0xbf8
 80044ee:	4604      	mov	r4, r0
 80044f0:	f500 502f 	add.w	r0, r0, #11200	@ 0x2bc0
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	3038      	adds	r0, #56	@ 0x38
 80044f8:	4798      	blx	r3
 80044fa:	f8d5 3bc8 	ldr.w	r3, [r5, #3016]	@ 0xbc8
 80044fe:	f504 502f 	add.w	r0, r4, #11200	@ 0x2bc0
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	3008      	adds	r0, #8
 8004506:	4798      	blx	r3
 8004508:	f504 5580 	add.w	r5, r4, #4096	@ 0x1000
 800450c:	f504 50c1 	add.w	r0, r4, #6176	@ 0x1820
 8004510:	3018      	adds	r0, #24
 8004512:	f00f fc89 	bl	8013e28 <_ZNSt13random_device7_M_finiEv>
 8004516:	f8d5 37f4 	ldr.w	r3, [r5, #2036]	@ 0x7f4
 800451a:	f504 50bf 	add.w	r0, r4, #6112	@ 0x17e0
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	3014      	adds	r0, #20
 8004522:	4798      	blx	r3
 8004524:	f8d5 37c4 	ldr.w	r3, [r5, #1988]	@ 0x7c4
 8004528:	f504 50be 	add.w	r0, r4, #6080	@ 0x17c0
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	3004      	adds	r0, #4
 8004530:	4798      	blx	r3
 8004532:	f204 402c 	addw	r0, r4, #1068	@ 0x42c
 8004536:	f00f fc77 	bl	8013e28 <_ZNSt13random_device7_M_finiEv>
 800453a:	f44f 757d 	mov.w	r5, #1012	@ 0x3f4
#define OBSTACLEMANAGER_HPP

#include "Entity.hpp"
#include <random>

class ObstacleManager {
 800453e:	5963      	ldr	r3, [r4, r5]
 8004540:	1960      	adds	r0, r4, r5
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	3d30      	subs	r5, #48	@ 0x30
 8004546:	4798      	blx	r3
 8004548:	f5b5 7f59 	cmp.w	r5, #868	@ 0x364
 800454c:	d1f7      	bne.n	800453e <_ZN11Screen1ViewD1Ev+0x5e>
 800454e:	4620      	mov	r0, r4
 8004550:	f7ff f9eb 	bl	800392a <_ZN15Screen1ViewBaseD1Ev>
 8004554:	4620      	mov	r0, r4
 8004556:	bd38      	pop	{r3, r4, r5, pc}
 8004558:	080167d0 	.word	0x080167d0

0800455c <_ZN11Screen1ViewD0Ev>:
 800455c:	b510      	push	{r4, lr}
 800455e:	4604      	mov	r4, r0
 8004560:	f7ff ffbe 	bl	80044e0 <_ZN11Screen1ViewD1Ev>
 8004564:	4620      	mov	r0, r4
 8004566:	f642 4134 	movw	r1, #11316	@ 0x2c34
 800456a:	f00f fbf4 	bl	8013d56 <_ZdlPvj>
 800456e:	4620      	mov	r0, r4
 8004570:	bd10      	pop	{r4, pc}
	...

08004574 <_ZN11Screen1ViewC1Ev>:
Screen1View::Screen1View()
 8004574:	b538      	push	{r3, r4, r5, lr}
 8004576:	4604      	mov	r4, r0
    : tickCounter(0), isJumping(false), jumpTickCounter(0), currentState(NEUTRAL),gamePaused(false),hiScore(0),speed(3)  // Initialize variables
 8004578:	f7ff fa7a 	bl	8003a70 <_ZN15Screen1ViewBaseC1Ev>
 800457c:	4b0d      	ldr	r3, [pc, #52]	@ (80045b4 <_ZN11Screen1ViewC1Ev+0x40>)
 800457e:	6023      	str	r3, [r4, #0]
 8004580:	2500      	movs	r5, #0
 8004582:	4b0d      	ldr	r3, [pc, #52]	@ (80045b8 <_ZN11Screen1ViewC1Ev+0x44>)
 8004584:	f8c4 338c 	str.w	r3, [r4, #908]	@ 0x38c
 8004588:	e9c4 55e1 	strd	r5, r5, [r4, #900]	@ 0x384
 800458c:	f8a4 5390 	strh.w	r5, [r4, #912]	@ 0x390
 8004590:	f884 5392 	strb.w	r5, [r4, #914]	@ 0x392
 8004594:	f504 7065 	add.w	r0, r4, #916	@ 0x394
 8004598:	f7fc fe8e 	bl	80012b8 <_ZN22JointedObstacleManagerC1Ev>
 800459c:	f504 502f 	add.w	r0, r4, #11200	@ 0x2bc0
 80045a0:	3008      	adds	r0, #8
 80045a2:	f7fc fd15 	bl	8000fd0 <_ZN12CloudManagerC1Ev>
 80045a6:	f504 5300 	add.w	r3, r4, #8192	@ 0x2000
}
 80045aa:	4620      	mov	r0, r4
    : tickCounter(0), isJumping(false), jumpTickCounter(0), currentState(NEUTRAL),gamePaused(false),hiScore(0),speed(3)  // Initialize variables
 80045ac:	f883 5c30 	strb.w	r5, [r3, #3120]	@ 0xc30
}
 80045b0:	bd38      	pop	{r3, r4, r5, pc}
 80045b2:	bf00      	nop
 80045b4:	080167d0 	.word	0x080167d0
 80045b8:	40400000 	.word	0x40400000

080045bc <_ZN11Screen1View14checkCollisionERKN8touchgfx5ImageE>:
    int objX = jointedObstacleManager.currentObjectX;
 80045bc:	f500 5080 	add.w	r0, r0, #4096	@ 0x1000
bool Screen1View::checkCollision(const touchgfx::Image& img1) {
 80045c0:	b510      	push	{r4, lr}
    int objX = jointedObstacleManager.currentObjectX;
 80045c2:	f8d0 2824 	ldr.w	r2, [r0, #2084]	@ 0x824
    return (img1.getX() < objX + objWidth &&
 80045c6:	f8d0 382c 	ldr.w	r3, [r0, #2092]	@ 0x82c
 80045ca:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
 80045ce:	4413      	add	r3, r2
            img1.getY() < objY + objHeight &&
 80045d0:	429c      	cmp	r4, r3
 80045d2:	da15      	bge.n	8004600 <_ZN11Screen1View14checkCollisionERKN8touchgfx5ImageE+0x44>
            img1.getX() + img1.getWidth() > objX &&
 80045d4:	f9b1 3008 	ldrsh.w	r3, [r1, #8]
 80045d8:	4423      	add	r3, r4
    return (img1.getX() < objX + objWidth &&
 80045da:	4293      	cmp	r3, r2
 80045dc:	dd10      	ble.n	8004600 <_ZN11Screen1View14checkCollisionERKN8touchgfx5ImageE+0x44>
    int objY = jointedObstacleManager.currentObjectY;
 80045de:	f8d0 2828 	ldr.w	r2, [r0, #2088]	@ 0x828
            img1.getY() < objY + objHeight &&
 80045e2:	f8d0 3830 	ldr.w	r3, [r0, #2096]	@ 0x830
 80045e6:	f9b1 4006 	ldrsh.w	r4, [r1, #6]
 80045ea:	4413      	add	r3, r2
            img1.getX() + img1.getWidth() > objX &&
 80045ec:	429c      	cmp	r4, r3
 80045ee:	da07      	bge.n	8004600 <_ZN11Screen1View14checkCollisionERKN8touchgfx5ImageE+0x44>
            img1.getY() + img1.getHeight() > objY);
 80045f0:	f9b1 000a 	ldrsh.w	r0, [r1, #10]
 80045f4:	4420      	add	r0, r4
            img1.getY() < objY + objHeight &&
 80045f6:	4290      	cmp	r0, r2
 80045f8:	bfd4      	ite	le
 80045fa:	2000      	movle	r0, #0
 80045fc:	2001      	movgt	r0, #1
}
 80045fe:	bd10      	pop	{r4, pc}
            img1.getY() < objY + objHeight &&
 8004600:	2000      	movs	r0, #0
 8004602:	e7fc      	b.n	80045fe <_ZN11Screen1View14checkCollisionERKN8touchgfx5ImageE+0x42>
 8004604:	0000      	movs	r0, r0
	...

08004608 <_ZN11Screen1View15handleTickEventEv>:
{
 8004608:	b538      	push	{r3, r4, r5, lr}
	if (gamePaused == true)
 800460a:	f890 3391 	ldrb.w	r3, [r0, #913]	@ 0x391
{
 800460e:	4604      	mov	r4, r0
	if (gamePaused == true)
 8004610:	b1bb      	cbz	r3, 8004642 <_ZN11Screen1View15handleTickEventEv+0x3a>
	if (JoystickX >= 150)
 8004612:	4ba3      	ldr	r3, [pc, #652]	@ (80048a0 <_ZN11Screen1View15handleTickEventEv+0x298>)
 8004614:	881b      	ldrh	r3, [r3, #0]
 8004616:	2b95      	cmp	r3, #149	@ 0x95
 8004618:	f240 813b 	bls.w	8004892 <_ZN11Screen1View15handleTickEventEv+0x28a>
	    		  gamePaused = false;
 800461c:	2500      	movs	r5, #0
 800461e:	f880 5391 	strb.w	r5, [r0, #913]	@ 0x391
	    		  cloudManager.initializeClouds();
 8004622:	f500 502f 	add.w	r0, r0, #11200	@ 0x2bc0
 8004626:	3008      	adds	r0, #8
 8004628:	f7fc fdc2 	bl	80011b0 <_ZN12CloudManager16initializeCloudsEv>
	    		  jointedObstacleManager.initializeEntities();
 800462c:	f504 7065 	add.w	r0, r4, #916	@ 0x394
 8004630:	f7fc fed0 	bl	80013d4 <_ZN22JointedObstacleManager18initializeEntitiesEv>
	    		  speed = 3;
 8004634:	4b9b      	ldr	r3, [pc, #620]	@ (80048a4 <_ZN11Screen1View15handleTickEventEv+0x29c>)
	    		  tickCounter = 0;
 8004636:	f8c4 5384 	str.w	r5, [r4, #900]	@ 0x384
	    		  speed = 3;
 800463a:	f8c4 338c 	str.w	r3, [r4, #908]	@ 0x38c
 800463e:	f884 5339 	strb.w	r5, [r4, #825]	@ 0x339
    tickCounter += 1;
 8004642:	f8d4 3384 	ldr.w	r3, [r4, #900]	@ 0x384
 8004646:	2232      	movs	r2, #50	@ 0x32
 8004648:	3301      	adds	r3, #1
 800464a:	f8c4 3384 	str.w	r3, [r4, #900]	@ 0x384
 800464e:	fb93 f1f2 	sdiv	r1, r3, r2
 8004652:	fb02 3311 	mls	r3, r2, r1, r3
    if (tickCounter % 50 == 0)
 8004656:	b9ab      	cbnz	r3, 8004684 <_ZN11Screen1View15handleTickEventEv+0x7c>
    	if (speed < 7)
 8004658:	edd4 7ae3 	vldr	s15, [r4, #908]	@ 0x38c
 800465c:	eeb1 7a0c 	vmov.f32	s14, #28	@ 0x40e00000  7.0
 8004660:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004664:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004668:	d50c      	bpl.n	8004684 <_ZN11Screen1View15handleTickEventEv+0x7c>
    	speed += 0.1;
 800466a:	ee17 0a90 	vmov	r0, s15
 800466e:	f7fb ff7b 	bl	8000568 <__aeabi_f2d>
 8004672:	a389      	add	r3, pc, #548	@ (adr r3, 8004898 <_ZN11Screen1View15handleTickEventEv+0x290>)
 8004674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004678:	f7fb fe18 	bl	80002ac <__adddf3>
 800467c:	f7fc fa66 	bl	8000b4c <__aeabi_d2f>
 8004680:	f8c4 038c 	str.w	r0, [r4, #908]	@ 0x38c
    cloudManager.updateClouds();
 8004684:	f504 502f 	add.w	r0, r4, #11200	@ 0x2bc0
 8004688:	3008      	adds	r0, #8
 800468a:	f7fc fce3 	bl	8001054 <_ZN12CloudManager12updateCloudsEv>
    jointedObstacleManager.updateEntities(speed, tickCounter);
 800468e:	f8d4 1384 	ldr.w	r1, [r4, #900]	@ 0x384
 8004692:	ed94 0ae3 	vldr	s0, [r4, #908]	@ 0x38c
 8004696:	f504 7065 	add.w	r0, r4, #916	@ 0x394
 800469a:	f7fc fea6 	bl	80013ea <_ZN22JointedObstacleManager14updateEntitiesEfi>
    switch (tickCounter % 6)
 800469e:	f8d4 3384 	ldr.w	r3, [r4, #900]	@ 0x384
 80046a2:	2206      	movs	r2, #6
 80046a4:	fb93 f1f2 	sdiv	r1, r3, r2
 80046a8:	fb02 3311 	mls	r3, r2, r1, r3
 80046ac:	2b02      	cmp	r3, #2
 80046ae:	d03a      	beq.n	8004726 <_ZN11Screen1View15handleTickEventEv+0x11e>
 80046b0:	2b04      	cmp	r3, #4
 80046b2:	d03f      	beq.n	8004734 <_ZN11Screen1View15handleTickEventEv+0x12c>
 80046b4:	b933      	cbnz	r3, 80046c4 <_ZN11Screen1View15handleTickEventEv+0xbc>
 80046b6:	2201      	movs	r2, #1
 80046b8:	f884 2115 	strb.w	r2, [r4, #277]	@ 0x115
 80046bc:	f884 30e9 	strb.w	r3, [r4, #233]	@ 0xe9
 80046c0:	f884 30bd 	strb.w	r3, [r4, #189]	@ 0xbd
    if (isJumping)
 80046c4:	f894 3390 	ldrb.w	r3, [r4, #912]	@ 0x390
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d04e      	beq.n	800476a <_ZN11Screen1View15handleTickEventEv+0x162>
    {   if (checkCollision(mario6))
 80046cc:	f504 71fc 	add.w	r1, r4, #504	@ 0x1f8
 80046d0:	4620      	mov	r0, r4
 80046d2:	f7ff ff73 	bl	80045bc <_ZN11Screen1View14checkCollisionERKN8touchgfx5ImageE>
 80046d6:	b118      	cbz	r0, 80046e0 <_ZN11Screen1View15handleTickEventEv+0xd8>
    	resetGame();
 80046d8:	6823      	ldr	r3, [r4, #0]
 80046da:	4620      	mov	r0, r4
 80046dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046de:	4798      	blx	r3
        jumpTickCounter += 1;
 80046e0:	f894 3392 	ldrb.w	r3, [r4, #914]	@ 0x392
 80046e4:	3301      	adds	r3, #1
 80046e6:	b2db      	uxtb	r3, r3
        if (jumpTickCounter <= 15)
 80046e8:	2b0f      	cmp	r3, #15
        jumpTickCounter += 1;
 80046ea:	f884 3392 	strb.w	r3, [r4, #914]	@ 0x392
        if (jumpTickCounter <= 15)
 80046ee:	d828      	bhi.n	8004742 <_ZN11Screen1View15handleTickEventEv+0x13a>
            mario6.setY(147 - (132 * jumpTickCounter / 15));  // Move smoothly up to y=15
 80046f0:	eb03 1343 	add.w	r3, r3, r3, lsl #5
 80046f4:	009b      	lsls	r3, r3, #2
 80046f6:	f06f 020e 	mvn.w	r2, #14
 80046fa:	fb93 f3f2 	sdiv	r3, r3, r2
 80046fe:	3393      	adds	r3, #147	@ 0x93
        rect.y = y;
 8004700:	f8a4 31fe 	strh.w	r3, [r4, #510]	@ 0x1fe
    if (tickCounter < 99999*5){
 8004704:	f8d4 3384 	ldr.w	r3, [r4, #900]	@ 0x384
 8004708:	4a67      	ldr	r2, [pc, #412]	@ (80048a8 <_ZN11Screen1View15handleTickEventEv+0x2a0>)
 800470a:	4293      	cmp	r3, r2
 800470c:	dc06      	bgt.n	800471c <_ZN11Screen1View15handleTickEventEv+0x114>
    	updateScores(tickCounter/5);
 800470e:	6822      	ldr	r2, [r4, #0]
 8004710:	2105      	movs	r1, #5
 8004712:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004714:	fb93 f1f1 	sdiv	r1, r3, r1
 8004718:	4620      	mov	r0, r4
 800471a:	4790      	blx	r2
     *
     * @see Container::invalidate
     */
    void invalidate() const
    {
        container.invalidate();
 800471c:	1d20      	adds	r0, r4, #4
}
 800471e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004722:	f00a b87a 	b.w	800e81a <_ZNK8touchgfx8Drawable10invalidateEv>
        visible = vis;
 8004726:	2300      	movs	r3, #0
 8004728:	2201      	movs	r2, #1
 800472a:	f884 3115 	strb.w	r3, [r4, #277]	@ 0x115
 800472e:	f884 20e9 	strb.w	r2, [r4, #233]	@ 0xe9
 8004732:	e7c5      	b.n	80046c0 <_ZN11Screen1View15handleTickEventEv+0xb8>
 8004734:	2300      	movs	r3, #0
 8004736:	f884 3115 	strb.w	r3, [r4, #277]	@ 0x115
 800473a:	f884 30e9 	strb.w	r3, [r4, #233]	@ 0xe9
 800473e:	2301      	movs	r3, #1
 8004740:	e7be      	b.n	80046c0 <_ZN11Screen1View15handleTickEventEv+0xb8>
        else if (jumpTickCounter <= 35)
 8004742:	2b23      	cmp	r3, #35	@ 0x23
 8004744:	d801      	bhi.n	800474a <_ZN11Screen1View15handleTickEventEv+0x142>
        rect.y = y;
 8004746:	230f      	movs	r3, #15
 8004748:	e7da      	b.n	8004700 <_ZN11Screen1View15handleTickEventEv+0xf8>
        else if (jumpTickCounter <= 50)
 800474a:	2b32      	cmp	r3, #50	@ 0x32
 800474c:	d807      	bhi.n	800475e <_ZN11Screen1View15handleTickEventEv+0x156>
            mario6.setY(15 + (132 * (jumpTickCounter - 35) / 15));  // Move smoothly down to y=147
 800474e:	2284      	movs	r2, #132	@ 0x84
 8004750:	3b23      	subs	r3, #35	@ 0x23
 8004752:	4353      	muls	r3, r2
 8004754:	220f      	movs	r2, #15
 8004756:	fbb3 f3f2 	udiv	r3, r3, r2
 800475a:	4413      	add	r3, r2
 800475c:	e7d0      	b.n	8004700 <_ZN11Screen1View15handleTickEventEv+0xf8>
            isJumping = false;
 800475e:	2300      	movs	r3, #0
 8004760:	f884 3390 	strb.w	r3, [r4, #912]	@ 0x390
            jumpTickCounter = 0;
 8004764:	f884 3392 	strb.w	r3, [r4, #914]	@ 0x392
 8004768:	e7cc      	b.n	8004704 <_ZN11Screen1View15handleTickEventEv+0xfc>
        if (JoystickY > 90 && JoystickY < 150)
 800476a:	4a50      	ldr	r2, [pc, #320]	@ (80048ac <_ZN11Screen1View15handleTickEventEv+0x2a4>)
 800476c:	8812      	ldrh	r2, [r2, #0]
        State newState = currentState;
 800476e:	f504 5100 	add.w	r1, r4, #8192	@ 0x2000
        if (JoystickY > 90 && JoystickY < 150)
 8004772:	f1a2 055b 	sub.w	r5, r2, #91	@ 0x5b
 8004776:	2d3a      	cmp	r5, #58	@ 0x3a
        State newState = currentState;
 8004778:	f891 0c30 	ldrb.w	r0, [r1, #3120]	@ 0xc30
        if (JoystickY > 90 && JoystickY < 150)
 800477c:	d943      	bls.n	8004806 <_ZN11Screen1View15handleTickEventEv+0x1fe>
        else if (JoystickY <= 90)
 800477e:	2a5a      	cmp	r2, #90	@ 0x5a
 8004780:	f04f 0201 	mov.w	r2, #1
 8004784:	d904      	bls.n	8004790 <_ZN11Screen1View15handleTickEventEv+0x188>
            isJumping = true;
 8004786:	f884 2390 	strb.w	r2, [r4, #912]	@ 0x390
            jumpTickCounter = 0;
 800478a:	f884 3392 	strb.w	r3, [r4, #914]	@ 0x392
            newState = JUMPING;
 800478e:	2202      	movs	r2, #2
        if (newState != currentState)
 8004790:	4282      	cmp	r2, r0
 8004792:	d012      	beq.n	80047ba <_ZN11Screen1View15handleTickEventEv+0x1b2>
            switch (currentState)
 8004794:	2a01      	cmp	r2, #1
            currentState = newState;
 8004796:	f881 2c30 	strb.w	r2, [r1, #3120]	@ 0xc30
            switch (currentState)
 800479a:	f04f 0300 	mov.w	r3, #0
 800479e:	d034      	beq.n	800480a <_ZN11Screen1View15handleTickEventEv+0x202>
 80047a0:	2a02      	cmp	r2, #2
 80047a2:	d039      	beq.n	8004818 <_ZN11Screen1View15handleTickEventEv+0x210>
        visible = vis;
 80047a4:	2201      	movs	r2, #1
 80047a6:	f884 216d 	strb.w	r2, [r4, #365]	@ 0x16d
 80047aa:	f884 3199 	strb.w	r3, [r4, #409]	@ 0x199
 80047ae:	f884 31c5 	strb.w	r3, [r4, #453]	@ 0x1c5
 80047b2:	f884 31f1 	strb.w	r3, [r4, #497]	@ 0x1f1
 80047b6:	f884 321d 	strb.w	r3, [r4, #541]	@ 0x21d
        if (currentState == NEUTRAL)
 80047ba:	f891 3c30 	ldrb.w	r3, [r1, #3120]	@ 0xc30
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d13a      	bne.n	8004838 <_ZN11Screen1View15handleTickEventEv+0x230>
        	if (checkCollision(mario2))
 80047c2:	f504 71a4 	add.w	r1, r4, #328	@ 0x148
 80047c6:	4620      	mov	r0, r4
 80047c8:	f7ff fef8 	bl	80045bc <_ZN11Screen1View14checkCollisionERKN8touchgfx5ImageE>
 80047cc:	b118      	cbz	r0, 80047d6 <_ZN11Screen1View15handleTickEventEv+0x1ce>
        		    resetGame();
 80047ce:	6823      	ldr	r3, [r4, #0]
 80047d0:	4620      	mov	r0, r4
 80047d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047d4:	4798      	blx	r3
            switch (tickCounter % 24)
 80047d6:	f8d4 3384 	ldr.w	r3, [r4, #900]	@ 0x384
 80047da:	2218      	movs	r2, #24
 80047dc:	fb93 f1f2 	sdiv	r1, r3, r2
 80047e0:	fb02 3311 	mls	r3, r2, r1, r3
 80047e4:	2b14      	cmp	r3, #20
 80047e6:	d88d      	bhi.n	8004704 <_ZN11Screen1View15handleTickEventEv+0xfc>
 80047e8:	4a31      	ldr	r2, [pc, #196]	@ (80048b0 <_ZN11Screen1View15handleTickEventEv+0x2a8>)
 80047ea:	2101      	movs	r1, #1
 80047ec:	fa01 f303 	lsl.w	r3, r1, r3
 80047f0:	401a      	ands	r2, r3
 80047f2:	b9da      	cbnz	r2, 800482c <_ZN11Screen1View15handleTickEventEv+0x224>
 80047f4:	482f      	ldr	r0, [pc, #188]	@ (80048b4 <_ZN11Screen1View15handleTickEventEv+0x2ac>)
 80047f6:	4018      	ands	r0, r3
 80047f8:	2800      	cmp	r0, #0
 80047fa:	d083      	beq.n	8004704 <_ZN11Screen1View15handleTickEventEv+0xfc>
 80047fc:	f884 216d 	strb.w	r2, [r4, #365]	@ 0x16d
 8004800:	f884 1199 	strb.w	r1, [r4, #409]	@ 0x199
    }
 8004804:	e77e      	b.n	8004704 <_ZN11Screen1View15handleTickEventEv+0xfc>
            newState = NEUTRAL;
 8004806:	461a      	mov	r2, r3
 8004808:	e7c2      	b.n	8004790 <_ZN11Screen1View15handleTickEventEv+0x188>
        visible = vis;
 800480a:	f884 316d 	strb.w	r3, [r4, #365]	@ 0x16d
 800480e:	f884 3199 	strb.w	r3, [r4, #409]	@ 0x199
 8004812:	f884 21c5 	strb.w	r2, [r4, #453]	@ 0x1c5
 8004816:	e7cc      	b.n	80047b2 <_ZN11Screen1View15handleTickEventEv+0x1aa>
 8004818:	f884 316d 	strb.w	r3, [r4, #365]	@ 0x16d
 800481c:	f884 3199 	strb.w	r3, [r4, #409]	@ 0x199
 8004820:	f884 31c5 	strb.w	r3, [r4, #453]	@ 0x1c5
 8004824:	f884 31f1 	strb.w	r3, [r4, #497]	@ 0x1f1
 8004828:	2301      	movs	r3, #1
 800482a:	e7c4      	b.n	80047b6 <_ZN11Screen1View15handleTickEventEv+0x1ae>
 800482c:	2300      	movs	r3, #0
 800482e:	f884 116d 	strb.w	r1, [r4, #365]	@ 0x16d
 8004832:	f884 3199 	strb.w	r3, [r4, #409]	@ 0x199
    }
 8004836:	e765      	b.n	8004704 <_ZN11Screen1View15handleTickEventEv+0xfc>
        else if (currentState == DUCKING)
 8004838:	2b01      	cmp	r3, #1
 800483a:	f47f af63 	bne.w	8004704 <_ZN11Screen1View15handleTickEventEv+0xfc>
        	if (checkCollision(mario4))
 800483e:	f504 71d0 	add.w	r1, r4, #416	@ 0x1a0
 8004842:	4620      	mov	r0, r4
 8004844:	f7ff feba 	bl	80045bc <_ZN11Screen1View14checkCollisionERKN8touchgfx5ImageE>
 8004848:	b118      	cbz	r0, 8004852 <_ZN11Screen1View15handleTickEventEv+0x24a>
        		 resetGame();
 800484a:	6823      	ldr	r3, [r4, #0]
 800484c:	4620      	mov	r0, r4
 800484e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004850:	4798      	blx	r3
            switch (tickCounter % 24)
 8004852:	f8d4 3384 	ldr.w	r3, [r4, #900]	@ 0x384
 8004856:	2218      	movs	r2, #24
 8004858:	fb93 f1f2 	sdiv	r1, r3, r2
 800485c:	fb02 3311 	mls	r3, r2, r1, r3
 8004860:	2b14      	cmp	r3, #20
 8004862:	f63f af4f 	bhi.w	8004704 <_ZN11Screen1View15handleTickEventEv+0xfc>
 8004866:	4a12      	ldr	r2, [pc, #72]	@ (80048b0 <_ZN11Screen1View15handleTickEventEv+0x2a8>)
 8004868:	2101      	movs	r1, #1
 800486a:	fa01 f303 	lsl.w	r3, r1, r3
 800486e:	401a      	ands	r2, r3
 8004870:	b94a      	cbnz	r2, 8004886 <_ZN11Screen1View15handleTickEventEv+0x27e>
 8004872:	4810      	ldr	r0, [pc, #64]	@ (80048b4 <_ZN11Screen1View15handleTickEventEv+0x2ac>)
 8004874:	4018      	ands	r0, r3
 8004876:	2800      	cmp	r0, #0
 8004878:	f43f af44 	beq.w	8004704 <_ZN11Screen1View15handleTickEventEv+0xfc>
        visible = vis;
 800487c:	f884 21c5 	strb.w	r2, [r4, #453]	@ 0x1c5
 8004880:	f884 11f1 	strb.w	r1, [r4, #497]	@ 0x1f1
    }
 8004884:	e73e      	b.n	8004704 <_ZN11Screen1View15handleTickEventEv+0xfc>
        visible = vis;
 8004886:	2300      	movs	r3, #0
 8004888:	f884 11c5 	strb.w	r1, [r4, #453]	@ 0x1c5
 800488c:	f884 31f1 	strb.w	r3, [r4, #497]	@ 0x1f1
    }
 8004890:	e738      	b.n	8004704 <_ZN11Screen1View15handleTickEventEv+0xfc>
}
 8004892:	bd38      	pop	{r3, r4, r5, pc}
 8004894:	f3af 8000 	nop.w
 8004898:	9999999a 	.word	0x9999999a
 800489c:	3fb99999 	.word	0x3fb99999
 80048a0:	2000012a 	.word	0x2000012a
 80048a4:	40400000 	.word	0x40400000
 80048a8:	0007a11a 	.word	0x0007a11a
 80048ac:	20000128 	.word	0x20000128
 80048b0:	00101101 	.word	0x00101101
 80048b4:	00010010 	.word	0x00010010

080048b8 <_ZN11Screen1View11setupScreenEv>:
{
 80048b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cloudManager.initializeClouds();
 80048ba:	f500 562f 	add.w	r6, r0, #11200	@ 0x2bc0
{
 80048be:	4604      	mov	r4, r0
    cloudManager.initializeClouds();
 80048c0:	3608      	adds	r6, #8
 80048c2:	4630      	mov	r0, r6
        container.add(d);
 80048c4:	1d25      	adds	r5, r4, #4
 80048c6:	f7fc fc73 	bl	80011b0 <_ZN12CloudManager16initializeCloudsEv>
 80048ca:	4631      	mov	r1, r6
 80048cc:	4628      	mov	r0, r5
 80048ce:	f005 f831 	bl	8009934 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80048d2:	f504 512f 	add.w	r1, r4, #11200	@ 0x2bc0
 80048d6:	3138      	adds	r1, #56	@ 0x38
 80048d8:	4628      	mov	r0, r5
    jointedObstacleManager.initializeEntities();
 80048da:	f504 7665 	add.w	r6, r4, #916	@ 0x394
 80048de:	f005 f829 	bl	8009934 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80048e2:	4630      	mov	r0, r6
 80048e4:	f7fc fd76 	bl	80013d4 <_ZN22JointedObstacleManager18initializeEntitiesEv>
    for (auto& obstacle : jointedObstacleManager.obstacleManager.obstacles) {
 80048e8:	f204 4724 	addw	r7, r4, #1060	@ 0x424
 80048ec:	42be      	cmp	r6, r7
 80048ee:	d10d      	bne.n	800490c <_ZN11Screen1View11setupScreenEv+0x54>
 80048f0:	f504 51be 	add.w	r1, r4, #6080	@ 0x17c0
 80048f4:	4628      	mov	r0, r5
 80048f6:	3104      	adds	r1, #4
 80048f8:	f005 f81c 	bl	8009934 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80048fc:	f504 51bf 	add.w	r1, r4, #6112	@ 0x17e0
 8004900:	4628      	mov	r0, r5
 8004902:	3114      	adds	r1, #20
}
 8004904:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004908:	f005 b814 	b.w	8009934 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800490c:	4631      	mov	r1, r6
 800490e:	4628      	mov	r0, r5
 8004910:	f005 f810 	bl	8009934 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    for (auto& obstacle : jointedObstacleManager.obstacleManager.obstacles) {
 8004914:	3630      	adds	r6, #48	@ 0x30
 8004916:	e7e9      	b.n	80048ec <_ZN11Screen1View11setupScreenEv+0x34>

08004918 <ili9341_GetLcdPixelWidth>:
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
}
 8004918:	20f0      	movs	r0, #240	@ 0xf0
 800491a:	4770      	bx	lr

0800491c <ili9341_GetLcdPixelHeight>:
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
}
 800491c:	f44f 70a0 	mov.w	r0, #320	@ 0x140
 8004920:	4770      	bx	lr

08004922 <ili9341_DisplayOn>:
  LCD_IO_WriteReg(LCD_Reg);
 8004922:	2029      	movs	r0, #41	@ 0x29
 8004924:	f7fd bbb4 	b.w	8002090 <LCD_IO_WriteReg>

08004928 <ili9341_DisplayOff>:
 8004928:	2028      	movs	r0, #40	@ 0x28
 800492a:	f7fd bbb1 	b.w	8002090 <LCD_IO_WriteReg>

0800492e <ili9341_Init>:
{
 800492e:	b508      	push	{r3, lr}
  LCD_IO_Init();
 8004930:	f7fd fb82 	bl	8002038 <LCD_IO_Init>
  LCD_IO_WriteReg(LCD_Reg);
 8004934:	20ca      	movs	r0, #202	@ 0xca
 8004936:	f7fd fbab 	bl	8002090 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 800493a:	20c3      	movs	r0, #195	@ 0xc3
 800493c:	f7fd fb8c 	bl	8002058 <LCD_IO_WriteData>
 8004940:	2008      	movs	r0, #8
 8004942:	f7fd fb89 	bl	8002058 <LCD_IO_WriteData>
 8004946:	2050      	movs	r0, #80	@ 0x50
 8004948:	f7fd fb86 	bl	8002058 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 800494c:	20cf      	movs	r0, #207	@ 0xcf
 800494e:	f7fd fb9f 	bl	8002090 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8004952:	2000      	movs	r0, #0
 8004954:	f7fd fb80 	bl	8002058 <LCD_IO_WriteData>
 8004958:	20c1      	movs	r0, #193	@ 0xc1
 800495a:	f7fd fb7d 	bl	8002058 <LCD_IO_WriteData>
 800495e:	2030      	movs	r0, #48	@ 0x30
 8004960:	f7fd fb7a 	bl	8002058 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8004964:	20ed      	movs	r0, #237	@ 0xed
 8004966:	f7fd fb93 	bl	8002090 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 800496a:	2064      	movs	r0, #100	@ 0x64
 800496c:	f7fd fb74 	bl	8002058 <LCD_IO_WriteData>
 8004970:	2003      	movs	r0, #3
 8004972:	f7fd fb71 	bl	8002058 <LCD_IO_WriteData>
 8004976:	2012      	movs	r0, #18
 8004978:	f7fd fb6e 	bl	8002058 <LCD_IO_WriteData>
 800497c:	2081      	movs	r0, #129	@ 0x81
 800497e:	f7fd fb6b 	bl	8002058 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8004982:	20e8      	movs	r0, #232	@ 0xe8
 8004984:	f7fd fb84 	bl	8002090 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8004988:	2085      	movs	r0, #133	@ 0x85
 800498a:	f7fd fb65 	bl	8002058 <LCD_IO_WriteData>
 800498e:	2000      	movs	r0, #0
 8004990:	f7fd fb62 	bl	8002058 <LCD_IO_WriteData>
 8004994:	2078      	movs	r0, #120	@ 0x78
 8004996:	f7fd fb5f 	bl	8002058 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 800499a:	20cb      	movs	r0, #203	@ 0xcb
 800499c:	f7fd fb78 	bl	8002090 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80049a0:	2039      	movs	r0, #57	@ 0x39
 80049a2:	f7fd fb59 	bl	8002058 <LCD_IO_WriteData>
 80049a6:	202c      	movs	r0, #44	@ 0x2c
 80049a8:	f7fd fb56 	bl	8002058 <LCD_IO_WriteData>
 80049ac:	2000      	movs	r0, #0
 80049ae:	f7fd fb53 	bl	8002058 <LCD_IO_WriteData>
 80049b2:	2034      	movs	r0, #52	@ 0x34
 80049b4:	f7fd fb50 	bl	8002058 <LCD_IO_WriteData>
 80049b8:	2002      	movs	r0, #2
 80049ba:	f7fd fb4d 	bl	8002058 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80049be:	20f7      	movs	r0, #247	@ 0xf7
 80049c0:	f7fd fb66 	bl	8002090 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80049c4:	2020      	movs	r0, #32
 80049c6:	f7fd fb47 	bl	8002058 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80049ca:	20ea      	movs	r0, #234	@ 0xea
 80049cc:	f7fd fb60 	bl	8002090 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80049d0:	2000      	movs	r0, #0
 80049d2:	f7fd fb41 	bl	8002058 <LCD_IO_WriteData>
 80049d6:	2000      	movs	r0, #0
 80049d8:	f7fd fb3e 	bl	8002058 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80049dc:	20b1      	movs	r0, #177	@ 0xb1
 80049de:	f7fd fb57 	bl	8002090 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80049e2:	2000      	movs	r0, #0
 80049e4:	f7fd fb38 	bl	8002058 <LCD_IO_WriteData>
 80049e8:	201b      	movs	r0, #27
 80049ea:	f7fd fb35 	bl	8002058 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80049ee:	20b6      	movs	r0, #182	@ 0xb6
 80049f0:	f7fd fb4e 	bl	8002090 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80049f4:	200a      	movs	r0, #10
 80049f6:	f7fd fb2f 	bl	8002058 <LCD_IO_WriteData>
 80049fa:	20a2      	movs	r0, #162	@ 0xa2
 80049fc:	f7fd fb2c 	bl	8002058 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8004a00:	20c0      	movs	r0, #192	@ 0xc0
 8004a02:	f7fd fb45 	bl	8002090 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8004a06:	2010      	movs	r0, #16
 8004a08:	f7fd fb26 	bl	8002058 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8004a0c:	20c1      	movs	r0, #193	@ 0xc1
 8004a0e:	f7fd fb3f 	bl	8002090 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8004a12:	2010      	movs	r0, #16
 8004a14:	f7fd fb20 	bl	8002058 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8004a18:	20c5      	movs	r0, #197	@ 0xc5
 8004a1a:	f7fd fb39 	bl	8002090 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8004a1e:	2045      	movs	r0, #69	@ 0x45
 8004a20:	f7fd fb1a 	bl	8002058 <LCD_IO_WriteData>
 8004a24:	2015      	movs	r0, #21
 8004a26:	f7fd fb17 	bl	8002058 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8004a2a:	20c7      	movs	r0, #199	@ 0xc7
 8004a2c:	f7fd fb30 	bl	8002090 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8004a30:	2090      	movs	r0, #144	@ 0x90
 8004a32:	f7fd fb11 	bl	8002058 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8004a36:	2036      	movs	r0, #54	@ 0x36
 8004a38:	f7fd fb2a 	bl	8002090 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8004a3c:	20c8      	movs	r0, #200	@ 0xc8
 8004a3e:	f7fd fb0b 	bl	8002058 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8004a42:	20f2      	movs	r0, #242	@ 0xf2
 8004a44:	f7fd fb24 	bl	8002090 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8004a48:	2000      	movs	r0, #0
 8004a4a:	f7fd fb05 	bl	8002058 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8004a4e:	20b0      	movs	r0, #176	@ 0xb0
 8004a50:	f7fd fb1e 	bl	8002090 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8004a54:	20c2      	movs	r0, #194	@ 0xc2
 8004a56:	f7fd faff 	bl	8002058 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8004a5a:	20b6      	movs	r0, #182	@ 0xb6
 8004a5c:	f7fd fb18 	bl	8002090 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8004a60:	200a      	movs	r0, #10
 8004a62:	f7fd faf9 	bl	8002058 <LCD_IO_WriteData>
 8004a66:	20a7      	movs	r0, #167	@ 0xa7
 8004a68:	f7fd faf6 	bl	8002058 <LCD_IO_WriteData>
 8004a6c:	2027      	movs	r0, #39	@ 0x27
 8004a6e:	f7fd faf3 	bl	8002058 <LCD_IO_WriteData>
 8004a72:	2004      	movs	r0, #4
 8004a74:	f7fd faf0 	bl	8002058 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8004a78:	202a      	movs	r0, #42	@ 0x2a
 8004a7a:	f7fd fb09 	bl	8002090 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8004a7e:	2000      	movs	r0, #0
 8004a80:	f7fd faea 	bl	8002058 <LCD_IO_WriteData>
 8004a84:	2000      	movs	r0, #0
 8004a86:	f7fd fae7 	bl	8002058 <LCD_IO_WriteData>
 8004a8a:	2000      	movs	r0, #0
 8004a8c:	f7fd fae4 	bl	8002058 <LCD_IO_WriteData>
 8004a90:	20ef      	movs	r0, #239	@ 0xef
 8004a92:	f7fd fae1 	bl	8002058 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8004a96:	202b      	movs	r0, #43	@ 0x2b
 8004a98:	f7fd fafa 	bl	8002090 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8004a9c:	2000      	movs	r0, #0
 8004a9e:	f7fd fadb 	bl	8002058 <LCD_IO_WriteData>
 8004aa2:	2000      	movs	r0, #0
 8004aa4:	f7fd fad8 	bl	8002058 <LCD_IO_WriteData>
 8004aa8:	2001      	movs	r0, #1
 8004aaa:	f7fd fad5 	bl	8002058 <LCD_IO_WriteData>
 8004aae:	203f      	movs	r0, #63	@ 0x3f
 8004ab0:	f7fd fad2 	bl	8002058 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8004ab4:	20f6      	movs	r0, #246	@ 0xf6
 8004ab6:	f7fd faeb 	bl	8002090 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8004aba:	2001      	movs	r0, #1
 8004abc:	f7fd facc 	bl	8002058 <LCD_IO_WriteData>
 8004ac0:	2000      	movs	r0, #0
 8004ac2:	f7fd fac9 	bl	8002058 <LCD_IO_WriteData>
 8004ac6:	2006      	movs	r0, #6
 8004ac8:	f7fd fac6 	bl	8002058 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8004acc:	202c      	movs	r0, #44	@ 0x2c
 8004ace:	f7fd fadf 	bl	8002090 <LCD_IO_WriteReg>
  LCD_Delay(200);
 8004ad2:	20c8      	movs	r0, #200	@ 0xc8
 8004ad4:	f7fd fb2a 	bl	800212c <LCD_Delay>
  LCD_IO_WriteReg(LCD_Reg);
 8004ad8:	2026      	movs	r0, #38	@ 0x26
 8004ada:	f7fd fad9 	bl	8002090 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8004ade:	2001      	movs	r0, #1
 8004ae0:	f7fd faba 	bl	8002058 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8004ae4:	20e0      	movs	r0, #224	@ 0xe0
 8004ae6:	f7fd fad3 	bl	8002090 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8004aea:	200f      	movs	r0, #15
 8004aec:	f7fd fab4 	bl	8002058 <LCD_IO_WriteData>
 8004af0:	2029      	movs	r0, #41	@ 0x29
 8004af2:	f7fd fab1 	bl	8002058 <LCD_IO_WriteData>
 8004af6:	2024      	movs	r0, #36	@ 0x24
 8004af8:	f7fd faae 	bl	8002058 <LCD_IO_WriteData>
 8004afc:	200c      	movs	r0, #12
 8004afe:	f7fd faab 	bl	8002058 <LCD_IO_WriteData>
 8004b02:	200e      	movs	r0, #14
 8004b04:	f7fd faa8 	bl	8002058 <LCD_IO_WriteData>
 8004b08:	2009      	movs	r0, #9
 8004b0a:	f7fd faa5 	bl	8002058 <LCD_IO_WriteData>
 8004b0e:	204e      	movs	r0, #78	@ 0x4e
 8004b10:	f7fd faa2 	bl	8002058 <LCD_IO_WriteData>
 8004b14:	2078      	movs	r0, #120	@ 0x78
 8004b16:	f7fd fa9f 	bl	8002058 <LCD_IO_WriteData>
 8004b1a:	203c      	movs	r0, #60	@ 0x3c
 8004b1c:	f7fd fa9c 	bl	8002058 <LCD_IO_WriteData>
 8004b20:	2009      	movs	r0, #9
 8004b22:	f7fd fa99 	bl	8002058 <LCD_IO_WriteData>
 8004b26:	2013      	movs	r0, #19
 8004b28:	f7fd fa96 	bl	8002058 <LCD_IO_WriteData>
 8004b2c:	2005      	movs	r0, #5
 8004b2e:	f7fd fa93 	bl	8002058 <LCD_IO_WriteData>
 8004b32:	2017      	movs	r0, #23
 8004b34:	f7fd fa90 	bl	8002058 <LCD_IO_WriteData>
 8004b38:	2011      	movs	r0, #17
 8004b3a:	f7fd fa8d 	bl	8002058 <LCD_IO_WriteData>
 8004b3e:	2000      	movs	r0, #0
 8004b40:	f7fd fa8a 	bl	8002058 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8004b44:	20e1      	movs	r0, #225	@ 0xe1
 8004b46:	f7fd faa3 	bl	8002090 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8004b4a:	2000      	movs	r0, #0
 8004b4c:	f7fd fa84 	bl	8002058 <LCD_IO_WriteData>
 8004b50:	2016      	movs	r0, #22
 8004b52:	f7fd fa81 	bl	8002058 <LCD_IO_WriteData>
 8004b56:	201b      	movs	r0, #27
 8004b58:	f7fd fa7e 	bl	8002058 <LCD_IO_WriteData>
 8004b5c:	2004      	movs	r0, #4
 8004b5e:	f7fd fa7b 	bl	8002058 <LCD_IO_WriteData>
 8004b62:	2011      	movs	r0, #17
 8004b64:	f7fd fa78 	bl	8002058 <LCD_IO_WriteData>
 8004b68:	2007      	movs	r0, #7
 8004b6a:	f7fd fa75 	bl	8002058 <LCD_IO_WriteData>
 8004b6e:	2031      	movs	r0, #49	@ 0x31
 8004b70:	f7fd fa72 	bl	8002058 <LCD_IO_WriteData>
 8004b74:	2033      	movs	r0, #51	@ 0x33
 8004b76:	f7fd fa6f 	bl	8002058 <LCD_IO_WriteData>
 8004b7a:	2042      	movs	r0, #66	@ 0x42
 8004b7c:	f7fd fa6c 	bl	8002058 <LCD_IO_WriteData>
 8004b80:	2005      	movs	r0, #5
 8004b82:	f7fd fa69 	bl	8002058 <LCD_IO_WriteData>
 8004b86:	200c      	movs	r0, #12
 8004b88:	f7fd fa66 	bl	8002058 <LCD_IO_WriteData>
 8004b8c:	200a      	movs	r0, #10
 8004b8e:	f7fd fa63 	bl	8002058 <LCD_IO_WriteData>
 8004b92:	2028      	movs	r0, #40	@ 0x28
 8004b94:	f7fd fa60 	bl	8002058 <LCD_IO_WriteData>
 8004b98:	202f      	movs	r0, #47	@ 0x2f
 8004b9a:	f7fd fa5d 	bl	8002058 <LCD_IO_WriteData>
 8004b9e:	200f      	movs	r0, #15
 8004ba0:	f7fd fa5a 	bl	8002058 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8004ba4:	2011      	movs	r0, #17
 8004ba6:	f7fd fa73 	bl	8002090 <LCD_IO_WriteReg>
  LCD_Delay(200);
 8004baa:	20c8      	movs	r0, #200	@ 0xc8
 8004bac:	f7fd fabe 	bl	800212c <LCD_Delay>
  LCD_IO_WriteReg(LCD_Reg);
 8004bb0:	2029      	movs	r0, #41	@ 0x29
 8004bb2:	f7fd fa6d 	bl	8002090 <LCD_IO_WriteReg>
}
 8004bb6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  LCD_IO_WriteReg(LCD_Reg);
 8004bba:	202c      	movs	r0, #44	@ 0x2c
 8004bbc:	f7fd ba68 	b.w	8002090 <LCD_IO_WriteReg>

08004bc0 <ili9341_ReadID>:
{
 8004bc0:	b508      	push	{r3, lr}
  LCD_IO_Init();
 8004bc2:	f7fd fa39 	bl	8002038 <LCD_IO_Init>
  return (LCD_IO_ReadData(RegValue, ReadSize));
 8004bc6:	2103      	movs	r1, #3
 8004bc8:	20d3      	movs	r0, #211	@ 0xd3
 8004bca:	f7fd fa7d 	bl	80020c8 <LCD_IO_ReadData>
}
 8004bce:	b280      	uxth	r0, r0
 8004bd0:	bd08      	pop	{r3, pc}

08004bd2 <stmpe811_Reset>:
  * @brief  Reset the stmpe811 by Software.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_Reset(uint16_t DeviceAddr)
{
 8004bd2:	b510      	push	{r4, lr}
  /* Power Down the stmpe811 */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 2);
 8004bd4:	b2c4      	uxtb	r4, r0
 8004bd6:	2202      	movs	r2, #2
 8004bd8:	2103      	movs	r1, #3
 8004bda:	4620      	mov	r0, r4
 8004bdc:	f7fd f9e2 	bl	8001fa4 <IOE_Write>

  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(10); 
 8004be0:	200a      	movs	r0, #10
 8004be2:	f7fd fa27 	bl	8002034 <IOE_Delay>
  
  /* Power On the Codec after the power off => all registers are reinitialized */
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 0);
 8004be6:	4620      	mov	r0, r4
 8004be8:	2200      	movs	r2, #0
 8004bea:	2103      	movs	r1, #3
 8004bec:	f7fd f9da 	bl	8001fa4 <IOE_Write>
  
  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(2); 
}
 8004bf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  IOE_Delay(2); 
 8004bf4:	2002      	movs	r0, #2
 8004bf6:	f7fd ba1d 	b.w	8002034 <IOE_Delay>

08004bfa <stmpe811_ReadID>:
  * @brief  Read the stmpe811 IO Expander device ID.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval The Device ID (two bytes).
  */
uint16_t stmpe811_ReadID(uint16_t DeviceAddr)
{
 8004bfa:	b538      	push	{r3, r4, r5, lr}
 8004bfc:	4604      	mov	r4, r0
  /* Initialize IO BUS layer */
  IOE_Init(); 
  
  /* Return the device ID value */
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8004bfe:	b2e4      	uxtb	r4, r4
  IOE_Init(); 
 8004c00:	f7fd f9ce 	bl	8001fa0 <IOE_Init>
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8004c04:	2100      	movs	r1, #0
 8004c06:	4620      	mov	r0, r4
 8004c08:	f7fd f9e4 	bl	8001fd4 <IOE_Read>
          (IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_MSB)));
 8004c0c:	2101      	movs	r1, #1
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8004c0e:	4605      	mov	r5, r0
          (IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_MSB)));
 8004c10:	4620      	mov	r0, r4
 8004c12:	f7fd f9df 	bl	8001fd4 <IOE_Read>
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8004c16:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
}
 8004c1a:	b280      	uxth	r0, r0
 8004c1c:	bd38      	pop	{r3, r4, r5, pc}

08004c1e <stmpe811_TS_DetectTouch>:
  * @brief  Return if there is touch detected or not.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Touch detected state.
  */
uint8_t stmpe811_TS_DetectTouch(uint16_t DeviceAddr)
{
 8004c1e:	b510      	push	{r4, lr}
  uint8_t state;
  uint8_t ret = 0;
  
  state = ((IOE_Read(DeviceAddr, STMPE811_REG_TSC_CTRL) & (uint8_t)STMPE811_TS_CTRL_STATUS) == (uint8_t)0x80);
 8004c20:	b2c4      	uxtb	r4, r0
 8004c22:	2140      	movs	r1, #64	@ 0x40
 8004c24:	4620      	mov	r0, r4
 8004c26:	f7fd f9d5 	bl	8001fd4 <IOE_Read>
  
  if(state > 0)
 8004c2a:	0603      	lsls	r3, r0, #24
 8004c2c:	d507      	bpl.n	8004c3e <stmpe811_TS_DetectTouch+0x20>
  {
    if(IOE_Read(DeviceAddr, STMPE811_REG_FIFO_SIZE) > 0)
 8004c2e:	214c      	movs	r1, #76	@ 0x4c
 8004c30:	4620      	mov	r0, r4
 8004c32:	f7fd f9cf 	bl	8001fd4 <IOE_Read>
 8004c36:	3800      	subs	r0, #0
 8004c38:	bf18      	it	ne
 8004c3a:	2001      	movne	r0, #1
    /* Enable the FIFO again */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
  }
  
  return ret;
}
 8004c3c:	bd10      	pop	{r4, pc}
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8004c3e:	2201      	movs	r2, #1
 8004c40:	214b      	movs	r1, #75	@ 0x4b
 8004c42:	4620      	mov	r0, r4
 8004c44:	f7fd f9ae 	bl	8001fa4 <IOE_Write>
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8004c48:	4620      	mov	r0, r4
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	214b      	movs	r1, #75	@ 0x4b
 8004c4e:	f7fd f9a9 	bl	8001fa4 <IOE_Write>
  uint8_t ret = 0;
 8004c52:	2000      	movs	r0, #0
 8004c54:	e7f2      	b.n	8004c3c <stmpe811_TS_DetectTouch+0x1e>

08004c56 <stmpe811_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value   
  * @retval None.
  */
void stmpe811_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8004c56:	b573      	push	{r0, r1, r4, r5, r6, lr}
  uint8_t  dataXYZ[4];
  uint32_t uldataXYZ;
  
  IOE_ReadMultiple(DeviceAddr, STMPE811_REG_TSC_DATA_NON_INC, dataXYZ, sizeof(dataXYZ)) ;
 8004c58:	2304      	movs	r3, #4
 8004c5a:	b2c4      	uxtb	r4, r0
{
 8004c5c:	460e      	mov	r6, r1
 8004c5e:	4615      	mov	r5, r2
  IOE_ReadMultiple(DeviceAddr, STMPE811_REG_TSC_DATA_NON_INC, dataXYZ, sizeof(dataXYZ)) ;
 8004c60:	21d7      	movs	r1, #215	@ 0xd7
 8004c62:	eb0d 0203 	add.w	r2, sp, r3
 8004c66:	4620      	mov	r0, r4
 8004c68:	f7fd f9ce 	bl	8002008 <IOE_ReadMultiple>
  
  /* Calculate positions values */
  uldataXYZ = (dataXYZ[0] << 24)|(dataXYZ[1] << 16)|(dataXYZ[2] << 8)|(dataXYZ[3] << 0);     
 8004c6c:	9b01      	ldr	r3, [sp, #4]
 8004c6e:	ba1b      	rev	r3, r3
  *X = (uldataXYZ >> 20) & 0x00000FFF;     
 8004c70:	0d1a      	lsrs	r2, r3, #20
  *Y = (uldataXYZ >>  8) & 0x00000FFF;     
 8004c72:	f3c3 230b 	ubfx	r3, r3, #8, #12
  *X = (uldataXYZ >> 20) & 0x00000FFF;     
 8004c76:	8032      	strh	r2, [r6, #0]
  
  /* Reset FIFO */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8004c78:	4620      	mov	r0, r4
  *Y = (uldataXYZ >>  8) & 0x00000FFF;     
 8004c7a:	802b      	strh	r3, [r5, #0]
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8004c7c:	2201      	movs	r2, #1
 8004c7e:	214b      	movs	r1, #75	@ 0x4b
 8004c80:	f7fd f990 	bl	8001fa4 <IOE_Write>
  /* Enable the FIFO again */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8004c84:	2200      	movs	r2, #0
 8004c86:	214b      	movs	r1, #75	@ 0x4b
 8004c88:	4620      	mov	r0, r4
 8004c8a:	f7fd f98b 	bl	8001fa4 <IOE_Write>
}
 8004c8e:	b002      	add	sp, #8
 8004c90:	bd70      	pop	{r4, r5, r6, pc}
	...

08004c94 <stmpe811_Init>:
{
 8004c94:	b510      	push	{r4, lr}
  uint8_t idx = 0;
  
  /* Check all the registered instances */
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
  {
    if(stmpe811[idx] == DeviceAddr)
 8004c96:	4a0a      	ldr	r2, [pc, #40]	@ (8004cc0 <stmpe811_Init+0x2c>)
 8004c98:	7813      	ldrb	r3, [r2, #0]
 8004c9a:	4298      	cmp	r0, r3
{
 8004c9c:	4604      	mov	r4, r0
    if(stmpe811[idx] == DeviceAddr)
 8004c9e:	d00d      	beq.n	8004cbc <stmpe811_Init+0x28>
 8004ca0:	7851      	ldrb	r1, [r2, #1]
 8004ca2:	4288      	cmp	r0, r1
 8004ca4:	d00a      	beq.n	8004cbc <stmpe811_Init+0x28>
 8004ca6:	b10b      	cbz	r3, 8004cac <stmpe811_Init+0x18>
 8004ca8:	b941      	cbnz	r1, 8004cbc <stmpe811_Init+0x28>
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 8004caa:	2301      	movs	r3, #1
      stmpe811[empty] = DeviceAddr;
 8004cac:	54d4      	strb	r4, [r2, r3]
      IOE_Init(); 
 8004cae:	f7fd f977 	bl	8001fa0 <IOE_Init>
      stmpe811_Reset(DeviceAddr);
 8004cb2:	4620      	mov	r0, r4
}
 8004cb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      stmpe811_Reset(DeviceAddr);
 8004cb8:	f7ff bf8b 	b.w	8004bd2 <stmpe811_Reset>
}
 8004cbc:	bd10      	pop	{r4, pc}
 8004cbe:	bf00      	nop
 8004cc0:	200041ec 	.word	0x200041ec

08004cc4 <stmpe811_EnableGlobalIT>:
{
 8004cc4:	b510      	push	{r4, lr}
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 8004cc6:	b2c4      	uxtb	r4, r0
 8004cc8:	2109      	movs	r1, #9
 8004cca:	4620      	mov	r0, r4
 8004ccc:	f7fd f982 	bl	8001fd4 <IOE_Read>
  tmp |= (uint8_t)STMPE811_GIT_EN;
 8004cd0:	f040 0201 	orr.w	r2, r0, #1
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp); 
 8004cd4:	b2d2      	uxtb	r2, r2
 8004cd6:	4620      	mov	r0, r4
 8004cd8:	2109      	movs	r1, #9
}
 8004cda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp); 
 8004cde:	f7fd b961 	b.w	8001fa4 <IOE_Write>

08004ce2 <stmpe811_DisableGlobalIT>:
{
 8004ce2:	b510      	push	{r4, lr}
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 8004ce4:	b2c4      	uxtb	r4, r0
 8004ce6:	2109      	movs	r1, #9
 8004ce8:	4620      	mov	r0, r4
 8004cea:	f7fd f973 	bl	8001fd4 <IOE_Read>
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp);
 8004cee:	2109      	movs	r1, #9
 8004cf0:	f000 02fe 	and.w	r2, r0, #254	@ 0xfe
 8004cf4:	4620      	mov	r0, r4
}
 8004cf6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp);
 8004cfa:	f7fd b953 	b.w	8001fa4 <IOE_Write>

08004cfe <stmpe811_EnableITSource>:
{
 8004cfe:	b538      	push	{r3, r4, r5, lr}
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8004d00:	b2c4      	uxtb	r4, r0
{
 8004d02:	460d      	mov	r5, r1
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8004d04:	4620      	mov	r0, r4
 8004d06:	210a      	movs	r1, #10
 8004d08:	f7fd f964 	bl	8001fd4 <IOE_Read>
  tmp |= Source; 
 8004d0c:	ea40 0205 	orr.w	r2, r0, r5
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8004d10:	b2d2      	uxtb	r2, r2
 8004d12:	4620      	mov	r0, r4
 8004d14:	210a      	movs	r1, #10
}
 8004d16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8004d1a:	f7fd b943 	b.w	8001fa4 <IOE_Write>

08004d1e <stmpe811_TS_EnableIT>:
{
 8004d1e:	b510      	push	{r4, lr}
 8004d20:	4604      	mov	r4, r0
  IOE_ITConfig();
 8004d22:	f7fd f93e 	bl	8001fa2 <IOE_ITConfig>
  stmpe811_EnableITSource(DeviceAddr, STMPE811_TS_IT); 
 8004d26:	4620      	mov	r0, r4
 8004d28:	211f      	movs	r1, #31
 8004d2a:	f7ff ffe8 	bl	8004cfe <stmpe811_EnableITSource>
  stmpe811_EnableGlobalIT(DeviceAddr);
 8004d2e:	4620      	mov	r0, r4
}
 8004d30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  stmpe811_EnableGlobalIT(DeviceAddr);
 8004d34:	f7ff bfc6 	b.w	8004cc4 <stmpe811_EnableGlobalIT>

08004d38 <stmpe811_DisableITSource>:
{
 8004d38:	b538      	push	{r3, r4, r5, lr}
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8004d3a:	b2c4      	uxtb	r4, r0
{
 8004d3c:	460d      	mov	r5, r1
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8004d3e:	4620      	mov	r0, r4
 8004d40:	210a      	movs	r1, #10
 8004d42:	f7fd f947 	bl	8001fd4 <IOE_Read>
  tmp &= ~Source; 
 8004d46:	ea20 0205 	bic.w	r2, r0, r5
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8004d4a:	b2d2      	uxtb	r2, r2
 8004d4c:	4620      	mov	r0, r4
 8004d4e:	210a      	movs	r1, #10
}
 8004d50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8004d54:	f7fd b926 	b.w	8001fa4 <IOE_Write>

08004d58 <stmpe811_TS_DisableIT>:
{
 8004d58:	b510      	push	{r4, lr}
 8004d5a:	4604      	mov	r4, r0
  stmpe811_DisableGlobalIT(DeviceAddr);
 8004d5c:	f7ff ffc1 	bl	8004ce2 <stmpe811_DisableGlobalIT>
  stmpe811_DisableITSource(DeviceAddr, STMPE811_TS_IT); 
 8004d60:	4620      	mov	r0, r4
 8004d62:	211f      	movs	r1, #31
}
 8004d64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  stmpe811_DisableITSource(DeviceAddr, STMPE811_TS_IT); 
 8004d68:	f7ff bfe6 	b.w	8004d38 <stmpe811_DisableITSource>

08004d6c <stmpe811_ReadGITStatus>:
{
 8004d6c:	b510      	push	{r4, lr}
  return((IOE_Read(DeviceAddr, STMPE811_REG_INT_STA) & Source));
 8004d6e:	b2c0      	uxtb	r0, r0
{
 8004d70:	460c      	mov	r4, r1
  return((IOE_Read(DeviceAddr, STMPE811_REG_INT_STA) & Source));
 8004d72:	210b      	movs	r1, #11
 8004d74:	f7fd f92e 	bl	8001fd4 <IOE_Read>
}
 8004d78:	4020      	ands	r0, r4
 8004d7a:	bd10      	pop	{r4, pc}

08004d7c <stmpe811_TS_ITStatus>:
  return(stmpe811_ReadGITStatus(DeviceAddr, STMPE811_TS_IT));
 8004d7c:	211f      	movs	r1, #31
 8004d7e:	f7ff bff5 	b.w	8004d6c <stmpe811_ReadGITStatus>

08004d82 <stmpe811_ClearGlobalIT>:
{
 8004d82:	460a      	mov	r2, r1
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, Source);
 8004d84:	b2c0      	uxtb	r0, r0
 8004d86:	210b      	movs	r1, #11
 8004d88:	f7fd b90c 	b.w	8001fa4 <IOE_Write>

08004d8c <stmpe811_TS_ClearIT>:
  stmpe811_ClearGlobalIT(DeviceAddr, STMPE811_TS_IT);
 8004d8c:	211f      	movs	r1, #31
 8004d8e:	f7ff bff8 	b.w	8004d82 <stmpe811_ClearGlobalIT>

08004d92 <stmpe811_IO_EnableAF>:
{
 8004d92:	b538      	push	{r3, r4, r5, lr}
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_AF);
 8004d94:	b2c4      	uxtb	r4, r0
{
 8004d96:	460d      	mov	r5, r1
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_AF);
 8004d98:	4620      	mov	r0, r4
 8004d9a:	2117      	movs	r1, #23
 8004d9c:	f7fd f91a 	bl	8001fd4 <IOE_Read>
  tmp &= ~(uint8_t)IO_Pin;   
 8004da0:	ea20 0205 	bic.w	r2, r0, r5
  IOE_Write(DeviceAddr, STMPE811_REG_IO_AF, tmp); 
 8004da4:	b2d2      	uxtb	r2, r2
 8004da6:	4620      	mov	r0, r4
 8004da8:	2117      	movs	r1, #23
}
 8004daa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  IOE_Write(DeviceAddr, STMPE811_REG_IO_AF, tmp); 
 8004dae:	f7fd b8f9 	b.w	8001fa4 <IOE_Write>

08004db2 <stmpe811_TS_Start>:
{
 8004db2:	b570      	push	{r4, r5, r6, lr}
  mode = IOE_Read(DeviceAddr, STMPE811_REG_SYS_CTRL2);
 8004db4:	b2c4      	uxtb	r4, r0
{
 8004db6:	4606      	mov	r6, r0
  mode = IOE_Read(DeviceAddr, STMPE811_REG_SYS_CTRL2);
 8004db8:	2104      	movs	r1, #4
 8004dba:	4620      	mov	r0, r4
 8004dbc:	f7fd f90a 	bl	8001fd4 <IOE_Read>
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 8004dc0:	2104      	movs	r1, #4
 8004dc2:	f000 02fb 	and.w	r2, r0, #251	@ 0xfb
  mode = IOE_Read(DeviceAddr, STMPE811_REG_SYS_CTRL2);
 8004dc6:	4605      	mov	r5, r0
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 8004dc8:	4620      	mov	r0, r4
 8004dca:	f7fd f8eb 	bl	8001fa4 <IOE_Write>
  stmpe811_IO_EnableAF(DeviceAddr, STMPE811_TOUCH_IO_ALL);
 8004dce:	4630      	mov	r0, r6
 8004dd0:	21f0      	movs	r1, #240	@ 0xf0
 8004dd2:	f7ff ffde 	bl	8004d92 <stmpe811_IO_EnableAF>
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 8004dd6:	f005 02f8 	and.w	r2, r5, #248	@ 0xf8
 8004dda:	4620      	mov	r0, r4
 8004ddc:	2104      	movs	r1, #4
 8004dde:	f7fd f8e1 	bl	8001fa4 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL1, 0x49);
 8004de2:	2249      	movs	r2, #73	@ 0x49
 8004de4:	2120      	movs	r1, #32
 8004de6:	4620      	mov	r0, r4
 8004de8:	f7fd f8dc 	bl	8001fa4 <IOE_Write>
  IOE_Delay(2); 
 8004dec:	2002      	movs	r0, #2
 8004dee:	f7fd f921 	bl	8002034 <IOE_Delay>
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL2, 0x01);
 8004df2:	4620      	mov	r0, r4
 8004df4:	2201      	movs	r2, #1
 8004df6:	2121      	movs	r1, #33	@ 0x21
 8004df8:	f7fd f8d4 	bl	8001fa4 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CFG, 0x9A); 
 8004dfc:	4620      	mov	r0, r4
 8004dfe:	229a      	movs	r2, #154	@ 0x9a
 8004e00:	2141      	movs	r1, #65	@ 0x41
 8004e02:	f7fd f8cf 	bl	8001fa4 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_TH, 0x01);
 8004e06:	4620      	mov	r0, r4
 8004e08:	2201      	movs	r2, #1
 8004e0a:	214a      	movs	r1, #74	@ 0x4a
 8004e0c:	f7fd f8ca 	bl	8001fa4 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8004e10:	4620      	mov	r0, r4
 8004e12:	2201      	movs	r2, #1
 8004e14:	214b      	movs	r1, #75	@ 0x4b
 8004e16:	f7fd f8c5 	bl	8001fa4 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8004e1a:	4620      	mov	r0, r4
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	214b      	movs	r1, #75	@ 0x4b
 8004e20:	f7fd f8c0 	bl	8001fa4 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_FRACT_XYZ, 0x01);
 8004e24:	4620      	mov	r0, r4
 8004e26:	2201      	movs	r2, #1
 8004e28:	2156      	movs	r1, #86	@ 0x56
 8004e2a:	f7fd f8bb 	bl	8001fa4 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_I_DRIVE, 0x01);
 8004e2e:	4620      	mov	r0, r4
 8004e30:	2201      	movs	r2, #1
 8004e32:	2158      	movs	r1, #88	@ 0x58
 8004e34:	f7fd f8b6 	bl	8001fa4 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CTRL, 0x01);
 8004e38:	4620      	mov	r0, r4
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	2140      	movs	r1, #64	@ 0x40
 8004e3e:	f7fd f8b1 	bl	8001fa4 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, 0xFF);
 8004e42:	4620      	mov	r0, r4
 8004e44:	22ff      	movs	r2, #255	@ 0xff
 8004e46:	210b      	movs	r1, #11
 8004e48:	f7fd f8ac 	bl	8001fa4 <IOE_Write>
}
 8004e4c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  IOE_Delay(2); 
 8004e50:	2002      	movs	r0, #2
 8004e52:	f7fd b8ef 	b.w	8002034 <IOE_Delay>
	...

08004e58 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004e58:	4b05      	ldr	r3, [pc, #20]	@ (8004e70 <SystemInit+0x18>)
 8004e5a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004e5e:	f442 0270 	orr.w	r2, r2, #15728640	@ 0xf00000
 8004e62:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004e66:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8004e6a:	609a      	str	r2, [r3, #8]
#endif
}
 8004e6c:	4770      	bx	lr
 8004e6e:	bf00      	nop
 8004e70:	e000ed00 	.word	0xe000ed00

08004e74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004e74:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004e76:	4b0b      	ldr	r3, [pc, #44]	@ (8004ea4 <HAL_Init+0x30>)
 8004e78:	681a      	ldr	r2, [r3, #0]
 8004e7a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004e7e:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004e80:	681a      	ldr	r2, [r3, #0]
 8004e82:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004e86:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004e88:	681a      	ldr	r2, [r3, #0]
 8004e8a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004e8e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004e90:	2003      	movs	r0, #3
 8004e92:	f000 fa45 	bl	8005320 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004e96:	2000      	movs	r0, #0
 8004e98:	f7fd fbe2 	bl	8002660 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004e9c:	f7fd f954 	bl	8002148 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8004ea0:	2000      	movs	r0, #0
 8004ea2:	bd08      	pop	{r3, pc}
 8004ea4:	40023c00 	.word	0x40023c00

08004ea8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8004ea8:	4a03      	ldr	r2, [pc, #12]	@ (8004eb8 <HAL_IncTick+0x10>)
 8004eaa:	4b04      	ldr	r3, [pc, #16]	@ (8004ebc <HAL_IncTick+0x14>)
 8004eac:	6811      	ldr	r1, [r2, #0]
 8004eae:	781b      	ldrb	r3, [r3, #0]
 8004eb0:	440b      	add	r3, r1
 8004eb2:	6013      	str	r3, [r2, #0]
}
 8004eb4:	4770      	bx	lr
 8004eb6:	bf00      	nop
 8004eb8:	200041f0 	.word	0x200041f0
 8004ebc:	20000078 	.word	0x20000078

08004ec0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8004ec0:	4b01      	ldr	r3, [pc, #4]	@ (8004ec8 <HAL_GetTick+0x8>)
 8004ec2:	6818      	ldr	r0, [r3, #0]
}
 8004ec4:	4770      	bx	lr
 8004ec6:	bf00      	nop
 8004ec8:	200041f0 	.word	0x200041f0

08004ecc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004ecc:	b538      	push	{r3, r4, r5, lr}
 8004ece:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8004ed0:	f7ff fff6 	bl	8004ec0 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004ed4:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8004ed6:	bf1c      	itt	ne
 8004ed8:	4b05      	ldrne	r3, [pc, #20]	@ (8004ef0 <HAL_Delay+0x24>)
 8004eda:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8004edc:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8004ede:	bf18      	it	ne
 8004ee0:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004ee2:	f7ff ffed 	bl	8004ec0 <HAL_GetTick>
 8004ee6:	1b43      	subs	r3, r0, r5
 8004ee8:	42a3      	cmp	r3, r4
 8004eea:	d3fa      	bcc.n	8004ee2 <HAL_Delay+0x16>
  {
  }
}
 8004eec:	bd38      	pop	{r3, r4, r5, pc}
 8004eee:	bf00      	nop
 8004ef0:	20000078 	.word	0x20000078

08004ef4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004ef4:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;

  /* Check ADC handle */
  if (hadc == NULL)
 8004ef6:	4604      	mov	r4, r0
 8004ef8:	2800      	cmp	r0, #0
 8004efa:	f000 809b 	beq.w	8005034 <HAL_ADC_Init+0x140>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8004efe:	6c05      	ldr	r5, [r0, #64]	@ 0x40
 8004f00:	b925      	cbnz	r5, 8004f0c <HAL_ADC_Init+0x18>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004f02:	f7fd f959 	bl	80021b8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004f06:	6465      	str	r5, [r4, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004f08:	f884 503c 	strb.w	r5, [r4, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004f0c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004f0e:	06db      	lsls	r3, r3, #27
 8004f10:	f100 808e 	bmi.w	8005030 <HAL_ADC_Init+0x13c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004f14:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004f16:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004f1a:	f023 0302 	bic.w	r3, r3, #2
 8004f1e:	f043 0302 	orr.w	r3, r3, #2
 8004f22:	6423      	str	r3, [r4, #64]	@ 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004f24:	4b44      	ldr	r3, [pc, #272]	@ (8005038 <HAL_ADC_Init+0x144>)
 8004f26:	685a      	ldr	r2, [r3, #4]
 8004f28:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 8004f2c:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004f2e:	685a      	ldr	r2, [r3, #4]
 8004f30:	6861      	ldr	r1, [r4, #4]
 8004f32:	430a      	orrs	r2, r1
 8004f34:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004f36:	6823      	ldr	r3, [r4, #0]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004f38:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004f3a:	685a      	ldr	r2, [r3, #4]
 8004f3c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004f40:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004f42:	685a      	ldr	r2, [r3, #4]
 8004f44:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004f48:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004f4a:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004f4c:	68a1      	ldr	r1, [r4, #8]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004f4e:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8004f52:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004f54:	685a      	ldr	r2, [r3, #4]
 8004f56:	430a      	orrs	r2, r1
 8004f58:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004f5a:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004f5c:	68e1      	ldr	r1, [r4, #12]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004f5e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004f62:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004f64:	689a      	ldr	r2, [r3, #8]
 8004f66:	430a      	orrs	r2, r1
 8004f68:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004f6a:	4934      	ldr	r1, [pc, #208]	@ (800503c <HAL_ADC_Init+0x148>)
 8004f6c:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8004f6e:	428a      	cmp	r2, r1
 8004f70:	d052      	beq.n	8005018 <HAL_ADC_Init+0x124>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004f72:	6899      	ldr	r1, [r3, #8]
 8004f74:	f021 6170 	bic.w	r1, r1, #251658240	@ 0xf000000
 8004f78:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004f7a:	6899      	ldr	r1, [r3, #8]
 8004f7c:	430a      	orrs	r2, r1
 8004f7e:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004f80:	689a      	ldr	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004f82:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004f84:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004f88:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004f8a:	689a      	ldr	r2, [r3, #8]
 8004f8c:	430a      	orrs	r2, r1
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004f8e:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004f90:	689a      	ldr	r2, [r3, #8]
 8004f92:	f022 0202 	bic.w	r2, r2, #2
 8004f96:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004f98:	689a      	ldr	r2, [r3, #8]
 8004f9a:	7e21      	ldrb	r1, [r4, #24]
 8004f9c:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8004fa0:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8004fa2:	f894 2020 	ldrb.w	r2, [r4, #32]
 8004fa6:	2a00      	cmp	r2, #0
 8004fa8:	d03e      	beq.n	8005028 <HAL_ADC_Init+0x134>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004faa:	685a      	ldr	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004fac:	6a61      	ldr	r1, [r4, #36]	@ 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004fae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004fb2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004fb4:	685a      	ldr	r2, [r3, #4]
 8004fb6:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8004fba:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004fbc:	685a      	ldr	r2, [r3, #4]
 8004fbe:	3901      	subs	r1, #1
 8004fc0:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004fc4:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004fc6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004fc8:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004fca:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8004fce:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004fd0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004fd2:	3901      	subs	r1, #1
 8004fd4:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8004fd8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004fda:	689a      	ldr	r2, [r3, #8]
 8004fdc:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004fe0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004fe2:	689a      	ldr	r2, [r3, #8]
 8004fe4:	f894 1030 	ldrb.w	r1, [r4, #48]	@ 0x30
 8004fe8:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 8004fec:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004fee:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004ff0:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004ff2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ff6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004ff8:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8004ffa:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004ffc:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 8005000:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8005002:	6460      	str	r0, [r4, #68]	@ 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8005004:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005006:	f023 0303 	bic.w	r3, r3, #3
 800500a:	f043 0301 	orr.w	r3, r3, #1
 800500e:	6423      	str	r3, [r4, #64]	@ 0x40
  __HAL_UNLOCK(hadc);
 8005010:	2300      	movs	r3, #0
 8005012:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8005016:	bd38      	pop	{r3, r4, r5, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005018:	689a      	ldr	r2, [r3, #8]
 800501a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800501e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005020:	689a      	ldr	r2, [r3, #8]
 8005022:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8005026:	e7b2      	b.n	8004f8e <HAL_ADC_Init+0x9a>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005028:	685a      	ldr	r2, [r3, #4]
 800502a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800502e:	e7c9      	b.n	8004fc4 <HAL_ADC_Init+0xd0>
    tmp_hal_status = HAL_ERROR;
 8005030:	2001      	movs	r0, #1
 8005032:	e7ed      	b.n	8005010 <HAL_ADC_Init+0x11c>
    return HAL_ERROR;
 8005034:	2001      	movs	r0, #1
 8005036:	e7ee      	b.n	8005016 <HAL_ADC_Init+0x122>
 8005038:	40012300 	.word	0x40012300
 800503c:	0f000001 	.word	0x0f000001

08005040 <HAL_ADC_Start>:
{
 8005040:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 8005042:	2300      	movs	r3, #0
 8005044:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8005046:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 800504a:	2b01      	cmp	r3, #1
 800504c:	d069      	beq.n	8005122 <HAL_ADC_Start+0xe2>
 800504e:	2301      	movs	r3, #1
 8005050:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8005054:	6803      	ldr	r3, [r0, #0]
 8005056:	689a      	ldr	r2, [r3, #8]
 8005058:	07d2      	lsls	r2, r2, #31
 800505a:	d50b      	bpl.n	8005074 <HAL_ADC_Start+0x34>
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800505c:	689a      	ldr	r2, [r3, #8]
 800505e:	07d1      	lsls	r1, r2, #31
 8005060:	d41a      	bmi.n	8005098 <HAL_ADC_Start+0x58>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005062:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8005064:	f043 0310 	orr.w	r3, r3, #16
 8005068:	6403      	str	r3, [r0, #64]	@ 0x40
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800506a:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 800506c:	f043 0301 	orr.w	r3, r3, #1
 8005070:	6443      	str	r3, [r0, #68]	@ 0x44
 8005072:	e04c      	b.n	800510e <HAL_ADC_Start+0xce>
    __HAL_ADC_ENABLE(hadc);
 8005074:	689a      	ldr	r2, [r3, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005076:	492c      	ldr	r1, [pc, #176]	@ (8005128 <HAL_ADC_Start+0xe8>)
    __HAL_ADC_ENABLE(hadc);
 8005078:	f042 0201 	orr.w	r2, r2, #1
 800507c:	609a      	str	r2, [r3, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800507e:	4a2b      	ldr	r2, [pc, #172]	@ (800512c <HAL_ADC_Start+0xec>)
 8005080:	6812      	ldr	r2, [r2, #0]
 8005082:	fbb2 f2f1 	udiv	r2, r2, r1
 8005086:	eb02 0242 	add.w	r2, r2, r2, lsl #1
      counter--;
 800508a:	9201      	str	r2, [sp, #4]
    while (counter != 0U)
 800508c:	9a01      	ldr	r2, [sp, #4]
 800508e:	2a00      	cmp	r2, #0
 8005090:	d0e4      	beq.n	800505c <HAL_ADC_Start+0x1c>
      counter--;
 8005092:	9a01      	ldr	r2, [sp, #4]
 8005094:	3a01      	subs	r2, #1
 8005096:	e7f8      	b.n	800508a <HAL_ADC_Start+0x4a>
    ADC_STATE_CLR_SET(hadc->State,
 8005098:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 800509a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800509e:	f022 0201 	bic.w	r2, r2, #1
 80050a2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80050a6:	6402      	str	r2, [r0, #64]	@ 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80050a8:	685a      	ldr	r2, [r3, #4]
 80050aa:	0552      	lsls	r2, r2, #21
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80050ac:	bf41      	itttt	mi
 80050ae:	6c02      	ldrmi	r2, [r0, #64]	@ 0x40
 80050b0:	f422 5240 	bicmi.w	r2, r2, #12288	@ 0x3000
 80050b4:	f442 5280 	orrmi.w	r2, r2, #4096	@ 0x1000
 80050b8:	6402      	strmi	r2, [r0, #64]	@ 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80050ba:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 80050bc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80050c0:	bf1c      	itt	ne
 80050c2:	6c42      	ldrne	r2, [r0, #68]	@ 0x44
 80050c4:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 80050c8:	6442      	str	r2, [r0, #68]	@ 0x44
    __HAL_UNLOCK(hadc);
 80050ca:	2200      	movs	r2, #0
 80050cc:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80050d0:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80050d4:	601a      	str	r2, [r3, #0]
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80050d6:	4a16      	ldr	r2, [pc, #88]	@ (8005130 <HAL_ADC_Start+0xf0>)
 80050d8:	6851      	ldr	r1, [r2, #4]
 80050da:	f011 0f1f 	tst.w	r1, #31
 80050de:	4915      	ldr	r1, [pc, #84]	@ (8005134 <HAL_ADC_Start+0xf4>)
 80050e0:	d11c      	bne.n	800511c <HAL_ADC_Start+0xdc>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80050e2:	428b      	cmp	r3, r1
 80050e4:	d007      	beq.n	80050f6 <HAL_ADC_Start+0xb6>
 80050e6:	f501 7180 	add.w	r1, r1, #256	@ 0x100
 80050ea:	428b      	cmp	r3, r1
 80050ec:	d10c      	bne.n	8005108 <HAL_ADC_Start+0xc8>
 80050ee:	6852      	ldr	r2, [r2, #4]
 80050f0:	f012 0f1f 	tst.w	r2, #31
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80050f4:	d10b      	bne.n	800510e <HAL_ADC_Start+0xce>
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80050f6:	689a      	ldr	r2, [r3, #8]
 80050f8:	f012 5f40 	tst.w	r2, #805306368	@ 0x30000000
 80050fc:	d107      	bne.n	800510e <HAL_ADC_Start+0xce>
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80050fe:	689a      	ldr	r2, [r3, #8]
 8005100:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8005104:	609a      	str	r2, [r3, #8]
 8005106:	e002      	b.n	800510e <HAL_ADC_Start+0xce>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8005108:	490b      	ldr	r1, [pc, #44]	@ (8005138 <HAL_ADC_Start+0xf8>)
 800510a:	428b      	cmp	r3, r1
 800510c:	d002      	beq.n	8005114 <HAL_ADC_Start+0xd4>
  return HAL_OK;
 800510e:	2000      	movs	r0, #0
}
 8005110:	b002      	add	sp, #8
 8005112:	4770      	bx	lr
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8005114:	6852      	ldr	r2, [r2, #4]
 8005116:	f012 0f10 	tst.w	r2, #16
 800511a:	e7eb      	b.n	80050f4 <HAL_ADC_Start+0xb4>
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800511c:	428b      	cmp	r3, r1
 800511e:	d1f6      	bne.n	800510e <HAL_ADC_Start+0xce>
 8005120:	e7e9      	b.n	80050f6 <HAL_ADC_Start+0xb6>
  __HAL_LOCK(hadc);
 8005122:	2002      	movs	r0, #2
 8005124:	e7f4      	b.n	8005110 <HAL_ADC_Start+0xd0>
 8005126:	bf00      	nop
 8005128:	000f4240 	.word	0x000f4240
 800512c:	20000074 	.word	0x20000074
 8005130:	40012300 	.word	0x40012300
 8005134:	40012000 	.word	0x40012000
 8005138:	40012200 	.word	0x40012200

0800513c <HAL_ADC_PollForConversion>:
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800513c:	6803      	ldr	r3, [r0, #0]
 800513e:	689a      	ldr	r2, [r3, #8]
 8005140:	0552      	lsls	r2, r2, #21
{
 8005142:	b570      	push	{r4, r5, r6, lr}
 8005144:	4604      	mov	r4, r0
 8005146:	460d      	mov	r5, r1
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8005148:	d50b      	bpl.n	8005162 <HAL_ADC_PollForConversion+0x26>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800514a:	689b      	ldr	r3, [r3, #8]
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800514c:	05de      	lsls	r6, r3, #23
 800514e:	d508      	bpl.n	8005162 <HAL_ADC_PollForConversion+0x26>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005150:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8005152:	f043 0320 	orr.w	r3, r3, #32
 8005156:	6403      	str	r3, [r0, #64]	@ 0x40
    __HAL_UNLOCK(hadc);
 8005158:	2300      	movs	r3, #0
 800515a:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    return HAL_ERROR;
 800515e:	2001      	movs	r0, #1
}
 8005160:	bd70      	pop	{r4, r5, r6, pc}
  tickstart = HAL_GetTick();
 8005162:	f7ff fead 	bl	8004ec0 <HAL_GetTick>
 8005166:	4606      	mov	r6, r0
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005168:	6823      	ldr	r3, [r4, #0]
 800516a:	681a      	ldr	r2, [r3, #0]
 800516c:	0791      	lsls	r1, r2, #30
 800516e:	d50c      	bpl.n	800518a <HAL_ADC_PollForConversion+0x4e>
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8005170:	f06f 0212 	mvn.w	r2, #18
 8005174:	601a      	str	r2, [r3, #0]
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005176:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8005178:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800517c:	6422      	str	r2, [r4, #64]	@ 0x40
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800517e:	689a      	ldr	r2, [r3, #8]
 8005180:	f012 5f40 	tst.w	r2, #805306368	@ 0x30000000
 8005184:	d017      	beq.n	80051b6 <HAL_ADC_PollForConversion+0x7a>
  return HAL_OK;
 8005186:	2000      	movs	r0, #0
 8005188:	e7ea      	b.n	8005160 <HAL_ADC_PollForConversion+0x24>
    if (Timeout != HAL_MAX_DELAY)
 800518a:	1c68      	adds	r0, r5, #1
 800518c:	d0ed      	beq.n	800516a <HAL_ADC_PollForConversion+0x2e>
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800518e:	b965      	cbnz	r5, 80051aa <HAL_ADC_PollForConversion+0x6e>
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005190:	6823      	ldr	r3, [r4, #0]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f013 0302 	ands.w	r3, r3, #2
 8005198:	d1e6      	bne.n	8005168 <HAL_ADC_PollForConversion+0x2c>
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800519a:	6c22      	ldr	r2, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hadc);
 800519c:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80051a0:	f042 0204 	orr.w	r2, r2, #4
 80051a4:	6422      	str	r2, [r4, #64]	@ 0x40
          return HAL_TIMEOUT;
 80051a6:	2003      	movs	r0, #3
 80051a8:	e7da      	b.n	8005160 <HAL_ADC_PollForConversion+0x24>
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80051aa:	f7ff fe89 	bl	8004ec0 <HAL_GetTick>
 80051ae:	1b80      	subs	r0, r0, r6
 80051b0:	42a8      	cmp	r0, r5
 80051b2:	d8ed      	bhi.n	8005190 <HAL_ADC_PollForConversion+0x54>
 80051b4:	e7d8      	b.n	8005168 <HAL_ADC_PollForConversion+0x2c>
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80051b6:	7e22      	ldrb	r2, [r4, #24]
 80051b8:	2a00      	cmp	r2, #0
 80051ba:	d1e4      	bne.n	8005186 <HAL_ADC_PollForConversion+0x4a>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80051bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80051be:	f412 0f70 	tst.w	r2, #15728640	@ 0xf00000
 80051c2:	d002      	beq.n	80051ca <HAL_ADC_PollForConversion+0x8e>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80051c4:	689b      	ldr	r3, [r3, #8]
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80051c6:	055a      	lsls	r2, r3, #21
 80051c8:	d4dd      	bmi.n	8005186 <HAL_ADC_PollForConversion+0x4a>
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80051ca:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80051cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80051d0:	6423      	str	r3, [r4, #64]	@ 0x40
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80051d2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80051d4:	04db      	lsls	r3, r3, #19
 80051d6:	d4d6      	bmi.n	8005186 <HAL_ADC_PollForConversion+0x4a>
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80051d8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80051da:	f043 0301 	orr.w	r3, r3, #1
 80051de:	6423      	str	r3, [r4, #64]	@ 0x40
 80051e0:	e7d1      	b.n	8005186 <HAL_ADC_PollForConversion+0x4a>

080051e2 <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 80051e2:	6803      	ldr	r3, [r0, #0]
 80051e4:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
}
 80051e6:	4770      	bx	lr

080051e8 <HAL_ADC_ConfigChannel>:
{
 80051e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0U;
 80051ea:	2300      	movs	r3, #0
 80051ec:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 80051ee:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 80051f2:	2b01      	cmp	r3, #1
{
 80051f4:	4605      	mov	r5, r0
  __HAL_LOCK(hadc);
 80051f6:	f000 8086 	beq.w	8005306 <HAL_ADC_ConfigChannel+0x11e>
 80051fa:	2301      	movs	r3, #1
 80051fc:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 8005200:	6808      	ldr	r0, [r1, #0]
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005202:	682b      	ldr	r3, [r5, #0]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005204:	688e      	ldr	r6, [r1, #8]
  if (sConfig->Channel > ADC_CHANNEL_9)
 8005206:	2809      	cmp	r0, #9
 8005208:	b284      	uxth	r4, r0
 800520a:	d933      	bls.n	8005274 <HAL_ADC_ConfigChannel+0x8c>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800520c:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8005210:	68df      	ldr	r7, [r3, #12]
 8005212:	3a1e      	subs	r2, #30
 8005214:	f04f 0c07 	mov.w	ip, #7
 8005218:	fa0c fc02 	lsl.w	ip, ip, r2
 800521c:	ea27 070c 	bic.w	r7, r7, ip
 8005220:	60df      	str	r7, [r3, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005222:	68df      	ldr	r7, [r3, #12]
 8005224:	fa06 f202 	lsl.w	r2, r6, r2
 8005228:	433a      	orrs	r2, r7
 800522a:	60da      	str	r2, [r3, #12]
  if (sConfig->Rank < 7U)
 800522c:	6849      	ldr	r1, [r1, #4]
 800522e:	2906      	cmp	r1, #6
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005230:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  if (sConfig->Rank < 7U)
 8005234:	d82d      	bhi.n	8005292 <HAL_ADC_ConfigChannel+0xaa>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005236:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8005238:	3a05      	subs	r2, #5
 800523a:	261f      	movs	r6, #31
 800523c:	4096      	lsls	r6, r2
 800523e:	ea21 0106 	bic.w	r1, r1, r6
 8005242:	6359      	str	r1, [r3, #52]	@ 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005244:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8005246:	fa04 f202 	lsl.w	r2, r4, r2
 800524a:	430a      	orrs	r2, r1
 800524c:	635a      	str	r2, [r3, #52]	@ 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800524e:	4a2f      	ldr	r2, [pc, #188]	@ (800530c <HAL_ADC_ConfigChannel+0x124>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d10a      	bne.n	800526a <HAL_ADC_ConfigChannel+0x82>
 8005254:	2812      	cmp	r0, #18
 8005256:	d137      	bne.n	80052c8 <HAL_ADC_ConfigChannel+0xe0>
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8005258:	4b2d      	ldr	r3, [pc, #180]	@ (8005310 <HAL_ADC_ConfigChannel+0x128>)
 800525a:	685a      	ldr	r2, [r3, #4]
 800525c:	f422 0200 	bic.w	r2, r2, #8388608	@ 0x800000
 8005260:	605a      	str	r2, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8005262:	685a      	ldr	r2, [r3, #4]
 8005264:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8005268:	605a      	str	r2, [r3, #4]
  __HAL_UNLOCK(hadc);
 800526a:	2000      	movs	r0, #0
 800526c:	f885 003c 	strb.w	r0, [r5, #60]	@ 0x3c
}
 8005270:	b003      	add	sp, #12
 8005272:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005274:	691a      	ldr	r2, [r3, #16]
 8005276:	eb00 0c40 	add.w	ip, r0, r0, lsl #1
 800527a:	2707      	movs	r7, #7
 800527c:	fa07 f70c 	lsl.w	r7, r7, ip
 8005280:	ea22 0207 	bic.w	r2, r2, r7
 8005284:	611a      	str	r2, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005286:	691a      	ldr	r2, [r3, #16]
 8005288:	fa06 f60c 	lsl.w	r6, r6, ip
 800528c:	4316      	orrs	r6, r2
 800528e:	611e      	str	r6, [r3, #16]
 8005290:	e7cc      	b.n	800522c <HAL_ADC_ConfigChannel+0x44>
  else if (sConfig->Rank < 13U)
 8005292:	290c      	cmp	r1, #12
 8005294:	f04f 011f 	mov.w	r1, #31
 8005298:	d80b      	bhi.n	80052b2 <HAL_ADC_ConfigChannel+0xca>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800529a:	6b1e      	ldr	r6, [r3, #48]	@ 0x30
 800529c:	3a23      	subs	r2, #35	@ 0x23
 800529e:	4091      	lsls	r1, r2
 80052a0:	ea26 0101 	bic.w	r1, r6, r1
 80052a4:	6319      	str	r1, [r3, #48]	@ 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80052a6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80052a8:	fa04 f202 	lsl.w	r2, r4, r2
 80052ac:	430a      	orrs	r2, r1
 80052ae:	631a      	str	r2, [r3, #48]	@ 0x30
 80052b0:	e7cd      	b.n	800524e <HAL_ADC_ConfigChannel+0x66>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80052b2:	6ade      	ldr	r6, [r3, #44]	@ 0x2c
 80052b4:	3a41      	subs	r2, #65	@ 0x41
 80052b6:	4091      	lsls	r1, r2
 80052b8:	ea26 0101 	bic.w	r1, r6, r1
 80052bc:	62d9      	str	r1, [r3, #44]	@ 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80052be:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80052c0:	4094      	lsls	r4, r2
 80052c2:	430c      	orrs	r4, r1
 80052c4:	62dc      	str	r4, [r3, #44]	@ 0x2c
 80052c6:	e7c2      	b.n	800524e <HAL_ADC_ConfigChannel+0x66>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80052c8:	4b12      	ldr	r3, [pc, #72]	@ (8005314 <HAL_ADC_ConfigChannel+0x12c>)
 80052ca:	4298      	cmp	r0, r3
 80052cc:	d001      	beq.n	80052d2 <HAL_ADC_ConfigChannel+0xea>
 80052ce:	2811      	cmp	r0, #17
 80052d0:	d1cb      	bne.n	800526a <HAL_ADC_ConfigChannel+0x82>
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80052d2:	4b0f      	ldr	r3, [pc, #60]	@ (8005310 <HAL_ADC_ConfigChannel+0x128>)
 80052d4:	685a      	ldr	r2, [r3, #4]
 80052d6:	f422 0280 	bic.w	r2, r2, #4194304	@ 0x400000
 80052da:	605a      	str	r2, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80052dc:	685a      	ldr	r2, [r3, #4]
 80052de:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80052e2:	605a      	str	r2, [r3, #4]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80052e4:	4b0b      	ldr	r3, [pc, #44]	@ (8005314 <HAL_ADC_ConfigChannel+0x12c>)
 80052e6:	4298      	cmp	r0, r3
 80052e8:	d1bf      	bne.n	800526a <HAL_ADC_ConfigChannel+0x82>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80052ea:	4b0b      	ldr	r3, [pc, #44]	@ (8005318 <HAL_ADC_ConfigChannel+0x130>)
 80052ec:	4a0b      	ldr	r2, [pc, #44]	@ (800531c <HAL_ADC_ConfigChannel+0x134>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	fbb3 f3f2 	udiv	r3, r3, r2
 80052f4:	220a      	movs	r2, #10
 80052f6:	4353      	muls	r3, r2
        counter--;
 80052f8:	9301      	str	r3, [sp, #4]
      while (counter != 0U)
 80052fa:	9b01      	ldr	r3, [sp, #4]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d0b4      	beq.n	800526a <HAL_ADC_ConfigChannel+0x82>
        counter--;
 8005300:	9b01      	ldr	r3, [sp, #4]
 8005302:	3b01      	subs	r3, #1
 8005304:	e7f8      	b.n	80052f8 <HAL_ADC_ConfigChannel+0x110>
  __HAL_LOCK(hadc);
 8005306:	2002      	movs	r0, #2
 8005308:	e7b2      	b.n	8005270 <HAL_ADC_ConfigChannel+0x88>
 800530a:	bf00      	nop
 800530c:	40012000 	.word	0x40012000
 8005310:	40012300 	.word	0x40012300
 8005314:	10000012 	.word	0x10000012
 8005318:	20000074 	.word	0x20000074
 800531c:	000f4240 	.word	0x000f4240

08005320 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005320:	4907      	ldr	r1, [pc, #28]	@ (8005340 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8005322:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005324:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005328:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800532a:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800532c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005330:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005332:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005334:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005338:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 800533c:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800533e:	4770      	bx	lr
 8005340:	e000ed00 	.word	0xe000ed00

08005344 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005344:	4b16      	ldr	r3, [pc, #88]	@ (80053a0 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005346:	b530      	push	{r4, r5, lr}
 8005348:	68dc      	ldr	r4, [r3, #12]
 800534a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800534e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005352:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005354:	2b04      	cmp	r3, #4
 8005356:	bf28      	it	cs
 8005358:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800535a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800535c:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005360:	bf8c      	ite	hi
 8005362:	3c03      	subhi	r4, #3
 8005364:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005366:	fa05 f303 	lsl.w	r3, r5, r3
 800536a:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800536e:	40a5      	lsls	r5, r4
 8005370:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005374:	40a3      	lsls	r3, r4
  if ((int32_t)(IRQn) >= 0)
 8005376:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005378:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800537c:	bfac      	ite	ge
 800537e:	f100 4060 	addge.w	r0, r0, #3758096384	@ 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005382:	4a08      	ldrlt	r2, [pc, #32]	@ (80053a4 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005384:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005388:	bfb8      	it	lt
 800538a:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800538e:	b2db      	uxtb	r3, r3
 8005390:	bfaa      	itet	ge
 8005392:	f500 4061 	addge.w	r0, r0, #57600	@ 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005396:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005398:	f880 3300 	strbge.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800539c:	bd30      	pop	{r4, r5, pc}
 800539e:	bf00      	nop
 80053a0:	e000ed00 	.word	0xe000ed00
 80053a4:	e000ed14 	.word	0xe000ed14

080053a8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80053a8:	2800      	cmp	r0, #0
 80053aa:	db07      	blt.n	80053bc <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80053ac:	0941      	lsrs	r1, r0, #5
 80053ae:	4a04      	ldr	r2, [pc, #16]	@ (80053c0 <HAL_NVIC_EnableIRQ+0x18>)
 80053b0:	f000 001f 	and.w	r0, r0, #31
 80053b4:	2301      	movs	r3, #1
 80053b6:	4083      	lsls	r3, r0
 80053b8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80053bc:	4770      	bx	lr
 80053be:	bf00      	nop
 80053c0:	e000e100 	.word	0xe000e100

080053c4 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80053c4:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80053c6:	4604      	mov	r4, r0
 80053c8:	b150      	cbz	r0, 80053e0 <HAL_CRC_Init+0x1c>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80053ca:	7943      	ldrb	r3, [r0, #5]
 80053cc:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80053d0:	b913      	cbnz	r3, 80053d8 <HAL_CRC_Init+0x14>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80053d2:	7102      	strb	r2, [r0, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80053d4:	f7fc fed8 	bl	8002188 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80053d8:	2301      	movs	r3, #1
 80053da:	7163      	strb	r3, [r4, #5]

  /* Return function status */
  return HAL_OK;
 80053dc:	2000      	movs	r0, #0
}
 80053de:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80053e0:	2001      	movs	r0, #1
 80053e2:	e7fc      	b.n	80053de <HAL_CRC_Init+0x1a>

080053e4 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80053e4:	b510      	push	{r4, lr}
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80053e6:	4604      	mov	r4, r0
 80053e8:	b330      	cbz	r0, 8005438 <HAL_DMA2D_Init+0x54>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80053ea:	f890 3039 	ldrb.w	r3, [r0, #57]	@ 0x39
 80053ee:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80053f2:	b91b      	cbnz	r3, 80053fc <HAL_DMA2D_Init+0x18>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80053f4:	f880 2038 	strb.w	r2, [r0, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80053f8:	f7fc ff36 	bl	8002268 <HAL_DMA2D_MspInit>

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80053fc:	6822      	ldr	r2, [r4, #0]
 80053fe:	6861      	ldr	r1, [r4, #4]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005400:	2302      	movs	r3, #2
 8005402:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8005406:	6813      	ldr	r3, [r2, #0]
 8005408:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800540c:	430b      	orrs	r3, r1
 800540e:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8005410:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 8005412:	68a1      	ldr	r1, [r4, #8]
 8005414:	f023 0307 	bic.w	r3, r3, #7
 8005418:	430b      	orrs	r3, r1
 800541a:	6353      	str	r3, [r2, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800541c:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 800541e:	68e1      	ldr	r1, [r4, #12]
 8005420:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8005424:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005428:	430b      	orrs	r3, r1
 800542a:	6413      	str	r3, [r2, #64]	@ 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800542c:	2000      	movs	r0, #0

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800542e:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8005430:	63e0      	str	r0, [r4, #60]	@ 0x3c
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8005432:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39

  return HAL_OK;
}
 8005436:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8005438:	2001      	movs	r0, #1
 800543a:	e7fc      	b.n	8005436 <HAL_DMA2D_Init+0x52>

0800543c <HAL_DMA2D_LineEventCallback>:
  * @brief  Transfer watermark callback.
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
 800543c:	4770      	bx	lr

0800543e <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @brief  CLUT Transfer Complete callback.
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
 800543e:	4770      	bx	lr

08005440 <HAL_DMA2D_IRQHandler>:
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8005440:	6803      	ldr	r3, [r0, #0]
{
 8005442:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8005444:	685e      	ldr	r6, [r3, #4]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8005446:	681d      	ldr	r5, [r3, #0]
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8005448:	07f2      	lsls	r2, r6, #31
{
 800544a:	4604      	mov	r4, r0
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800544c:	d514      	bpl.n	8005478 <HAL_DMA2D_IRQHandler+0x38>
    if ((crflags & DMA2D_IT_TE) != 0U)
 800544e:	05e9      	lsls	r1, r5, #23
 8005450:	d512      	bpl.n	8005478 <HAL_DMA2D_IRQHandler+0x38>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8005452:	681a      	ldr	r2, [r3, #0]
 8005454:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005458:	601a      	str	r2, [r3, #0]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800545a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800545c:	f042 0201 	orr.w	r2, r2, #1
 8005460:	63c2      	str	r2, [r0, #60]	@ 0x3c
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8005462:	2201      	movs	r2, #1
 8005464:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005466:	2304      	movs	r3, #4
 8005468:	f880 3039 	strb.w	r3, [r0, #57]	@ 0x39
      __HAL_UNLOCK(hdma2d);
 800546c:	2300      	movs	r3, #0
 800546e:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
      if (hdma2d->XferErrorCallback != NULL)
 8005472:	6943      	ldr	r3, [r0, #20]
 8005474:	b103      	cbz	r3, 8005478 <HAL_DMA2D_IRQHandler+0x38>
        hdma2d->XferErrorCallback(hdma2d);
 8005476:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005478:	06b2      	lsls	r2, r6, #26
 800547a:	d516      	bpl.n	80054aa <HAL_DMA2D_IRQHandler+0x6a>
    if ((crflags & DMA2D_IT_CE) != 0U)
 800547c:	04ab      	lsls	r3, r5, #18
 800547e:	d514      	bpl.n	80054aa <HAL_DMA2D_IRQHandler+0x6a>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8005480:	6823      	ldr	r3, [r4, #0]
 8005482:	681a      	ldr	r2, [r3, #0]
 8005484:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005488:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 800548a:	2220      	movs	r2, #32
 800548c:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800548e:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8005490:	f043 0302 	orr.w	r3, r3, #2
 8005494:	63e3      	str	r3, [r4, #60]	@ 0x3c
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005496:	2304      	movs	r3, #4
 8005498:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
      __HAL_UNLOCK(hdma2d);
 800549c:	2300      	movs	r3, #0
 800549e:	f884 3038 	strb.w	r3, [r4, #56]	@ 0x38
      if (hdma2d->XferErrorCallback != NULL)
 80054a2:	6963      	ldr	r3, [r4, #20]
 80054a4:	b10b      	cbz	r3, 80054aa <HAL_DMA2D_IRQHandler+0x6a>
        hdma2d->XferErrorCallback(hdma2d);
 80054a6:	4620      	mov	r0, r4
 80054a8:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80054aa:	0730      	lsls	r0, r6, #28
 80054ac:	d516      	bpl.n	80054dc <HAL_DMA2D_IRQHandler+0x9c>
    if ((crflags & DMA2D_IT_CAE) != 0U)
 80054ae:	0529      	lsls	r1, r5, #20
 80054b0:	d514      	bpl.n	80054dc <HAL_DMA2D_IRQHandler+0x9c>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 80054b2:	6823      	ldr	r3, [r4, #0]
 80054b4:	681a      	ldr	r2, [r3, #0]
 80054b6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80054ba:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80054bc:	2208      	movs	r2, #8
 80054be:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80054c0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80054c2:	f043 0304 	orr.w	r3, r3, #4
 80054c6:	63e3      	str	r3, [r4, #60]	@ 0x3c
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80054c8:	2304      	movs	r3, #4
 80054ca:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
      __HAL_UNLOCK(hdma2d);
 80054ce:	2300      	movs	r3, #0
 80054d0:	f884 3038 	strb.w	r3, [r4, #56]	@ 0x38
      if (hdma2d->XferErrorCallback != NULL)
 80054d4:	6963      	ldr	r3, [r4, #20]
 80054d6:	b10b      	cbz	r3, 80054dc <HAL_DMA2D_IRQHandler+0x9c>
        hdma2d->XferErrorCallback(hdma2d);
 80054d8:	4620      	mov	r0, r4
 80054da:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 80054dc:	0772      	lsls	r2, r6, #29
 80054de:	d50b      	bpl.n	80054f8 <HAL_DMA2D_IRQHandler+0xb8>
    if ((crflags & DMA2D_IT_TW) != 0U)
 80054e0:	056b      	lsls	r3, r5, #21
 80054e2:	d509      	bpl.n	80054f8 <HAL_DMA2D_IRQHandler+0xb8>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80054e4:	6823      	ldr	r3, [r4, #0]
 80054e6:	681a      	ldr	r2, [r3, #0]
 80054e8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80054ec:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 80054ee:	2204      	movs	r2, #4
 80054f0:	609a      	str	r2, [r3, #8]
      HAL_DMA2D_LineEventCallback(hdma2d);
 80054f2:	4620      	mov	r0, r4
 80054f4:	f7ff ffa2 	bl	800543c <HAL_DMA2D_LineEventCallback>
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 80054f8:	07b0      	lsls	r0, r6, #30
 80054fa:	d514      	bpl.n	8005526 <HAL_DMA2D_IRQHandler+0xe6>
    if ((crflags & DMA2D_IT_TC) != 0U)
 80054fc:	05a9      	lsls	r1, r5, #22
 80054fe:	d512      	bpl.n	8005526 <HAL_DMA2D_IRQHandler+0xe6>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8005500:	6823      	ldr	r3, [r4, #0]
 8005502:	681a      	ldr	r2, [r3, #0]
 8005504:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8005508:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 800550a:	2202      	movs	r2, #2
 800550c:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800550e:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8005510:	63e3      	str	r3, [r4, #60]	@ 0x3c
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8005512:	2301      	movs	r3, #1
 8005514:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
      __HAL_UNLOCK(hdma2d);
 8005518:	2300      	movs	r3, #0
 800551a:	f884 3038 	strb.w	r3, [r4, #56]	@ 0x38
      if (hdma2d->XferCpltCallback != NULL)
 800551e:	6923      	ldr	r3, [r4, #16]
 8005520:	b10b      	cbz	r3, 8005526 <HAL_DMA2D_IRQHandler+0xe6>
        hdma2d->XferCpltCallback(hdma2d);
 8005522:	4620      	mov	r0, r4
 8005524:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8005526:	06f2      	lsls	r2, r6, #27
 8005528:	d513      	bpl.n	8005552 <HAL_DMA2D_IRQHandler+0x112>
    if ((crflags & DMA2D_IT_CTC) != 0U)
 800552a:	04eb      	lsls	r3, r5, #19
 800552c:	d511      	bpl.n	8005552 <HAL_DMA2D_IRQHandler+0x112>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800552e:	6823      	ldr	r3, [r4, #0]
 8005530:	681a      	ldr	r2, [r3, #0]
 8005532:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005536:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8005538:	2210      	movs	r2, #16
 800553a:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800553c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800553e:	63e3      	str	r3, [r4, #60]	@ 0x3c
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8005540:	2301      	movs	r3, #1
 8005542:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
      __HAL_UNLOCK(hdma2d);
 8005546:	2300      	movs	r3, #0
 8005548:	f884 3038 	strb.w	r3, [r4, #56]	@ 0x38
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800554c:	4620      	mov	r0, r4
 800554e:	f7ff ff76 	bl	800543e <HAL_DMA2D_CLUTLoadingCpltCallback>
}
 8005552:	bd70      	pop	{r4, r5, r6, pc}

08005554 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8005554:	b5f0      	push	{r4, r5, r6, r7, lr}
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8005556:	f890 2038 	ldrb.w	r2, [r0, #56]	@ 0x38
 800555a:	2a01      	cmp	r2, #1
{
 800555c:	4603      	mov	r3, r0
 800555e:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(hdma2d);
 8005562:	d02b      	beq.n	80055bc <HAL_DMA2D_ConfigLayer+0x68>
 8005564:	2201      	movs	r2, #1
 8005566:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800556a:	f883 0039 	strb.w	r0, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 800556e:	eb03 1201 	add.w	r2, r3, r1, lsl #4
 8005572:	e9d2 4007 	ldrd	r4, r0, [r2, #28]
 8005576:	6a55      	ldr	r5, [r2, #36]	@ 0x24
 8005578:	4f17      	ldr	r7, [pc, #92]	@ (80055d8 <HAL_DMA2D_ConfigLayer+0x84>)
 800557a:	ea44 4000 	orr.w	r0, r4, r0, lsl #16
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800557e:	3c09      	subs	r4, #9
 8005580:	2c01      	cmp	r4, #1
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8005582:	bf9c      	itt	ls
 8005584:	f005 427f 	andls.w	r2, r5, #4278190080	@ 0xff000000
 8005588:	4310      	orrls	r0, r2
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 800558a:	ea4f 1601 	mov.w	r6, r1, lsl #4

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800558e:	681a      	ldr	r2, [r3, #0]
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8005590:	bf88      	it	hi
 8005592:	ea40 6005 	orrhi.w	r0, r0, r5, lsl #24
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8005596:	b991      	cbnz	r1, 80055be <HAL_DMA2D_ConfigLayer+0x6a>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8005598:	6a51      	ldr	r1, [r2, #36]	@ 0x24
 800559a:	4039      	ands	r1, r7
 800559c:	4301      	orrs	r1, r0
 800559e:	6251      	str	r1, [r2, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80055a0:	2c01      	cmp	r4, #1
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80055a2:	6999      	ldr	r1, [r3, #24]
 80055a4:	6191      	str	r1, [r2, #24]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80055a6:	d803      	bhi.n	80055b0 <HAL_DMA2D_ConfigLayer+0x5c>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80055a8:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80055aa:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80055ae:	6291      	str	r1, [r2, #40]	@ 0x28
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80055b0:	2201      	movs	r2, #1

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80055b2:	2000      	movs	r0, #0
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80055b4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  __HAL_UNLOCK(hdma2d);
 80055b8:	f883 0038 	strb.w	r0, [r3, #56]	@ 0x38

  return HAL_OK;
}
 80055bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80055be:	69d1      	ldr	r1, [r2, #28]
 80055c0:	4039      	ands	r1, r7
 80055c2:	4301      	orrs	r1, r0
 80055c4:	61d1      	str	r1, [r2, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80055c6:	1999      	adds	r1, r3, r6
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80055c8:	2c01      	cmp	r4, #1
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80055ca:	6989      	ldr	r1, [r1, #24]
 80055cc:	6111      	str	r1, [r2, #16]
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80055ce:	bf9c      	itt	ls
 80055d0:	f025 457f 	bicls.w	r5, r5, #4278190080	@ 0xff000000
 80055d4:	6215      	strls	r5, [r2, #32]
 80055d6:	e7eb      	b.n	80055b0 <HAL_DMA2D_ConfigLayer+0x5c>
 80055d8:	00fcfff0 	.word	0x00fcfff0

080055dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80055dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80055e0:	f8df 91bc 	ldr.w	r9, [pc, #444]	@ 80057a0 <HAL_GPIO_Init+0x1c4>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80055e4:	4a6c      	ldr	r2, [pc, #432]	@ (8005798 <HAL_GPIO_Init+0x1bc>)
  for(position = 0U; position < GPIO_NUMBER; position++)
 80055e6:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80055e8:	680d      	ldr	r5, [r1, #0]
    ioposition = 0x01U << position;
 80055ea:	2401      	movs	r4, #1
 80055ec:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80055ee:	ea04 0605 	and.w	r6, r4, r5
    if(iocurrent == ioposition)
 80055f2:	43ac      	bics	r4, r5
 80055f4:	f040 80b7 	bne.w	8005766 <HAL_GPIO_Init+0x18a>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80055f8:	684d      	ldr	r5, [r1, #4]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80055fa:	2703      	movs	r7, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80055fc:	f005 0403 	and.w	r4, r5, #3
 8005600:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005604:	fa07 fc08 	lsl.w	ip, r7, r8
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005608:	1e67      	subs	r7, r4, #1
 800560a:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800560c:	ea6f 0c0c 	mvn.w	ip, ip
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005610:	d834      	bhi.n	800567c <HAL_GPIO_Init+0xa0>
        temp = GPIOx->OSPEEDR; 
 8005612:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005614:	ea07 0e0c 	and.w	lr, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005618:	68cf      	ldr	r7, [r1, #12]
 800561a:	fa07 f708 	lsl.w	r7, r7, r8
 800561e:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 8005622:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8005624:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005626:	ea27 0e06 	bic.w	lr, r7, r6
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800562a:	f3c5 1700 	ubfx	r7, r5, #4, #1
 800562e:	409f      	lsls	r7, r3
 8005630:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8005634:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8005636:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005638:	ea07 0e0c 	and.w	lr, r7, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800563c:	688f      	ldr	r7, [r1, #8]
 800563e:	fa07 f708 	lsl.w	r7, r7, r8
 8005642:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005646:	2c02      	cmp	r4, #2
        GPIOx->PUPDR = temp;
 8005648:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800564a:	d119      	bne.n	8005680 <HAL_GPIO_Init+0xa4>
        temp = GPIOx->AFR[position >> 3U];
 800564c:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8005650:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005654:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8005658:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800565c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8005660:	f04f 0e0f 	mov.w	lr, #15
 8005664:	fa0e fe0b 	lsl.w	lr, lr, fp
 8005668:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800566c:	690f      	ldr	r7, [r1, #16]
 800566e:	fa07 f70b 	lsl.w	r7, r7, fp
 8005672:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 8005676:	f8ca 7020 	str.w	r7, [sl, #32]
 800567a:	e001      	b.n	8005680 <HAL_GPIO_Init+0xa4>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800567c:	2c03      	cmp	r4, #3
 800567e:	d1da      	bne.n	8005636 <HAL_GPIO_Init+0x5a>
      temp = GPIOx->MODER;
 8005680:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005682:	fa04 f408 	lsl.w	r4, r4, r8
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005686:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800568a:	433c      	orrs	r4, r7
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800568c:	f415 3f40 	tst.w	r5, #196608	@ 0x30000
      GPIOx->MODER = temp;
 8005690:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005692:	d068      	beq.n	8005766 <HAL_GPIO_Init+0x18a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005694:	2400      	movs	r4, #0
 8005696:	9401      	str	r4, [sp, #4]
 8005698:	f8d9 4044 	ldr.w	r4, [r9, #68]	@ 0x44
 800569c:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 80056a0:	f8c9 4044 	str.w	r4, [r9, #68]	@ 0x44
 80056a4:	f8d9 4044 	ldr.w	r4, [r9, #68]	@ 0x44
 80056a8:	f023 0703 	bic.w	r7, r3, #3
 80056ac:	f107 4780 	add.w	r7, r7, #1073741824	@ 0x40000000
 80056b0:	f404 4480 	and.w	r4, r4, #16384	@ 0x4000
 80056b4:	f507 379c 	add.w	r7, r7, #79872	@ 0x13800
 80056b8:	9401      	str	r4, [sp, #4]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80056ba:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80056be:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 80056c0:	f8d7 e008 	ldr.w	lr, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80056c4:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80056c8:	240f      	movs	r4, #15
 80056ca:	fa04 f40c 	lsl.w	r4, r4, ip
 80056ce:	ea2e 0e04 	bic.w	lr, lr, r4
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80056d2:	4c32      	ldr	r4, [pc, #200]	@ (800579c <HAL_GPIO_Init+0x1c0>)
 80056d4:	42a0      	cmp	r0, r4
 80056d6:	d04d      	beq.n	8005774 <HAL_GPIO_Init+0x198>
 80056d8:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 80056dc:	42a0      	cmp	r0, r4
 80056de:	d04b      	beq.n	8005778 <HAL_GPIO_Init+0x19c>
 80056e0:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 80056e4:	42a0      	cmp	r0, r4
 80056e6:	d049      	beq.n	800577c <HAL_GPIO_Init+0x1a0>
 80056e8:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 80056ec:	42a0      	cmp	r0, r4
 80056ee:	d047      	beq.n	8005780 <HAL_GPIO_Init+0x1a4>
 80056f0:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 80056f4:	42a0      	cmp	r0, r4
 80056f6:	d045      	beq.n	8005784 <HAL_GPIO_Init+0x1a8>
 80056f8:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 80056fc:	42a0      	cmp	r0, r4
 80056fe:	d043      	beq.n	8005788 <HAL_GPIO_Init+0x1ac>
 8005700:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8005704:	42a0      	cmp	r0, r4
 8005706:	d041      	beq.n	800578c <HAL_GPIO_Init+0x1b0>
 8005708:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 800570c:	42a0      	cmp	r0, r4
 800570e:	d03f      	beq.n	8005790 <HAL_GPIO_Init+0x1b4>
 8005710:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8005714:	42a0      	cmp	r0, r4
 8005716:	d03d      	beq.n	8005794 <HAL_GPIO_Init+0x1b8>
 8005718:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 800571c:	42a0      	cmp	r0, r4
 800571e:	bf14      	ite	ne
 8005720:	240a      	movne	r4, #10
 8005722:	2409      	moveq	r4, #9
 8005724:	fa04 f40c 	lsl.w	r4, r4, ip
 8005728:	ea44 040e 	orr.w	r4, r4, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 800572c:	60bc      	str	r4, [r7, #8]
        temp = EXTI->RTSR;
 800572e:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8005730:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005732:	f415 1f80 	tst.w	r5, #1048576	@ 0x100000
        temp &= ~((uint32_t)iocurrent);
 8005736:	bf0c      	ite	eq
 8005738:	403c      	andeq	r4, r7
        {
          temp |= iocurrent;
 800573a:	4334      	orrne	r4, r6
        }
        EXTI->RTSR = temp;
 800573c:	6094      	str	r4, [r2, #8]

        temp = EXTI->FTSR;
 800573e:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005740:	f415 1f00 	tst.w	r5, #2097152	@ 0x200000
        temp &= ~((uint32_t)iocurrent);
 8005744:	bf0c      	ite	eq
 8005746:	403c      	andeq	r4, r7
        {
          temp |= iocurrent;
 8005748:	4334      	orrne	r4, r6
        }
        EXTI->FTSR = temp;
 800574a:	60d4      	str	r4, [r2, #12]

        temp = EXTI->EMR;
 800574c:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800574e:	f415 3f00 	tst.w	r5, #131072	@ 0x20000
        temp &= ~((uint32_t)iocurrent);
 8005752:	bf0c      	ite	eq
 8005754:	403c      	andeq	r4, r7
        {
          temp |= iocurrent;
 8005756:	4334      	orrne	r4, r6
        }
        EXTI->EMR = temp;
 8005758:	6054      	str	r4, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800575a:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800575c:	03ed      	lsls	r5, r5, #15
        temp &= ~((uint32_t)iocurrent);
 800575e:	bf54      	ite	pl
 8005760:	403c      	andpl	r4, r7
        {
          temp |= iocurrent;
 8005762:	4334      	orrmi	r4, r6
        }
        EXTI->IMR = temp;
 8005764:	6014      	str	r4, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005766:	3301      	adds	r3, #1
 8005768:	2b10      	cmp	r3, #16
 800576a:	f47f af3d 	bne.w	80055e8 <HAL_GPIO_Init+0xc>
      }
    }
  }
}
 800576e:	b003      	add	sp, #12
 8005770:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005774:	2400      	movs	r4, #0
 8005776:	e7d5      	b.n	8005724 <HAL_GPIO_Init+0x148>
 8005778:	2401      	movs	r4, #1
 800577a:	e7d3      	b.n	8005724 <HAL_GPIO_Init+0x148>
 800577c:	2402      	movs	r4, #2
 800577e:	e7d1      	b.n	8005724 <HAL_GPIO_Init+0x148>
 8005780:	2403      	movs	r4, #3
 8005782:	e7cf      	b.n	8005724 <HAL_GPIO_Init+0x148>
 8005784:	2404      	movs	r4, #4
 8005786:	e7cd      	b.n	8005724 <HAL_GPIO_Init+0x148>
 8005788:	2405      	movs	r4, #5
 800578a:	e7cb      	b.n	8005724 <HAL_GPIO_Init+0x148>
 800578c:	2406      	movs	r4, #6
 800578e:	e7c9      	b.n	8005724 <HAL_GPIO_Init+0x148>
 8005790:	2407      	movs	r4, #7
 8005792:	e7c7      	b.n	8005724 <HAL_GPIO_Init+0x148>
 8005794:	2408      	movs	r4, #8
 8005796:	e7c5      	b.n	8005724 <HAL_GPIO_Init+0x148>
 8005798:	40013c00 	.word	0x40013c00
 800579c:	40020000 	.word	0x40020000
 80057a0:	40023800 	.word	0x40023800

080057a4 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80057a4:	6903      	ldr	r3, [r0, #16]
 80057a6:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80057a8:	bf14      	ite	ne
 80057aa:	2001      	movne	r0, #1
 80057ac:	2000      	moveq	r0, #0
 80057ae:	4770      	bx	lr

080057b0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80057b0:	b10a      	cbz	r2, 80057b6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80057b2:	6181      	str	r1, [r0, #24]
  }
}
 80057b4:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80057b6:	0409      	lsls	r1, r1, #16
 80057b8:	e7fb      	b.n	80057b2 <HAL_GPIO_WritePin+0x2>

080057ba <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80057ba:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80057bc:	ea01 0203 	and.w	r2, r1, r3
 80057c0:	ea21 0103 	bic.w	r1, r1, r3
 80057c4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80057c8:	6181      	str	r1, [r0, #24]
}
 80057ca:	4770      	bx	lr

080057cc <HAL_GPIO_EXTI_Callback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80057cc:	4770      	bx	lr
	...

080057d0 <HAL_GPIO_EXTI_IRQHandler>:
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80057d0:	4a04      	ldr	r2, [pc, #16]	@ (80057e4 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 80057d2:	6951      	ldr	r1, [r2, #20]
 80057d4:	4201      	tst	r1, r0
{
 80057d6:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80057d8:	d002      	beq.n	80057e0 <HAL_GPIO_EXTI_IRQHandler+0x10>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80057da:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80057dc:	f7ff fff6 	bl	80057cc <HAL_GPIO_EXTI_Callback>
}
 80057e0:	bd08      	pop	{r3, pc}
 80057e2:	bf00      	nop
 80057e4:	40013c00 	.word	0x40013c00

080057e8 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80057e8:	6801      	ldr	r1, [r0, #0]
 80057ea:	694b      	ldr	r3, [r1, #20]
 80057ec:	f413 6380 	ands.w	r3, r3, #1024	@ 0x400
 80057f0:	f04f 0200 	mov.w	r2, #0
 80057f4:	d010      	beq.n	8005818 <I2C_IsAcknowledgeFailed+0x30>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80057f6:	f46f 6380 	mvn.w	r3, #1024	@ 0x400
 80057fa:	614b      	str	r3, [r1, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 80057fc:	2320      	movs	r3, #32
    hi2c->PreviousState       = I2C_STATE_NONE;
 80057fe:	6302      	str	r2, [r0, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005800:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005804:	f880 203e 	strb.w	r2, [r0, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005808:	6c03      	ldr	r3, [r0, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800580a:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800580e:	f043 0304 	orr.w	r3, r3, #4
 8005812:	6403      	str	r3, [r0, #64]	@ 0x40

    return HAL_ERROR;
 8005814:	2001      	movs	r0, #1
 8005816:	4770      	bx	lr
  }
  return HAL_OK;
 8005818:	4618      	mov	r0, r3
}
 800581a:	4770      	bx	lr

0800581c <I2C_WaitOnFlagUntilTimeout>:
{
 800581c:	e92d 46f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r9, sl, lr}
 8005820:	4606      	mov	r6, r0
 8005822:	460f      	mov	r7, r1
 8005824:	4691      	mov	r9, r2
 8005826:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005828:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800582c:	6833      	ldr	r3, [r6, #0]
 800582e:	f1ba 0f01 	cmp.w	sl, #1
 8005832:	bf0c      	ite	eq
 8005834:	695c      	ldreq	r4, [r3, #20]
 8005836:	699c      	ldrne	r4, [r3, #24]
 8005838:	ea27 0404 	bic.w	r4, r7, r4
 800583c:	b2a4      	uxth	r4, r4
 800583e:	fab4 f484 	clz	r4, r4
 8005842:	0964      	lsrs	r4, r4, #5
 8005844:	45a1      	cmp	r9, r4
 8005846:	d001      	beq.n	800584c <I2C_WaitOnFlagUntilTimeout+0x30>
  return HAL_OK;
 8005848:	2000      	movs	r0, #0
 800584a:	e017      	b.n	800587c <I2C_WaitOnFlagUntilTimeout+0x60>
    if (Timeout != HAL_MAX_DELAY)
 800584c:	1c6a      	adds	r2, r5, #1
 800584e:	d0ee      	beq.n	800582e <I2C_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005850:	f7ff fb36 	bl	8004ec0 <HAL_GetTick>
 8005854:	9b08      	ldr	r3, [sp, #32]
 8005856:	1ac0      	subs	r0, r0, r3
 8005858:	42a8      	cmp	r0, r5
 800585a:	d801      	bhi.n	8005860 <I2C_WaitOnFlagUntilTimeout+0x44>
 800585c:	2d00      	cmp	r5, #0
 800585e:	d1e5      	bne.n	800582c <I2C_WaitOnFlagUntilTimeout+0x10>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005860:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8005862:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005864:	6333      	str	r3, [r6, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005866:	f886 203d 	strb.w	r2, [r6, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800586a:	f886 303e 	strb.w	r3, [r6, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800586e:	6c32      	ldr	r2, [r6, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8005870:	f886 303c 	strb.w	r3, [r6, #60]	@ 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005874:	f042 0220 	orr.w	r2, r2, #32
 8005878:	6432      	str	r2, [r6, #64]	@ 0x40
        return HAL_ERROR;
 800587a:	2001      	movs	r0, #1
}
 800587c:	e8bd 86f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r9, sl, pc}

08005880 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8005880:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005884:	4604      	mov	r4, r0
 8005886:	460f      	mov	r7, r1
 8005888:	4616      	mov	r6, r2
 800588a:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800588c:	6825      	ldr	r5, [r4, #0]
 800588e:	6968      	ldr	r0, [r5, #20]
 8005890:	ea27 0000 	bic.w	r0, r7, r0
 8005894:	b280      	uxth	r0, r0
 8005896:	b1c0      	cbz	r0, 80058ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4a>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005898:	696b      	ldr	r3, [r5, #20]
 800589a:	055a      	lsls	r2, r3, #21
 800589c:	d517      	bpl.n	80058ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800589e:	682b      	ldr	r3, [r5, #0]
 80058a0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80058a4:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80058a6:	f46f 6380 	mvn.w	r3, #1024	@ 0x400
 80058aa:	616b      	str	r3, [r5, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 80058ac:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 80058ae:	2300      	movs	r3, #0
 80058b0:	6323      	str	r3, [r4, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80058b2:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80058b6:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80058ba:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80058bc:	f043 0304 	orr.w	r3, r3, #4
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80058c0:	6423      	str	r3, [r4, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 80058c2:	2300      	movs	r3, #0
 80058c4:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
      return HAL_ERROR;
 80058c8:	2001      	movs	r0, #1
}
 80058ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 80058ce:	1c73      	adds	r3, r6, #1
 80058d0:	d0dd      	beq.n	800588e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058d2:	f7ff faf5 	bl	8004ec0 <HAL_GetTick>
 80058d6:	eba0 0008 	sub.w	r0, r0, r8
 80058da:	42b0      	cmp	r0, r6
 80058dc:	d801      	bhi.n	80058e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x62>
 80058de:	2e00      	cmp	r6, #0
 80058e0:	d1d4      	bne.n	800588c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
        hi2c->PreviousState       = I2C_STATE_NONE;
 80058e2:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 80058e4:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 80058e6:	6323      	str	r3, [r4, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80058e8:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80058ec:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80058f0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80058f2:	4313      	orrs	r3, r2
 80058f4:	e7e4      	b.n	80058c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x40>

080058f6 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 80058f6:	b570      	push	{r4, r5, r6, lr}
 80058f8:	4604      	mov	r4, r0
 80058fa:	460d      	mov	r5, r1
 80058fc:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80058fe:	6823      	ldr	r3, [r4, #0]
 8005900:	695b      	ldr	r3, [r3, #20]
 8005902:	061b      	lsls	r3, r3, #24
 8005904:	d501      	bpl.n	800590a <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;
 8005906:	2000      	movs	r0, #0
 8005908:	e01a      	b.n	8005940 <I2C_WaitOnTXEFlagUntilTimeout+0x4a>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800590a:	4620      	mov	r0, r4
 800590c:	f7ff ff6c 	bl	80057e8 <I2C_IsAcknowledgeFailed>
 8005910:	b9a8      	cbnz	r0, 800593e <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 8005912:	1c6a      	adds	r2, r5, #1
 8005914:	d0f3      	beq.n	80058fe <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005916:	f7ff fad3 	bl	8004ec0 <HAL_GetTick>
 800591a:	1b80      	subs	r0, r0, r6
 800591c:	42a8      	cmp	r0, r5
 800591e:	d801      	bhi.n	8005924 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 8005920:	2d00      	cmp	r5, #0
 8005922:	d1ec      	bne.n	80058fe <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005924:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8005926:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005928:	6323      	str	r3, [r4, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800592a:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800592e:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005932:	6c22      	ldr	r2, [r4, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8005934:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005938:	f042 0220 	orr.w	r2, r2, #32
 800593c:	6422      	str	r2, [r4, #64]	@ 0x40
      return HAL_ERROR;
 800593e:	2001      	movs	r0, #1
}
 8005940:	bd70      	pop	{r4, r5, r6, pc}
	...

08005944 <I2C_RequestMemoryWrite>:
{
 8005944:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005948:	4615      	mov	r5, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800594a:	6802      	ldr	r2, [r0, #0]
{
 800594c:	b085      	sub	sp, #20
 800594e:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	@ 0x30
 8005952:	4699      	mov	r9, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005954:	6813      	ldr	r3, [r2, #0]
 8005956:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800595a:	6013      	str	r3, [r2, #0]
{
 800595c:	460e      	mov	r6, r1
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800595e:	463b      	mov	r3, r7
 8005960:	f8cd 8000 	str.w	r8, [sp]
 8005964:	2200      	movs	r2, #0
 8005966:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
{
 800596a:	4604      	mov	r4, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800596c:	f7ff ff56 	bl	800581c <I2C_WaitOnFlagUntilTimeout>
 8005970:	6823      	ldr	r3, [r4, #0]
 8005972:	b138      	cbz	r0, 8005984 <I2C_RequestMemoryWrite+0x40>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	05db      	lsls	r3, r3, #23
 8005978:	d502      	bpl.n	8005980 <I2C_RequestMemoryWrite+0x3c>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800597a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800597e:	6423      	str	r3, [r4, #64]	@ 0x40
    return HAL_TIMEOUT;
 8005980:	2603      	movs	r6, #3
 8005982:	e020      	b.n	80059c6 <I2C_RequestMemoryWrite+0x82>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005984:	f006 06fe 	and.w	r6, r6, #254	@ 0xfe
 8005988:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800598a:	491a      	ldr	r1, [pc, #104]	@ (80059f4 <I2C_RequestMemoryWrite+0xb0>)
 800598c:	4643      	mov	r3, r8
 800598e:	463a      	mov	r2, r7
 8005990:	4620      	mov	r0, r4
 8005992:	f7ff ff75 	bl	8005880 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005996:	b9a8      	cbnz	r0, 80059c4 <I2C_RequestMemoryWrite+0x80>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005998:	6823      	ldr	r3, [r4, #0]
 800599a:	9003      	str	r0, [sp, #12]
 800599c:	695a      	ldr	r2, [r3, #20]
 800599e:	9203      	str	r2, [sp, #12]
 80059a0:	699b      	ldr	r3, [r3, #24]
 80059a2:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80059a4:	4642      	mov	r2, r8
 80059a6:	4639      	mov	r1, r7
 80059a8:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80059aa:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80059ac:	f7ff ffa3 	bl	80058f6 <I2C_WaitOnTXEFlagUntilTimeout>
 80059b0:	4606      	mov	r6, r0
 80059b2:	b160      	cbz	r0, 80059ce <I2C_RequestMemoryWrite+0x8a>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80059b4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80059b6:	2b04      	cmp	r3, #4
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059b8:	bf01      	itttt	eq
 80059ba:	6822      	ldreq	r2, [r4, #0]
 80059bc:	6813      	ldreq	r3, [r2, #0]
 80059be:	f443 7300 	orreq.w	r3, r3, #512	@ 0x200
 80059c2:	6013      	streq	r3, [r2, #0]
    return HAL_ERROR;
 80059c4:	2601      	movs	r6, #1
}
 80059c6:	4630      	mov	r0, r6
 80059c8:	b005      	add	sp, #20
 80059ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80059ce:	f1b9 0f01 	cmp.w	r9, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059d2:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80059d4:	d102      	bne.n	80059dc <I2C_RequestMemoryWrite+0x98>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80059d6:	b2ed      	uxtb	r5, r5
 80059d8:	611d      	str	r5, [r3, #16]
 80059da:	e7f4      	b.n	80059c6 <I2C_RequestMemoryWrite+0x82>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80059dc:	0a2a      	lsrs	r2, r5, #8
 80059de:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80059e0:	4639      	mov	r1, r7
 80059e2:	4642      	mov	r2, r8
 80059e4:	4620      	mov	r0, r4
 80059e6:	f7ff ff86 	bl	80058f6 <I2C_WaitOnTXEFlagUntilTimeout>
 80059ea:	2800      	cmp	r0, #0
 80059ec:	d1e2      	bne.n	80059b4 <I2C_RequestMemoryWrite+0x70>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80059ee:	6823      	ldr	r3, [r4, #0]
 80059f0:	e7f1      	b.n	80059d6 <I2C_RequestMemoryWrite+0x92>
 80059f2:	bf00      	nop
 80059f4:	00010002 	.word	0x00010002

080059f8 <I2C_RequestMemoryRead>:
{
 80059f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80059fc:	469a      	mov	sl, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80059fe:	6803      	ldr	r3, [r0, #0]
{
 8005a00:	4615      	mov	r5, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a02:	681a      	ldr	r2, [r3, #0]
 8005a04:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005a08:	601a      	str	r2, [r3, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005a0a:	681a      	ldr	r2, [r3, #0]
{
 8005a0c:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	@ 0x30
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005a10:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005a14:	601a      	str	r2, [r3, #0]
{
 8005a16:	460e      	mov	r6, r1
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005a18:	463b      	mov	r3, r7
 8005a1a:	f8cd 8000 	str.w	r8, [sp]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
{
 8005a24:	4604      	mov	r4, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005a26:	f7ff fef9 	bl	800581c <I2C_WaitOnFlagUntilTimeout>
 8005a2a:	6823      	ldr	r3, [r4, #0]
 8005a2c:	b138      	cbz	r0, 8005a3e <I2C_RequestMemoryRead+0x46>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005a2e:	681b      	ldr	r3, [r3, #0]
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005a30:	05db      	lsls	r3, r3, #23
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005a32:	bf44      	itt	mi
 8005a34:	f44f 7300 	movmi.w	r3, #512	@ 0x200
 8005a38:	6423      	strmi	r3, [r4, #64]	@ 0x40
    return HAL_TIMEOUT;
 8005a3a:	2003      	movs	r0, #3
 8005a3c:	e021      	b.n	8005a82 <I2C_RequestMemoryRead+0x8a>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005a3e:	fa5f f986 	uxtb.w	r9, r6
 8005a42:	f006 06fe 	and.w	r6, r6, #254	@ 0xfe
 8005a46:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005a48:	492b      	ldr	r1, [pc, #172]	@ (8005af8 <I2C_RequestMemoryRead+0x100>)
 8005a4a:	4643      	mov	r3, r8
 8005a4c:	463a      	mov	r2, r7
 8005a4e:	4620      	mov	r0, r4
 8005a50:	f7ff ff16 	bl	8005880 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005a54:	b9a0      	cbnz	r0, 8005a80 <I2C_RequestMemoryRead+0x88>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a56:	6823      	ldr	r3, [r4, #0]
 8005a58:	9003      	str	r0, [sp, #12]
 8005a5a:	695a      	ldr	r2, [r3, #20]
 8005a5c:	9203      	str	r2, [sp, #12]
 8005a5e:	699b      	ldr	r3, [r3, #24]
 8005a60:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a62:	4642      	mov	r2, r8
 8005a64:	4639      	mov	r1, r7
 8005a66:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a68:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a6a:	f7ff ff44 	bl	80058f6 <I2C_WaitOnTXEFlagUntilTimeout>
 8005a6e:	b158      	cbz	r0, 8005a88 <I2C_RequestMemoryRead+0x90>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005a70:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005a72:	2b04      	cmp	r3, #4
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a74:	bf01      	itttt	eq
 8005a76:	6822      	ldreq	r2, [r4, #0]
 8005a78:	6813      	ldreq	r3, [r2, #0]
 8005a7a:	f443 7300 	orreq.w	r3, r3, #512	@ 0x200
 8005a7e:	6013      	streq	r3, [r2, #0]
    return HAL_ERROR;
 8005a80:	2001      	movs	r0, #1
}
 8005a82:	b004      	add	sp, #16
 8005a84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005a88:	f1ba 0f01 	cmp.w	sl, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a8c:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005a8e:	d11a      	bne.n	8005ac6 <I2C_RequestMemoryRead+0xce>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005a90:	b2ed      	uxtb	r5, r5
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a92:	4642      	mov	r2, r8
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005a94:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a96:	4639      	mov	r1, r7
 8005a98:	4620      	mov	r0, r4
 8005a9a:	f7ff ff2c 	bl	80058f6 <I2C_WaitOnTXEFlagUntilTimeout>
 8005a9e:	4602      	mov	r2, r0
 8005aa0:	2800      	cmp	r0, #0
 8005aa2:	d1e5      	bne.n	8005a70 <I2C_RequestMemoryRead+0x78>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005aa4:	6821      	ldr	r1, [r4, #0]
 8005aa6:	680b      	ldr	r3, [r1, #0]
 8005aa8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005aac:	600b      	str	r3, [r1, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005aae:	4620      	mov	r0, r4
 8005ab0:	f8cd 8000 	str.w	r8, [sp]
 8005ab4:	463b      	mov	r3, r7
 8005ab6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005aba:	f7ff feaf 	bl	800581c <I2C_WaitOnFlagUntilTimeout>
 8005abe:	6822      	ldr	r2, [r4, #0]
 8005ac0:	b160      	cbz	r0, 8005adc <I2C_RequestMemoryRead+0xe4>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005ac2:	6813      	ldr	r3, [r2, #0]
 8005ac4:	e7b4      	b.n	8005a30 <I2C_RequestMemoryRead+0x38>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005ac6:	0a2a      	lsrs	r2, r5, #8
 8005ac8:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005aca:	4639      	mov	r1, r7
 8005acc:	4642      	mov	r2, r8
 8005ace:	4620      	mov	r0, r4
 8005ad0:	f7ff ff11 	bl	80058f6 <I2C_WaitOnTXEFlagUntilTimeout>
 8005ad4:	2800      	cmp	r0, #0
 8005ad6:	d1cb      	bne.n	8005a70 <I2C_RequestMemoryRead+0x78>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005ad8:	6823      	ldr	r3, [r4, #0]
 8005ada:	e7d9      	b.n	8005a90 <I2C_RequestMemoryRead+0x98>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005adc:	f049 0301 	orr.w	r3, r9, #1
 8005ae0:	6113      	str	r3, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005ae2:	4905      	ldr	r1, [pc, #20]	@ (8005af8 <I2C_RequestMemoryRead+0x100>)
 8005ae4:	4643      	mov	r3, r8
 8005ae6:	463a      	mov	r2, r7
 8005ae8:	4620      	mov	r0, r4
 8005aea:	f7ff fec9 	bl	8005880 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005aee:	3800      	subs	r0, #0
 8005af0:	bf18      	it	ne
 8005af2:	2001      	movne	r0, #1
 8005af4:	e7c5      	b.n	8005a82 <I2C_RequestMemoryRead+0x8a>
 8005af6:	bf00      	nop
 8005af8:	00010002 	.word	0x00010002

08005afc <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8005afc:	b570      	push	{r4, r5, r6, lr}
 8005afe:	4604      	mov	r4, r0
 8005b00:	460d      	mov	r5, r1
 8005b02:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005b04:	6823      	ldr	r3, [r4, #0]
 8005b06:	695b      	ldr	r3, [r3, #20]
 8005b08:	075b      	lsls	r3, r3, #29
 8005b0a:	d501      	bpl.n	8005b10 <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 8005b0c:	2000      	movs	r0, #0
 8005b0e:	e01a      	b.n	8005b46 <I2C_WaitOnBTFFlagUntilTimeout+0x4a>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005b10:	4620      	mov	r0, r4
 8005b12:	f7ff fe69 	bl	80057e8 <I2C_IsAcknowledgeFailed>
 8005b16:	b9a8      	cbnz	r0, 8005b44 <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 8005b18:	1c6a      	adds	r2, r5, #1
 8005b1a:	d0f3      	beq.n	8005b04 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b1c:	f7ff f9d0 	bl	8004ec0 <HAL_GetTick>
 8005b20:	1b80      	subs	r0, r0, r6
 8005b22:	42a8      	cmp	r0, r5
 8005b24:	d801      	bhi.n	8005b2a <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 8005b26:	2d00      	cmp	r5, #0
 8005b28:	d1ec      	bne.n	8005b04 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005b2a:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8005b2c:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005b2e:	6323      	str	r3, [r4, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005b30:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b34:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005b38:	6c22      	ldr	r2, [r4, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8005b3a:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005b3e:	f042 0220 	orr.w	r2, r2, #32
 8005b42:	6422      	str	r2, [r4, #64]	@ 0x40
      return HAL_ERROR;
 8005b44:	2001      	movs	r0, #1
}
 8005b46:	bd70      	pop	{r4, r5, r6, pc}

08005b48 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8005b48:	b570      	push	{r4, r5, r6, lr}
 8005b4a:	4604      	mov	r4, r0
 8005b4c:	460d      	mov	r5, r1
 8005b4e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005b50:	6821      	ldr	r1, [r4, #0]
 8005b52:	694b      	ldr	r3, [r1, #20]
 8005b54:	f013 0340 	ands.w	r3, r3, #64	@ 0x40
 8005b58:	d001      	beq.n	8005b5e <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
  return HAL_OK;
 8005b5a:	2000      	movs	r0, #0
 8005b5c:	e011      	b.n	8005b82 <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005b5e:	694a      	ldr	r2, [r1, #20]
 8005b60:	06d2      	lsls	r2, r2, #27
 8005b62:	d50f      	bpl.n	8005b84 <I2C_WaitOnRXNEFlagUntilTimeout+0x3c>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005b64:	f06f 0210 	mvn.w	r2, #16
 8005b68:	614a      	str	r2, [r1, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 8005b6a:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005b6c:	6323      	str	r3, [r4, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005b6e:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b72:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005b76:	6c23      	ldr	r3, [r4, #64]	@ 0x40
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005b78:	6423      	str	r3, [r4, #64]	@ 0x40
      __HAL_UNLOCK(hi2c);
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
      return HAL_ERROR;
 8005b80:	2001      	movs	r0, #1
}
 8005b82:	bd70      	pop	{r4, r5, r6, pc}
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b84:	f7ff f99c 	bl	8004ec0 <HAL_GetTick>
 8005b88:	1b80      	subs	r0, r0, r6
 8005b8a:	42a8      	cmp	r0, r5
 8005b8c:	d801      	bhi.n	8005b92 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8005b8e:	2d00      	cmp	r5, #0
 8005b90:	d1de      	bne.n	8005b50 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005b92:	2300      	movs	r3, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 8005b94:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005b96:	6323      	str	r3, [r4, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005b98:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b9c:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005ba0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	e7e8      	b.n	8005b78 <I2C_WaitOnRXNEFlagUntilTimeout+0x30>
	...

08005ba8 <HAL_I2C_Init>:
{
 8005ba8:	b570      	push	{r4, r5, r6, lr}
  if (hi2c == NULL)
 8005baa:	4604      	mov	r4, r0
 8005bac:	b908      	cbnz	r0, 8005bb2 <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 8005bae:	2001      	movs	r0, #1
}
 8005bb0:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005bb2:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8005bb6:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8005bba:	b91b      	cbnz	r3, 8005bc4 <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 8005bbc:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_I2C_MspInit(hi2c);
 8005bc0:	f7fc fb74 	bl	80022ac <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8005bc4:	2324      	movs	r3, #36	@ 0x24
 8005bc6:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8005bca:	6823      	ldr	r3, [r4, #0]
 8005bcc:	681a      	ldr	r2, [r3, #0]
 8005bce:	f022 0201 	bic.w	r2, r2, #1
 8005bd2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005bd4:	681a      	ldr	r2, [r3, #0]
 8005bd6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005bda:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005bdc:	681a      	ldr	r2, [r3, #0]
 8005bde:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005be2:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005be4:	f000 fe70 	bl	80068c8 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005be8:	4b3f      	ldr	r3, [pc, #252]	@ (8005ce8 <HAL_I2C_Init+0x140>)
 8005bea:	6865      	ldr	r5, [r4, #4]
 8005bec:	429d      	cmp	r5, r3
 8005bee:	bf94      	ite	ls
 8005bf0:	4b3e      	ldrls	r3, [pc, #248]	@ (8005cec <HAL_I2C_Init+0x144>)
 8005bf2:	4b3f      	ldrhi	r3, [pc, #252]	@ (8005cf0 <HAL_I2C_Init+0x148>)
 8005bf4:	4298      	cmp	r0, r3
 8005bf6:	bf8c      	ite	hi
 8005bf8:	2300      	movhi	r3, #0
 8005bfa:	2301      	movls	r3, #1
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d1d6      	bne.n	8005bae <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005c00:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005c02:	4e39      	ldr	r6, [pc, #228]	@ (8005ce8 <HAL_I2C_Init+0x140>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005c04:	6851      	ldr	r1, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 8005c06:	4b3b      	ldr	r3, [pc, #236]	@ (8005cf4 <HAL_I2C_Init+0x14c>)
 8005c08:	fbb0 f3f3 	udiv	r3, r0, r3
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005c0c:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 8005c10:	4319      	orrs	r1, r3
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005c12:	42b5      	cmp	r5, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005c14:	6051      	str	r1, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005c16:	bf88      	it	hi
 8005c18:	f44f 7696 	movhi.w	r6, #300	@ 0x12c
 8005c1c:	6a11      	ldr	r1, [r2, #32]
 8005c1e:	bf88      	it	hi
 8005c20:	4373      	mulhi	r3, r6
 8005c22:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 8005c26:	bf84      	itt	hi
 8005c28:	f44f 767a 	movhi.w	r6, #1000	@ 0x3e8
 8005c2c:	fbb3 f3f6 	udivhi	r3, r3, r6
 8005c30:	3301      	adds	r3, #1
 8005c32:	430b      	orrs	r3, r1
 8005c34:	6213      	str	r3, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005c36:	69d1      	ldr	r1, [r2, #28]
 8005c38:	1e43      	subs	r3, r0, #1
 8005c3a:	482b      	ldr	r0, [pc, #172]	@ (8005ce8 <HAL_I2C_Init+0x140>)
 8005c3c:	f421 414f 	bic.w	r1, r1, #52992	@ 0xcf00
 8005c40:	4285      	cmp	r5, r0
 8005c42:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 8005c46:	d832      	bhi.n	8005cae <HAL_I2C_Init+0x106>
 8005c48:	006d      	lsls	r5, r5, #1
 8005c4a:	f640 70fc 	movw	r0, #4092	@ 0xffc
 8005c4e:	fbb3 f3f5 	udiv	r3, r3, r5
 8005c52:	3301      	adds	r3, #1
 8005c54:	4203      	tst	r3, r0
 8005c56:	d042      	beq.n	8005cde <HAL_I2C_Init+0x136>
 8005c58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c5c:	4319      	orrs	r1, r3
 8005c5e:	61d1      	str	r1, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005c60:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 8005c64:	6811      	ldr	r1, [r2, #0]
 8005c66:	4303      	orrs	r3, r0
 8005c68:	f021 01c0 	bic.w	r1, r1, #192	@ 0xc0
 8005c6c:	430b      	orrs	r3, r1
 8005c6e:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005c70:	6891      	ldr	r1, [r2, #8]
 8005c72:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 8005c76:	f421 4103 	bic.w	r1, r1, #33536	@ 0x8300
 8005c7a:	4303      	orrs	r3, r0
 8005c7c:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 8005c80:	430b      	orrs	r3, r1
 8005c82:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005c84:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 8005c88:	68d1      	ldr	r1, [r2, #12]
 8005c8a:	4303      	orrs	r3, r0
 8005c8c:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 8005c90:	430b      	orrs	r3, r1
 8005c92:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 8005c94:	6813      	ldr	r3, [r2, #0]
 8005c96:	f043 0301 	orr.w	r3, r3, #1
 8005c9a:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005c9c:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8005c9e:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ca0:	6420      	str	r0, [r4, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005ca2:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005ca6:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ca8:	f884 003e 	strb.w	r0, [r4, #62]	@ 0x3e
  return HAL_OK;
 8005cac:	e780      	b.n	8005bb0 <HAL_I2C_Init+0x8>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005cae:	68a0      	ldr	r0, [r4, #8]
 8005cb0:	b950      	cbnz	r0, 8005cc8 <HAL_I2C_Init+0x120>
 8005cb2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005cb6:	fbb3 f3f5 	udiv	r3, r3, r5
 8005cba:	3301      	adds	r3, #1
 8005cbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005cc0:	b17b      	cbz	r3, 8005ce2 <HAL_I2C_Init+0x13a>
 8005cc2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005cc6:	e7c9      	b.n	8005c5c <HAL_I2C_Init+0xb4>
 8005cc8:	2019      	movs	r0, #25
 8005cca:	4368      	muls	r0, r5
 8005ccc:	fbb3 f3f0 	udiv	r3, r3, r0
 8005cd0:	3301      	adds	r3, #1
 8005cd2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005cd6:	b123      	cbz	r3, 8005ce2 <HAL_I2C_Init+0x13a>
 8005cd8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005cdc:	e7be      	b.n	8005c5c <HAL_I2C_Init+0xb4>
 8005cde:	2304      	movs	r3, #4
 8005ce0:	e7bc      	b.n	8005c5c <HAL_I2C_Init+0xb4>
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	e7ba      	b.n	8005c5c <HAL_I2C_Init+0xb4>
 8005ce6:	bf00      	nop
 8005ce8:	000186a0 	.word	0x000186a0
 8005cec:	001e847f 	.word	0x001e847f
 8005cf0:	003d08ff 	.word	0x003d08ff
 8005cf4:	000f4240 	.word	0x000f4240

08005cf8 <HAL_I2C_Mem_Write>:
{
 8005cf8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005cfc:	4604      	mov	r4, r0
 8005cfe:	4699      	mov	r9, r3
 8005d00:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005d02:	460f      	mov	r7, r1
 8005d04:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 8005d06:	f7ff f8db 	bl	8004ec0 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d0a:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
 8005d0e:	2b20      	cmp	r3, #32
  uint32_t tickstart = HAL_GetTick();
 8005d10:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d12:	d003      	beq.n	8005d1c <HAL_I2C_Mem_Write+0x24>
      return HAL_BUSY;
 8005d14:	2002      	movs	r0, #2
}
 8005d16:	b003      	add	sp, #12
 8005d18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005d1c:	9000      	str	r0, [sp, #0]
 8005d1e:	493c      	ldr	r1, [pc, #240]	@ (8005e10 <HAL_I2C_Mem_Write+0x118>)
 8005d20:	2319      	movs	r3, #25
 8005d22:	2201      	movs	r2, #1
 8005d24:	4620      	mov	r0, r4
 8005d26:	f7ff fd79 	bl	800581c <I2C_WaitOnFlagUntilTimeout>
 8005d2a:	2800      	cmp	r0, #0
 8005d2c:	d1f2      	bne.n	8005d14 <HAL_I2C_Mem_Write+0x1c>
    __HAL_LOCK(hi2c);
 8005d2e:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 8005d32:	2b01      	cmp	r3, #1
 8005d34:	d0ee      	beq.n	8005d14 <HAL_I2C_Mem_Write+0x1c>
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005d36:	6820      	ldr	r0, [r4, #0]
    __HAL_LOCK(hi2c);
 8005d38:	2301      	movs	r3, #1
 8005d3a:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005d3e:	6803      	ldr	r3, [r0, #0]
 8005d40:	07d9      	lsls	r1, r3, #31
      __HAL_I2C_ENABLE(hi2c);
 8005d42:	bf5e      	ittt	pl
 8005d44:	6803      	ldrpl	r3, [r0, #0]
 8005d46:	f043 0301 	orrpl.w	r3, r3, #1
 8005d4a:	6003      	strpl	r3, [r0, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005d4c:	6803      	ldr	r3, [r0, #0]
 8005d4e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005d52:	6003      	str	r3, [r0, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005d54:	2321      	movs	r3, #33	@ 0x21
 8005d56:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005d5a:	2340      	movs	r3, #64	@ 0x40
 8005d5c:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d60:	2300      	movs	r3, #0
 8005d62:	6423      	str	r3, [r4, #64]	@ 0x40
    hi2c->pBuffPtr    = pData;
 8005d64:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005d66:	6263      	str	r3, [r4, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005d68:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 8005d6c:	8563      	strh	r3, [r4, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005d6e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8005d70:	8523      	strh	r3, [r4, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005d72:	4b28      	ldr	r3, [pc, #160]	@ (8005e14 <HAL_I2C_Mem_Write+0x11c>)
 8005d74:	62e3      	str	r3, [r4, #44]	@ 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005d76:	4642      	mov	r2, r8
 8005d78:	e9cd 6500 	strd	r6, r5, [sp]
 8005d7c:	464b      	mov	r3, r9
 8005d7e:	4639      	mov	r1, r7
 8005d80:	4620      	mov	r0, r4
 8005d82:	f7ff fddf 	bl	8005944 <I2C_RequestMemoryWrite>
 8005d86:	2800      	cmp	r0, #0
 8005d88:	d02a      	beq.n	8005de0 <HAL_I2C_Mem_Write+0xe8>
      return HAL_ERROR;
 8005d8a:	2001      	movs	r0, #1
 8005d8c:	e7c3      	b.n	8005d16 <HAL_I2C_Mem_Write+0x1e>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005d8e:	f7ff fdb2 	bl	80058f6 <I2C_WaitOnTXEFlagUntilTimeout>
 8005d92:	b140      	cbz	r0, 8005da6 <HAL_I2C_Mem_Write+0xae>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005d94:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005d96:	2b04      	cmp	r3, #4
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d98:	bf01      	itttt	eq
 8005d9a:	6822      	ldreq	r2, [r4, #0]
 8005d9c:	6813      	ldreq	r3, [r2, #0]
 8005d9e:	f443 7300 	orreq.w	r3, r3, #512	@ 0x200
 8005da2:	6013      	streq	r3, [r2, #0]
 8005da4:	e7f1      	b.n	8005d8a <HAL_I2C_Mem_Write+0x92>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005da6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8005da8:	6827      	ldr	r7, [r4, #0]
 8005daa:	461a      	mov	r2, r3
 8005dac:	f812 1b01 	ldrb.w	r1, [r2], #1
 8005db0:	6139      	str	r1, [r7, #16]
      hi2c->pBuffPtr++;
 8005db2:	6262      	str	r2, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8005db4:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8005db6:	8d21      	ldrh	r1, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 8005db8:	3a01      	subs	r2, #1
 8005dba:	b292      	uxth	r2, r2
 8005dbc:	8562      	strh	r2, [r4, #42]	@ 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005dbe:	697a      	ldr	r2, [r7, #20]
      hi2c->XferSize--;
 8005dc0:	1e48      	subs	r0, r1, #1
 8005dc2:	b280      	uxth	r0, r0
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005dc4:	0752      	lsls	r2, r2, #29
      hi2c->XferSize--;
 8005dc6:	8520      	strh	r0, [r4, #40]	@ 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005dc8:	d50a      	bpl.n	8005de0 <HAL_I2C_Mem_Write+0xe8>
 8005dca:	b148      	cbz	r0, 8005de0 <HAL_I2C_Mem_Write+0xe8>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005dcc:	785a      	ldrb	r2, [r3, #1]
 8005dce:	613a      	str	r2, [r7, #16]
        hi2c->pBuffPtr++;
 8005dd0:	3302      	adds	r3, #2
 8005dd2:	6263      	str	r3, [r4, #36]	@ 0x24
        hi2c->XferCount--;
 8005dd4:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8005dd6:	3b01      	subs	r3, #1
        hi2c->XferSize--;
 8005dd8:	3902      	subs	r1, #2
        hi2c->XferCount--;
 8005dda:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 8005ddc:	8521      	strh	r1, [r4, #40]	@ 0x28
        hi2c->XferCount--;
 8005dde:	8563      	strh	r3, [r4, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005de0:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005de2:	462a      	mov	r2, r5
 8005de4:	4631      	mov	r1, r6
 8005de6:	4620      	mov	r0, r4
    while (hi2c->XferSize > 0U)
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d1d0      	bne.n	8005d8e <HAL_I2C_Mem_Write+0x96>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005dec:	f7ff fe86 	bl	8005afc <I2C_WaitOnBTFFlagUntilTimeout>
 8005df0:	2800      	cmp	r0, #0
 8005df2:	d1cf      	bne.n	8005d94 <HAL_I2C_Mem_Write+0x9c>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005df4:	6822      	ldr	r2, [r4, #0]
 8005df6:	6813      	ldr	r3, [r2, #0]
 8005df8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005dfc:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8005dfe:	2320      	movs	r3, #32
 8005e00:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    __HAL_UNLOCK(hi2c);
 8005e04:	f884 003c 	strb.w	r0, [r4, #60]	@ 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e08:	f884 003e 	strb.w	r0, [r4, #62]	@ 0x3e
    return HAL_OK;
 8005e0c:	e783      	b.n	8005d16 <HAL_I2C_Mem_Write+0x1e>
 8005e0e:	bf00      	nop
 8005e10:	00100002 	.word	0x00100002
 8005e14:	ffff0000 	.word	0xffff0000

08005e18 <HAL_I2C_Mem_Read>:
{
 8005e18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005e1c:	4604      	mov	r4, r0
 8005e1e:	b087      	sub	sp, #28
 8005e20:	4699      	mov	r9, r3
 8005e22:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8005e24:	460d      	mov	r5, r1
 8005e26:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 8005e28:	f7ff f84a 	bl	8004ec0 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e2c:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
 8005e30:	2b20      	cmp	r3, #32
  uint32_t tickstart = HAL_GetTick();
 8005e32:	4606      	mov	r6, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e34:	d004      	beq.n	8005e40 <HAL_I2C_Mem_Read+0x28>
      return HAL_BUSY;
 8005e36:	2502      	movs	r5, #2
}
 8005e38:	4628      	mov	r0, r5
 8005e3a:	b007      	add	sp, #28
 8005e3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005e40:	9000      	str	r0, [sp, #0]
 8005e42:	4976      	ldr	r1, [pc, #472]	@ (800601c <HAL_I2C_Mem_Read+0x204>)
 8005e44:	2319      	movs	r3, #25
 8005e46:	2201      	movs	r2, #1
 8005e48:	4620      	mov	r0, r4
 8005e4a:	f7ff fce7 	bl	800581c <I2C_WaitOnFlagUntilTimeout>
 8005e4e:	2800      	cmp	r0, #0
 8005e50:	d1f1      	bne.n	8005e36 <HAL_I2C_Mem_Read+0x1e>
    __HAL_LOCK(hi2c);
 8005e52:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 8005e56:	2b01      	cmp	r3, #1
 8005e58:	d0ed      	beq.n	8005e36 <HAL_I2C_Mem_Read+0x1e>
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005e5a:	6820      	ldr	r0, [r4, #0]
    __HAL_LOCK(hi2c);
 8005e5c:	2301      	movs	r3, #1
 8005e5e:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005e62:	6803      	ldr	r3, [r0, #0]
 8005e64:	07db      	lsls	r3, r3, #31
      __HAL_I2C_ENABLE(hi2c);
 8005e66:	bf5e      	ittt	pl
 8005e68:	6803      	ldrpl	r3, [r0, #0]
 8005e6a:	f043 0301 	orrpl.w	r3, r3, #1
 8005e6e:	6003      	strpl	r3, [r0, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005e70:	6803      	ldr	r3, [r0, #0]
 8005e72:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005e76:	6003      	str	r3, [r0, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005e78:	2322      	movs	r3, #34	@ 0x22
 8005e7a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005e7e:	2340      	movs	r3, #64	@ 0x40
 8005e80:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005e84:	2300      	movs	r3, #0
 8005e86:	6423      	str	r3, [r4, #64]	@ 0x40
    hi2c->pBuffPtr    = pData;
 8005e88:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005e8a:	6263      	str	r3, [r4, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005e8c:	f8bd 303c 	ldrh.w	r3, [sp, #60]	@ 0x3c
 8005e90:	8563      	strh	r3, [r4, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005e92:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8005e94:	8523      	strh	r3, [r4, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005e96:	4b62      	ldr	r3, [pc, #392]	@ (8006020 <HAL_I2C_Mem_Read+0x208>)
 8005e98:	62e3      	str	r3, [r4, #44]	@ 0x2c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005e9a:	4629      	mov	r1, r5
 8005e9c:	e9cd 7600 	strd	r7, r6, [sp]
 8005ea0:	464b      	mov	r3, r9
 8005ea2:	4642      	mov	r2, r8
 8005ea4:	4620      	mov	r0, r4
 8005ea6:	f7ff fda7 	bl	80059f8 <I2C_RequestMemoryRead>
 8005eaa:	4605      	mov	r5, r0
 8005eac:	b108      	cbz	r0, 8005eb2 <HAL_I2C_Mem_Read+0x9a>
      return HAL_ERROR;
 8005eae:	2501      	movs	r5, #1
 8005eb0:	e7c2      	b.n	8005e38 <HAL_I2C_Mem_Read+0x20>
    if (hi2c->XferSize == 0U)
 8005eb2:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005eb4:	6823      	ldr	r3, [r4, #0]
    if (hi2c->XferSize == 0U)
 8005eb6:	b9b2      	cbnz	r2, 8005ee6 <HAL_I2C_Mem_Read+0xce>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005eb8:	9002      	str	r0, [sp, #8]
 8005eba:	695a      	ldr	r2, [r3, #20]
 8005ebc:	9202      	str	r2, [sp, #8]
 8005ebe:	699a      	ldr	r2, [r3, #24]
 8005ec0:	9202      	str	r2, [sp, #8]
 8005ec2:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ec4:	681a      	ldr	r2, [r3, #0]
 8005ec6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005eca:	601a      	str	r2, [r3, #0]
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005ecc:	f8df 8154 	ldr.w	r8, [pc, #340]	@ 8006024 <HAL_I2C_Mem_Read+0x20c>
    while (hi2c->XferSize > 0U)
 8005ed0:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d12c      	bne.n	8005f30 <HAL_I2C_Mem_Read+0x118>
    hi2c->State = HAL_I2C_STATE_READY;
 8005ed6:	2220      	movs	r2, #32
 8005ed8:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
    __HAL_UNLOCK(hi2c);
 8005edc:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ee0:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    return HAL_OK;
 8005ee4:	e7a8      	b.n	8005e38 <HAL_I2C_Mem_Read+0x20>
    else if (hi2c->XferSize == 1U)
 8005ee6:	2a01      	cmp	r2, #1
 8005ee8:	d10a      	bne.n	8005f00 <HAL_I2C_Mem_Read+0xe8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005eea:	681a      	ldr	r2, [r3, #0]
 8005eec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005ef0:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ef2:	9003      	str	r0, [sp, #12]
 8005ef4:	695a      	ldr	r2, [r3, #20]
 8005ef6:	9203      	str	r2, [sp, #12]
 8005ef8:	699a      	ldr	r2, [r3, #24]
 8005efa:	9203      	str	r2, [sp, #12]
 8005efc:	9a03      	ldr	r2, [sp, #12]
 8005efe:	e7e1      	b.n	8005ec4 <HAL_I2C_Mem_Read+0xac>
    else if (hi2c->XferSize == 2U)
 8005f00:	2a02      	cmp	r2, #2
 8005f02:	d10e      	bne.n	8005f22 <HAL_I2C_Mem_Read+0x10a>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f04:	681a      	ldr	r2, [r3, #0]
 8005f06:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005f0a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005f0c:	681a      	ldr	r2, [r3, #0]
 8005f0e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005f12:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f14:	9004      	str	r0, [sp, #16]
 8005f16:	695a      	ldr	r2, [r3, #20]
 8005f18:	9204      	str	r2, [sp, #16]
 8005f1a:	699b      	ldr	r3, [r3, #24]
 8005f1c:	9304      	str	r3, [sp, #16]
 8005f1e:	9b04      	ldr	r3, [sp, #16]
 8005f20:	e7d4      	b.n	8005ecc <HAL_I2C_Mem_Read+0xb4>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f22:	9005      	str	r0, [sp, #20]
 8005f24:	695a      	ldr	r2, [r3, #20]
 8005f26:	9205      	str	r2, [sp, #20]
 8005f28:	699b      	ldr	r3, [r3, #24]
 8005f2a:	9305      	str	r3, [sp, #20]
 8005f2c:	9b05      	ldr	r3, [sp, #20]
 8005f2e:	e7cd      	b.n	8005ecc <HAL_I2C_Mem_Read+0xb4>
      if (hi2c->XferSize <= 3U)
 8005f30:	2b03      	cmp	r3, #3
 8005f32:	d856      	bhi.n	8005fe2 <HAL_I2C_Mem_Read+0x1ca>
        if (hi2c->XferSize == 1U)
 8005f34:	2b01      	cmp	r3, #1
 8005f36:	d115      	bne.n	8005f64 <HAL_I2C_Mem_Read+0x14c>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005f38:	4632      	mov	r2, r6
 8005f3a:	4639      	mov	r1, r7
 8005f3c:	4620      	mov	r0, r4
 8005f3e:	f7ff fe03 	bl	8005b48 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005f42:	2800      	cmp	r0, #0
 8005f44:	d1b3      	bne.n	8005eae <HAL_I2C_Mem_Read+0x96>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f46:	6823      	ldr	r3, [r4, #0]
 8005f48:	691a      	ldr	r2, [r3, #16]
 8005f4a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8005f4c:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8005f4e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8005f50:	3301      	adds	r3, #1
 8005f52:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 8005f54:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8005f56:	3b01      	subs	r3, #1
 8005f58:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 8005f5a:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8005f5c:	3b01      	subs	r3, #1
 8005f5e:	b29b      	uxth	r3, r3
 8005f60:	8563      	strh	r3, [r4, #42]	@ 0x2a
 8005f62:	e7b5      	b.n	8005ed0 <HAL_I2C_Mem_Read+0xb8>
        else if (hi2c->XferSize == 2U)
 8005f64:	2b02      	cmp	r3, #2
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005f66:	9600      	str	r6, [sp, #0]
 8005f68:	463b      	mov	r3, r7
 8005f6a:	f04f 0200 	mov.w	r2, #0
 8005f6e:	4641      	mov	r1, r8
 8005f70:	4620      	mov	r0, r4
        else if (hi2c->XferSize == 2U)
 8005f72:	d119      	bne.n	8005fa8 <HAL_I2C_Mem_Read+0x190>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005f74:	f7ff fc52 	bl	800581c <I2C_WaitOnFlagUntilTimeout>
 8005f78:	2800      	cmp	r0, #0
 8005f7a:	d198      	bne.n	8005eae <HAL_I2C_Mem_Read+0x96>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f7c:	6823      	ldr	r3, [r4, #0]
 8005f7e:	681a      	ldr	r2, [r3, #0]
 8005f80:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005f84:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f86:	691a      	ldr	r2, [r3, #16]
 8005f88:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8005f8a:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8005f8c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8005f8e:	1c53      	adds	r3, r2, #1
 8005f90:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 8005f92:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8005f94:	3b01      	subs	r3, #1
 8005f96:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 8005f98:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8005f9a:	3b01      	subs	r3, #1
 8005f9c:	b29b      	uxth	r3, r3
 8005f9e:	8563      	strh	r3, [r4, #42]	@ 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005fa0:	6823      	ldr	r3, [r4, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005fa2:	691b      	ldr	r3, [r3, #16]
 8005fa4:	7053      	strb	r3, [r2, #1]
 8005fa6:	e7d2      	b.n	8005f4e <HAL_I2C_Mem_Read+0x136>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005fa8:	f7ff fc38 	bl	800581c <I2C_WaitOnFlagUntilTimeout>
 8005fac:	4602      	mov	r2, r0
 8005fae:	2800      	cmp	r0, #0
 8005fb0:	f47f af7d 	bne.w	8005eae <HAL_I2C_Mem_Read+0x96>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005fb4:	6823      	ldr	r3, [r4, #0]
 8005fb6:	6819      	ldr	r1, [r3, #0]
 8005fb8:	f421 6180 	bic.w	r1, r1, #1024	@ 0x400
 8005fbc:	6019      	str	r1, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005fbe:	6919      	ldr	r1, [r3, #16]
 8005fc0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8005fc2:	7019      	strb	r1, [r3, #0]
          hi2c->pBuffPtr++;
 8005fc4:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8005fc6:	3301      	adds	r3, #1
 8005fc8:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 8005fca:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8005fcc:	3b01      	subs	r3, #1
 8005fce:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 8005fd0:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8005fd2:	3b01      	subs	r3, #1
 8005fd4:	b29b      	uxth	r3, r3
 8005fd6:	8563      	strh	r3, [r4, #42]	@ 0x2a
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005fd8:	4641      	mov	r1, r8
 8005fda:	9600      	str	r6, [sp, #0]
 8005fdc:	463b      	mov	r3, r7
 8005fde:	4620      	mov	r0, r4
 8005fe0:	e7c8      	b.n	8005f74 <HAL_I2C_Mem_Read+0x15c>
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005fe2:	4632      	mov	r2, r6
 8005fe4:	4639      	mov	r1, r7
 8005fe6:	4620      	mov	r0, r4
 8005fe8:	f7ff fdae 	bl	8005b48 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005fec:	2800      	cmp	r0, #0
 8005fee:	f47f af5e 	bne.w	8005eae <HAL_I2C_Mem_Read+0x96>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ff2:	6823      	ldr	r3, [r4, #0]
 8005ff4:	691a      	ldr	r2, [r3, #16]
 8005ff6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8005ff8:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005ffa:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8005ffc:	1c53      	adds	r3, r2, #1
 8005ffe:	6263      	str	r3, [r4, #36]	@ 0x24
        hi2c->XferSize--;
 8006000:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8006002:	3b01      	subs	r3, #1
 8006004:	8523      	strh	r3, [r4, #40]	@ 0x28
        hi2c->XferCount--;
 8006006:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8006008:	3b01      	subs	r3, #1
 800600a:	b29b      	uxth	r3, r3
 800600c:	8563      	strh	r3, [r4, #42]	@ 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800600e:	6823      	ldr	r3, [r4, #0]
 8006010:	6959      	ldr	r1, [r3, #20]
 8006012:	0749      	lsls	r1, r1, #29
 8006014:	f57f af5c 	bpl.w	8005ed0 <HAL_I2C_Mem_Read+0xb8>
 8006018:	e7c3      	b.n	8005fa2 <HAL_I2C_Mem_Read+0x18a>
 800601a:	bf00      	nop
 800601c:	00100002 	.word	0x00100002
 8006020:	ffff0000 	.word	0xffff0000
 8006024:	00010004 	.word	0x00010004

08006028 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006028:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800602a:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800602e:	2b20      	cmp	r3, #32
 8006030:	b2dc      	uxtb	r4, r3
 8006032:	d116      	bne.n	8006062 <HAL_I2CEx_ConfigAnalogFilter+0x3a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8006034:	2324      	movs	r3, #36	@ 0x24
 8006036:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800603a:	6803      	ldr	r3, [r0, #0]
 800603c:	681a      	ldr	r2, [r3, #0]
 800603e:	f022 0201 	bic.w	r2, r2, #1
 8006042:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8006044:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006046:	f022 0210 	bic.w	r2, r2, #16
 800604a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800604c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800604e:	4311      	orrs	r1, r2
 8006050:	6259      	str	r1, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8006052:	681a      	ldr	r2, [r3, #0]
 8006054:	f042 0201 	orr.w	r2, r2, #1
 8006058:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800605a:	f880 403d 	strb.w	r4, [r0, #61]	@ 0x3d

    return HAL_OK;
 800605e:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 8006060:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8006062:	2002      	movs	r0, #2
 8006064:	e7fc      	b.n	8006060 <HAL_I2CEx_ConfigAnalogFilter+0x38>

08006066 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006066:	b530      	push	{r4, r5, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006068:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800606c:	2b20      	cmp	r3, #32
 800606e:	b2dc      	uxtb	r4, r3
 8006070:	d116      	bne.n	80060a0 <HAL_I2CEx_ConfigDigitalFilter+0x3a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006072:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8006074:	2324      	movs	r3, #36	@ 0x24
 8006076:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
    __HAL_I2C_DISABLE(hi2c);
 800607a:	6813      	ldr	r3, [r2, #0]
 800607c:	f023 0301 	bic.w	r3, r3, #1
 8006080:	6013      	str	r3, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8006082:	6a55      	ldr	r5, [r2, #36]	@ 0x24

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8006084:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
 8006088:	402b      	ands	r3, r5

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800608a:	430b      	orrs	r3, r1

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800608c:	b29b      	uxth	r3, r3
 800608e:	6253      	str	r3, [r2, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8006090:	6813      	ldr	r3, [r2, #0]
 8006092:	f043 0301 	orr.w	r3, r3, #1
 8006096:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006098:	f880 403d 	strb.w	r4, [r0, #61]	@ 0x3d

    return HAL_OK;
 800609c:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 800609e:	bd30      	pop	{r4, r5, pc}
    return HAL_BUSY;
 80060a0:	2002      	movs	r0, #2
 80060a2:	e7fc      	b.n	800609e <HAL_I2CEx_ConfigDigitalFilter+0x38>

080060a4 <LTDC_SetConfig>:
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80060a4:	6800      	ldr	r0, [r0, #0]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80060a6:	f8d1 c000 	ldr.w	ip, [r1]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80060aa:	01d2      	lsls	r2, r2, #7
 80060ac:	3284      	adds	r2, #132	@ 0x84
 80060ae:	1883      	adds	r3, r0, r2
{
 80060b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80060b4:	68c6      	ldr	r6, [r0, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80060b6:	685d      	ldr	r5, [r3, #4]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80060b8:	684c      	ldr	r4, [r1, #4]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80060ba:	f8d1 9018 	ldr.w	r9, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80060be:	f405 4570 	and.w	r5, r5, #61440	@ 0xf000
 80060c2:	605d      	str	r5, [r3, #4]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80060c4:	68c5      	ldr	r5, [r0, #12]
 80060c6:	f10c 0701 	add.w	r7, ip, #1
 80060ca:	f3c5 450b 	ubfx	r5, r5, #16, #12
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80060ce:	f3c6 460b 	ubfx	r6, r6, #16, #12
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80060d2:	443d      	add	r5, r7
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80060d4:	4426      	add	r6, r4
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80060d6:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80060da:	605d      	str	r5, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80060dc:	68c6      	ldr	r6, [r0, #12]
 80060de:	68cd      	ldr	r5, [r1, #12]
 80060e0:	f3c6 060a 	ubfx	r6, r6, #0, #11
 80060e4:	442e      	add	r6, r5
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80060e6:	689d      	ldr	r5, [r3, #8]
 80060e8:	f405 4570 	and.w	r5, r5, #61440	@ 0xf000
 80060ec:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80060ee:	68c7      	ldr	r7, [r0, #12]
 80060f0:	688d      	ldr	r5, [r1, #8]
 80060f2:	f3c7 070a 	ubfx	r7, r7, #0, #11
 80060f6:	3501      	adds	r5, #1
 80060f8:	443d      	add	r5, r7
 80060fa:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
 80060fe:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8006100:	691d      	ldr	r5, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8006102:	690e      	ldr	r6, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8006104:	f025 0507 	bic.w	r5, r5, #7
 8006108:	611d      	str	r5, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800610a:	f04f 0e00 	mov.w	lr, #0
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800610e:	611e      	str	r6, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8006110:	699d      	ldr	r5, [r3, #24]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8006112:	f891 7032 	ldrb.w	r7, [r1, #50]	@ 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8006116:	f891 8031 	ldrb.w	r8, [r1, #49]	@ 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800611a:	f8c3 e018 	str.w	lr, [r3, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800611e:	f891 5030 	ldrb.w	r5, [r1, #48]	@ 0x30
 8006122:	ea45 6509 	orr.w	r5, r5, r9, lsl #24
 8006126:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
 800612a:	ea45 4507 	orr.w	r5, r5, r7, lsl #16
 800612e:	619d      	str	r5, [r3, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8006130:	695d      	ldr	r5, [r3, #20]
 8006132:	f025 05ff 	bic.w	r5, r5, #255	@ 0xff
 8006136:	615d      	str	r5, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8006138:	694d      	ldr	r5, [r1, #20]
 800613a:	615d      	str	r5, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800613c:	69dd      	ldr	r5, [r3, #28]
 800613e:	f425 65e0 	bic.w	r5, r5, #1792	@ 0x700
 8006142:	f025 0507 	bic.w	r5, r5, #7
 8006146:	61dd      	str	r5, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8006148:	e9d1 5707 	ldrd	r5, r7, [r1, #28]
 800614c:	433d      	orrs	r5, r7
 800614e:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8006150:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8006152:	6a4d      	ldr	r5, [r1, #36]	@ 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8006154:	f8c3 e028 	str.w	lr, [r3, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8006158:	629d      	str	r5, [r3, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800615a:	b31e      	cbz	r6, 80061a4 <LTDC_SetConfig+0x100>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800615c:	2e01      	cmp	r6, #1
 800615e:	d023      	beq.n	80061a8 <LTDC_SetConfig+0x104>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006160:	1eb5      	subs	r5, r6, #2
 8006162:	2d02      	cmp	r5, #2
 8006164:	d922      	bls.n	80061ac <LTDC_SetConfig+0x108>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
  {
    tmp = 2U;
 8006166:	2e07      	cmp	r6, #7
 8006168:	bf14      	ite	ne
 800616a:	2501      	movne	r5, #1
 800616c:	2502      	moveq	r5, #2
  {
    tmp = 1U;
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800616e:	6ade      	ldr	r6, [r3, #44]	@ 0x2c
 8006170:	f006 26e0 	and.w	r6, r6, #3758153728	@ 0xe000e000
 8006174:	62de      	str	r6, [r3, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8006176:	eba4 040c 	sub.w	r4, r4, ip
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800617a:	6a8e      	ldr	r6, [r1, #40]	@ 0x28
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800617c:	6ac9      	ldr	r1, [r1, #44]	@ 0x2c
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800617e:	436c      	muls	r4, r5
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8006180:	436e      	muls	r6, r5
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8006182:	3403      	adds	r4, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8006184:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8006188:	62dc      	str	r4, [r3, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800618a:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
 800618c:	f424 64ff 	bic.w	r4, r4, #2040	@ 0x7f8
 8006190:	f024 0407 	bic.w	r4, r4, #7
 8006194:	631c      	str	r4, [r3, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8006196:	6319      	str	r1, [r3, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8006198:	5883      	ldr	r3, [r0, r2]
 800619a:	f043 0301 	orr.w	r3, r3, #1
 800619e:	5083      	str	r3, [r0, r2]
}
 80061a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmp = 4U;
 80061a4:	2504      	movs	r5, #4
 80061a6:	e7e2      	b.n	800616e <LTDC_SetConfig+0xca>
    tmp = 3U;
 80061a8:	2503      	movs	r5, #3
 80061aa:	e7e0      	b.n	800616e <LTDC_SetConfig+0xca>
    tmp = 2U;
 80061ac:	2502      	movs	r5, #2
 80061ae:	e7de      	b.n	800616e <LTDC_SetConfig+0xca>

080061b0 <HAL_LTDC_Init>:
{
 80061b0:	b538      	push	{r3, r4, r5, lr}
  if (hltdc == NULL)
 80061b2:	4604      	mov	r4, r0
 80061b4:	2800      	cmp	r0, #0
 80061b6:	d063      	beq.n	8006280 <HAL_LTDC_Init+0xd0>
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80061b8:	f890 30a1 	ldrb.w	r3, [r0, #161]	@ 0xa1
 80061bc:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80061c0:	b91b      	cbnz	r3, 80061ca <HAL_LTDC_Init+0x1a>
    hltdc->Lock = HAL_UNLOCKED;
 80061c2:	f880 20a0 	strb.w	r2, [r0, #160]	@ 0xa0
    HAL_LTDC_MspInit(hltdc);
 80061c6:	f7fc f8cd 	bl	8002364 <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80061ca:	2302      	movs	r3, #2
 80061cc:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80061d0:	6823      	ldr	r3, [r4, #0]
 80061d2:	699a      	ldr	r2, [r3, #24]
 80061d4:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 80061d8:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80061da:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 80061de:	4302      	orrs	r2, r0
 80061e0:	68e0      	ldr	r0, [r4, #12]
 80061e2:	6999      	ldr	r1, [r3, #24]
 80061e4:	4302      	orrs	r2, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80061e6:	6920      	ldr	r0, [r4, #16]
 80061e8:	4302      	orrs	r2, r0
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80061ea:	430a      	orrs	r2, r1
 80061ec:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80061ee:	689a      	ldr	r2, [r3, #8]
 80061f0:	4924      	ldr	r1, [pc, #144]	@ (8006284 <HAL_LTDC_Init+0xd4>)
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80061f2:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80061f4:	400a      	ands	r2, r1
 80061f6:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80061f8:	689a      	ldr	r2, [r3, #8]
 80061fa:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80061fe:	69a0      	ldr	r0, [r4, #24]
 8006200:	4302      	orrs	r2, r0
 8006202:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8006204:	68da      	ldr	r2, [r3, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8006206:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8006208:	400a      	ands	r2, r1
 800620a:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800620c:	68da      	ldr	r2, [r3, #12]
 800620e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8006212:	6a20      	ldr	r0, [r4, #32]
 8006214:	4302      	orrs	r2, r0
 8006216:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8006218:	691a      	ldr	r2, [r3, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800621a:	6a60      	ldr	r0, [r4, #36]	@ 0x24
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800621c:	400a      	ands	r2, r1
 800621e:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8006220:	691a      	ldr	r2, [r3, #16]
 8006222:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8006226:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8006228:	4302      	orrs	r2, r0
 800622a:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800622c:	695a      	ldr	r2, [r3, #20]
 800622e:	400a      	ands	r2, r1
 8006230:	615a      	str	r2, [r3, #20]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8006232:	695a      	ldr	r2, [r3, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8006234:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8006236:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800623a:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800623c:	430a      	orrs	r2, r1
 800623e:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8006240:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8006242:	f894 0035 	ldrb.w	r0, [r4, #53]	@ 0x35
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8006246:	f894 1036 	ldrb.w	r1, [r4, #54]	@ 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800624a:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 800624e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8006250:	6add      	ldr	r5, [r3, #44]	@ 0x2c
 8006252:	f894 2034 	ldrb.w	r2, [r4, #52]	@ 0x34
 8006256:	432a      	orrs	r2, r5
 8006258:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800625c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8006260:	62da      	str	r2, [r3, #44]	@ 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8006262:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006264:	f042 0206 	orr.w	r2, r2, #6
 8006268:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_LTDC_ENABLE(hltdc);
 800626a:	699a      	ldr	r2, [r3, #24]
 800626c:	f042 0201 	orr.w	r2, r2, #1
 8006270:	619a      	str	r2, [r3, #24]
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8006272:	2000      	movs	r0, #0
  hltdc->State = HAL_LTDC_STATE_READY;
 8006274:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8006276:	f8c4 00a4 	str.w	r0, [r4, #164]	@ 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 800627a:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
}
 800627e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8006280:	2001      	movs	r0, #1
 8006282:	e7fc      	b.n	800627e <HAL_LTDC_Init+0xce>
 8006284:	f000f800 	.word	0xf000f800

08006288 <HAL_LTDC_ErrorCallback>:
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
 8006288:	4770      	bx	lr

0800628a <HAL_LTDC_ReloadEventCallback>:
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
 800628a:	4770      	bx	lr

0800628c <HAL_LTDC_IRQHandler>:
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800628c:	6803      	ldr	r3, [r0, #0]
{
 800628e:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8006290:	6b9e      	ldr	r6, [r3, #56]	@ 0x38
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8006292:	6b5d      	ldr	r5, [r3, #52]	@ 0x34
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8006294:	0772      	lsls	r2, r6, #29
{
 8006296:	4604      	mov	r4, r0
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8006298:	d514      	bpl.n	80062c4 <HAL_LTDC_IRQHandler+0x38>
 800629a:	0769      	lsls	r1, r5, #29
 800629c:	d512      	bpl.n	80062c4 <HAL_LTDC_IRQHandler+0x38>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800629e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80062a0:	f022 0204 	bic.w	r2, r2, #4
 80062a4:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80062a6:	2204      	movs	r2, #4
 80062a8:	63da      	str	r2, [r3, #60]	@ 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80062aa:	f8d0 30a4 	ldr.w	r3, [r0, #164]	@ 0xa4
 80062ae:	f043 0301 	orr.w	r3, r3, #1
 80062b2:	f8c0 30a4 	str.w	r3, [r0, #164]	@ 0xa4
    __HAL_UNLOCK(hltdc);
 80062b6:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80062b8:	f880 20a1 	strb.w	r2, [r0, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 80062bc:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 80062c0:	f7ff ffe2 	bl	8006288 <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 80062c4:	07b2      	lsls	r2, r6, #30
 80062c6:	d516      	bpl.n	80062f6 <HAL_LTDC_IRQHandler+0x6a>
 80062c8:	07ab      	lsls	r3, r5, #30
 80062ca:	d514      	bpl.n	80062f6 <HAL_LTDC_IRQHandler+0x6a>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80062cc:	6823      	ldr	r3, [r4, #0]
 80062ce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80062d0:	f022 0202 	bic.w	r2, r2, #2
 80062d4:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80062d6:	2202      	movs	r2, #2
 80062d8:	63da      	str	r2, [r3, #60]	@ 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80062da:	f8d4 30a4 	ldr.w	r3, [r4, #164]	@ 0xa4
 80062de:	4313      	orrs	r3, r2
 80062e0:	f8c4 30a4 	str.w	r3, [r4, #164]	@ 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80062e4:	2304      	movs	r3, #4
 80062e6:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 80062ea:	2300      	movs	r3, #0
 80062ec:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 80062f0:	4620      	mov	r0, r4
 80062f2:	f7ff ffc9 	bl	8006288 <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80062f6:	07f0      	lsls	r0, r6, #31
 80062f8:	d510      	bpl.n	800631c <HAL_LTDC_IRQHandler+0x90>
 80062fa:	07e9      	lsls	r1, r5, #31
 80062fc:	d50e      	bpl.n	800631c <HAL_LTDC_IRQHandler+0x90>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80062fe:	6823      	ldr	r3, [r4, #0]
 8006300:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006302:	f022 0201 	bic.w	r2, r2, #1
 8006306:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8006308:	2201      	movs	r2, #1
 800630a:	63da      	str	r2, [r3, #60]	@ 0x3c
    __HAL_UNLOCK(hltdc);
 800630c:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_READY;
 800630e:	f884 20a1 	strb.w	r2, [r4, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 8006312:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 8006316:	4620      	mov	r0, r4
 8006318:	f7fd f87c 	bl	8003414 <HAL_LTDC_LineEventCallback>
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800631c:	0732      	lsls	r2, r6, #28
 800631e:	d511      	bpl.n	8006344 <HAL_LTDC_IRQHandler+0xb8>
 8006320:	072b      	lsls	r3, r5, #28
 8006322:	d50f      	bpl.n	8006344 <HAL_LTDC_IRQHandler+0xb8>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8006324:	6823      	ldr	r3, [r4, #0]
 8006326:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006328:	f022 0208 	bic.w	r2, r2, #8
 800632c:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800632e:	2208      	movs	r2, #8
 8006330:	63da      	str	r2, [r3, #60]	@ 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 8006332:	2301      	movs	r3, #1
 8006334:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 8006338:	2300      	movs	r3, #0
 800633a:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 800633e:	4620      	mov	r0, r4
 8006340:	f7ff ffa3 	bl	800628a <HAL_LTDC_ReloadEventCallback>
}
 8006344:	bd70      	pop	{r4, r5, r6, pc}

08006346 <HAL_LTDC_ConfigLayer>:
{
 8006346:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hltdc);
 800634a:	f890 30a0 	ldrb.w	r3, [r0, #160]	@ 0xa0
 800634e:	2b01      	cmp	r3, #1
{
 8006350:	4606      	mov	r6, r0
 8006352:	460f      	mov	r7, r1
 8006354:	4694      	mov	ip, r2
 8006356:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(hltdc);
 800635a:	d01f      	beq.n	800639c <HAL_LTDC_ConfigLayer+0x56>
 800635c:	f04f 0801 	mov.w	r8, #1
 8006360:	f886 80a0 	strb.w	r8, [r6, #160]	@ 0xa0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006364:	f886 00a1 	strb.w	r0, [r6, #161]	@ 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8006368:	2434      	movs	r4, #52	@ 0x34
 800636a:	460d      	mov	r5, r1
 800636c:	fb04 6402 	mla	r4, r4, r2, r6
 8006370:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006372:	3438      	adds	r4, #56	@ 0x38
 8006374:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006376:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006378:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800637a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800637c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800637e:	682b      	ldr	r3, [r5, #0]
 8006380:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8006382:	4630      	mov	r0, r6
 8006384:	4662      	mov	r2, ip
 8006386:	4639      	mov	r1, r7
 8006388:	f7ff fe8c 	bl	80060a4 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800638c:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hltdc);
 800638e:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8006390:	f8c3 8024 	str.w	r8, [r3, #36]	@ 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 8006394:	f886 80a1 	strb.w	r8, [r6, #161]	@ 0xa1
  __HAL_UNLOCK(hltdc);
 8006398:	f886 00a0 	strb.w	r0, [r6, #160]	@ 0xa0
}
 800639c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080063a0 <HAL_LTDC_ProgramLineEvent>:
  __HAL_LOCK(hltdc);
 80063a0:	f890 20a0 	ldrb.w	r2, [r0, #160]	@ 0xa0
 80063a4:	2a01      	cmp	r2, #1
{
 80063a6:	4603      	mov	r3, r0
 80063a8:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(hltdc);
 80063ac:	d012      	beq.n	80063d4 <HAL_LTDC_ProgramLineEvent+0x34>
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80063ae:	681a      	ldr	r2, [r3, #0]
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80063b0:	f883 00a1 	strb.w	r0, [r3, #161]	@ 0xa1
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80063b4:	6b50      	ldr	r0, [r2, #52]	@ 0x34
 80063b6:	f020 0001 	bic.w	r0, r0, #1
 80063ba:	6350      	str	r0, [r2, #52]	@ 0x34
  LTDC->LIPCR = (uint32_t)Line;
 80063bc:	4806      	ldr	r0, [pc, #24]	@ (80063d8 <HAL_LTDC_ProgramLineEvent+0x38>)
 80063be:	6401      	str	r1, [r0, #64]	@ 0x40
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 80063c0:	6b51      	ldr	r1, [r2, #52]	@ 0x34
 80063c2:	f041 0101 	orr.w	r1, r1, #1
 80063c6:	6351      	str	r1, [r2, #52]	@ 0x34
  __HAL_UNLOCK(hltdc);
 80063c8:	2000      	movs	r0, #0
  hltdc->State = HAL_LTDC_STATE_READY;
 80063ca:	2201      	movs	r2, #1
 80063cc:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1
  __HAL_UNLOCK(hltdc);
 80063d0:	f883 00a0 	strb.w	r0, [r3, #160]	@ 0xa0
}
 80063d4:	4770      	bx	lr
 80063d6:	bf00      	nop
 80063d8:	40016800 	.word	0x40016800

080063dc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80063dc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80063e0:	4604      	mov	r4, r0
 80063e2:	b340      	cbz	r0, 8006436 <HAL_RCC_OscConfig+0x5a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80063e4:	6803      	ldr	r3, [r0, #0]
 80063e6:	07de      	lsls	r6, r3, #31
 80063e8:	d410      	bmi.n	800640c <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80063ea:	6823      	ldr	r3, [r4, #0]
 80063ec:	079d      	lsls	r5, r3, #30
 80063ee:	d45b      	bmi.n	80064a8 <HAL_RCC_OscConfig+0xcc>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80063f0:	6823      	ldr	r3, [r4, #0]
 80063f2:	0719      	lsls	r1, r3, #28
 80063f4:	f100 809d 	bmi.w	8006532 <HAL_RCC_OscConfig+0x156>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80063f8:	6823      	ldr	r3, [r4, #0]
 80063fa:	075a      	lsls	r2, r3, #29
 80063fc:	f100 80bd 	bmi.w	800657a <HAL_RCC_OscConfig+0x19e>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006400:	69a3      	ldr	r3, [r4, #24]
 8006402:	2b00      	cmp	r3, #0
 8006404:	f040 8124 	bne.w	8006650 <HAL_RCC_OscConfig+0x274>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8006408:	2000      	movs	r0, #0
 800640a:	e02c      	b.n	8006466 <HAL_RCC_OscConfig+0x8a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800640c:	4b8d      	ldr	r3, [pc, #564]	@ (8006644 <HAL_RCC_OscConfig+0x268>)
 800640e:	689a      	ldr	r2, [r3, #8]
 8006410:	f002 020c 	and.w	r2, r2, #12
 8006414:	2a04      	cmp	r2, #4
 8006416:	d007      	beq.n	8006428 <HAL_RCC_OscConfig+0x4c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006418:	689a      	ldr	r2, [r3, #8]
 800641a:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800641e:	2a08      	cmp	r2, #8
 8006420:	d10b      	bne.n	800643a <HAL_RCC_OscConfig+0x5e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006422:	685b      	ldr	r3, [r3, #4]
 8006424:	0259      	lsls	r1, r3, #9
 8006426:	d508      	bpl.n	800643a <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006428:	4b86      	ldr	r3, [pc, #536]	@ (8006644 <HAL_RCC_OscConfig+0x268>)
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	039a      	lsls	r2, r3, #14
 800642e:	d5dc      	bpl.n	80063ea <HAL_RCC_OscConfig+0xe>
 8006430:	6863      	ldr	r3, [r4, #4]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d1d9      	bne.n	80063ea <HAL_RCC_OscConfig+0xe>
    return HAL_ERROR;
 8006436:	2001      	movs	r0, #1
 8006438:	e015      	b.n	8006466 <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800643a:	6863      	ldr	r3, [r4, #4]
 800643c:	4d81      	ldr	r5, [pc, #516]	@ (8006644 <HAL_RCC_OscConfig+0x268>)
 800643e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006442:	d113      	bne.n	800646c <HAL_RCC_OscConfig+0x90>
 8006444:	682b      	ldr	r3, [r5, #0]
 8006446:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800644a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800644c:	f7fe fd38 	bl	8004ec0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006450:	4e7c      	ldr	r6, [pc, #496]	@ (8006644 <HAL_RCC_OscConfig+0x268>)
        tickstart = HAL_GetTick();
 8006452:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006454:	6833      	ldr	r3, [r6, #0]
 8006456:	039b      	lsls	r3, r3, #14
 8006458:	d4c7      	bmi.n	80063ea <HAL_RCC_OscConfig+0xe>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800645a:	f7fe fd31 	bl	8004ec0 <HAL_GetTick>
 800645e:	1b40      	subs	r0, r0, r5
 8006460:	2864      	cmp	r0, #100	@ 0x64
 8006462:	d9f7      	bls.n	8006454 <HAL_RCC_OscConfig+0x78>
            return HAL_TIMEOUT;
 8006464:	2003      	movs	r0, #3
}
 8006466:	b002      	add	sp, #8
 8006468:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800646c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006470:	d104      	bne.n	800647c <HAL_RCC_OscConfig+0xa0>
 8006472:	682b      	ldr	r3, [r5, #0]
 8006474:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006478:	602b      	str	r3, [r5, #0]
 800647a:	e7e3      	b.n	8006444 <HAL_RCC_OscConfig+0x68>
 800647c:	682a      	ldr	r2, [r5, #0]
 800647e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8006482:	602a      	str	r2, [r5, #0]
 8006484:	682a      	ldr	r2, [r5, #0]
 8006486:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800648a:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800648c:	2b00      	cmp	r3, #0
 800648e:	d1dd      	bne.n	800644c <HAL_RCC_OscConfig+0x70>
        tickstart = HAL_GetTick();
 8006490:	f7fe fd16 	bl	8004ec0 <HAL_GetTick>
 8006494:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006496:	682b      	ldr	r3, [r5, #0]
 8006498:	039f      	lsls	r7, r3, #14
 800649a:	d5a6      	bpl.n	80063ea <HAL_RCC_OscConfig+0xe>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800649c:	f7fe fd10 	bl	8004ec0 <HAL_GetTick>
 80064a0:	1b80      	subs	r0, r0, r6
 80064a2:	2864      	cmp	r0, #100	@ 0x64
 80064a4:	d9f7      	bls.n	8006496 <HAL_RCC_OscConfig+0xba>
 80064a6:	e7dd      	b.n	8006464 <HAL_RCC_OscConfig+0x88>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80064a8:	4b66      	ldr	r3, [pc, #408]	@ (8006644 <HAL_RCC_OscConfig+0x268>)
 80064aa:	689a      	ldr	r2, [r3, #8]
 80064ac:	f012 0f0c 	tst.w	r2, #12
 80064b0:	d007      	beq.n	80064c2 <HAL_RCC_OscConfig+0xe6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80064b2:	689a      	ldr	r2, [r3, #8]
 80064b4:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80064b8:	2a08      	cmp	r2, #8
 80064ba:	d111      	bne.n	80064e0 <HAL_RCC_OscConfig+0x104>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80064bc:	685b      	ldr	r3, [r3, #4]
 80064be:	025d      	lsls	r5, r3, #9
 80064c0:	d40e      	bmi.n	80064e0 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80064c2:	4a60      	ldr	r2, [pc, #384]	@ (8006644 <HAL_RCC_OscConfig+0x268>)
 80064c4:	6813      	ldr	r3, [r2, #0]
 80064c6:	0799      	lsls	r1, r3, #30
 80064c8:	d502      	bpl.n	80064d0 <HAL_RCC_OscConfig+0xf4>
 80064ca:	68e3      	ldr	r3, [r4, #12]
 80064cc:	2b01      	cmp	r3, #1
 80064ce:	d1b2      	bne.n	8006436 <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064d0:	6813      	ldr	r3, [r2, #0]
 80064d2:	6921      	ldr	r1, [r4, #16]
 80064d4:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80064d8:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80064dc:	6013      	str	r3, [r2, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80064de:	e787      	b.n	80063f0 <HAL_RCC_OscConfig+0x14>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80064e0:	68e2      	ldr	r2, [r4, #12]
 80064e2:	4b59      	ldr	r3, [pc, #356]	@ (8006648 <HAL_RCC_OscConfig+0x26c>)
 80064e4:	b1b2      	cbz	r2, 8006514 <HAL_RCC_OscConfig+0x138>
        __HAL_RCC_HSI_ENABLE();
 80064e6:	2201      	movs	r2, #1
 80064e8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80064ea:	f7fe fce9 	bl	8004ec0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80064ee:	4d55      	ldr	r5, [pc, #340]	@ (8006644 <HAL_RCC_OscConfig+0x268>)
        tickstart = HAL_GetTick();
 80064f0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80064f2:	682b      	ldr	r3, [r5, #0]
 80064f4:	079b      	lsls	r3, r3, #30
 80064f6:	d507      	bpl.n	8006508 <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064f8:	682b      	ldr	r3, [r5, #0]
 80064fa:	6922      	ldr	r2, [r4, #16]
 80064fc:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8006500:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8006504:	602b      	str	r3, [r5, #0]
 8006506:	e773      	b.n	80063f0 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006508:	f7fe fcda 	bl	8004ec0 <HAL_GetTick>
 800650c:	1b80      	subs	r0, r0, r6
 800650e:	2802      	cmp	r0, #2
 8006510:	d9ef      	bls.n	80064f2 <HAL_RCC_OscConfig+0x116>
 8006512:	e7a7      	b.n	8006464 <HAL_RCC_OscConfig+0x88>
        __HAL_RCC_HSI_DISABLE();
 8006514:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8006516:	f7fe fcd3 	bl	8004ec0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800651a:	4e4a      	ldr	r6, [pc, #296]	@ (8006644 <HAL_RCC_OscConfig+0x268>)
        tickstart = HAL_GetTick();
 800651c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800651e:	6833      	ldr	r3, [r6, #0]
 8006520:	079f      	lsls	r7, r3, #30
 8006522:	f57f af65 	bpl.w	80063f0 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006526:	f7fe fccb 	bl	8004ec0 <HAL_GetTick>
 800652a:	1b40      	subs	r0, r0, r5
 800652c:	2802      	cmp	r0, #2
 800652e:	d9f6      	bls.n	800651e <HAL_RCC_OscConfig+0x142>
 8006530:	e798      	b.n	8006464 <HAL_RCC_OscConfig+0x88>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006532:	6962      	ldr	r2, [r4, #20]
 8006534:	4b44      	ldr	r3, [pc, #272]	@ (8006648 <HAL_RCC_OscConfig+0x26c>)
 8006536:	b182      	cbz	r2, 800655a <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 8006538:	2201      	movs	r2, #1
 800653a:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80
      tickstart = HAL_GetTick();
 800653e:	f7fe fcbf 	bl	8004ec0 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006542:	4e40      	ldr	r6, [pc, #256]	@ (8006644 <HAL_RCC_OscConfig+0x268>)
      tickstart = HAL_GetTick();
 8006544:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006546:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 8006548:	079b      	lsls	r3, r3, #30
 800654a:	f53f af55 	bmi.w	80063f8 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800654e:	f7fe fcb7 	bl	8004ec0 <HAL_GetTick>
 8006552:	1b40      	subs	r0, r0, r5
 8006554:	2802      	cmp	r0, #2
 8006556:	d9f6      	bls.n	8006546 <HAL_RCC_OscConfig+0x16a>
 8006558:	e784      	b.n	8006464 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_LSI_DISABLE();
 800655a:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80
      tickstart = HAL_GetTick();
 800655e:	f7fe fcaf 	bl	8004ec0 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006562:	4e38      	ldr	r6, [pc, #224]	@ (8006644 <HAL_RCC_OscConfig+0x268>)
      tickstart = HAL_GetTick();
 8006564:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006566:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 8006568:	079f      	lsls	r7, r3, #30
 800656a:	f57f af45 	bpl.w	80063f8 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800656e:	f7fe fca7 	bl	8004ec0 <HAL_GetTick>
 8006572:	1b40      	subs	r0, r0, r5
 8006574:	2802      	cmp	r0, #2
 8006576:	d9f6      	bls.n	8006566 <HAL_RCC_OscConfig+0x18a>
 8006578:	e774      	b.n	8006464 <HAL_RCC_OscConfig+0x88>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800657a:	4b32      	ldr	r3, [pc, #200]	@ (8006644 <HAL_RCC_OscConfig+0x268>)
 800657c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800657e:	f012 5280 	ands.w	r2, r2, #268435456	@ 0x10000000
 8006582:	d128      	bne.n	80065d6 <HAL_RCC_OscConfig+0x1fa>
      __HAL_RCC_PWR_CLK_ENABLE();
 8006584:	9201      	str	r2, [sp, #4]
 8006586:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006588:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800658c:	641a      	str	r2, [r3, #64]	@ 0x40
 800658e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006590:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006594:	9301      	str	r3, [sp, #4]
 8006596:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8006598:	2701      	movs	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800659a:	4d2c      	ldr	r5, [pc, #176]	@ (800664c <HAL_RCC_OscConfig+0x270>)
 800659c:	682b      	ldr	r3, [r5, #0]
 800659e:	05d8      	lsls	r0, r3, #23
 80065a0:	d51b      	bpl.n	80065da <HAL_RCC_OscConfig+0x1fe>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80065a2:	68a3      	ldr	r3, [r4, #8]
 80065a4:	4d27      	ldr	r5, [pc, #156]	@ (8006644 <HAL_RCC_OscConfig+0x268>)
 80065a6:	2b01      	cmp	r3, #1
 80065a8:	d127      	bne.n	80065fa <HAL_RCC_OscConfig+0x21e>
 80065aa:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 80065ac:	f043 0301 	orr.w	r3, r3, #1
 80065b0:	672b      	str	r3, [r5, #112]	@ 0x70
      tickstart = HAL_GetTick();
 80065b2:	f7fe fc85 	bl	8004ec0 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80065b6:	4e23      	ldr	r6, [pc, #140]	@ (8006644 <HAL_RCC_OscConfig+0x268>)
      tickstart = HAL_GetTick();
 80065b8:	4605      	mov	r5, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80065ba:	f241 3888 	movw	r8, #5000	@ 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80065be:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 80065c0:	079a      	lsls	r2, r3, #30
 80065c2:	d539      	bpl.n	8006638 <HAL_RCC_OscConfig+0x25c>
    if(pwrclkchanged == SET)
 80065c4:	2f00      	cmp	r7, #0
 80065c6:	f43f af1b 	beq.w	8006400 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 80065ca:	4a1e      	ldr	r2, [pc, #120]	@ (8006644 <HAL_RCC_OscConfig+0x268>)
 80065cc:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 80065ce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80065d2:	6413      	str	r3, [r2, #64]	@ 0x40
 80065d4:	e714      	b.n	8006400 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 80065d6:	2700      	movs	r7, #0
 80065d8:	e7df      	b.n	800659a <HAL_RCC_OscConfig+0x1be>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80065da:	682b      	ldr	r3, [r5, #0]
 80065dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80065e0:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80065e2:	f7fe fc6d 	bl	8004ec0 <HAL_GetTick>
 80065e6:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065e8:	682b      	ldr	r3, [r5, #0]
 80065ea:	05d9      	lsls	r1, r3, #23
 80065ec:	d4d9      	bmi.n	80065a2 <HAL_RCC_OscConfig+0x1c6>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80065ee:	f7fe fc67 	bl	8004ec0 <HAL_GetTick>
 80065f2:	1b80      	subs	r0, r0, r6
 80065f4:	2802      	cmp	r0, #2
 80065f6:	d9f7      	bls.n	80065e8 <HAL_RCC_OscConfig+0x20c>
 80065f8:	e734      	b.n	8006464 <HAL_RCC_OscConfig+0x88>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80065fa:	2b05      	cmp	r3, #5
 80065fc:	d104      	bne.n	8006608 <HAL_RCC_OscConfig+0x22c>
 80065fe:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8006600:	f043 0304 	orr.w	r3, r3, #4
 8006604:	672b      	str	r3, [r5, #112]	@ 0x70
 8006606:	e7d0      	b.n	80065aa <HAL_RCC_OscConfig+0x1ce>
 8006608:	6f2a      	ldr	r2, [r5, #112]	@ 0x70
 800660a:	f022 0201 	bic.w	r2, r2, #1
 800660e:	672a      	str	r2, [r5, #112]	@ 0x70
 8006610:	6f2a      	ldr	r2, [r5, #112]	@ 0x70
 8006612:	f022 0204 	bic.w	r2, r2, #4
 8006616:	672a      	str	r2, [r5, #112]	@ 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006618:	2b00      	cmp	r3, #0
 800661a:	d1ca      	bne.n	80065b2 <HAL_RCC_OscConfig+0x1d6>
      tickstart = HAL_GetTick();
 800661c:	f7fe fc50 	bl	8004ec0 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006620:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8006624:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006626:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8006628:	079b      	lsls	r3, r3, #30
 800662a:	d5cb      	bpl.n	80065c4 <HAL_RCC_OscConfig+0x1e8>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800662c:	f7fe fc48 	bl	8004ec0 <HAL_GetTick>
 8006630:	1b80      	subs	r0, r0, r6
 8006632:	4540      	cmp	r0, r8
 8006634:	d9f7      	bls.n	8006626 <HAL_RCC_OscConfig+0x24a>
 8006636:	e715      	b.n	8006464 <HAL_RCC_OscConfig+0x88>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006638:	f7fe fc42 	bl	8004ec0 <HAL_GetTick>
 800663c:	1b40      	subs	r0, r0, r5
 800663e:	4540      	cmp	r0, r8
 8006640:	d9bd      	bls.n	80065be <HAL_RCC_OscConfig+0x1e2>
 8006642:	e70f      	b.n	8006464 <HAL_RCC_OscConfig+0x88>
 8006644:	40023800 	.word	0x40023800
 8006648:	42470000 	.word	0x42470000
 800664c:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006650:	4d37      	ldr	r5, [pc, #220]	@ (8006730 <HAL_RCC_OscConfig+0x354>)
 8006652:	68aa      	ldr	r2, [r5, #8]
 8006654:	f002 020c 	and.w	r2, r2, #12
 8006658:	2a08      	cmp	r2, #8
 800665a:	d03e      	beq.n	80066da <HAL_RCC_OscConfig+0x2fe>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800665c:	2b02      	cmp	r3, #2
 800665e:	4b35      	ldr	r3, [pc, #212]	@ (8006734 <HAL_RCC_OscConfig+0x358>)
 8006660:	f04f 0200 	mov.w	r2, #0
        __HAL_RCC_PLL_DISABLE();
 8006664:	661a      	str	r2, [r3, #96]	@ 0x60
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006666:	d12b      	bne.n	80066c0 <HAL_RCC_OscConfig+0x2e4>
        tickstart = HAL_GetTick();
 8006668:	f7fe fc2a 	bl	8004ec0 <HAL_GetTick>
 800666c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800666e:	682b      	ldr	r3, [r5, #0]
 8006670:	0199      	lsls	r1, r3, #6
 8006672:	d41f      	bmi.n	80066b4 <HAL_RCC_OscConfig+0x2d8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006674:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 8006678:	4313      	orrs	r3, r2
 800667a:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800667c:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8006680:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8006682:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8006686:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8006688:	0852      	lsrs	r2, r2, #1
 800668a:	3a01      	subs	r2, #1
 800668c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006690:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8006692:	4b28      	ldr	r3, [pc, #160]	@ (8006734 <HAL_RCC_OscConfig+0x358>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006694:	4d26      	ldr	r5, [pc, #152]	@ (8006730 <HAL_RCC_OscConfig+0x354>)
        __HAL_RCC_PLL_ENABLE();
 8006696:	2201      	movs	r2, #1
 8006698:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 800669a:	f7fe fc11 	bl	8004ec0 <HAL_GetTick>
 800669e:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80066a0:	682b      	ldr	r3, [r5, #0]
 80066a2:	019a      	lsls	r2, r3, #6
 80066a4:	f53f aeb0 	bmi.w	8006408 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80066a8:	f7fe fc0a 	bl	8004ec0 <HAL_GetTick>
 80066ac:	1b00      	subs	r0, r0, r4
 80066ae:	2802      	cmp	r0, #2
 80066b0:	d9f6      	bls.n	80066a0 <HAL_RCC_OscConfig+0x2c4>
 80066b2:	e6d7      	b.n	8006464 <HAL_RCC_OscConfig+0x88>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80066b4:	f7fe fc04 	bl	8004ec0 <HAL_GetTick>
 80066b8:	1b80      	subs	r0, r0, r6
 80066ba:	2802      	cmp	r0, #2
 80066bc:	d9d7      	bls.n	800666e <HAL_RCC_OscConfig+0x292>
 80066be:	e6d1      	b.n	8006464 <HAL_RCC_OscConfig+0x88>
        tickstart = HAL_GetTick();
 80066c0:	f7fe fbfe 	bl	8004ec0 <HAL_GetTick>
 80066c4:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80066c6:	682b      	ldr	r3, [r5, #0]
 80066c8:	019b      	lsls	r3, r3, #6
 80066ca:	f57f ae9d 	bpl.w	8006408 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80066ce:	f7fe fbf7 	bl	8004ec0 <HAL_GetTick>
 80066d2:	1b00      	subs	r0, r0, r4
 80066d4:	2802      	cmp	r0, #2
 80066d6:	d9f6      	bls.n	80066c6 <HAL_RCC_OscConfig+0x2ea>
 80066d8:	e6c4      	b.n	8006464 <HAL_RCC_OscConfig+0x88>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80066da:	2b01      	cmp	r3, #1
 80066dc:	f43f aeab 	beq.w	8006436 <HAL_RCC_OscConfig+0x5a>
        pll_config = RCC->PLLCFGR;
 80066e0:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80066e2:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80066e4:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80066e8:	4291      	cmp	r1, r2
 80066ea:	f47f aea4 	bne.w	8006436 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80066ee:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80066f0:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80066f4:	428a      	cmp	r2, r1
 80066f6:	f47f ae9e 	bne.w	8006436 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80066fa:	6a61      	ldr	r1, [r4, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80066fc:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 8006700:	401a      	ands	r2, r3
 8006702:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8006706:	f47f ae96 	bne.w	8006436 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800670a:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800670c:	0852      	lsrs	r2, r2, #1
 800670e:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 8006712:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006714:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8006718:	f47f ae8d 	bne.w	8006436 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800671c:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800671e:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006722:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8006726:	bf14      	ite	ne
 8006728:	2001      	movne	r0, #1
 800672a:	2000      	moveq	r0, #0
 800672c:	e69b      	b.n	8006466 <HAL_RCC_OscConfig+0x8a>
 800672e:	bf00      	nop
 8006730:	40023800 	.word	0x40023800
 8006734:	42470000 	.word	0x42470000

08006738 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006738:	4913      	ldr	r1, [pc, #76]	@ (8006788 <HAL_RCC_GetSysClockFreq+0x50>)
{
 800673a:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800673c:	688b      	ldr	r3, [r1, #8]
 800673e:	f003 030c 	and.w	r3, r3, #12
 8006742:	2b04      	cmp	r3, #4
 8006744:	d01c      	beq.n	8006780 <HAL_RCC_GetSysClockFreq+0x48>
 8006746:	2b08      	cmp	r3, #8
 8006748:	d11c      	bne.n	8006784 <HAL_RCC_GetSysClockFreq+0x4c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800674a:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800674c:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800674e:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006750:	f413 0380 	ands.w	r3, r3, #4194304	@ 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006754:	bf14      	ite	ne
 8006756:	480d      	ldrne	r0, [pc, #52]	@ (800678c <HAL_RCC_GetSysClockFreq+0x54>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006758:	480d      	ldreq	r0, [pc, #52]	@ (8006790 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800675a:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800675e:	bf18      	it	ne
 8006760:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006762:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006766:	fba1 0100 	umull	r0, r1, r1, r0
 800676a:	f7fa fa3f 	bl	8000bec <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800676e:	4b06      	ldr	r3, [pc, #24]	@ (8006788 <HAL_RCC_GetSysClockFreq+0x50>)
 8006770:	685b      	ldr	r3, [r3, #4]
 8006772:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8006776:	3301      	adds	r3, #1
 8006778:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 800677a:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800677e:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006780:	4802      	ldr	r0, [pc, #8]	@ (800678c <HAL_RCC_GetSysClockFreq+0x54>)
 8006782:	e7fc      	b.n	800677e <HAL_RCC_GetSysClockFreq+0x46>
      sysclockfreq = HSI_VALUE;
 8006784:	4802      	ldr	r0, [pc, #8]	@ (8006790 <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 8006786:	e7fa      	b.n	800677e <HAL_RCC_GetSysClockFreq+0x46>
 8006788:	40023800 	.word	0x40023800
 800678c:	007a1200 	.word	0x007a1200
 8006790:	00f42400 	.word	0x00f42400

08006794 <HAL_RCC_ClockConfig>:
{
 8006794:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006798:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 800679a:	4604      	mov	r4, r0
 800679c:	b910      	cbnz	r0, 80067a4 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800679e:	2001      	movs	r0, #1
}
 80067a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80067a4:	4b43      	ldr	r3, [pc, #268]	@ (80068b4 <HAL_RCC_ClockConfig+0x120>)
 80067a6:	681a      	ldr	r2, [r3, #0]
 80067a8:	f002 020f 	and.w	r2, r2, #15
 80067ac:	428a      	cmp	r2, r1
 80067ae:	d328      	bcc.n	8006802 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80067b0:	6821      	ldr	r1, [r4, #0]
 80067b2:	078f      	lsls	r7, r1, #30
 80067b4:	d42d      	bmi.n	8006812 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80067b6:	07c8      	lsls	r0, r1, #31
 80067b8:	d440      	bmi.n	800683c <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80067ba:	4b3e      	ldr	r3, [pc, #248]	@ (80068b4 <HAL_RCC_ClockConfig+0x120>)
 80067bc:	681a      	ldr	r2, [r3, #0]
 80067be:	f002 020f 	and.w	r2, r2, #15
 80067c2:	42aa      	cmp	r2, r5
 80067c4:	d865      	bhi.n	8006892 <HAL_RCC_ClockConfig+0xfe>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80067c6:	6822      	ldr	r2, [r4, #0]
 80067c8:	0751      	lsls	r1, r2, #29
 80067ca:	d46b      	bmi.n	80068a4 <HAL_RCC_ClockConfig+0x110>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80067cc:	0713      	lsls	r3, r2, #28
 80067ce:	d507      	bpl.n	80067e0 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80067d0:	4a39      	ldr	r2, [pc, #228]	@ (80068b8 <HAL_RCC_ClockConfig+0x124>)
 80067d2:	6921      	ldr	r1, [r4, #16]
 80067d4:	6893      	ldr	r3, [r2, #8]
 80067d6:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 80067da:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80067de:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80067e0:	f7ff ffaa 	bl	8006738 <HAL_RCC_GetSysClockFreq>
 80067e4:	4b34      	ldr	r3, [pc, #208]	@ (80068b8 <HAL_RCC_ClockConfig+0x124>)
 80067e6:	4a35      	ldr	r2, [pc, #212]	@ (80068bc <HAL_RCC_ClockConfig+0x128>)
 80067e8:	689b      	ldr	r3, [r3, #8]
 80067ea:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80067ee:	5cd3      	ldrb	r3, [r2, r3]
 80067f0:	40d8      	lsrs	r0, r3
 80067f2:	4b33      	ldr	r3, [pc, #204]	@ (80068c0 <HAL_RCC_ClockConfig+0x12c>)
 80067f4:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 80067f6:	4b33      	ldr	r3, [pc, #204]	@ (80068c4 <HAL_RCC_ClockConfig+0x130>)
 80067f8:	6818      	ldr	r0, [r3, #0]
 80067fa:	f7fb ff31 	bl	8002660 <HAL_InitTick>
  return HAL_OK;
 80067fe:	2000      	movs	r0, #0
 8006800:	e7ce      	b.n	80067a0 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006802:	b2ca      	uxtb	r2, r1
 8006804:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f003 030f 	and.w	r3, r3, #15
 800680c:	428b      	cmp	r3, r1
 800680e:	d1c6      	bne.n	800679e <HAL_RCC_ClockConfig+0xa>
 8006810:	e7ce      	b.n	80067b0 <HAL_RCC_ClockConfig+0x1c>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006812:	4b29      	ldr	r3, [pc, #164]	@ (80068b8 <HAL_RCC_ClockConfig+0x124>)
 8006814:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006818:	bf1e      	ittt	ne
 800681a:	689a      	ldrne	r2, [r3, #8]
 800681c:	f442 52e0 	orrne.w	r2, r2, #7168	@ 0x1c00
 8006820:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006822:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006824:	bf42      	ittt	mi
 8006826:	689a      	ldrmi	r2, [r3, #8]
 8006828:	f442 4260 	orrmi.w	r2, r2, #57344	@ 0xe000
 800682c:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800682e:	689a      	ldr	r2, [r3, #8]
 8006830:	68a0      	ldr	r0, [r4, #8]
 8006832:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8006836:	4302      	orrs	r2, r0
 8006838:	609a      	str	r2, [r3, #8]
 800683a:	e7bc      	b.n	80067b6 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800683c:	6862      	ldr	r2, [r4, #4]
 800683e:	4b1e      	ldr	r3, [pc, #120]	@ (80068b8 <HAL_RCC_ClockConfig+0x124>)
 8006840:	2a01      	cmp	r2, #1
 8006842:	d11c      	bne.n	800687e <HAL_RCC_ClockConfig+0xea>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800684a:	d0a8      	beq.n	800679e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800684c:	4e1a      	ldr	r6, [pc, #104]	@ (80068b8 <HAL_RCC_ClockConfig+0x124>)
 800684e:	68b3      	ldr	r3, [r6, #8]
 8006850:	f023 0303 	bic.w	r3, r3, #3
 8006854:	4313      	orrs	r3, r2
 8006856:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8006858:	f7fe fb32 	bl	8004ec0 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800685c:	f241 3888 	movw	r8, #5000	@ 0x1388
    tickstart = HAL_GetTick();
 8006860:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006862:	68b3      	ldr	r3, [r6, #8]
 8006864:	6862      	ldr	r2, [r4, #4]
 8006866:	f003 030c 	and.w	r3, r3, #12
 800686a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800686e:	d0a4      	beq.n	80067ba <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006870:	f7fe fb26 	bl	8004ec0 <HAL_GetTick>
 8006874:	1bc0      	subs	r0, r0, r7
 8006876:	4540      	cmp	r0, r8
 8006878:	d9f3      	bls.n	8006862 <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 800687a:	2003      	movs	r0, #3
 800687c:	e790      	b.n	80067a0 <HAL_RCC_ClockConfig+0xc>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800687e:	1e91      	subs	r1, r2, #2
 8006880:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006882:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006884:	d802      	bhi.n	800688c <HAL_RCC_ClockConfig+0xf8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006886:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 800688a:	e7de      	b.n	800684a <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800688c:	f013 0f02 	tst.w	r3, #2
 8006890:	e7db      	b.n	800684a <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006892:	b2ea      	uxtb	r2, r5
 8006894:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f003 030f 	and.w	r3, r3, #15
 800689c:	42ab      	cmp	r3, r5
 800689e:	f47f af7e 	bne.w	800679e <HAL_RCC_ClockConfig+0xa>
 80068a2:	e790      	b.n	80067c6 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80068a4:	4904      	ldr	r1, [pc, #16]	@ (80068b8 <HAL_RCC_ClockConfig+0x124>)
 80068a6:	68e0      	ldr	r0, [r4, #12]
 80068a8:	688b      	ldr	r3, [r1, #8]
 80068aa:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 80068ae:	4303      	orrs	r3, r0
 80068b0:	608b      	str	r3, [r1, #8]
 80068b2:	e78b      	b.n	80067cc <HAL_RCC_ClockConfig+0x38>
 80068b4:	40023c00 	.word	0x40023c00
 80068b8:	40023800 	.word	0x40023800
 80068bc:	08016810 	.word	0x08016810
 80068c0:	20000074 	.word	0x20000074
 80068c4:	2000007c 	.word	0x2000007c

080068c8 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80068c8:	4b04      	ldr	r3, [pc, #16]	@ (80068dc <HAL_RCC_GetPCLK1Freq+0x14>)
 80068ca:	4a05      	ldr	r2, [pc, #20]	@ (80068e0 <HAL_RCC_GetPCLK1Freq+0x18>)
 80068cc:	689b      	ldr	r3, [r3, #8]
 80068ce:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80068d2:	5cd3      	ldrb	r3, [r2, r3]
 80068d4:	4a03      	ldr	r2, [pc, #12]	@ (80068e4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80068d6:	6810      	ldr	r0, [r2, #0]
}
 80068d8:	40d8      	lsrs	r0, r3
 80068da:	4770      	bx	lr
 80068dc:	40023800 	.word	0x40023800
 80068e0:	08016808 	.word	0x08016808
 80068e4:	20000074 	.word	0x20000074

080068e8 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80068e8:	230f      	movs	r3, #15
 80068ea:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80068ec:	4b0b      	ldr	r3, [pc, #44]	@ (800691c <HAL_RCC_GetClockConfig+0x34>)
 80068ee:	689a      	ldr	r2, [r3, #8]
 80068f0:	f002 0203 	and.w	r2, r2, #3
 80068f4:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80068f6:	689a      	ldr	r2, [r3, #8]
 80068f8:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 80068fc:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80068fe:	689a      	ldr	r2, [r3, #8]
 8006900:	f402 52e0 	and.w	r2, r2, #7168	@ 0x1c00
 8006904:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006906:	689b      	ldr	r3, [r3, #8]
 8006908:	08db      	lsrs	r3, r3, #3
 800690a:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 800690e:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006910:	4b03      	ldr	r3, [pc, #12]	@ (8006920 <HAL_RCC_GetClockConfig+0x38>)
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f003 030f 	and.w	r3, r3, #15
 8006918:	600b      	str	r3, [r1, #0]
}
 800691a:	4770      	bx	lr
 800691c:	40023800 	.word	0x40023800
 8006920:	40023c00 	.word	0x40023c00

08006924 <HAL_RCCEx_PeriphCLKConfig>:
  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006924:	6803      	ldr	r3, [r0, #0]
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006926:	f013 0f43 	tst.w	r3, #67	@ 0x43
{
 800692a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800692c:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800692e:	f040 8088 	bne.w	8006a42 <HAL_RCCEx_PeriphCLKConfig+0x11e>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006932:	6823      	ldr	r3, [r4, #0]
 8006934:	f013 0f0c 	tst.w	r3, #12
 8006938:	d045      	beq.n	80069c6 <HAL_RCCEx_PeriphCLKConfig+0xa2>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800693a:	4b8c      	ldr	r3, [pc, #560]	@ (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x248>)
    /* Get tick */
    tickstart = HAL_GetTick();
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800693c:	4d8c      	ldr	r5, [pc, #560]	@ (8006b70 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
    __HAL_RCC_PLLSAI_DISABLE();
 800693e:	2200      	movs	r2, #0
 8006940:	671a      	str	r2, [r3, #112]	@ 0x70
    tickstart = HAL_GetTick();
 8006942:	f7fe fabd 	bl	8004ec0 <HAL_GetTick>
 8006946:	4606      	mov	r6, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006948:	682b      	ldr	r3, [r5, #0]
 800694a:	0099      	lsls	r1, r3, #2
 800694c:	f100 80cb 	bmi.w	8006ae6 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8006950:	6821      	ldr	r1, [r4, #0]
 8006952:	074a      	lsls	r2, r1, #29
 8006954:	d515      	bpl.n	8006982 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006956:	e9d4 0304 	ldrd	r0, r3, [r4, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800695a:	f8d5 2088 	ldr.w	r2, [r5, #136]	@ 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800695e:	061b      	lsls	r3, r3, #24
 8006960:	f002 42e0 	and.w	r2, r2, #1879048192	@ 0x70000000
 8006964:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8006968:	4313      	orrs	r3, r2
 800696a:	f8c5 3088 	str.w	r3, [r5, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800696e:	f8d5 308c 	ldr.w	r3, [r5, #140]	@ 0x8c
 8006972:	6a22      	ldr	r2, [r4, #32]
 8006974:	f423 53f8 	bic.w	r3, r3, #7936	@ 0x1f00
 8006978:	3a01      	subs	r2, #1
 800697a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800697e:	f8c5 308c 	str.w	r3, [r5, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006982:	070b      	lsls	r3, r1, #28
 8006984:	d514      	bpl.n	80069b0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006986:	4a7a      	ldr	r2, [pc, #488]	@ (8006b70 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8006988:	69a3      	ldr	r3, [r4, #24]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800698a:	f8d2 1088 	ldr.w	r1, [r2, #136]	@ 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800698e:	6920      	ldr	r0, [r4, #16]
 8006990:	071b      	lsls	r3, r3, #28
 8006992:	f001 6170 	and.w	r1, r1, #251658240	@ 0xf000000
 8006996:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800699a:	430b      	orrs	r3, r1
 800699c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80069a0:	f8d2 308c 	ldr.w	r3, [r2, #140]	@ 0x8c
 80069a4:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80069a6:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 80069aa:	430b      	orrs	r3, r1
 80069ac:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80069b0:	4b6e      	ldr	r3, [pc, #440]	@ (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x248>)
    /* Get tick */
    tickstart = HAL_GetTick();
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80069b2:	4e6f      	ldr	r6, [pc, #444]	@ (8006b70 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
    __HAL_RCC_PLLSAI_ENABLE();
 80069b4:	2201      	movs	r2, #1
 80069b6:	671a      	str	r2, [r3, #112]	@ 0x70
    tickstart = HAL_GetTick();
 80069b8:	f7fe fa82 	bl	8004ec0 <HAL_GetTick>
 80069bc:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80069be:	6833      	ldr	r3, [r6, #0]
 80069c0:	009f      	lsls	r7, r3, #2
 80069c2:	f140 8097 	bpl.w	8006af4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80069c6:	6823      	ldr	r3, [r4, #0]
 80069c8:	0698      	lsls	r0, r3, #26
 80069ca:	d534      	bpl.n	8006a36 <HAL_RCCEx_PeriphCLKConfig+0x112>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80069cc:	2300      	movs	r3, #0
 80069ce:	9301      	str	r3, [sp, #4]
 80069d0:	4b67      	ldr	r3, [pc, #412]	@ (8006b70 <HAL_RCCEx_PeriphCLKConfig+0x24c>)

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80069d2:	4d68      	ldr	r5, [pc, #416]	@ (8006b74 <HAL_RCCEx_PeriphCLKConfig+0x250>)
    __HAL_RCC_PWR_CLK_ENABLE();
 80069d4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80069d6:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80069da:	641a      	str	r2, [r3, #64]	@ 0x40
 80069dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80069e2:	9301      	str	r3, [sp, #4]
 80069e4:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 80069e6:	682b      	ldr	r3, [r5, #0]
 80069e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80069ec:	602b      	str	r3, [r5, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80069ee:	f7fe fa67 	bl	8004ec0 <HAL_GetTick>
 80069f2:	4606      	mov	r6, r0

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80069f4:	682b      	ldr	r3, [r5, #0]
 80069f6:	05d8      	lsls	r0, r3, #23
 80069f8:	f140 8083 	bpl.w	8006b02 <HAL_RCCEx_PeriphCLKConfig+0x1de>
      {
        return HAL_TIMEOUT;
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80069fc:	4d5c      	ldr	r5, [pc, #368]	@ (8006b70 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80069fe:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006a00:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006a02:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 8006a06:	f040 8083 	bne.w	8006b10 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006a0a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8006a0c:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 8006a10:	f5b2 7f40 	cmp.w	r2, #768	@ 0x300
 8006a14:	4a56      	ldr	r2, [pc, #344]	@ (8006b70 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8006a16:	f040 809e 	bne.w	8006b56 <HAL_RCCEx_PeriphCLKConfig+0x232>
 8006a1a:	6891      	ldr	r1, [r2, #8]
 8006a1c:	f023 4070 	bic.w	r0, r3, #4026531840	@ 0xf0000000
 8006a20:	f421 11f8 	bic.w	r1, r1, #2031616	@ 0x1f0000
 8006a24:	f420 7040 	bic.w	r0, r0, #768	@ 0x300
 8006a28:	4301      	orrs	r1, r0
 8006a2a:	6091      	str	r1, [r2, #8]
 8006a2c:	6f11      	ldr	r1, [r2, #112]	@ 0x70
 8006a2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a32:	430b      	orrs	r3, r1
 8006a34:	6713      	str	r3, [r2, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006a36:	6823      	ldr	r3, [r4, #0]
 8006a38:	06db      	lsls	r3, r3, #27
 8006a3a:	f100 8090 	bmi.w	8006b5e <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
  return HAL_OK;
 8006a3e:	2000      	movs	r0, #0
 8006a40:	e04f      	b.n	8006ae2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    __HAL_RCC_PLLI2S_DISABLE();
 8006a42:	4b4a      	ldr	r3, [pc, #296]	@ (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x248>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006a44:	4e4a      	ldr	r6, [pc, #296]	@ (8006b70 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
    __HAL_RCC_PLLI2S_DISABLE();
 8006a46:	2200      	movs	r2, #0
 8006a48:	669a      	str	r2, [r3, #104]	@ 0x68
    tickstart = HAL_GetTick();
 8006a4a:	f7fe fa39 	bl	8004ec0 <HAL_GetTick>
 8006a4e:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006a50:	6833      	ldr	r3, [r6, #0]
 8006a52:	011f      	lsls	r7, r3, #4
 8006a54:	d43f      	bmi.n	8006ad6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006a56:	6821      	ldr	r1, [r4, #0]
 8006a58:	07c8      	lsls	r0, r1, #31
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8006a5a:	bf41      	itttt	mi
 8006a5c:	e9d4 2301 	ldrdmi	r2, r3, [r4, #4]
 8006a60:	071b      	lslmi	r3, r3, #28
 8006a62:	ea43 1382 	orrmi.w	r3, r3, r2, lsl #6
 8006a66:	f8c6 3084 	strmi.w	r3, [r6, #132]	@ 0x84
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8006a6a:	078a      	lsls	r2, r1, #30
 8006a6c:	d515      	bpl.n	8006a9a <HAL_RCCEx_PeriphCLKConfig+0x176>
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006a6e:	4a40      	ldr	r2, [pc, #256]	@ (8006b70 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8006a70:	68e3      	ldr	r3, [r4, #12]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006a72:	f8d2 0084 	ldr.w	r0, [r2, #132]	@ 0x84
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8006a76:	6865      	ldr	r5, [r4, #4]
 8006a78:	061b      	lsls	r3, r3, #24
 8006a7a:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
 8006a7e:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 8006a82:	4303      	orrs	r3, r0
 8006a84:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006a88:	f8d2 008c 	ldr.w	r0, [r2, #140]	@ 0x8c
 8006a8c:	69e3      	ldr	r3, [r4, #28]
 8006a8e:	f020 001f 	bic.w	r0, r0, #31
 8006a92:	3b01      	subs	r3, #1
 8006a94:	4303      	orrs	r3, r0
 8006a96:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006a9a:	064b      	lsls	r3, r1, #25
 8006a9c:	d50a      	bpl.n	8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x190>
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006a9e:	68e3      	ldr	r3, [r4, #12]
 8006aa0:	6862      	ldr	r2, [r4, #4]
 8006aa2:	061b      	lsls	r3, r3, #24
 8006aa4:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8006aa8:	68a2      	ldr	r2, [r4, #8]
 8006aaa:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8006aae:	4a30      	ldr	r2, [pc, #192]	@ (8006b70 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8006ab0:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8006ab4:	4b2d      	ldr	r3, [pc, #180]	@ (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x248>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006ab6:	4e2e      	ldr	r6, [pc, #184]	@ (8006b70 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
    __HAL_RCC_PLLI2S_ENABLE();
 8006ab8:	2201      	movs	r2, #1
 8006aba:	669a      	str	r2, [r3, #104]	@ 0x68
    tickstart = HAL_GetTick();
 8006abc:	f7fe fa00 	bl	8004ec0 <HAL_GetTick>
 8006ac0:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006ac2:	6833      	ldr	r3, [r6, #0]
 8006ac4:	011f      	lsls	r7, r3, #4
 8006ac6:	f53f af34 	bmi.w	8006932 <HAL_RCCEx_PeriphCLKConfig+0xe>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006aca:	f7fe f9f9 	bl	8004ec0 <HAL_GetTick>
 8006ace:	1b40      	subs	r0, r0, r5
 8006ad0:	2802      	cmp	r0, #2
 8006ad2:	d9f6      	bls.n	8006ac2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
 8006ad4:	e004      	b.n	8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006ad6:	f7fe f9f3 	bl	8004ec0 <HAL_GetTick>
 8006ada:	1b40      	subs	r0, r0, r5
 8006adc:	2802      	cmp	r0, #2
 8006ade:	d9b7      	bls.n	8006a50 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        return HAL_TIMEOUT;
 8006ae0:	2003      	movs	r0, #3
}
 8006ae2:	b003      	add	sp, #12
 8006ae4:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006ae6:	f7fe f9eb 	bl	8004ec0 <HAL_GetTick>
 8006aea:	1b80      	subs	r0, r0, r6
 8006aec:	2802      	cmp	r0, #2
 8006aee:	f67f af2b 	bls.w	8006948 <HAL_RCCEx_PeriphCLKConfig+0x24>
 8006af2:	e7f5      	b.n	8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006af4:	f7fe f9e4 	bl	8004ec0 <HAL_GetTick>
 8006af8:	1b40      	subs	r0, r0, r5
 8006afa:	2802      	cmp	r0, #2
 8006afc:	f67f af5f 	bls.w	80069be <HAL_RCCEx_PeriphCLKConfig+0x9a>
 8006b00:	e7ee      	b.n	8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006b02:	f7fe f9dd 	bl	8004ec0 <HAL_GetTick>
 8006b06:	1b80      	subs	r0, r0, r6
 8006b08:	2802      	cmp	r0, #2
 8006b0a:	f67f af73 	bls.w	80069f4 <HAL_RCCEx_PeriphCLKConfig+0xd0>
 8006b0e:	e7e7      	b.n	8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006b10:	f402 7240 	and.w	r2, r2, #768	@ 0x300
 8006b14:	4293      	cmp	r3, r2
 8006b16:	f43f af78 	beq.w	8006a0a <HAL_RCCEx_PeriphCLKConfig+0xe6>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006b1a:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8006b1c:	4a13      	ldr	r2, [pc, #76]	@ (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006b1e:	2101      	movs	r1, #1
 8006b20:	f8c2 1e40 	str.w	r1, [r2, #3648]	@ 0xe40
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006b24:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006b28:	2100      	movs	r1, #0
 8006b2a:	f8c2 1e40 	str.w	r1, [r2, #3648]	@ 0xe40
      RCC->BDCR = tmpreg1;
 8006b2e:	672b      	str	r3, [r5, #112]	@ 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006b30:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8006b32:	07d9      	lsls	r1, r3, #31
 8006b34:	f57f af69 	bpl.w	8006a0a <HAL_RCCEx_PeriphCLKConfig+0xe6>
        tickstart = HAL_GetTick();
 8006b38:	f7fe f9c2 	bl	8004ec0 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006b3c:	f241 3788 	movw	r7, #5000	@ 0x1388
        tickstart = HAL_GetTick();
 8006b40:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b42:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8006b44:	079a      	lsls	r2, r3, #30
 8006b46:	f53f af60 	bmi.w	8006a0a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006b4a:	f7fe f9b9 	bl	8004ec0 <HAL_GetTick>
 8006b4e:	1b80      	subs	r0, r0, r6
 8006b50:	42b8      	cmp	r0, r7
 8006b52:	d9f6      	bls.n	8006b42 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8006b54:	e7c4      	b.n	8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006b56:	6891      	ldr	r1, [r2, #8]
 8006b58:	f421 11f8 	bic.w	r1, r1, #2031616	@ 0x1f0000
 8006b5c:	e765      	b.n	8006a2a <HAL_RCCEx_PeriphCLKConfig+0x106>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006b5e:	4b06      	ldr	r3, [pc, #24]	@ (8006b78 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8006b60:	f894 202c 	ldrb.w	r2, [r4, #44]	@ 0x2c
 8006b64:	f8c3 21e0 	str.w	r2, [r3, #480]	@ 0x1e0
 8006b68:	e769      	b.n	8006a3e <HAL_RCCEx_PeriphCLKConfig+0x11a>
 8006b6a:	bf00      	nop
 8006b6c:	42470000 	.word	0x42470000
 8006b70:	40023800 	.word	0x40023800
 8006b74:	40007000 	.word	0x40007000
 8006b78:	42471000 	.word	0x42471000

08006b7c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8006b7c:	b538      	push	{r3, r4, r5, lr}
 8006b7e:	460d      	mov	r5, r1
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8006b80:	4604      	mov	r4, r0
 8006b82:	b1c8      	cbz	r0, 8006bb8 <HAL_SDRAM_Init+0x3c>
  {
    return HAL_ERROR;
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8006b84:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 8006b88:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8006b8c:	b91b      	cbnz	r3, 8006b96 <HAL_SDRAM_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8006b8e:	f880 202d 	strb.w	r2, [r0, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8006b92:	f7fb fcf9 	bl	8002588 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006b96:	2302      	movs	r3, #2
 8006b98:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8006b9c:	1d21      	adds	r1, r4, #4
 8006b9e:	6820      	ldr	r0, [r4, #0]
 8006ba0:	f000 fcfe 	bl	80075a0 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8006ba4:	6862      	ldr	r2, [r4, #4]
 8006ba6:	6820      	ldr	r0, [r4, #0]
 8006ba8:	4629      	mov	r1, r5
 8006baa:	f000 fd31 	bl	8007610 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8006bae:	2301      	movs	r3, #1
 8006bb0:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c

  return HAL_OK;
 8006bb4:	2000      	movs	r0, #0
}
 8006bb6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8006bb8:	2001      	movs	r0, #1
 8006bba:	e7fc      	b.n	8006bb6 <HAL_SDRAM_Init+0x3a>

08006bbc <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8006bbc:	b570      	push	{r4, r5, r6, lr}
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8006bbe:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8006bc2:	2b02      	cmp	r3, #2
{
 8006bc4:	4605      	mov	r5, r0
 8006bc6:	460e      	mov	r6, r1
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8006bc8:	b2d8      	uxtb	r0, r3
  if (state == HAL_SDRAM_STATE_BUSY)
 8006bca:	d012      	beq.n	8006bf2 <HAL_SDRAM_SendCommand+0x36>
  {
    return HAL_BUSY;
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8006bcc:	f000 04fb 	and.w	r4, r0, #251	@ 0xfb
 8006bd0:	2c01      	cmp	r4, #1
 8006bd2:	d10f      	bne.n	8006bf4 <HAL_SDRAM_SendCommand+0x38>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006bd4:	2302      	movs	r3, #2
 8006bd6:	f885 302c 	strb.w	r3, [r5, #44]	@ 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8006bda:	6828      	ldr	r0, [r5, #0]
 8006bdc:	f000 fd4e 	bl	800767c <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8006be0:	6833      	ldr	r3, [r6, #0]
 8006be2:	2b02      	cmp	r3, #2
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8006be4:	bf06      	itte	eq
 8006be6:	2305      	moveq	r3, #5
 8006be8:	f885 302c 	strbeq.w	r3, [r5, #44]	@ 0x2c
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8006bec:	f885 402c 	strbne.w	r4, [r5, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8006bf0:	2000      	movs	r0, #0
}
 8006bf2:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8006bf4:	2001      	movs	r0, #1
 8006bf6:	e7fc      	b.n	8006bf2 <HAL_SDRAM_SendCommand+0x36>

08006bf8 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8006bf8:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8006bfa:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 8006bfe:	2b02      	cmp	r3, #2
{
 8006c00:	4604      	mov	r4, r0
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8006c02:	b2d8      	uxtb	r0, r3
 8006c04:	d00d      	beq.n	8006c22 <HAL_SDRAM_ProgramRefreshRate+0x2a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8006c06:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8006c0a:	2b01      	cmp	r3, #1
 8006c0c:	b2dd      	uxtb	r5, r3
 8006c0e:	d109      	bne.n	8006c24 <HAL_SDRAM_ProgramRefreshRate+0x2c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006c10:	2302      	movs	r3, #2

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8006c12:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006c14:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8006c18:	f000 fd54 	bl	80076c4 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8006c1c:	f884 502c 	strb.w	r5, [r4, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8006c20:	2000      	movs	r0, #0
}
 8006c22:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8006c24:	2001      	movs	r0, #1
 8006c26:	e7fc      	b.n	8006c22 <HAL_SDRAM_ProgramRefreshRate+0x2a>

08006c28 <SPI_WaitFlagStateUntilTimeout.constprop.0>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8006c28:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006c2c:	461c      	mov	r4, r3
 8006c2e:	4616      	mov	r6, r2
 8006c30:	460f      	mov	r7, r1
 8006c32:	4605      	mov	r5, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006c34:	f7fe f944 	bl	8004ec0 <HAL_GetTick>
 8006c38:	4434      	add	r4, r6
 8006c3a:	1a24      	subs	r4, r4, r0
  tmp_tickstart = HAL_GetTick();
 8006c3c:	f7fe f940 	bl	8004ec0 <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006c40:	4b24      	ldr	r3, [pc, #144]	@ (8006cd4 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xac>)
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8006c48:	4363      	muls	r3, r4
  tmp_tickstart = HAL_GetTick();
 8006c4a:	4680      	mov	r8, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006c4c:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006c4e:	682a      	ldr	r2, [r5, #0]
 8006c50:	6893      	ldr	r3, [r2, #8]
 8006c52:	ea37 0303 	bics.w	r3, r7, r3
 8006c56:	d001      	beq.n	8006c5c <SPI_WaitFlagStateUntilTimeout.constprop.0+0x34>
      }
      count--;
    }
  }

  return HAL_OK;
 8006c58:	2000      	movs	r0, #0
 8006c5a:	e02e      	b.n	8006cba <SPI_WaitFlagStateUntilTimeout.constprop.0+0x92>
    if (Timeout != HAL_MAX_DELAY)
 8006c5c:	1c73      	adds	r3, r6, #1
 8006c5e:	d0f7      	beq.n	8006c50 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x28>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006c60:	f7fe f92e 	bl	8004ec0 <HAL_GetTick>
 8006c64:	eba0 0008 	sub.w	r0, r0, r8
 8006c68:	42a0      	cmp	r0, r4
 8006c6a:	d329      	bcc.n	8006cc0 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x98>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006c6c:	682b      	ldr	r3, [r5, #0]
 8006c6e:	685a      	ldr	r2, [r3, #4]
 8006c70:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006c74:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006c76:	686a      	ldr	r2, [r5, #4]
 8006c78:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 8006c7c:	d10a      	bne.n	8006c94 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6c>
 8006c7e:	68aa      	ldr	r2, [r5, #8]
 8006c80:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 8006c84:	d002      	beq.n	8006c8c <SPI_WaitFlagStateUntilTimeout.constprop.0+0x64>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006c86:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8006c8a:	d103      	bne.n	8006c94 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6c>
          __HAL_SPI_DISABLE(hspi);
 8006c8c:	681a      	ldr	r2, [r3, #0]
 8006c8e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006c92:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006c94:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
 8006c96:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 8006c9a:	d107      	bne.n	8006cac <SPI_WaitFlagStateUntilTimeout.constprop.0+0x84>
          SPI_RESET_CRC(hspi);
 8006c9c:	681a      	ldr	r2, [r3, #0]
 8006c9e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006ca2:	601a      	str	r2, [r3, #0]
 8006ca4:	681a      	ldr	r2, [r3, #0]
 8006ca6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006caa:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8006cac:	2301      	movs	r3, #1
 8006cae:	f885 3051 	strb.w	r3, [r5, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	f885 3050 	strb.w	r3, [r5, #80]	@ 0x50
        return HAL_TIMEOUT;
 8006cb8:	2003      	movs	r0, #3
}
 8006cba:	b002      	add	sp, #8
 8006cbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (count == 0U)
 8006cc0:	9a01      	ldr	r2, [sp, #4]
      count--;
 8006cc2:	9b01      	ldr	r3, [sp, #4]
      if (count == 0U)
 8006cc4:	2a00      	cmp	r2, #0
      count--;
 8006cc6:	f103 33ff 	add.w	r3, r3, #4294967295
 8006cca:	9301      	str	r3, [sp, #4]
 8006ccc:	bf08      	it	eq
 8006cce:	4614      	moveq	r4, r2
 8006cd0:	e7bd      	b.n	8006c4e <SPI_WaitFlagStateUntilTimeout.constprop.0+0x26>
 8006cd2:	bf00      	nop
 8006cd4:	20000074 	.word	0x20000074

08006cd8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006cd8:	b538      	push	{r3, r4, r5, lr}
 8006cda:	4613      	mov	r3, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006cdc:	6842      	ldr	r2, [r0, #4]
 8006cde:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
{
 8006ce2:	4604      	mov	r4, r0
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006ce4:	d006      	beq.n	8006cf4 <SPI_EndRxTransaction+0x1c>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006ce6:	460a      	mov	r2, r1
 8006ce8:	2101      	movs	r1, #1
 8006cea:	f7ff ff9d 	bl	8006c28 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8006cee:	b9b8      	cbnz	r0, 8006d20 <SPI_EndRxTransaction+0x48>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
 8006cf0:	2000      	movs	r0, #0
}
 8006cf2:	bd38      	pop	{r3, r4, r5, pc}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006cf4:	6882      	ldr	r2, [r0, #8]
 8006cf6:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 8006cfa:	d002      	beq.n	8006d02 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006cfc:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8006d00:	d107      	bne.n	8006d12 <SPI_EndRxTransaction+0x3a>
    __HAL_SPI_DISABLE(hspi);
 8006d02:	6825      	ldr	r5, [r4, #0]
 8006d04:	6828      	ldr	r0, [r5, #0]
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8006d06:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
    __HAL_SPI_DISABLE(hspi);
 8006d0a:	f020 0040 	bic.w	r0, r0, #64	@ 0x40
 8006d0e:	6028      	str	r0, [r5, #0]
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8006d10:	d003      	beq.n	8006d1a <SPI_EndRxTransaction+0x42>
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006d12:	460a      	mov	r2, r1
 8006d14:	2180      	movs	r1, #128	@ 0x80
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006d16:	4620      	mov	r0, r4
 8006d18:	e7e7      	b.n	8006cea <SPI_EndRxTransaction+0x12>
 8006d1a:	460a      	mov	r2, r1
 8006d1c:	2101      	movs	r1, #1
 8006d1e:	e7fa      	b.n	8006d16 <SPI_EndRxTransaction+0x3e>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006d20:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8006d22:	f043 0320 	orr.w	r3, r3, #32
 8006d26:	6563      	str	r3, [r4, #84]	@ 0x54
        return HAL_TIMEOUT;
 8006d28:	2003      	movs	r0, #3
 8006d2a:	e7e2      	b.n	8006cf2 <SPI_EndRxTransaction+0x1a>

08006d2c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006d2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006d2e:	4613      	mov	r3, r2
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006d30:	4a12      	ldr	r2, [pc, #72]	@ (8006d7c <SPI_EndRxTxTransaction+0x50>)
 8006d32:	6815      	ldr	r5, [r2, #0]
 8006d34:	4a12      	ldr	r2, [pc, #72]	@ (8006d80 <SPI_EndRxTxTransaction+0x54>)
 8006d36:	fbb5 f5f2 	udiv	r5, r5, r2
 8006d3a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006d3e:	4355      	muls	r5, r2
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006d40:	6842      	ldr	r2, [r0, #4]
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006d42:	9501      	str	r5, [sp, #4]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006d44:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
{
 8006d48:	4604      	mov	r4, r0
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006d4a:	d10b      	bne.n	8006d64 <SPI_EndRxTxTransaction+0x38>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006d4c:	460a      	mov	r2, r1
 8006d4e:	2180      	movs	r1, #128	@ 0x80
 8006d50:	f7ff ff6a 	bl	8006c28 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8006d54:	b178      	cbz	r0, 8006d76 <SPI_EndRxTxTransaction+0x4a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006d56:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8006d58:	f043 0320 	orr.w	r3, r3, #32
 8006d5c:	6563      	str	r3, [r4, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006d5e:	2003      	movs	r0, #3
      count--;
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
  }

  return HAL_OK;
}
 8006d60:	b003      	add	sp, #12
 8006d62:	bd30      	pop	{r4, r5, pc}
      if (count == 0U)
 8006d64:	9b01      	ldr	r3, [sp, #4]
 8006d66:	b133      	cbz	r3, 8006d76 <SPI_EndRxTxTransaction+0x4a>
      count--;
 8006d68:	9b01      	ldr	r3, [sp, #4]
 8006d6a:	3b01      	subs	r3, #1
 8006d6c:	9301      	str	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006d6e:	6823      	ldr	r3, [r4, #0]
 8006d70:	689b      	ldr	r3, [r3, #8]
 8006d72:	061b      	lsls	r3, r3, #24
 8006d74:	d4f6      	bmi.n	8006d64 <SPI_EndRxTxTransaction+0x38>
  return HAL_OK;
 8006d76:	2000      	movs	r0, #0
 8006d78:	e7f2      	b.n	8006d60 <SPI_EndRxTxTransaction+0x34>
 8006d7a:	bf00      	nop
 8006d7c:	20000074 	.word	0x20000074
 8006d80:	016e3600 	.word	0x016e3600

08006d84 <HAL_SPI_Init>:
{
 8006d84:	b510      	push	{r4, lr}
  if (hspi == NULL)
 8006d86:	4604      	mov	r4, r0
 8006d88:	2800      	cmp	r0, #0
 8006d8a:	d055      	beq.n	8006e38 <HAL_SPI_Init+0xb4>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006d8c:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d14e      	bne.n	8006e30 <HAL_SPI_Init+0xac>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006d92:	6842      	ldr	r2, [r0, #4]
 8006d94:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 8006d98:	d000      	beq.n	8006d9c <HAL_SPI_Init+0x18>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006d9a:	61c3      	str	r3, [r0, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	62a3      	str	r3, [r4, #40]	@ 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8006da0:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
 8006da4:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8006da8:	b923      	cbnz	r3, 8006db4 <HAL_SPI_Init+0x30>
    hspi->Lock = HAL_UNLOCKED;
 8006daa:	f884 2050 	strb.w	r2, [r4, #80]	@ 0x50
    HAL_SPI_MspInit(hspi);
 8006dae:	4620      	mov	r0, r4
 8006db0:	f7fb fbb4 	bl	800251c <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 8006db4:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006db6:	68a0      	ldr	r0, [r4, #8]
 8006db8:	69a2      	ldr	r2, [r4, #24]
  hspi->State = HAL_SPI_STATE_BUSY;
 8006dba:	2302      	movs	r3, #2
 8006dbc:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_SPI_DISABLE(hspi);
 8006dc0:	680b      	ldr	r3, [r1, #0]
 8006dc2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006dc6:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006dc8:	6863      	ldr	r3, [r4, #4]
 8006dca:	f400 4004 	and.w	r0, r0, #33792	@ 0x8400
 8006dce:	f403 7382 	and.w	r3, r3, #260	@ 0x104
 8006dd2:	4303      	orrs	r3, r0
 8006dd4:	68e0      	ldr	r0, [r4, #12]
 8006dd6:	f400 6000 	and.w	r0, r0, #2048	@ 0x800
 8006dda:	4303      	orrs	r3, r0
 8006ddc:	6920      	ldr	r0, [r4, #16]
 8006dde:	f000 0002 	and.w	r0, r0, #2
 8006de2:	4303      	orrs	r3, r0
 8006de4:	6960      	ldr	r0, [r4, #20]
 8006de6:	f000 0001 	and.w	r0, r0, #1
 8006dea:	4303      	orrs	r3, r0
 8006dec:	f402 7000 	and.w	r0, r2, #512	@ 0x200
 8006df0:	4303      	orrs	r3, r0
 8006df2:	69e0      	ldr	r0, [r4, #28]
 8006df4:	f000 0038 	and.w	r0, r0, #56	@ 0x38
 8006df8:	4303      	orrs	r3, r0
 8006dfa:	6a20      	ldr	r0, [r4, #32]
 8006dfc:	f000 0080 	and.w	r0, r0, #128	@ 0x80
 8006e00:	4303      	orrs	r3, r0
 8006e02:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8006e04:	f400 5000 	and.w	r0, r0, #8192	@ 0x2000
 8006e08:	4303      	orrs	r3, r0
 8006e0a:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006e0c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8006e0e:	0c12      	lsrs	r2, r2, #16
 8006e10:	f003 0310 	and.w	r3, r3, #16
 8006e14:	f002 0204 	and.w	r2, r2, #4
 8006e18:	431a      	orrs	r2, r3
 8006e1a:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006e1c:	69cb      	ldr	r3, [r1, #28]
 8006e1e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006e22:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006e24:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8006e26:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006e28:	6560      	str	r0, [r4, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006e2a:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
}
 8006e2e:	bd10      	pop	{r4, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006e30:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006e32:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006e36:	e7b1      	b.n	8006d9c <HAL_SPI_Init+0x18>
    return HAL_ERROR;
 8006e38:	2001      	movs	r0, #1
 8006e3a:	e7f8      	b.n	8006e2e <HAL_SPI_Init+0xaa>

08006e3c <HAL_SPI_Transmit>:
{
 8006e3c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006e40:	461f      	mov	r7, r3
  __HAL_LOCK(hspi);
 8006e42:	f890 3050 	ldrb.w	r3, [r0, #80]	@ 0x50
 8006e46:	2b01      	cmp	r3, #1
{
 8006e48:	4604      	mov	r4, r0
 8006e4a:	460d      	mov	r5, r1
 8006e4c:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 8006e4e:	f000 80a0 	beq.w	8006f92 <HAL_SPI_Transmit+0x156>
 8006e52:	2301      	movs	r3, #1
 8006e54:	f880 3050 	strb.w	r3, [r0, #80]	@ 0x50
  tickstart = HAL_GetTick();
 8006e58:	f7fe f832 	bl	8004ec0 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8006e5c:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
 8006e60:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 8006e62:	4681      	mov	r9, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8006e64:	b2d8      	uxtb	r0, r3
 8006e66:	f040 8092 	bne.w	8006f8e <HAL_SPI_Transmit+0x152>
  if ((pData == NULL) || (Size == 0U))
 8006e6a:	2d00      	cmp	r5, #0
 8006e6c:	d061      	beq.n	8006f32 <HAL_SPI_Transmit+0xf6>
 8006e6e:	f1b8 0f00 	cmp.w	r8, #0
 8006e72:	d05e      	beq.n	8006f32 <HAL_SPI_Transmit+0xf6>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006e74:	2303      	movs	r3, #3
 8006e76:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	6563      	str	r3, [r4, #84]	@ 0x54
  hspi->RxISR       = NULL;
 8006e7e:	e9c4 3310 	strd	r3, r3, [r4, #64]	@ 0x40
  hspi->TxXferCount = Size;
 8006e82:	f8a4 8036 	strh.w	r8, [r4, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006e86:	63a3      	str	r3, [r4, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8006e88:	87a3      	strh	r3, [r4, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8006e8a:	87e3      	strh	r3, [r4, #62]	@ 0x3e
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006e8c:	68a3      	ldr	r3, [r4, #8]
    __HAL_SPI_DISABLE(hspi);
 8006e8e:	6826      	ldr	r6, [r4, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006e90:	6325      	str	r5, [r4, #48]	@ 0x30
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006e92:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
  hspi->TxXferSize  = Size;
 8006e96:	f8a4 8034 	strh.w	r8, [r4, #52]	@ 0x34
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006e9a:	d107      	bne.n	8006eac <HAL_SPI_Transmit+0x70>
    __HAL_SPI_DISABLE(hspi);
 8006e9c:	6833      	ldr	r3, [r6, #0]
 8006e9e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006ea2:	6033      	str	r3, [r6, #0]
    SPI_1LINE_TX(hspi);
 8006ea4:	6833      	ldr	r3, [r6, #0]
 8006ea6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006eaa:	6033      	str	r3, [r6, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006eac:	6833      	ldr	r3, [r6, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006eae:	68e2      	ldr	r2, [r4, #12]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006eb0:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 8006eb2:	bf5e      	ittt	pl
 8006eb4:	6833      	ldrpl	r3, [r6, #0]
 8006eb6:	f043 0340 	orrpl.w	r3, r3, #64	@ 0x40
 8006eba:	6033      	strpl	r3, [r6, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006ebc:	f5b2 6f00 	cmp.w	r2, #2048	@ 0x800
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006ec0:	6863      	ldr	r3, [r4, #4]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006ec2:	d13f      	bne.n	8006f44 <HAL_SPI_Transmit+0x108>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006ec4:	b113      	cbz	r3, 8006ecc <HAL_SPI_Transmit+0x90>
 8006ec6:	f1b8 0f01 	cmp.w	r8, #1
 8006eca:	d107      	bne.n	8006edc <HAL_SPI_Transmit+0xa0>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006ecc:	f835 3b02 	ldrh.w	r3, [r5], #2
 8006ed0:	60f3      	str	r3, [r6, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ed2:	6325      	str	r5, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 8006ed4:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8006ed6:	3b01      	subs	r3, #1
 8006ed8:	b29b      	uxth	r3, r3
 8006eda:	86e3      	strh	r3, [r4, #54]	@ 0x36
    while (hspi->TxXferCount > 0U)
 8006edc:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8006ede:	b29b      	uxth	r3, r3
 8006ee0:	b9a3      	cbnz	r3, 8006f0c <HAL_SPI_Transmit+0xd0>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006ee2:	464a      	mov	r2, r9
 8006ee4:	4639      	mov	r1, r7
 8006ee6:	4620      	mov	r0, r4
 8006ee8:	f7ff ff20 	bl	8006d2c <SPI_EndRxTxTransaction>
 8006eec:	2800      	cmp	r0, #0
 8006eee:	d14b      	bne.n	8006f88 <HAL_SPI_Transmit+0x14c>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006ef0:	68a3      	ldr	r3, [r4, #8]
 8006ef2:	b933      	cbnz	r3, 8006f02 <HAL_SPI_Transmit+0xc6>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006ef4:	9301      	str	r3, [sp, #4]
 8006ef6:	6823      	ldr	r3, [r4, #0]
 8006ef8:	68da      	ldr	r2, [r3, #12]
 8006efa:	9201      	str	r2, [sp, #4]
 8006efc:	689b      	ldr	r3, [r3, #8]
 8006efe:	9301      	str	r3, [sp, #4]
 8006f00:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006f02:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 8006f04:	3800      	subs	r0, #0
 8006f06:	bf18      	it	ne
 8006f08:	2001      	movne	r0, #1
error:
 8006f0a:	e012      	b.n	8006f32 <HAL_SPI_Transmit+0xf6>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006f0c:	6822      	ldr	r2, [r4, #0]
 8006f0e:	6893      	ldr	r3, [r2, #8]
 8006f10:	0798      	lsls	r0, r3, #30
 8006f12:	d505      	bpl.n	8006f20 <HAL_SPI_Transmit+0xe4>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006f14:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8006f16:	f833 1b02 	ldrh.w	r1, [r3], #2
 8006f1a:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f1c:	6323      	str	r3, [r4, #48]	@ 0x30
 8006f1e:	e7d9      	b.n	8006ed4 <HAL_SPI_Transmit+0x98>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006f20:	f7fd ffce 	bl	8004ec0 <HAL_GetTick>
 8006f24:	eba0 0009 	sub.w	r0, r0, r9
 8006f28:	42b8      	cmp	r0, r7
 8006f2a:	d3d7      	bcc.n	8006edc <HAL_SPI_Transmit+0xa0>
 8006f2c:	1c79      	adds	r1, r7, #1
 8006f2e:	d0d5      	beq.n	8006edc <HAL_SPI_Transmit+0xa0>
          errorcode = HAL_TIMEOUT;
 8006f30:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8006f32:	2301      	movs	r3, #1
 8006f34:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8006f38:	2300      	movs	r3, #0
 8006f3a:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
}
 8006f3e:	b003      	add	sp, #12
 8006f40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006f44:	b113      	cbz	r3, 8006f4c <HAL_SPI_Transmit+0x110>
 8006f46:	f1b8 0f01 	cmp.w	r8, #1
 8006f4a:	d108      	bne.n	8006f5e <HAL_SPI_Transmit+0x122>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006f4c:	782b      	ldrb	r3, [r5, #0]
 8006f4e:	7333      	strb	r3, [r6, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006f50:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8006f52:	3301      	adds	r3, #1
 8006f54:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 8006f56:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8006f58:	3b01      	subs	r3, #1
 8006f5a:	b29b      	uxth	r3, r3
 8006f5c:	86e3      	strh	r3, [r4, #54]	@ 0x36
    while (hspi->TxXferCount > 0U)
 8006f5e:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8006f60:	b29b      	uxth	r3, r3
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d0bd      	beq.n	8006ee2 <HAL_SPI_Transmit+0xa6>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006f66:	6823      	ldr	r3, [r4, #0]
 8006f68:	689a      	ldr	r2, [r3, #8]
 8006f6a:	0792      	lsls	r2, r2, #30
 8006f6c:	d503      	bpl.n	8006f76 <HAL_SPI_Transmit+0x13a>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006f6e:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8006f70:	7812      	ldrb	r2, [r2, #0]
 8006f72:	731a      	strb	r2, [r3, #12]
 8006f74:	e7ec      	b.n	8006f50 <HAL_SPI_Transmit+0x114>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006f76:	f7fd ffa3 	bl	8004ec0 <HAL_GetTick>
 8006f7a:	eba0 0009 	sub.w	r0, r0, r9
 8006f7e:	42b8      	cmp	r0, r7
 8006f80:	d3ed      	bcc.n	8006f5e <HAL_SPI_Transmit+0x122>
 8006f82:	1c7b      	adds	r3, r7, #1
 8006f84:	d0eb      	beq.n	8006f5e <HAL_SPI_Transmit+0x122>
 8006f86:	e7d3      	b.n	8006f30 <HAL_SPI_Transmit+0xf4>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006f88:	2320      	movs	r3, #32
 8006f8a:	6563      	str	r3, [r4, #84]	@ 0x54
 8006f8c:	e7b0      	b.n	8006ef0 <HAL_SPI_Transmit+0xb4>
    errorcode = HAL_BUSY;
 8006f8e:	2002      	movs	r0, #2
 8006f90:	e7cf      	b.n	8006f32 <HAL_SPI_Transmit+0xf6>
  __HAL_LOCK(hspi);
 8006f92:	2002      	movs	r0, #2
 8006f94:	e7d3      	b.n	8006f3e <HAL_SPI_Transmit+0x102>

08006f96 <HAL_SPI_TransmitReceive>:
{
 8006f96:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006f9a:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8006f9c:	f890 3050 	ldrb.w	r3, [r0, #80]	@ 0x50
{
 8006fa0:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
  __HAL_LOCK(hspi);
 8006fa4:	2b01      	cmp	r3, #1
{
 8006fa6:	4604      	mov	r4, r0
 8006fa8:	460d      	mov	r5, r1
 8006faa:	4691      	mov	r9, r2
  __HAL_LOCK(hspi);
 8006fac:	f000 80e3 	beq.w	8007176 <HAL_SPI_TransmitReceive+0x1e0>
 8006fb0:	2301      	movs	r3, #1
 8006fb2:	f880 3050 	strb.w	r3, [r0, #80]	@ 0x50
  tickstart = HAL_GetTick();
 8006fb6:	f7fd ff83 	bl	8004ec0 <HAL_GetTick>
  tmp_state           = hspi->State;
 8006fba:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
  tmp_mode            = hspi->Init.Mode;
 8006fbe:	6862      	ldr	r2, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006fc0:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 8006fc2:	4607      	mov	r7, r0
  tmp_state           = hspi->State;
 8006fc4:	b2d9      	uxtb	r1, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006fc6:	d00a      	beq.n	8006fde <HAL_SPI_TransmitReceive+0x48>
 8006fc8:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 8006fcc:	f040 80d1 	bne.w	8007172 <HAL_SPI_TransmitReceive+0x1dc>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006fd0:	68a3      	ldr	r3, [r4, #8]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	f040 80cd 	bne.w	8007172 <HAL_SPI_TransmitReceive+0x1dc>
 8006fd8:	2904      	cmp	r1, #4
 8006fda:	f040 80ca 	bne.w	8007172 <HAL_SPI_TransmitReceive+0x1dc>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006fde:	b115      	cbz	r5, 8006fe6 <HAL_SPI_TransmitReceive+0x50>
 8006fe0:	f1b9 0f00 	cmp.w	r9, #0
 8006fe4:	d109      	bne.n	8006ffa <HAL_SPI_TransmitReceive+0x64>
    errorcode = HAL_ERROR;
 8006fe6:	2001      	movs	r0, #1
  hspi->State = HAL_SPI_STATE_READY;
 8006fe8:	2301      	movs	r3, #1
 8006fea:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8006fee:	2300      	movs	r3, #0
 8006ff0:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
}
 8006ff4:	b003      	add	sp, #12
 8006ff6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006ffa:	2e00      	cmp	r6, #0
 8006ffc:	d0f3      	beq.n	8006fe6 <HAL_SPI_TransmitReceive+0x50>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006ffe:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007002:	f8c4 9038 	str.w	r9, [r4, #56]	@ 0x38
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007006:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007008:	bf1c      	itt	ne
 800700a:	2305      	movne	r3, #5
 800700c:	f884 3051 	strbne.w	r3, [r4, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007010:	2300      	movs	r3, #0
 8007012:	6563      	str	r3, [r4, #84]	@ 0x54
  hspi->TxISR       = NULL;
 8007014:	e9c4 3310 	strd	r3, r3, [r4, #64]	@ 0x40
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007018:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 800701a:	87e6      	strh	r6, [r4, #62]	@ 0x3e
  hspi->TxXferCount = Size;
 800701c:	86e6      	strh	r6, [r4, #54]	@ 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800701e:	6819      	ldr	r1, [r3, #0]
  hspi->RxXferSize  = Size;
 8007020:	87a6      	strh	r6, [r4, #60]	@ 0x3c
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007022:	0649      	lsls	r1, r1, #25
    __HAL_SPI_ENABLE(hspi);
 8007024:	bf58      	it	pl
 8007026:	6819      	ldrpl	r1, [r3, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007028:	6325      	str	r5, [r4, #48]	@ 0x30
    __HAL_SPI_ENABLE(hspi);
 800702a:	bf58      	it	pl
 800702c:	f041 0140 	orrpl.w	r1, r1, #64	@ 0x40
  hspi->TxXferSize  = Size;
 8007030:	86a6      	strh	r6, [r4, #52]	@ 0x34
    __HAL_SPI_ENABLE(hspi);
 8007032:	bf58      	it	pl
 8007034:	6019      	strpl	r1, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007036:	68e1      	ldr	r1, [r4, #12]
 8007038:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 800703c:	d148      	bne.n	80070d0 <HAL_SPI_TransmitReceive+0x13a>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800703e:	b10a      	cbz	r2, 8007044 <HAL_SPI_TransmitReceive+0xae>
 8007040:	2e01      	cmp	r6, #1
 8007042:	d107      	bne.n	8007054 <HAL_SPI_TransmitReceive+0xbe>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007044:	f835 2b02 	ldrh.w	r2, [r5], #2
 8007048:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 800704a:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800704c:	6325      	str	r5, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 800704e:	3b01      	subs	r3, #1
 8007050:	b29b      	uxth	r3, r3
 8007052:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 1U;
 8007054:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007056:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8007058:	b29b      	uxth	r3, r3
 800705a:	b963      	cbnz	r3, 8007076 <HAL_SPI_TransmitReceive+0xe0>
 800705c:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800705e:	b29b      	uxth	r3, r3
 8007060:	b94b      	cbnz	r3, 8007076 <HAL_SPI_TransmitReceive+0xe0>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007062:	463a      	mov	r2, r7
 8007064:	4641      	mov	r1, r8
 8007066:	4620      	mov	r0, r4
 8007068:	f7ff fe60 	bl	8006d2c <SPI_EndRxTxTransaction>
 800706c:	2800      	cmp	r0, #0
 800706e:	d074      	beq.n	800715a <HAL_SPI_TransmitReceive+0x1c4>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007070:	2320      	movs	r3, #32
 8007072:	6563      	str	r3, [r4, #84]	@ 0x54
    goto error;
 8007074:	e7b7      	b.n	8006fe6 <HAL_SPI_TransmitReceive+0x50>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007076:	6821      	ldr	r1, [r4, #0]
 8007078:	688b      	ldr	r3, [r1, #8]
 800707a:	079a      	lsls	r2, r3, #30
 800707c:	d50d      	bpl.n	800709a <HAL_SPI_TransmitReceive+0x104>
 800707e:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8007080:	b29b      	uxth	r3, r3
 8007082:	b153      	cbz	r3, 800709a <HAL_SPI_TransmitReceive+0x104>
 8007084:	b145      	cbz	r5, 8007098 <HAL_SPI_TransmitReceive+0x102>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007086:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8007088:	f833 2b02 	ldrh.w	r2, [r3], #2
 800708c:	60ca      	str	r2, [r1, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800708e:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 8007090:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8007092:	3b01      	subs	r3, #1
 8007094:	b29b      	uxth	r3, r3
 8007096:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 0U;
 8007098:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800709a:	688a      	ldr	r2, [r1, #8]
 800709c:	f012 0201 	ands.w	r2, r2, #1
 80070a0:	d00c      	beq.n	80070bc <HAL_SPI_TransmitReceive+0x126>
 80070a2:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80070a4:	b29b      	uxth	r3, r3
 80070a6:	b14b      	cbz	r3, 80070bc <HAL_SPI_TransmitReceive+0x126>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80070a8:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80070aa:	68c9      	ldr	r1, [r1, #12]
 80070ac:	f823 1b02 	strh.w	r1, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80070b0:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 80070b2:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80070b4:	3b01      	subs	r3, #1
 80070b6:	b29b      	uxth	r3, r3
 80070b8:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 80070ba:	4615      	mov	r5, r2
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80070bc:	f7fd ff00 	bl	8004ec0 <HAL_GetTick>
 80070c0:	1bc0      	subs	r0, r0, r7
 80070c2:	4540      	cmp	r0, r8
 80070c4:	d3c7      	bcc.n	8007056 <HAL_SPI_TransmitReceive+0xc0>
 80070c6:	f1b8 3fff 	cmp.w	r8, #4294967295
 80070ca:	d0c4      	beq.n	8007056 <HAL_SPI_TransmitReceive+0xc0>
        errorcode = HAL_TIMEOUT;
 80070cc:	2003      	movs	r0, #3
 80070ce:	e78b      	b.n	8006fe8 <HAL_SPI_TransmitReceive+0x52>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80070d0:	b10a      	cbz	r2, 80070d6 <HAL_SPI_TransmitReceive+0x140>
 80070d2:	2e01      	cmp	r6, #1
 80070d4:	d108      	bne.n	80070e8 <HAL_SPI_TransmitReceive+0x152>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80070d6:	782a      	ldrb	r2, [r5, #0]
 80070d8:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80070da:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80070dc:	3301      	adds	r3, #1
 80070de:	6323      	str	r3, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 80070e0:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80070e2:	3b01      	subs	r3, #1
 80070e4:	b29b      	uxth	r3, r3
 80070e6:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 1U;
 80070e8:	2501      	movs	r5, #1
 80070ea:	e02d      	b.n	8007148 <HAL_SPI_TransmitReceive+0x1b2>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80070ec:	6822      	ldr	r2, [r4, #0]
 80070ee:	6893      	ldr	r3, [r2, #8]
 80070f0:	079b      	lsls	r3, r3, #30
 80070f2:	d50e      	bpl.n	8007112 <HAL_SPI_TransmitReceive+0x17c>
 80070f4:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80070f6:	b29b      	uxth	r3, r3
 80070f8:	b15b      	cbz	r3, 8007112 <HAL_SPI_TransmitReceive+0x17c>
 80070fa:	b14d      	cbz	r5, 8007110 <HAL_SPI_TransmitReceive+0x17a>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80070fc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80070fe:	781b      	ldrb	r3, [r3, #0]
 8007100:	7313      	strb	r3, [r2, #12]
        hspi->pTxBuffPtr++;
 8007102:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8007104:	3301      	adds	r3, #1
 8007106:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 8007108:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 800710a:	3b01      	subs	r3, #1
 800710c:	b29b      	uxth	r3, r3
 800710e:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 0U;
 8007110:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007112:	6822      	ldr	r2, [r4, #0]
 8007114:	6891      	ldr	r1, [r2, #8]
 8007116:	f011 0101 	ands.w	r1, r1, #1
 800711a:	d00d      	beq.n	8007138 <HAL_SPI_TransmitReceive+0x1a2>
 800711c:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800711e:	b29b      	uxth	r3, r3
 8007120:	b153      	cbz	r3, 8007138 <HAL_SPI_TransmitReceive+0x1a2>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007122:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8007124:	68d2      	ldr	r2, [r2, #12]
 8007126:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007128:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800712a:	3301      	adds	r3, #1
 800712c:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 800712e:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8007130:	3b01      	subs	r3, #1
 8007132:	b29b      	uxth	r3, r3
 8007134:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 8007136:	460d      	mov	r5, r1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007138:	f7fd fec2 	bl	8004ec0 <HAL_GetTick>
 800713c:	1bc0      	subs	r0, r0, r7
 800713e:	4540      	cmp	r0, r8
 8007140:	d302      	bcc.n	8007148 <HAL_SPI_TransmitReceive+0x1b2>
 8007142:	f1b8 3fff 	cmp.w	r8, #4294967295
 8007146:	d1c1      	bne.n	80070cc <HAL_SPI_TransmitReceive+0x136>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007148:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 800714a:	b29b      	uxth	r3, r3
 800714c:	2b00      	cmp	r3, #0
 800714e:	d1cd      	bne.n	80070ec <HAL_SPI_TransmitReceive+0x156>
 8007150:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8007152:	b29b      	uxth	r3, r3
 8007154:	2b00      	cmp	r3, #0
 8007156:	d1c9      	bne.n	80070ec <HAL_SPI_TransmitReceive+0x156>
 8007158:	e783      	b.n	8007062 <HAL_SPI_TransmitReceive+0xcc>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800715a:	68a3      	ldr	r3, [r4, #8]
 800715c:	2b00      	cmp	r3, #0
 800715e:	f47f af43 	bne.w	8006fe8 <HAL_SPI_TransmitReceive+0x52>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007162:	6823      	ldr	r3, [r4, #0]
 8007164:	9001      	str	r0, [sp, #4]
 8007166:	68da      	ldr	r2, [r3, #12]
 8007168:	9201      	str	r2, [sp, #4]
 800716a:	689b      	ldr	r3, [r3, #8]
 800716c:	9301      	str	r3, [sp, #4]
 800716e:	9b01      	ldr	r3, [sp, #4]
 8007170:	e73a      	b.n	8006fe8 <HAL_SPI_TransmitReceive+0x52>
    errorcode = HAL_BUSY;
 8007172:	2002      	movs	r0, #2
 8007174:	e738      	b.n	8006fe8 <HAL_SPI_TransmitReceive+0x52>
  __HAL_LOCK(hspi);
 8007176:	2002      	movs	r0, #2
 8007178:	e73c      	b.n	8006ff4 <HAL_SPI_TransmitReceive+0x5e>

0800717a <HAL_SPI_Receive>:
{
 800717a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800717e:	461d      	mov	r5, r3
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007180:	6843      	ldr	r3, [r0, #4]
 8007182:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
{
 8007186:	4604      	mov	r4, r0
 8007188:	4689      	mov	r9, r1
 800718a:	4617      	mov	r7, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800718c:	d10c      	bne.n	80071a8 <HAL_SPI_Receive+0x2e>
 800718e:	6883      	ldr	r3, [r0, #8]
 8007190:	b953      	cbnz	r3, 80071a8 <HAL_SPI_Receive+0x2e>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007192:	2304      	movs	r3, #4
 8007194:	f880 3051 	strb.w	r3, [r0, #81]	@ 0x51
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007198:	4613      	mov	r3, r2
 800719a:	9500      	str	r5, [sp, #0]
 800719c:	460a      	mov	r2, r1
 800719e:	f7ff fefa 	bl	8006f96 <HAL_SPI_TransmitReceive>
}
 80071a2:	b003      	add	sp, #12
 80071a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(hspi);
 80071a8:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
 80071ac:	2b01      	cmp	r3, #1
 80071ae:	d07f      	beq.n	80072b0 <HAL_SPI_Receive+0x136>
 80071b0:	2301      	movs	r3, #1
 80071b2:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  tickstart = HAL_GetTick();
 80071b6:	f7fd fe83 	bl	8004ec0 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 80071ba:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
 80071be:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 80071c0:	4680      	mov	r8, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 80071c2:	b2d8      	uxtb	r0, r3
 80071c4:	d172      	bne.n	80072ac <HAL_SPI_Receive+0x132>
  if ((pData == NULL) || (Size == 0U))
 80071c6:	f1b9 0f00 	cmp.w	r9, #0
 80071ca:	d05c      	beq.n	8007286 <HAL_SPI_Receive+0x10c>
 80071cc:	2f00      	cmp	r7, #0
 80071ce:	d05a      	beq.n	8007286 <HAL_SPI_Receive+0x10c>
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80071d0:	68a2      	ldr	r2, [r4, #8]
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80071d2:	f8c4 9038 	str.w	r9, [r4, #56]	@ 0x38
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80071d6:	2600      	movs	r6, #0
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80071d8:	2304      	movs	r3, #4
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80071da:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80071de:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  hspi->TxISR       = NULL;
 80071e2:	e9c4 6610 	strd	r6, r6, [r4, #64]	@ 0x40
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80071e6:	6566      	str	r6, [r4, #84]	@ 0x54
    __HAL_SPI_DISABLE(hspi);
 80071e8:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 80071ea:	87e7      	strh	r7, [r4, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80071ec:	87a7      	strh	r7, [r4, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80071ee:	6326      	str	r6, [r4, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80071f0:	86a6      	strh	r6, [r4, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80071f2:	86e6      	strh	r6, [r4, #54]	@ 0x36
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80071f4:	d107      	bne.n	8007206 <HAL_SPI_Receive+0x8c>
    __HAL_SPI_DISABLE(hspi);
 80071f6:	681a      	ldr	r2, [r3, #0]
 80071f8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80071fc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80071fe:	681a      	ldr	r2, [r3, #0]
 8007200:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007204:	601a      	str	r2, [r3, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007206:	681a      	ldr	r2, [r3, #0]
 8007208:	0656      	lsls	r6, r2, #25
    __HAL_SPI_ENABLE(hspi);
 800720a:	bf5e      	ittt	pl
 800720c:	681a      	ldrpl	r2, [r3, #0]
 800720e:	f042 0240 	orrpl.w	r2, r2, #64	@ 0x40
 8007212:	601a      	strpl	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8007214:	68e3      	ldr	r3, [r4, #12]
 8007216:	b1f3      	cbz	r3, 8007256 <HAL_SPI_Receive+0xdc>
    while (hspi->RxXferCount > 0U)
 8007218:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800721a:	b29b      	uxth	r3, r3
 800721c:	b1fb      	cbz	r3, 800725e <HAL_SPI_Receive+0xe4>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800721e:	6823      	ldr	r3, [r4, #0]
 8007220:	689a      	ldr	r2, [r3, #8]
 8007222:	07d2      	lsls	r2, r2, #31
 8007224:	d536      	bpl.n	8007294 <HAL_SPI_Receive+0x11a>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007226:	68da      	ldr	r2, [r3, #12]
 8007228:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800722a:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800722e:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 8007230:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8007232:	3b01      	subs	r3, #1
 8007234:	b29b      	uxth	r3, r3
 8007236:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 8007238:	e7ee      	b.n	8007218 <HAL_SPI_Receive+0x9e>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800723a:	6823      	ldr	r3, [r4, #0]
 800723c:	689a      	ldr	r2, [r3, #8]
 800723e:	07d0      	lsls	r0, r2, #31
 8007240:	d518      	bpl.n	8007274 <HAL_SPI_Receive+0xfa>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007242:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8007244:	7b1b      	ldrb	r3, [r3, #12]
 8007246:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007248:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800724a:	3301      	adds	r3, #1
 800724c:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 800724e:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8007250:	3b01      	subs	r3, #1
 8007252:	b29b      	uxth	r3, r3
 8007254:	87e3      	strh	r3, [r4, #62]	@ 0x3e
    while (hspi->RxXferCount > 0U)
 8007256:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8007258:	b29b      	uxth	r3, r3
 800725a:	2b00      	cmp	r3, #0
 800725c:	d1ed      	bne.n	800723a <HAL_SPI_Receive+0xc0>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800725e:	4642      	mov	r2, r8
 8007260:	4629      	mov	r1, r5
 8007262:	4620      	mov	r0, r4
 8007264:	f7ff fd38 	bl	8006cd8 <SPI_EndRxTransaction>
 8007268:	b9e8      	cbnz	r0, 80072a6 <HAL_SPI_Receive+0x12c>
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800726a:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 800726c:	3800      	subs	r0, #0
 800726e:	bf18      	it	ne
 8007270:	2001      	movne	r0, #1
error :
 8007272:	e008      	b.n	8007286 <HAL_SPI_Receive+0x10c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007274:	f7fd fe24 	bl	8004ec0 <HAL_GetTick>
 8007278:	eba0 0008 	sub.w	r0, r0, r8
 800727c:	42a8      	cmp	r0, r5
 800727e:	d3ea      	bcc.n	8007256 <HAL_SPI_Receive+0xdc>
 8007280:	1c69      	adds	r1, r5, #1
 8007282:	d0e8      	beq.n	8007256 <HAL_SPI_Receive+0xdc>
          errorcode = HAL_TIMEOUT;
 8007284:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8007286:	2301      	movs	r3, #1
 8007288:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 800728c:	2300      	movs	r3, #0
 800728e:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  return errorcode;
 8007292:	e786      	b.n	80071a2 <HAL_SPI_Receive+0x28>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007294:	f7fd fe14 	bl	8004ec0 <HAL_GetTick>
 8007298:	eba0 0008 	sub.w	r0, r0, r8
 800729c:	42a8      	cmp	r0, r5
 800729e:	d3bb      	bcc.n	8007218 <HAL_SPI_Receive+0x9e>
 80072a0:	1c6b      	adds	r3, r5, #1
 80072a2:	d0b9      	beq.n	8007218 <HAL_SPI_Receive+0x9e>
 80072a4:	e7ee      	b.n	8007284 <HAL_SPI_Receive+0x10a>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80072a6:	2320      	movs	r3, #32
 80072a8:	6563      	str	r3, [r4, #84]	@ 0x54
 80072aa:	e7de      	b.n	800726a <HAL_SPI_Receive+0xf0>
    errorcode = HAL_BUSY;
 80072ac:	2002      	movs	r0, #2
 80072ae:	e7ea      	b.n	8007286 <HAL_SPI_Receive+0x10c>
  __HAL_LOCK(hspi);
 80072b0:	2002      	movs	r0, #2
 80072b2:	e776      	b.n	80071a2 <HAL_SPI_Receive+0x28>

080072b4 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80072b4:	4770      	bx	lr
	...

080072b8 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80072b8:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80072bc:	2b01      	cmp	r3, #1
 80072be:	d130      	bne.n	8007322 <HAL_TIM_Base_Start_IT+0x6a>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072c0:	2302      	movs	r3, #2
 80072c2:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80072c6:	6803      	ldr	r3, [r0, #0]
 80072c8:	68da      	ldr	r2, [r3, #12]
 80072ca:	f042 0201 	orr.w	r2, r2, #1
 80072ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80072d0:	4a15      	ldr	r2, [pc, #84]	@ (8007328 <HAL_TIM_Base_Start_IT+0x70>)
 80072d2:	4293      	cmp	r3, r2
 80072d4:	d01a      	beq.n	800730c <HAL_TIM_Base_Start_IT+0x54>
 80072d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80072da:	d017      	beq.n	800730c <HAL_TIM_Base_Start_IT+0x54>
 80072dc:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 80072e0:	4293      	cmp	r3, r2
 80072e2:	d013      	beq.n	800730c <HAL_TIM_Base_Start_IT+0x54>
 80072e4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80072e8:	4293      	cmp	r3, r2
 80072ea:	d00f      	beq.n	800730c <HAL_TIM_Base_Start_IT+0x54>
 80072ec:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80072f0:	4293      	cmp	r3, r2
 80072f2:	d00b      	beq.n	800730c <HAL_TIM_Base_Start_IT+0x54>
 80072f4:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 80072f8:	4293      	cmp	r3, r2
 80072fa:	d007      	beq.n	800730c <HAL_TIM_Base_Start_IT+0x54>
 80072fc:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 8007300:	4293      	cmp	r3, r2
 8007302:	d003      	beq.n	800730c <HAL_TIM_Base_Start_IT+0x54>
 8007304:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8007308:	4293      	cmp	r3, r2
 800730a:	d104      	bne.n	8007316 <HAL_TIM_Base_Start_IT+0x5e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800730c:	689a      	ldr	r2, [r3, #8]
 800730e:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007312:	2a06      	cmp	r2, #6
 8007314:	d003      	beq.n	800731e <HAL_TIM_Base_Start_IT+0x66>
    {
      __HAL_TIM_ENABLE(htim);
 8007316:	681a      	ldr	r2, [r3, #0]
 8007318:	f042 0201 	orr.w	r2, r2, #1
 800731c:	601a      	str	r2, [r3, #0]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 800731e:	2000      	movs	r0, #0
 8007320:	4770      	bx	lr
    return HAL_ERROR;
 8007322:	2001      	movs	r0, #1
}
 8007324:	4770      	bx	lr
 8007326:	bf00      	nop
 8007328:	40010000 	.word	0x40010000

0800732c <HAL_TIM_OC_DelayElapsedCallback>:
/**
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 800732c:	4770      	bx	lr

0800732e <HAL_TIM_IC_CaptureCallback>:
/**
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 800732e:	4770      	bx	lr

08007330 <HAL_TIM_PWM_PulseFinishedCallback>:
/**
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 8007330:	4770      	bx	lr

08007332 <HAL_TIM_TriggerCallback>:
/**
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 8007332:	4770      	bx	lr

08007334 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007334:	6803      	ldr	r3, [r0, #0]
 8007336:	691a      	ldr	r2, [r3, #16]
 8007338:	0791      	lsls	r1, r2, #30
{
 800733a:	b510      	push	{r4, lr}
 800733c:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800733e:	d50e      	bpl.n	800735e <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007340:	68da      	ldr	r2, [r3, #12]
 8007342:	0792      	lsls	r2, r2, #30
 8007344:	d50b      	bpl.n	800735e <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007346:	f06f 0202 	mvn.w	r2, #2
 800734a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800734c:	2201      	movs	r2, #1
 800734e:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007350:	699b      	ldr	r3, [r3, #24]
 8007352:	079b      	lsls	r3, r3, #30
 8007354:	d077      	beq.n	8007446 <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 8007356:	f7ff ffea 	bl	800732e <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800735a:	2300      	movs	r3, #0
 800735c:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800735e:	6823      	ldr	r3, [r4, #0]
 8007360:	691a      	ldr	r2, [r3, #16]
 8007362:	0750      	lsls	r0, r2, #29
 8007364:	d510      	bpl.n	8007388 <HAL_TIM_IRQHandler+0x54>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007366:	68da      	ldr	r2, [r3, #12]
 8007368:	0751      	lsls	r1, r2, #29
 800736a:	d50d      	bpl.n	8007388 <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800736c:	f06f 0204 	mvn.w	r2, #4
 8007370:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007372:	2202      	movs	r2, #2
 8007374:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007376:	699b      	ldr	r3, [r3, #24]
 8007378:	f413 7f40 	tst.w	r3, #768	@ 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 800737c:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800737e:	d068      	beq.n	8007452 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8007380:	f7ff ffd5 	bl	800732e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007384:	2300      	movs	r3, #0
 8007386:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007388:	6823      	ldr	r3, [r4, #0]
 800738a:	691a      	ldr	r2, [r3, #16]
 800738c:	0712      	lsls	r2, r2, #28
 800738e:	d50f      	bpl.n	80073b0 <HAL_TIM_IRQHandler+0x7c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007390:	68da      	ldr	r2, [r3, #12]
 8007392:	0710      	lsls	r0, r2, #28
 8007394:	d50c      	bpl.n	80073b0 <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007396:	f06f 0208 	mvn.w	r2, #8
 800739a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800739c:	2204      	movs	r2, #4
 800739e:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80073a0:	69db      	ldr	r3, [r3, #28]
 80073a2:	0799      	lsls	r1, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 80073a4:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80073a6:	d05a      	beq.n	800745e <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 80073a8:	f7ff ffc1 	bl	800732e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073ac:	2300      	movs	r3, #0
 80073ae:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80073b0:	6823      	ldr	r3, [r4, #0]
 80073b2:	691a      	ldr	r2, [r3, #16]
 80073b4:	06d2      	lsls	r2, r2, #27
 80073b6:	d510      	bpl.n	80073da <HAL_TIM_IRQHandler+0xa6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80073b8:	68da      	ldr	r2, [r3, #12]
 80073ba:	06d0      	lsls	r0, r2, #27
 80073bc:	d50d      	bpl.n	80073da <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80073be:	f06f 0210 	mvn.w	r2, #16
 80073c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80073c4:	2208      	movs	r2, #8
 80073c6:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80073c8:	69db      	ldr	r3, [r3, #28]
 80073ca:	f413 7f40 	tst.w	r3, #768	@ 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 80073ce:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80073d0:	d04b      	beq.n	800746a <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 80073d2:	f7ff ffac 	bl	800732e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073d6:	2300      	movs	r3, #0
 80073d8:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80073da:	6823      	ldr	r3, [r4, #0]
 80073dc:	691a      	ldr	r2, [r3, #16]
 80073de:	07d1      	lsls	r1, r2, #31
 80073e0:	d508      	bpl.n	80073f4 <HAL_TIM_IRQHandler+0xc0>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80073e2:	68da      	ldr	r2, [r3, #12]
 80073e4:	07d2      	lsls	r2, r2, #31
 80073e6:	d505      	bpl.n	80073f4 <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80073e8:	f06f 0201 	mvn.w	r2, #1
 80073ec:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80073ee:	4620      	mov	r0, r4
 80073f0:	f7fa fe9e 	bl	8002130 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80073f4:	6823      	ldr	r3, [r4, #0]
 80073f6:	691a      	ldr	r2, [r3, #16]
 80073f8:	0610      	lsls	r0, r2, #24
 80073fa:	d508      	bpl.n	800740e <HAL_TIM_IRQHandler+0xda>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80073fc:	68da      	ldr	r2, [r3, #12]
 80073fe:	0611      	lsls	r1, r2, #24
 8007400:	d505      	bpl.n	800740e <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007402:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007406:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8007408:	4620      	mov	r0, r4
 800740a:	f000 f8c8 	bl	800759e <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800740e:	6823      	ldr	r3, [r4, #0]
 8007410:	691a      	ldr	r2, [r3, #16]
 8007412:	0652      	lsls	r2, r2, #25
 8007414:	d508      	bpl.n	8007428 <HAL_TIM_IRQHandler+0xf4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007416:	68da      	ldr	r2, [r3, #12]
 8007418:	0650      	lsls	r0, r2, #25
 800741a:	d505      	bpl.n	8007428 <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800741c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007420:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8007422:	4620      	mov	r0, r4
 8007424:	f7ff ff85 	bl	8007332 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007428:	6823      	ldr	r3, [r4, #0]
 800742a:	691a      	ldr	r2, [r3, #16]
 800742c:	0691      	lsls	r1, r2, #26
 800742e:	d522      	bpl.n	8007476 <HAL_TIM_IRQHandler+0x142>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007430:	68da      	ldr	r2, [r3, #12]
 8007432:	0692      	lsls	r2, r2, #26
 8007434:	d51f      	bpl.n	8007476 <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007436:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 800743a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800743c:	611a      	str	r2, [r3, #16]
}
 800743e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8007442:	f000 b8ab 	b.w	800759c <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007446:	f7ff ff71 	bl	800732c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800744a:	4620      	mov	r0, r4
 800744c:	f7ff ff70 	bl	8007330 <HAL_TIM_PWM_PulseFinishedCallback>
 8007450:	e783      	b.n	800735a <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007452:	f7ff ff6b 	bl	800732c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007456:	4620      	mov	r0, r4
 8007458:	f7ff ff6a 	bl	8007330 <HAL_TIM_PWM_PulseFinishedCallback>
 800745c:	e792      	b.n	8007384 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800745e:	f7ff ff65 	bl	800732c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007462:	4620      	mov	r0, r4
 8007464:	f7ff ff64 	bl	8007330 <HAL_TIM_PWM_PulseFinishedCallback>
 8007468:	e7a0      	b.n	80073ac <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800746a:	f7ff ff5f 	bl	800732c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800746e:	4620      	mov	r0, r4
 8007470:	f7ff ff5e 	bl	8007330 <HAL_TIM_PWM_PulseFinishedCallback>
 8007474:	e7af      	b.n	80073d6 <HAL_TIM_IRQHandler+0xa2>
}
 8007476:	bd10      	pop	{r4, pc}

08007478 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007478:	4a30      	ldr	r2, [pc, #192]	@ (800753c <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 800747a:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800747c:	4290      	cmp	r0, r2
 800747e:	d012      	beq.n	80074a6 <TIM_Base_SetConfig+0x2e>
 8007480:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8007484:	d00f      	beq.n	80074a6 <TIM_Base_SetConfig+0x2e>
 8007486:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800748a:	4290      	cmp	r0, r2
 800748c:	d00b      	beq.n	80074a6 <TIM_Base_SetConfig+0x2e>
 800748e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007492:	4290      	cmp	r0, r2
 8007494:	d007      	beq.n	80074a6 <TIM_Base_SetConfig+0x2e>
 8007496:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800749a:	4290      	cmp	r0, r2
 800749c:	d003      	beq.n	80074a6 <TIM_Base_SetConfig+0x2e>
 800749e:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 80074a2:	4290      	cmp	r0, r2
 80074a4:	d119      	bne.n	80074da <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 80074a6:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80074a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 80074ac:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80074ae:	4a23      	ldr	r2, [pc, #140]	@ (800753c <TIM_Base_SetConfig+0xc4>)
 80074b0:	4290      	cmp	r0, r2
 80074b2:	d029      	beq.n	8007508 <TIM_Base_SetConfig+0x90>
 80074b4:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 80074b8:	d026      	beq.n	8007508 <TIM_Base_SetConfig+0x90>
 80074ba:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 80074be:	4290      	cmp	r0, r2
 80074c0:	d022      	beq.n	8007508 <TIM_Base_SetConfig+0x90>
 80074c2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80074c6:	4290      	cmp	r0, r2
 80074c8:	d01e      	beq.n	8007508 <TIM_Base_SetConfig+0x90>
 80074ca:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80074ce:	4290      	cmp	r0, r2
 80074d0:	d01a      	beq.n	8007508 <TIM_Base_SetConfig+0x90>
 80074d2:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 80074d6:	4290      	cmp	r0, r2
 80074d8:	d016      	beq.n	8007508 <TIM_Base_SetConfig+0x90>
 80074da:	4a19      	ldr	r2, [pc, #100]	@ (8007540 <TIM_Base_SetConfig+0xc8>)
 80074dc:	4290      	cmp	r0, r2
 80074de:	d013      	beq.n	8007508 <TIM_Base_SetConfig+0x90>
 80074e0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80074e4:	4290      	cmp	r0, r2
 80074e6:	d00f      	beq.n	8007508 <TIM_Base_SetConfig+0x90>
 80074e8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80074ec:	4290      	cmp	r0, r2
 80074ee:	d00b      	beq.n	8007508 <TIM_Base_SetConfig+0x90>
 80074f0:	f5a2 3298 	sub.w	r2, r2, #77824	@ 0x13000
 80074f4:	4290      	cmp	r0, r2
 80074f6:	d007      	beq.n	8007508 <TIM_Base_SetConfig+0x90>
 80074f8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80074fc:	4290      	cmp	r0, r2
 80074fe:	d003      	beq.n	8007508 <TIM_Base_SetConfig+0x90>
 8007500:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007504:	4290      	cmp	r0, r2
 8007506:	d103      	bne.n	8007510 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007508:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 800750a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800750e:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007510:	694a      	ldr	r2, [r1, #20]
 8007512:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007516:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8007518:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800751a:	688b      	ldr	r3, [r1, #8]
 800751c:	62c3      	str	r3, [r0, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800751e:	680b      	ldr	r3, [r1, #0]
 8007520:	6283      	str	r3, [r0, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007522:	4b06      	ldr	r3, [pc, #24]	@ (800753c <TIM_Base_SetConfig+0xc4>)
 8007524:	4298      	cmp	r0, r3
 8007526:	d003      	beq.n	8007530 <TIM_Base_SetConfig+0xb8>
 8007528:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800752c:	4298      	cmp	r0, r3
 800752e:	d101      	bne.n	8007534 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007530:	690b      	ldr	r3, [r1, #16]
 8007532:	6303      	str	r3, [r0, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007534:	2301      	movs	r3, #1
 8007536:	6143      	str	r3, [r0, #20]
}
 8007538:	4770      	bx	lr
 800753a:	bf00      	nop
 800753c:	40010000 	.word	0x40010000
 8007540:	40014000 	.word	0x40014000

08007544 <HAL_TIM_Base_Init>:
{
 8007544:	b510      	push	{r4, lr}
  if (htim == NULL)
 8007546:	4604      	mov	r4, r0
 8007548:	b330      	cbz	r0, 8007598 <HAL_TIM_Base_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 800754a:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800754e:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8007552:	b91b      	cbnz	r3, 800755c <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8007554:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8007558:	f7ff feac 	bl	80072b4 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800755c:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800755e:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8007560:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007564:	1d21      	adds	r1, r4, #4
 8007566:	f7ff ff87 	bl	8007478 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800756a:	2301      	movs	r3, #1
 800756c:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  return HAL_OK;
 8007570:	2000      	movs	r0, #0
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007572:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8007576:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 800757a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 800757e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007582:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007586:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800758a:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800758e:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8007592:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
 8007596:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8007598:	2001      	movs	r0, #1
 800759a:	e7fc      	b.n	8007596 <HAL_TIM_Base_Init+0x52>

0800759c <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 800759c:	4770      	bx	lr

0800759e <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 800759e:	4770      	bx	lr

080075a0 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80075a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80075a4:	e9d1 3807 	ldrd	r3, r8, [r1, #28]
 80075a8:	e9d1 2c01 	ldrd	r2, ip, [r1, #4]
 80075ac:	e9d1 7603 	ldrd	r7, r6, [r1, #12]
 80075b0:	e9d1 5405 	ldrd	r5, r4, [r1, #20]
 80075b4:	f8d1 e024 	ldr.w	lr, [r1, #36]	@ 0x24
  if (Init->SDBank == FMC_SDRAM_BANK1)
 80075b8:	6809      	ldr	r1, [r1, #0]
 80075ba:	ea43 0308 	orr.w	r3, r3, r8
 80075be:	b991      	cbnz	r1, 80075e6 <FMC_SDRAM_Init+0x46>
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80075c0:	ea43 030e 	orr.w	r3, r3, lr
 80075c4:	4313      	orrs	r3, r2
 80075c6:	ea43 030c 	orr.w	r3, r3, ip
 80075ca:	6801      	ldr	r1, [r0, #0]
 80075cc:	433b      	orrs	r3, r7
 80075ce:	4333      	orrs	r3, r6
 80075d0:	432b      	orrs	r3, r5
 80075d2:	f421 41ff 	bic.w	r1, r1, #32640	@ 0x7f80
 80075d6:	4323      	orrs	r3, r4
 80075d8:	f021 017f 	bic.w	r1, r1, #127	@ 0x7f
 80075dc:	430b      	orrs	r3, r1
 80075de:	6003      	str	r3, [r0, #0]
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 80075e0:	2000      	movs	r0, #0
 80075e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80075e6:	6801      	ldr	r1, [r0, #0]
 80075e8:	ea43 030e 	orr.w	r3, r3, lr
 80075ec:	f421 41f8 	bic.w	r1, r1, #31744	@ 0x7c00
 80075f0:	430b      	orrs	r3, r1
 80075f2:	6003      	str	r3, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 80075f4:	ea42 030c 	orr.w	r3, r2, ip
 80075f8:	6841      	ldr	r1, [r0, #4]
 80075fa:	433b      	orrs	r3, r7
 80075fc:	4333      	orrs	r3, r6
 80075fe:	432b      	orrs	r3, r5
 8007600:	f421 42ff 	bic.w	r2, r1, #32640	@ 0x7f80
 8007604:	4323      	orrs	r3, r4
 8007606:	f022 027f 	bic.w	r2, r2, #127	@ 0x7f
 800760a:	4313      	orrs	r3, r2
 800760c:	6043      	str	r3, [r0, #4]
 800760e:	e7e7      	b.n	80075e0 <FMC_SDRAM_Init+0x40>

08007610 <FMC_SDRAM_Timing_Init>:
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8007610:	68cb      	ldr	r3, [r1, #12]
 8007612:	f103 3cff 	add.w	ip, r3, #4294967295
 8007616:	694b      	ldr	r3, [r1, #20]
{
 8007618:	b5f0      	push	{r4, r5, r6, r7, lr}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800761a:	680f      	ldr	r7, [r1, #0]
 800761c:	684c      	ldr	r4, [r1, #4]
 800761e:	688e      	ldr	r6, [r1, #8]
 8007620:	690d      	ldr	r5, [r1, #16]
 8007622:	6989      	ldr	r1, [r1, #24]
 8007624:	3b01      	subs	r3, #1
 8007626:	051b      	lsls	r3, r3, #20
 8007628:	3c01      	subs	r4, #1
 800762a:	3e01      	subs	r6, #1
 800762c:	3d01      	subs	r5, #1
 800762e:	3901      	subs	r1, #1
 8007630:	3f01      	subs	r7, #1
 8007632:	0124      	lsls	r4, r4, #4
 8007634:	0236      	lsls	r6, r6, #8
 8007636:	042d      	lsls	r5, r5, #16
 8007638:	0609      	lsls	r1, r1, #24
 800763a:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
  if (Bank == FMC_SDRAM_BANK1)
 800763e:	b95a      	cbnz	r2, 8007658 <FMC_SDRAM_Timing_Init+0x48>
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8007640:	433b      	orrs	r3, r7
 8007642:	4323      	orrs	r3, r4
 8007644:	6882      	ldr	r2, [r0, #8]
 8007646:	4333      	orrs	r3, r6
 8007648:	432b      	orrs	r3, r5
 800764a:	430b      	orrs	r3, r1
 800764c:	f002 4270 	and.w	r2, r2, #4026531840	@ 0xf0000000
 8007650:	4313      	orrs	r3, r2
 8007652:	6083      	str	r3, [r0, #8]
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
}
 8007654:	2000      	movs	r0, #0
 8007656:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8007658:	6882      	ldr	r2, [r0, #8]
 800765a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800765e:	f422 4270 	bic.w	r2, r2, #61440	@ 0xf000
 8007662:	431a      	orrs	r2, r3
 8007664:	6082      	str	r2, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8007666:	ea44 0306 	orr.w	r3, r4, r6
 800766a:	68c2      	ldr	r2, [r0, #12]
 800766c:	433b      	orrs	r3, r7
 800766e:	432b      	orrs	r3, r5
 8007670:	430b      	orrs	r3, r1
 8007672:	f002 4270 	and.w	r2, r2, #4026531840	@ 0xf0000000
 8007676:	4313      	orrs	r3, r2
 8007678:	60c3      	str	r3, [r0, #12]
 800767a:	e7eb      	b.n	8007654 <FMC_SDRAM_Timing_Init+0x44>

0800767c <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800767c:	b570      	push	{r4, r5, r6, lr}
 800767e:	4604      	mov	r4, r0
 8007680:	4615      	mov	r5, r2
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8007682:	6902      	ldr	r2, [r0, #16]
 8007684:	e9d1 3000 	ldrd	r3, r0, [r1]
 8007688:	4303      	orrs	r3, r0
 800768a:	68c8      	ldr	r0, [r1, #12]
 800768c:	0d92      	lsrs	r2, r2, #22
 800768e:	ea43 2340 	orr.w	r3, r3, r0, lsl #9
 8007692:	0592      	lsls	r2, r2, #22
 8007694:	4313      	orrs	r3, r2
 8007696:	688a      	ldr	r2, [r1, #8]
 8007698:	3a01      	subs	r2, #1
 800769a:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 800769e:	6123      	str	r3, [r4, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Get tick */
  tickstart = HAL_GetTick();
 80076a0:	f7fd fc0e 	bl	8004ec0 <HAL_GetTick>
 80076a4:	4606      	mov	r6, r0

  /* wait until command is send */
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 80076a6:	69a0      	ldr	r0, [r4, #24]
 80076a8:	f010 0020 	ands.w	r0, r0, #32
 80076ac:	d003      	beq.n	80076b6 <FMC_SDRAM_SendCommand+0x3a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80076ae:	1c6b      	adds	r3, r5, #1
 80076b0:	d0f9      	beq.n	80076a6 <FMC_SDRAM_SendCommand+0x2a>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80076b2:	b90d      	cbnz	r5, 80076b8 <FMC_SDRAM_SendCommand+0x3c>
      {
        return HAL_TIMEOUT;
 80076b4:	2003      	movs	r0, #3
      }
    }
  }
  return HAL_OK;
}
 80076b6:	bd70      	pop	{r4, r5, r6, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80076b8:	f7fd fc02 	bl	8004ec0 <HAL_GetTick>
 80076bc:	1b80      	subs	r0, r0, r6
 80076be:	42a8      	cmp	r0, r5
 80076c0:	d9f1      	bls.n	80076a6 <FMC_SDRAM_SendCommand+0x2a>
 80076c2:	e7f7      	b.n	80076b4 <FMC_SDRAM_SendCommand+0x38>

080076c4 <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 80076c4:	6943      	ldr	r3, [r0, #20]
 80076c6:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80076ca:	f023 033e 	bic.w	r3, r3, #62	@ 0x3e
 80076ce:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 80076d2:	6143      	str	r3, [r0, #20]

  return HAL_OK;
}
 80076d4:	2000      	movs	r0, #0
 80076d6:	4770      	bx	lr

080076d8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80076d8:	b508      	push	{r3, lr}
  /* Clear overflow flag */
  SysTick->CTRL;
 80076da:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80076de:	691b      	ldr	r3, [r3, #16]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80076e0:	f001 fe1e 	bl	8009320 <xTaskGetSchedulerState>
 80076e4:	2801      	cmp	r0, #1
 80076e6:	d003      	beq.n	80076f0 <SysTick_Handler+0x18>
    /* Call tick handler */
    xPortSysTickHandler();
  }
}
 80076e8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 80076ec:	f000 bbea 	b.w	8007ec4 <xPortSysTickHandler>
}
 80076f0:	bd08      	pop	{r3, pc}
	...

080076f4 <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80076f4:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 80076f8:	b92b      	cbnz	r3, 8007706 <osKernelInitialize+0x12>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 80076fa:	4b06      	ldr	r3, [pc, #24]	@ (8007714 <osKernelInitialize+0x20>)
 80076fc:	6818      	ldr	r0, [r3, #0]
 80076fe:	b928      	cbnz	r0, 800770c <osKernelInitialize+0x18>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007700:	2201      	movs	r2, #1
 8007702:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007704:	4770      	bx	lr
    stat = osErrorISR;
 8007706:	f06f 0005 	mvn.w	r0, #5
 800770a:	4770      	bx	lr
    } else {
      stat = osError;
 800770c:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 8007710:	4770      	bx	lr
 8007712:	bf00      	nop
 8007714:	200048b4 	.word	0x200048b4

08007718 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007718:	b510      	push	{r4, lr}
 800771a:	f3ef 8405 	mrs	r4, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 800771e:	b95c      	cbnz	r4, 8007738 <osKernelStart+0x20>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 8007720:	4b08      	ldr	r3, [pc, #32]	@ (8007744 <osKernelStart+0x2c>)
 8007722:	681a      	ldr	r2, [r3, #0]
 8007724:	2a01      	cmp	r2, #1
 8007726:	d10a      	bne.n	800773e <osKernelStart+0x26>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007728:	4a07      	ldr	r2, [pc, #28]	@ (8007748 <osKernelStart+0x30>)
 800772a:	77d4      	strb	r4, [r2, #31]
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800772c:	2202      	movs	r2, #2
 800772e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007730:	f001 fb74 	bl	8008e1c <vTaskStartScheduler>
      stat = osOK;
 8007734:	4620      	mov	r0, r4
      stat = osError;
    }
  }

  return (stat);
}
 8007736:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 8007738:	f06f 0005 	mvn.w	r0, #5
 800773c:	e7fb      	b.n	8007736 <osKernelStart+0x1e>
      stat = osError;
 800773e:	f04f 30ff 	mov.w	r0, #4294967295
  return (stat);
 8007742:	e7f8      	b.n	8007736 <osKernelStart+0x1e>
 8007744:	200048b4 	.word	0x200048b4
 8007748:	e000ed00 	.word	0xe000ed00

0800774c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800774c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800774e:	b087      	sub	sp, #28
 8007750:	4614      	mov	r4, r2
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007752:	2200      	movs	r2, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007754:	460b      	mov	r3, r1
  hTask = NULL;
 8007756:	9205      	str	r2, [sp, #20]
 8007758:	f3ef 8205 	mrs	r2, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 800775c:	b9ca      	cbnz	r2, 8007792 <osThreadNew+0x46>
 800775e:	b1c0      	cbz	r0, 8007792 <osThreadNew+0x46>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 8007760:	b36c      	cbz	r4, 80077be <osThreadNew+0x72>
      if (attr->name != NULL) {
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 8007762:	69a5      	ldr	r5, [r4, #24]
 8007764:	2d00      	cmp	r5, #0
 8007766:	bf08      	it	eq
 8007768:	2518      	moveq	r5, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800776a:	1e69      	subs	r1, r5, #1
 800776c:	2937      	cmp	r1, #55	@ 0x37
 800776e:	46ac      	mov	ip, r5
 8007770:	d82a      	bhi.n	80077c8 <osThreadNew+0x7c>
 8007772:	6861      	ldr	r1, [r4, #4]
 8007774:	07c9      	lsls	r1, r1, #31
 8007776:	d427      	bmi.n	80077c8 <osThreadNew+0x7c>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 8007778:	6966      	ldr	r6, [r4, #20]
 800777a:	b16e      	cbz	r6, 8007798 <osThreadNew+0x4c>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800777c:	08b2      	lsrs	r2, r6, #2
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800777e:	e9d4 7e02 	ldrd	r7, lr, [r4, #8]
      if (attr->name != NULL) {
 8007782:	6821      	ldr	r1, [r4, #0]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007784:	b157      	cbz	r7, 800779c <osThreadNew+0x50>
 8007786:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 800778a:	d902      	bls.n	8007792 <osThreadNew+0x46>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800778c:	6924      	ldr	r4, [r4, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800778e:	b104      	cbz	r4, 8007792 <osThreadNew+0x46>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007790:	b9e6      	cbnz	r6, 80077cc <osThreadNew+0x80>
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007792:	9805      	ldr	r0, [sp, #20]
}
 8007794:	b007      	add	sp, #28
 8007796:	bdf0      	pop	{r4, r5, r6, r7, pc}
    stack = configMINIMAL_STACK_SIZE;
 8007798:	2280      	movs	r2, #128	@ 0x80
 800779a:	e7f0      	b.n	800777e <osThreadNew+0x32>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800779c:	f1be 0f00 	cmp.w	lr, #0
 80077a0:	d1f7      	bne.n	8007792 <osThreadNew+0x46>
      if (mem == 0) {
 80077a2:	6924      	ldr	r4, [r4, #16]
 80077a4:	2c00      	cmp	r4, #0
 80077a6:	d1f4      	bne.n	8007792 <osThreadNew+0x46>
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80077a8:	ac05      	add	r4, sp, #20
 80077aa:	e9cd c400 	strd	ip, r4, [sp]
 80077ae:	b292      	uxth	r2, r2
 80077b0:	f001 fb05 	bl	8008dbe <xTaskCreate>
 80077b4:	2801      	cmp	r0, #1
            hTask = NULL;
 80077b6:	bf1c      	itt	ne
 80077b8:	2300      	movne	r3, #0
 80077ba:	9305      	strne	r3, [sp, #20]
 80077bc:	e7e9      	b.n	8007792 <osThreadNew+0x46>
    name = NULL;
 80077be:	4621      	mov	r1, r4
    prio  = (UBaseType_t)osPriorityNormal;
 80077c0:	f04f 0c18 	mov.w	ip, #24
    stack = configMINIMAL_STACK_SIZE;
 80077c4:	2280      	movs	r2, #128	@ 0x80
 80077c6:	e7ef      	b.n	80077a8 <osThreadNew+0x5c>
        return (NULL);
 80077c8:	4610      	mov	r0, r2
 80077ca:	e7e3      	b.n	8007794 <osThreadNew+0x48>
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80077cc:	e9cd 4701 	strd	r4, r7, [sp, #4]
 80077d0:	9500      	str	r5, [sp, #0]
 80077d2:	f001 fabc 	bl	8008d4e <xTaskCreateStatic>
 80077d6:	9005      	str	r0, [sp, #20]
 80077d8:	e7db      	b.n	8007792 <osThreadNew+0x46>

080077da <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80077da:	b508      	push	{r3, lr}
 80077dc:	f3ef 8205 	mrs	r2, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 80077e0:	b922      	cbnz	r2, 80077ec <osDelay+0x12>
    stat = osErrorISR;
  }
  else {
    stat = osOK;

    if (ticks != 0U) {
 80077e2:	b108      	cbz	r0, 80077e8 <osDelay+0xe>
      vTaskDelay(ticks);
 80077e4:	f001 fc78 	bl	80090d8 <vTaskDelay>
    stat = osOK;
 80077e8:	2000      	movs	r0, #0
    }
  }

  return (stat);
}
 80077ea:	bd08      	pop	{r3, pc}
    stat = osErrorISR;
 80077ec:	f06f 0005 	mvn.w	r0, #5
  return (stat);
 80077f0:	e7fb      	b.n	80077ea <osDelay+0x10>

080077f2 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80077f2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80077f4:	4604      	mov	r4, r0
 80077f6:	460e      	mov	r6, r1
 80077f8:	4615      	mov	r5, r2
 80077fa:	f3ef 8205 	mrs	r2, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80077fe:	b942      	cbnz	r2, 8007812 <osSemaphoreNew+0x20>
 8007800:	b138      	cbz	r0, 8007812 <osSemaphoreNew+0x20>
 8007802:	4288      	cmp	r0, r1
 8007804:	d305      	bcc.n	8007812 <osSemaphoreNew+0x20>
    mem = -1;

    if (attr != NULL) {
 8007806:	b155      	cbz	r5, 800781e <osSemaphoreNew+0x2c>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8007808:	e9d5 3702 	ldrd	r3, r7, [r5, #8]
 800780c:	b12b      	cbz	r3, 800781a <osSemaphoreNew+0x28>
 800780e:	2f4f      	cmp	r7, #79	@ 0x4f
 8007810:	d822      	bhi.n	8007858 <osSemaphoreNew+0x66>
  hSemaphore = NULL;
 8007812:	2400      	movs	r4, #0
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
 8007814:	4620      	mov	r0, r4
 8007816:	b003      	add	sp, #12
 8007818:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800781a:	2f00      	cmp	r7, #0
 800781c:	d1f9      	bne.n	8007812 <osSemaphoreNew+0x20>
      if (max_count == 1U) {
 800781e:	2c01      	cmp	r4, #1
 8007820:	d00c      	beq.n	800783c <osSemaphoreNew+0x4a>
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8007822:	4620      	mov	r0, r4
 8007824:	4631      	mov	r1, r6
 8007826:	f000 fd87 	bl	8008338 <xQueueCreateCountingSemaphore>
      if (hSemaphore != NULL) {
 800782a:	4604      	mov	r4, r0
 800782c:	2800      	cmp	r0, #0
 800782e:	d0f0      	beq.n	8007812 <osSemaphoreNew+0x20>
        if (attr != NULL) {
 8007830:	b985      	cbnz	r5, 8007854 <osSemaphoreNew+0x62>
        vQueueAddToRegistry (hSemaphore, name);
 8007832:	4629      	mov	r1, r5
 8007834:	4620      	mov	r0, r4
 8007836:	f001 f8c5 	bl	80089c4 <vQueueAddToRegistry>
  return ((osSemaphoreId_t)hSemaphore);
 800783a:	e7eb      	b.n	8007814 <osSemaphoreNew+0x22>
            hSemaphore = xSemaphoreCreateBinary();
 800783c:	2203      	movs	r2, #3
 800783e:	2100      	movs	r1, #0
 8007840:	2001      	movs	r0, #1
 8007842:	f000 fd30 	bl	80082a6 <xQueueGenericCreate>
 8007846:	e00e      	b.n	8007866 <osSemaphoreNew+0x74>
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8007848:	461a      	mov	r2, r3
 800784a:	f000 fd53 	bl	80082f4 <xQueueCreateCountingSemaphoreStatic>
      if (hSemaphore != NULL) {
 800784e:	4604      	mov	r4, r0
 8007850:	2800      	cmp	r0, #0
 8007852:	d0de      	beq.n	8007812 <osSemaphoreNew+0x20>
          name = attr->name;
 8007854:	682d      	ldr	r5, [r5, #0]
 8007856:	e7ec      	b.n	8007832 <osSemaphoreNew+0x40>
      if (max_count == 1U) {
 8007858:	2801      	cmp	r0, #1
 800785a:	d1f5      	bne.n	8007848 <osSemaphoreNew+0x56>
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800785c:	2103      	movs	r1, #3
 800785e:	9100      	str	r1, [sp, #0]
 8007860:	4611      	mov	r1, r2
 8007862:	f000 fcd2 	bl	800820a <xQueueGenericCreateStatic>
            hSemaphore = xSemaphoreCreateBinary();
 8007866:	4604      	mov	r4, r0
        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8007868:	2800      	cmp	r0, #0
 800786a:	d0d2      	beq.n	8007812 <osSemaphoreNew+0x20>
 800786c:	2e00      	cmp	r6, #0
 800786e:	d0df      	beq.n	8007830 <osSemaphoreNew+0x3e>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8007870:	2300      	movs	r3, #0
 8007872:	461a      	mov	r2, r3
 8007874:	4619      	mov	r1, r3
 8007876:	f000 fd7d 	bl	8008374 <xQueueGenericSend>
 800787a:	2801      	cmp	r0, #1
 800787c:	d0d8      	beq.n	8007830 <osSemaphoreNew+0x3e>
            vSemaphoreDelete (hSemaphore);
 800787e:	4620      	mov	r0, r4
 8007880:	f001 f8ca 	bl	8008a18 <vQueueDelete>
      if (hSemaphore != NULL) {
 8007884:	e7c5      	b.n	8007812 <osSemaphoreNew+0x20>

08007886 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8007886:	b513      	push	{r0, r1, r4, lr}
 8007888:	460c      	mov	r4, r1
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 800788a:	b328      	cbz	r0, 80078d8 <osSemaphoreAcquire+0x52>
 800788c:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 8007890:	b1cb      	cbz	r3, 80078c6 <osSemaphoreAcquire+0x40>
    if (timeout != 0U) {
 8007892:	bb09      	cbnz	r1, 80078d8 <osSemaphoreAcquire+0x52>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8007894:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 8007896:	9101      	str	r1, [sp, #4]
      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8007898:	f001 f827 	bl	80088ea <xQueueReceiveFromISR>
 800789c:	2801      	cmp	r0, #1
 800789e:	d003      	beq.n	80078a8 <osSemaphoreAcquire+0x22>
        stat = osErrorResource;
 80078a0:	f06f 0002 	mvn.w	r0, #2
      }
    }
  }

  return (stat);
}
 80078a4:	b002      	add	sp, #8
 80078a6:	bd10      	pop	{r4, pc}
        portYIELD_FROM_ISR (yield);
 80078a8:	9b01      	ldr	r3, [sp, #4]
 80078aa:	b90b      	cbnz	r3, 80078b0 <osSemaphoreAcquire+0x2a>
  stat = osOK;
 80078ac:	2000      	movs	r0, #0
 80078ae:	e7f9      	b.n	80078a4 <osSemaphoreAcquire+0x1e>
        portYIELD_FROM_ISR (yield);
 80078b0:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80078b4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80078b8:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80078bc:	f3bf 8f4f 	dsb	sy
 80078c0:	f3bf 8f6f 	isb	sy
 80078c4:	e7f2      	b.n	80078ac <osSemaphoreAcquire+0x26>
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80078c6:	f000 ff53 	bl	8008770 <xQueueSemaphoreTake>
 80078ca:	2801      	cmp	r0, #1
 80078cc:	d0ee      	beq.n	80078ac <osSemaphoreAcquire+0x26>
      if (timeout != 0U) {
 80078ce:	2c00      	cmp	r4, #0
 80078d0:	d0e6      	beq.n	80078a0 <osSemaphoreAcquire+0x1a>
        stat = osErrorTimeout;
 80078d2:	f06f 0001 	mvn.w	r0, #1
 80078d6:	e7e5      	b.n	80078a4 <osSemaphoreAcquire+0x1e>
    stat = osErrorParameter;
 80078d8:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 80078dc:	e7e2      	b.n	80078a4 <osSemaphoreAcquire+0x1e>

080078de <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80078de:	b507      	push	{r0, r1, r2, lr}
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 80078e0:	b318      	cbz	r0, 800792a <osSemaphoreRelease+0x4c>
 80078e2:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 80078e6:	b1cb      	cbz	r3, 800791c <osSemaphoreRelease+0x3e>
    yield = pdFALSE;
 80078e8:	2300      	movs	r3, #0

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80078ea:	a901      	add	r1, sp, #4
    yield = pdFALSE;
 80078ec:	9301      	str	r3, [sp, #4]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80078ee:	f000 fe50 	bl	8008592 <xQueueGiveFromISR>
 80078f2:	2801      	cmp	r0, #1
 80078f4:	d004      	beq.n	8007900 <osSemaphoreRelease+0x22>
      portYIELD_FROM_ISR (yield);
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
      stat = osErrorResource;
 80078f6:	f06f 0002 	mvn.w	r0, #2
    }
  }

  return (stat);
}
 80078fa:	b003      	add	sp, #12
 80078fc:	f85d fb04 	ldr.w	pc, [sp], #4
      portYIELD_FROM_ISR (yield);
 8007900:	9b01      	ldr	r3, [sp, #4]
 8007902:	b14b      	cbz	r3, 8007918 <osSemaphoreRelease+0x3a>
 8007904:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8007908:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800790c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8007910:	f3bf 8f4f 	dsb	sy
 8007914:	f3bf 8f6f 	isb	sy
  stat = osOK;
 8007918:	2000      	movs	r0, #0
 800791a:	e7ee      	b.n	80078fa <osSemaphoreRelease+0x1c>
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800791c:	461a      	mov	r2, r3
 800791e:	4619      	mov	r1, r3
 8007920:	f000 fd28 	bl	8008374 <xQueueGenericSend>
 8007924:	2801      	cmp	r0, #1
 8007926:	d0f7      	beq.n	8007918 <osSemaphoreRelease+0x3a>
 8007928:	e7e5      	b.n	80078f6 <osSemaphoreRelease+0x18>
    stat = osErrorParameter;
 800792a:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800792e:	e7e4      	b.n	80078fa <osSemaphoreRelease+0x1c>

08007930 <osSemaphoreGetCount>:

uint32_t osSemaphoreGetCount (osSemaphoreId_t semaphore_id) {
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
  uint32_t count;

  if (hSemaphore == NULL) {
 8007930:	b130      	cbz	r0, 8007940 <osSemaphoreGetCount+0x10>
 8007932:	f3ef 8305 	mrs	r3, IPSR
    count = 0U;
  }
  else if (IS_IRQ()) {
 8007936:	b10b      	cbz	r3, 800793c <osSemaphoreGetCount+0xc>
    count = uxQueueMessagesWaitingFromISR (hSemaphore);
 8007938:	f001 b837 	b.w	80089aa <uxQueueMessagesWaitingFromISR>
  } else {
    count = (uint32_t)uxSemaphoreGetCount (hSemaphore);
 800793c:	f001 b822 	b.w	8008984 <uxQueueMessagesWaiting>
  }

  return (count);
}
 8007940:	4770      	bx	lr

08007942 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8007942:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007944:	4605      	mov	r5, r0
 8007946:	460e      	mov	r6, r1
 8007948:	4614      	mov	r4, r2
 800794a:	f3ef 8705 	mrs	r7, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800794e:	b11f      	cbz	r7, 8007958 <osMessageQueueNew+0x16>
  hQueue = NULL;
 8007950:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 8007952:	4628      	mov	r0, r5
 8007954:	b003      	add	sp, #12
 8007956:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8007958:	2800      	cmp	r0, #0
 800795a:	d0f9      	beq.n	8007950 <osMessageQueueNew+0xe>
 800795c:	2900      	cmp	r1, #0
 800795e:	d0f7      	beq.n	8007950 <osMessageQueueNew+0xe>
    if (attr != NULL) {
 8007960:	b1da      	cbz	r2, 800799a <osMessageQueueNew+0x58>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8007962:	e9d2 3202 	ldrd	r3, r2, [r2, #8]
 8007966:	b183      	cbz	r3, 800798a <osMessageQueueNew+0x48>
 8007968:	2a4f      	cmp	r2, #79	@ 0x4f
 800796a:	d9f1      	bls.n	8007950 <osMessageQueueNew+0xe>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800796c:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800796e:	2a00      	cmp	r2, #0
 8007970:	d0ee      	beq.n	8007950 <osMessageQueueNew+0xe>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8007972:	6966      	ldr	r6, [r4, #20]
 8007974:	434d      	muls	r5, r1
 8007976:	42ae      	cmp	r6, r5
 8007978:	d3ea      	bcc.n	8007950 <osMessageQueueNew+0xe>
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800797a:	9700      	str	r7, [sp, #0]
 800797c:	f000 fc45 	bl	800820a <xQueueGenericCreateStatic>
    if (hQueue != NULL) {
 8007980:	4605      	mov	r5, r0
 8007982:	2800      	cmp	r0, #0
 8007984:	d0e4      	beq.n	8007950 <osMessageQueueNew+0xe>
        name = attr->name;
 8007986:	6824      	ldr	r4, [r4, #0]
 8007988:	e011      	b.n	80079ae <osMessageQueueNew+0x6c>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800798a:	2a00      	cmp	r2, #0
 800798c:	d1e0      	bne.n	8007950 <osMessageQueueNew+0xe>
 800798e:	6923      	ldr	r3, [r4, #16]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d1dd      	bne.n	8007950 <osMessageQueueNew+0xe>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8007994:	6963      	ldr	r3, [r4, #20]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d1da      	bne.n	8007950 <osMessageQueueNew+0xe>
          hQueue = xQueueCreate (msg_count, msg_size);
 800799a:	4628      	mov	r0, r5
 800799c:	2200      	movs	r2, #0
 800799e:	4631      	mov	r1, r6
 80079a0:	f000 fc81 	bl	80082a6 <xQueueGenericCreate>
    if (hQueue != NULL) {
 80079a4:	4605      	mov	r5, r0
 80079a6:	2800      	cmp	r0, #0
 80079a8:	d0d2      	beq.n	8007950 <osMessageQueueNew+0xe>
      if (attr != NULL) {
 80079aa:	2c00      	cmp	r4, #0
 80079ac:	d1eb      	bne.n	8007986 <osMessageQueueNew+0x44>
      vQueueAddToRegistry (hQueue, name);
 80079ae:	4621      	mov	r1, r4
 80079b0:	4628      	mov	r0, r5
 80079b2:	f001 f807 	bl	80089c4 <vQueueAddToRegistry>
  return ((osMessageQueueId_t)hQueue);
 80079b6:	e7cc      	b.n	8007952 <osMessageQueueNew+0x10>

080079b8 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80079b8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80079ba:	461c      	mov	r4, r3
 80079bc:	f3ef 8605 	mrs	r6, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 80079c0:	b1de      	cbz	r6, 80079fa <osMessageQueuePut+0x42>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80079c2:	b338      	cbz	r0, 8007a14 <osMessageQueuePut+0x5c>
 80079c4:	b331      	cbz	r1, 8007a14 <osMessageQueuePut+0x5c>
 80079c6:	bb2b      	cbnz	r3, 8007a14 <osMessageQueuePut+0x5c>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80079c8:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 80079ca:	9301      	str	r3, [sp, #4]
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80079cc:	f000 fd84 	bl	80084d8 <xQueueGenericSendFromISR>
 80079d0:	2801      	cmp	r0, #1
 80079d2:	d003      	beq.n	80079dc <osMessageQueuePut+0x24>
        stat = osErrorResource;
 80079d4:	f06f 0002 	mvn.w	r0, #2
      }
    }
  }

  return (stat);
}
 80079d8:	b002      	add	sp, #8
 80079da:	bd70      	pop	{r4, r5, r6, pc}
        portYIELD_FROM_ISR (yield);
 80079dc:	9b01      	ldr	r3, [sp, #4]
 80079de:	b90b      	cbnz	r3, 80079e4 <osMessageQueuePut+0x2c>
  stat = osOK;
 80079e0:	2000      	movs	r0, #0
 80079e2:	e7f9      	b.n	80079d8 <osMessageQueuePut+0x20>
        portYIELD_FROM_ISR (yield);
 80079e4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80079e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80079ec:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80079f0:	f3bf 8f4f 	dsb	sy
 80079f4:	f3bf 8f6f 	isb	sy
 80079f8:	e7f2      	b.n	80079e0 <osMessageQueuePut+0x28>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80079fa:	b158      	cbz	r0, 8007a14 <osMessageQueuePut+0x5c>
 80079fc:	b151      	cbz	r1, 8007a14 <osMessageQueuePut+0x5c>
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80079fe:	4633      	mov	r3, r6
 8007a00:	4622      	mov	r2, r4
 8007a02:	f000 fcb7 	bl	8008374 <xQueueGenericSend>
 8007a06:	2801      	cmp	r0, #1
 8007a08:	d0ea      	beq.n	80079e0 <osMessageQueuePut+0x28>
        if (timeout != 0U) {
 8007a0a:	2c00      	cmp	r4, #0
 8007a0c:	d0e2      	beq.n	80079d4 <osMessageQueuePut+0x1c>
          stat = osErrorTimeout;
 8007a0e:	f06f 0001 	mvn.w	r0, #1
 8007a12:	e7e1      	b.n	80079d8 <osMessageQueuePut+0x20>
      stat = osErrorParameter;
 8007a14:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 8007a18:	e7de      	b.n	80079d8 <osMessageQueuePut+0x20>

08007a1a <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8007a1a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007a1c:	461c      	mov	r4, r3
 8007a1e:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 8007a22:	b1db      	cbz	r3, 8007a5c <osMessageQueueGet+0x42>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007a24:	b330      	cbz	r0, 8007a74 <osMessageQueueGet+0x5a>
 8007a26:	b329      	cbz	r1, 8007a74 <osMessageQueueGet+0x5a>
 8007a28:	bb24      	cbnz	r4, 8007a74 <osMessageQueueGet+0x5a>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8007a2a:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 8007a2c:	9401      	str	r4, [sp, #4]
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8007a2e:	f000 ff5c 	bl	80088ea <xQueueReceiveFromISR>
 8007a32:	2801      	cmp	r0, #1
 8007a34:	d003      	beq.n	8007a3e <osMessageQueueGet+0x24>
        stat = osErrorResource;
 8007a36:	f06f 0002 	mvn.w	r0, #2
      }
    }
  }

  return (stat);
}
 8007a3a:	b003      	add	sp, #12
 8007a3c:	bd30      	pop	{r4, r5, pc}
        portYIELD_FROM_ISR (yield);
 8007a3e:	9b01      	ldr	r3, [sp, #4]
 8007a40:	b90b      	cbnz	r3, 8007a46 <osMessageQueueGet+0x2c>
  stat = osOK;
 8007a42:	2000      	movs	r0, #0
 8007a44:	e7f9      	b.n	8007a3a <osMessageQueueGet+0x20>
        portYIELD_FROM_ISR (yield);
 8007a46:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8007a4a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007a4e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8007a52:	f3bf 8f4f 	dsb	sy
 8007a56:	f3bf 8f6f 	isb	sy
 8007a5a:	e7f2      	b.n	8007a42 <osMessageQueueGet+0x28>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8007a5c:	b150      	cbz	r0, 8007a74 <osMessageQueueGet+0x5a>
 8007a5e:	b149      	cbz	r1, 8007a74 <osMessageQueueGet+0x5a>
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8007a60:	4622      	mov	r2, r4
 8007a62:	f000 fde7 	bl	8008634 <xQueueReceive>
 8007a66:	2801      	cmp	r0, #1
 8007a68:	d0eb      	beq.n	8007a42 <osMessageQueueGet+0x28>
        if (timeout != 0U) {
 8007a6a:	2c00      	cmp	r4, #0
 8007a6c:	d0e3      	beq.n	8007a36 <osMessageQueueGet+0x1c>
          stat = osErrorTimeout;
 8007a6e:	f06f 0001 	mvn.w	r0, #1
 8007a72:	e7e2      	b.n	8007a3a <osMessageQueueGet+0x20>
      stat = osErrorParameter;
 8007a74:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 8007a78:	e7df      	b.n	8007a3a <osMessageQueueGet+0x20>

08007a7a <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8007a7a:	f7ff bf59 	b.w	8007930 <osSemaphoreGetCount>
	...

08007a80 <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007a80:	4b03      	ldr	r3, [pc, #12]	@ (8007a90 <vApplicationGetIdleTaskMemory+0x10>)
 8007a82:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007a84:	4b03      	ldr	r3, [pc, #12]	@ (8007a94 <vApplicationGetIdleTaskMemory+0x14>)
 8007a86:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007a88:	2380      	movs	r3, #128	@ 0x80
 8007a8a:	6013      	str	r3, [r2, #0]
}
 8007a8c:	4770      	bx	lr
 8007a8e:	bf00      	nop
 8007a90:	20004854 	.word	0x20004854
 8007a94:	20004654 	.word	0x20004654

08007a98 <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007a98:	4b03      	ldr	r3, [pc, #12]	@ (8007aa8 <vApplicationGetTimerTaskMemory+0x10>)
 8007a9a:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007a9c:	4b03      	ldr	r3, [pc, #12]	@ (8007aac <vApplicationGetTimerTaskMemory+0x14>)
 8007a9e:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007aa0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007aa4:	6013      	str	r3, [r2, #0]
}
 8007aa6:	4770      	bx	lr
 8007aa8:	200045f4 	.word	0x200045f4
 8007aac:	200041f4 	.word	0x200041f4

08007ab0 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007ab0:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007ab2:	4b10      	ldr	r3, [pc, #64]	@ (8007af4 <prvInsertBlockIntoFreeList+0x44>)
 8007ab4:	461a      	mov	r2, r3
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	4283      	cmp	r3, r0
 8007aba:	d3fb      	bcc.n	8007ab4 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007abc:	6854      	ldr	r4, [r2, #4]
 8007abe:	1911      	adds	r1, r2, r4
 8007ac0:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007ac2:	bf01      	itttt	eq
 8007ac4:	6841      	ldreq	r1, [r0, #4]
 8007ac6:	4610      	moveq	r0, r2
 8007ac8:	1909      	addeq	r1, r1, r4
 8007aca:	6051      	streq	r1, [r2, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007acc:	6844      	ldr	r4, [r0, #4]
 8007ace:	1901      	adds	r1, r0, r4
 8007ad0:	428b      	cmp	r3, r1
 8007ad2:	d10c      	bne.n	8007aee <prvInsertBlockIntoFreeList+0x3e>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007ad4:	4908      	ldr	r1, [pc, #32]	@ (8007af8 <prvInsertBlockIntoFreeList+0x48>)
 8007ad6:	6809      	ldr	r1, [r1, #0]
 8007ad8:	428b      	cmp	r3, r1
 8007ada:	d003      	beq.n	8007ae4 <prvInsertBlockIntoFreeList+0x34>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007adc:	6859      	ldr	r1, [r3, #4]
 8007ade:	4421      	add	r1, r4
 8007ae0:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007ae2:	6819      	ldr	r1, [r3, #0]
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007ae4:	6001      	str	r1, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007ae6:	4290      	cmp	r0, r2
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007ae8:	bf18      	it	ne
 8007aea:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007aec:	bd10      	pop	{r4, pc}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007aee:	4619      	mov	r1, r3
 8007af0:	e7f8      	b.n	8007ae4 <prvInsertBlockIntoFreeList+0x34>
 8007af2:	bf00      	nop
 8007af4:	200048d0 	.word	0x200048d0
 8007af8:	200048cc 	.word	0x200048cc

08007afc <pvPortMalloc>:
{
 8007afc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b00:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8007b02:	f001 f9d1 	bl	8008ea8 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8007b06:	4942      	ldr	r1, [pc, #264]	@ (8007c10 <pvPortMalloc+0x114>)
 8007b08:	4d42      	ldr	r5, [pc, #264]	@ (8007c14 <pvPortMalloc+0x118>)
 8007b0a:	680b      	ldr	r3, [r1, #0]
 8007b0c:	bb0b      	cbnz	r3, 8007b52 <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 8007b0e:	4a42      	ldr	r2, [pc, #264]	@ (8007c18 <pvPortMalloc+0x11c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007b10:	0756      	lsls	r6, r2, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007b12:	bf1f      	itttt	ne
 8007b14:	1dd0      	addne	r0, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007b16:	f020 0007 	bicne.w	r0, r0, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007b1a:	f502 3280 	addne.w	r2, r2, #65536	@ 0x10000
 8007b1e:	1a13      	subne	r3, r2, r0
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007b20:	bf0c      	ite	eq
 8007b22:	f44f 3380 	moveq.w	r3, #65536	@ 0x10000
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007b26:	4602      	movne	r2, r0
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007b28:	4413      	add	r3, r2
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007b2a:	4e3c      	ldr	r6, [pc, #240]	@ (8007c1c <pvPortMalloc+0x120>)
	uxAddress -= xHeapStructSize;
 8007b2c:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007b2e:	f023 0307 	bic.w	r3, r3, #7
	xStart.xBlockSize = ( size_t ) 0;
 8007b32:	2000      	movs	r0, #0
 8007b34:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007b36:	6032      	str	r2, [r6, #0]
	pxEnd->pxNextFreeBlock = NULL;
 8007b38:	e9c3 0000 	strd	r0, r0, [r3]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007b3c:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007b3e:	e9c2 3000 	strd	r3, r0, [r2]
	pxEnd = ( void * ) uxAddress;
 8007b42:	600b      	str	r3, [r1, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007b44:	4b36      	ldr	r3, [pc, #216]	@ (8007c20 <pvPortMalloc+0x124>)
 8007b46:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007b48:	4b36      	ldr	r3, [pc, #216]	@ (8007c24 <pvPortMalloc+0x128>)
 8007b4a:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007b4c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8007b50:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007b52:	682e      	ldr	r6, [r5, #0]
 8007b54:	4226      	tst	r6, r4
 8007b56:	d155      	bne.n	8007c04 <pvPortMalloc+0x108>
			if( xWantedSize > 0 )
 8007b58:	2c00      	cmp	r4, #0
 8007b5a:	d046      	beq.n	8007bea <pvPortMalloc+0xee>
				xWantedSize += xHeapStructSize;
 8007b5c:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007b60:	0760      	lsls	r0, r4, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007b62:	bf1c      	itt	ne
 8007b64:	f023 0307 	bicne.w	r3, r3, #7
 8007b68:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d04a      	beq.n	8007c04 <pvPortMalloc+0x108>
 8007b6e:	4f2d      	ldr	r7, [pc, #180]	@ (8007c24 <pvPortMalloc+0x128>)
 8007b70:	683c      	ldr	r4, [r7, #0]
 8007b72:	429c      	cmp	r4, r3
 8007b74:	d346      	bcc.n	8007c04 <pvPortMalloc+0x108>
				pxBlock = xStart.pxNextFreeBlock;
 8007b76:	4a29      	ldr	r2, [pc, #164]	@ (8007c1c <pvPortMalloc+0x120>)
 8007b78:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007b7a:	6868      	ldr	r0, [r5, #4]
 8007b7c:	4298      	cmp	r0, r3
 8007b7e:	d204      	bcs.n	8007b8a <pvPortMalloc+0x8e>
 8007b80:	f8d5 c000 	ldr.w	ip, [r5]
 8007b84:	f1bc 0f00 	cmp.w	ip, #0
 8007b88:	d115      	bne.n	8007bb6 <pvPortMalloc+0xba>
				if( pxBlock != pxEnd )
 8007b8a:	6809      	ldr	r1, [r1, #0]
 8007b8c:	42a9      	cmp	r1, r5
 8007b8e:	d039      	beq.n	8007c04 <pvPortMalloc+0x108>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007b90:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007b92:	f8d2 8000 	ldr.w	r8, [r2]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007b96:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007b98:	1ac2      	subs	r2, r0, r3
 8007b9a:	2a10      	cmp	r2, #16
 8007b9c:	d912      	bls.n	8007bc4 <pvPortMalloc+0xc8>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007b9e:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007ba0:	0741      	lsls	r1, r0, #29
 8007ba2:	d00b      	beq.n	8007bbc <pvPortMalloc+0xc0>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007ba4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ba8:	f383 8811 	msr	BASEPRI, r3
 8007bac:	f3bf 8f6f 	isb	sy
 8007bb0:	f3bf 8f4f 	dsb	sy
 8007bb4:	e7fe      	b.n	8007bb4 <pvPortMalloc+0xb8>
 8007bb6:	462a      	mov	r2, r5
 8007bb8:	4665      	mov	r5, ip
 8007bba:	e7de      	b.n	8007b7a <pvPortMalloc+0x7e>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007bbc:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007bbe:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007bc0:	f7ff ff76 	bl	8007ab0 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007bc4:	686a      	ldr	r2, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007bc6:	4916      	ldr	r1, [pc, #88]	@ (8007c20 <pvPortMalloc+0x124>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007bc8:	1aa4      	subs	r4, r4, r2
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007bca:	4316      	orrs	r6, r2
					xNumberOfSuccessfulAllocations++;
 8007bcc:	4a16      	ldr	r2, [pc, #88]	@ (8007c28 <pvPortMalloc+0x12c>)
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007bce:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007bd0:	603c      	str	r4, [r7, #0]
					pxBlock->pxNextFreeBlock = NULL;
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	602b      	str	r3, [r5, #0]
					xNumberOfSuccessfulAllocations++;
 8007bd6:	6813      	ldr	r3, [r2, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007bd8:	606e      	str	r6, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007bda:	4284      	cmp	r4, r0
					xNumberOfSuccessfulAllocations++;
 8007bdc:	f103 0301 	add.w	r3, r3, #1
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007be0:	bf38      	it	cc
 8007be2:	600c      	strcc	r4, [r1, #0]
					xNumberOfSuccessfulAllocations++;
 8007be4:	6013      	str	r3, [r2, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007be6:	f108 0408 	add.w	r4, r8, #8
	( void ) xTaskResumeAll();
 8007bea:	f001 fa01 	bl	8008ff0 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007bee:	0763      	lsls	r3, r4, #29
 8007bf0:	d00a      	beq.n	8007c08 <pvPortMalloc+0x10c>
 8007bf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bf6:	f383 8811 	msr	BASEPRI, r3
 8007bfa:	f3bf 8f6f 	isb	sy
 8007bfe:	f3bf 8f4f 	dsb	sy
 8007c02:	e7fe      	b.n	8007c02 <pvPortMalloc+0x106>
void *pvReturn = NULL;
 8007c04:	2400      	movs	r4, #0
 8007c06:	e7f0      	b.n	8007bea <pvPortMalloc+0xee>
}
 8007c08:	4620      	mov	r0, r4
 8007c0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c0e:	bf00      	nop
 8007c10:	200048cc 	.word	0x200048cc
 8007c14:	200048b8 	.word	0x200048b8
 8007c18:	200048d8 	.word	0x200048d8
 8007c1c:	200048d0 	.word	0x200048d0
 8007c20:	200048c4 	.word	0x200048c4
 8007c24:	200048c8 	.word	0x200048c8
 8007c28:	200048c0 	.word	0x200048c0

08007c2c <vPortFree>:
{
 8007c2c:	b510      	push	{r4, lr}
	if( pv != NULL )
 8007c2e:	4604      	mov	r4, r0
 8007c30:	b390      	cbz	r0, 8007c98 <vPortFree+0x6c>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007c32:	4a1a      	ldr	r2, [pc, #104]	@ (8007c9c <vPortFree+0x70>)
 8007c34:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8007c38:	6812      	ldr	r2, [r2, #0]
 8007c3a:	4213      	tst	r3, r2
 8007c3c:	d108      	bne.n	8007c50 <vPortFree+0x24>
 8007c3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c42:	f383 8811 	msr	BASEPRI, r3
 8007c46:	f3bf 8f6f 	isb	sy
 8007c4a:	f3bf 8f4f 	dsb	sy
 8007c4e:	e7fe      	b.n	8007c4e <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007c50:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8007c54:	b141      	cbz	r1, 8007c68 <vPortFree+0x3c>
 8007c56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c5a:	f383 8811 	msr	BASEPRI, r3
 8007c5e:	f3bf 8f6f 	isb	sy
 8007c62:	f3bf 8f4f 	dsb	sy
 8007c66:	e7fe      	b.n	8007c66 <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007c68:	ea23 0302 	bic.w	r3, r3, r2
 8007c6c:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8007c70:	f001 f91a 	bl	8008ea8 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007c74:	4a0a      	ldr	r2, [pc, #40]	@ (8007ca0 <vPortFree+0x74>)
 8007c76:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8007c7a:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007c7c:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007c80:	440b      	add	r3, r1
 8007c82:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007c84:	f7ff ff14 	bl	8007ab0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007c88:	4a06      	ldr	r2, [pc, #24]	@ (8007ca4 <vPortFree+0x78>)
 8007c8a:	6813      	ldr	r3, [r2, #0]
}
 8007c8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
					xNumberOfSuccessfulFrees++;
 8007c90:	3301      	adds	r3, #1
 8007c92:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 8007c94:	f001 b9ac 	b.w	8008ff0 <xTaskResumeAll>
}
 8007c98:	bd10      	pop	{r4, pc}
 8007c9a:	bf00      	nop
 8007c9c:	200048b8 	.word	0x200048b8
 8007ca0:	200048c8 	.word	0x200048c8
 8007ca4:	200048bc 	.word	0x200048bc

08007ca8 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007ca8:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007cac:	f04f 32ff 	mov.w	r2, #4294967295

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007cb0:	e9c0 2302 	strd	r2, r3, [r0, #8]
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007cb4:	6043      	str	r3, [r0, #4]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007cb6:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007cb8:	2300      	movs	r3, #0
 8007cba:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007cbc:	4770      	bx	lr

08007cbe <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007cc2:	4770      	bx	lr

08007cc4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8007cc4:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007cc6:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007cc8:	689a      	ldr	r2, [r3, #8]
 8007cca:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007ccc:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007cce:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8007cd0:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 8007cd2:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8007cd4:	3301      	adds	r3, #1
 8007cd6:	6003      	str	r3, [r0, #0]
}
 8007cd8:	4770      	bx	lr

08007cda <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007cda:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007cdc:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007cde:	1c63      	adds	r3, r4, #1
 8007ce0:	d10a      	bne.n	8007cf8 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007ce2:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007ce4:	685a      	ldr	r2, [r3, #4]
 8007ce6:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007ce8:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007cea:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8007cec:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8007cee:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 8007cf0:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8007cf2:	3301      	adds	r3, #1
 8007cf4:	6003      	str	r3, [r0, #0]
}
 8007cf6:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007cf8:	f100 0208 	add.w	r2, r0, #8
 8007cfc:	4613      	mov	r3, r2
 8007cfe:	6852      	ldr	r2, [r2, #4]
 8007d00:	6815      	ldr	r5, [r2, #0]
 8007d02:	42a5      	cmp	r5, r4
 8007d04:	d9fa      	bls.n	8007cfc <vListInsert+0x22>
 8007d06:	e7ed      	b.n	8007ce4 <vListInsert+0xa>

08007d08 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007d08:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
List_t * const pxList = pxItemToRemove->pxContainer;
 8007d0c:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007d0e:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007d10:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007d12:	6859      	ldr	r1, [r3, #4]
 8007d14:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007d16:	bf08      	it	eq
 8007d18:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8007d1e:	681a      	ldr	r2, [r3, #0]
 8007d20:	3a01      	subs	r2, #1
 8007d22:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007d24:	6818      	ldr	r0, [r3, #0]
}
 8007d26:	4770      	bx	lr

08007d28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007d28:	4808      	ldr	r0, [pc, #32]	@ (8007d4c <prvPortStartFirstTask+0x24>)
 8007d2a:	6800      	ldr	r0, [r0, #0]
 8007d2c:	6800      	ldr	r0, [r0, #0]
 8007d2e:	f380 8808 	msr	MSP, r0
 8007d32:	f04f 0000 	mov.w	r0, #0
 8007d36:	f380 8814 	msr	CONTROL, r0
 8007d3a:	b662      	cpsie	i
 8007d3c:	b661      	cpsie	f
 8007d3e:	f3bf 8f4f 	dsb	sy
 8007d42:	f3bf 8f6f 	isb	sy
 8007d46:	df00      	svc	0
 8007d48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007d4a:	0000      	.short	0x0000
 8007d4c:	e000ed08 	.word	0xe000ed08

08007d50 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007d50:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007d60 <vPortEnableVFP+0x10>
 8007d54:	6801      	ldr	r1, [r0, #0]
 8007d56:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8007d5a:	6001      	str	r1, [r0, #0]
 8007d5c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007d5e:	0000      	.short	0x0000
 8007d60:	e000ed88 	.word	0xe000ed88

08007d64 <prvTaskExitError>:
{
 8007d64:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8007d66:	2300      	movs	r3, #0
 8007d68:	9301      	str	r3, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 8007d6a:	4b0d      	ldr	r3, [pc, #52]	@ (8007da0 <prvTaskExitError+0x3c>)
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	3301      	adds	r3, #1
 8007d70:	d008      	beq.n	8007d84 <prvTaskExitError+0x20>
 8007d72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d76:	f383 8811 	msr	BASEPRI, r3
 8007d7a:	f3bf 8f6f 	isb	sy
 8007d7e:	f3bf 8f4f 	dsb	sy
 8007d82:	e7fe      	b.n	8007d82 <prvTaskExitError+0x1e>
 8007d84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d88:	f383 8811 	msr	BASEPRI, r3
 8007d8c:	f3bf 8f6f 	isb	sy
 8007d90:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 8007d94:	9b01      	ldr	r3, [sp, #4]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d0fc      	beq.n	8007d94 <prvTaskExitError+0x30>
}
 8007d9a:	b002      	add	sp, #8
 8007d9c:	4770      	bx	lr
 8007d9e:	bf00      	nop
 8007da0:	20000080 	.word	0x20000080

08007da4 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007da4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007da8:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007dac:	4b07      	ldr	r3, [pc, #28]	@ (8007dcc <pxPortInitialiseStack+0x28>)
 8007dae:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007db2:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007db6:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007dba:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007dbe:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007dc2:	f840 3c24 	str.w	r3, [r0, #-36]
}
 8007dc6:	3844      	subs	r0, #68	@ 0x44
 8007dc8:	4770      	bx	lr
 8007dca:	bf00      	nop
 8007dcc:	08007d65 	.word	0x08007d65

08007dd0 <SVC_Handler>:
	__asm volatile (
 8007dd0:	4b07      	ldr	r3, [pc, #28]	@ (8007df0 <pxCurrentTCBConst2>)
 8007dd2:	6819      	ldr	r1, [r3, #0]
 8007dd4:	6808      	ldr	r0, [r1, #0]
 8007dd6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dda:	f380 8809 	msr	PSP, r0
 8007dde:	f3bf 8f6f 	isb	sy
 8007de2:	f04f 0000 	mov.w	r0, #0
 8007de6:	f380 8811 	msr	BASEPRI, r0
 8007dea:	4770      	bx	lr
 8007dec:	f3af 8000 	nop.w

08007df0 <pxCurrentTCBConst2>:
 8007df0:	20014e18 	.word	0x20014e18

08007df4 <vPortEnterCritical>:
 8007df4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007df8:	f383 8811 	msr	BASEPRI, r3
 8007dfc:	f3bf 8f6f 	isb	sy
 8007e00:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8007e04:	4a0a      	ldr	r2, [pc, #40]	@ (8007e30 <vPortEnterCritical+0x3c>)
 8007e06:	6813      	ldr	r3, [r2, #0]
 8007e08:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 8007e0a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 8007e0c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8007e0e:	d10e      	bne.n	8007e2e <vPortEnterCritical+0x3a>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007e10:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8007e14:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 8007e18:	b2db      	uxtb	r3, r3
 8007e1a:	b143      	cbz	r3, 8007e2e <vPortEnterCritical+0x3a>
 8007e1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e20:	f383 8811 	msr	BASEPRI, r3
 8007e24:	f3bf 8f6f 	isb	sy
 8007e28:	f3bf 8f4f 	dsb	sy
 8007e2c:	e7fe      	b.n	8007e2c <vPortEnterCritical+0x38>
}
 8007e2e:	4770      	bx	lr
 8007e30:	20000080 	.word	0x20000080

08007e34 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8007e34:	4a08      	ldr	r2, [pc, #32]	@ (8007e58 <vPortExitCritical+0x24>)
 8007e36:	6813      	ldr	r3, [r2, #0]
 8007e38:	b943      	cbnz	r3, 8007e4c <vPortExitCritical+0x18>
 8007e3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e3e:	f383 8811 	msr	BASEPRI, r3
 8007e42:	f3bf 8f6f 	isb	sy
 8007e46:	f3bf 8f4f 	dsb	sy
 8007e4a:	e7fe      	b.n	8007e4a <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8007e4c:	3b01      	subs	r3, #1
 8007e4e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007e50:	b90b      	cbnz	r3, 8007e56 <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007e52:	f383 8811 	msr	BASEPRI, r3
}
 8007e56:	4770      	bx	lr
 8007e58:	20000080 	.word	0x20000080
 8007e5c:	00000000 	.word	0x00000000

08007e60 <PendSV_Handler>:
	__asm volatile
 8007e60:	f3ef 8009 	mrs	r0, PSP
 8007e64:	f3bf 8f6f 	isb	sy
 8007e68:	4b15      	ldr	r3, [pc, #84]	@ (8007ec0 <pxCurrentTCBConst>)
 8007e6a:	681a      	ldr	r2, [r3, #0]
 8007e6c:	f01e 0f10 	tst.w	lr, #16
 8007e70:	bf08      	it	eq
 8007e72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007e76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e7a:	6010      	str	r0, [r2, #0]
 8007e7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007e80:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007e84:	f380 8811 	msr	BASEPRI, r0
 8007e88:	f3bf 8f4f 	dsb	sy
 8007e8c:	f3bf 8f6f 	isb	sy
 8007e90:	f001 f946 	bl	8009120 <vTaskSwitchContext>
 8007e94:	f04f 0000 	mov.w	r0, #0
 8007e98:	f380 8811 	msr	BASEPRI, r0
 8007e9c:	bc09      	pop	{r0, r3}
 8007e9e:	6819      	ldr	r1, [r3, #0]
 8007ea0:	6808      	ldr	r0, [r1, #0]
 8007ea2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ea6:	f01e 0f10 	tst.w	lr, #16
 8007eaa:	bf08      	it	eq
 8007eac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007eb0:	f380 8809 	msr	PSP, r0
 8007eb4:	f3bf 8f6f 	isb	sy
 8007eb8:	4770      	bx	lr
 8007eba:	bf00      	nop
 8007ebc:	f3af 8000 	nop.w

08007ec0 <pxCurrentTCBConst>:
 8007ec0:	20014e18 	.word	0x20014e18

08007ec4 <xPortSysTickHandler>:
{
 8007ec4:	b508      	push	{r3, lr}
	__asm volatile
 8007ec6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007eca:	f383 8811 	msr	BASEPRI, r3
 8007ece:	f3bf 8f6f 	isb	sy
 8007ed2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8007ed6:	f000 fff5 	bl	8008ec4 <xTaskIncrementTick>
 8007eda:	b128      	cbz	r0, 8007ee8 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007edc:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8007ee0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007ee4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
	__asm volatile
 8007ee8:	2300      	movs	r3, #0
 8007eea:	f383 8811 	msr	BASEPRI, r3
}
 8007eee:	bd08      	pop	{r3, pc}

08007ef0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007ef0:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007ef8:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007efa:	4b05      	ldr	r3, [pc, #20]	@ (8007f10 <vPortSetupTimerInterrupt+0x20>)
 8007efc:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	fbb3 f3f1 	udiv	r3, r3, r1
 8007f06:	3b01      	subs	r3, #1
 8007f08:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007f0a:	2307      	movs	r3, #7
 8007f0c:	6113      	str	r3, [r2, #16]
}
 8007f0e:	4770      	bx	lr
 8007f10:	20000074 	.word	0x20000074

08007f14 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007f14:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
{
 8007f18:	b537      	push	{r0, r1, r2, r4, r5, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007f1a:	f8d3 1d00 	ldr.w	r1, [r3, #3328]	@ 0xd00
 8007f1e:	4a38      	ldr	r2, [pc, #224]	@ (8008000 <xPortStartScheduler+0xec>)
 8007f20:	4291      	cmp	r1, r2
 8007f22:	d108      	bne.n	8007f36 <xPortStartScheduler+0x22>
	__asm volatile
 8007f24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f28:	f383 8811 	msr	BASEPRI, r3
 8007f2c:	f3bf 8f6f 	isb	sy
 8007f30:	f3bf 8f4f 	dsb	sy
 8007f34:	e7fe      	b.n	8007f34 <xPortStartScheduler+0x20>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007f36:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 8007f3a:	4b32      	ldr	r3, [pc, #200]	@ (8008004 <xPortStartScheduler+0xf0>)
 8007f3c:	429a      	cmp	r2, r3
 8007f3e:	d108      	bne.n	8007f52 <xPortStartScheduler+0x3e>
 8007f40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f44:	f383 8811 	msr	BASEPRI, r3
 8007f48:	f3bf 8f6f 	isb	sy
 8007f4c:	f3bf 8f4f 	dsb	sy
 8007f50:	e7fe      	b.n	8007f50 <xPortStartScheduler+0x3c>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007f52:	4b2d      	ldr	r3, [pc, #180]	@ (8008008 <xPortStartScheduler+0xf4>)
 8007f54:	781a      	ldrb	r2, [r3, #0]
 8007f56:	b2d2      	uxtb	r2, r2
 8007f58:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007f5a:	22ff      	movs	r2, #255	@ 0xff
 8007f5c:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007f5e:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007f60:	4a2a      	ldr	r2, [pc, #168]	@ (800800c <xPortStartScheduler+0xf8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007f62:	b2db      	uxtb	r3, r3
 8007f64:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007f68:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8007f6c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007f70:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007f72:	4a27      	ldr	r2, [pc, #156]	@ (8008010 <xPortStartScheduler+0xfc>)
 8007f74:	2307      	movs	r3, #7
 8007f76:	6013      	str	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007f78:	f89d 1003 	ldrb.w	r1, [sp, #3]
			ulMaxPRIGROUPValue--;
 8007f7c:	6813      	ldr	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007f7e:	0609      	lsls	r1, r1, #24
 8007f80:	d40a      	bmi.n	8007f98 <xPortStartScheduler+0x84>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007f82:	2b03      	cmp	r3, #3
 8007f84:	d011      	beq.n	8007faa <xPortStartScheduler+0x96>
 8007f86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f8a:	f383 8811 	msr	BASEPRI, r3
 8007f8e:	f3bf 8f6f 	isb	sy
 8007f92:	f3bf 8f4f 	dsb	sy
 8007f96:	e7fe      	b.n	8007f96 <xPortStartScheduler+0x82>
			ulMaxPRIGROUPValue--;
 8007f98:	3b01      	subs	r3, #1
 8007f9a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007f9c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8007fa0:	005b      	lsls	r3, r3, #1
 8007fa2:	b2db      	uxtb	r3, r3
 8007fa4:	f88d 3003 	strb.w	r3, [sp, #3]
 8007fa8:	e7e6      	b.n	8007f78 <xPortStartScheduler+0x64>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007faa:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8007fae:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007fb0:	9b01      	ldr	r3, [sp, #4]
 8007fb2:	4a15      	ldr	r2, [pc, #84]	@ (8008008 <xPortStartScheduler+0xf4>)
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007fb4:	f04f 24e0 	mov.w	r4, #3758153728	@ 0xe000e000
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007fb8:	b2db      	uxtb	r3, r3
 8007fba:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007fbc:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 8007fc0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007fc4:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007fc8:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 8007fcc:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007fd0:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	vPortSetupTimerInterrupt();
 8007fd4:	f7ff ff8c 	bl	8007ef0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8007fd8:	4b0e      	ldr	r3, [pc, #56]	@ (8008014 <xPortStartScheduler+0x100>)
 8007fda:	2500      	movs	r5, #0
 8007fdc:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 8007fde:	f7ff feb7 	bl	8007d50 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007fe2:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	@ 0xf34
 8007fe6:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8007fea:	f8c4 3f34 	str.w	r3, [r4, #3892]	@ 0xf34
	prvPortStartFirstTask();
 8007fee:	f7ff fe9b 	bl	8007d28 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8007ff2:	f001 f895 	bl	8009120 <vTaskSwitchContext>
	prvTaskExitError();
 8007ff6:	f7ff feb5 	bl	8007d64 <prvTaskExitError>
}
 8007ffa:	4628      	mov	r0, r5
 8007ffc:	b003      	add	sp, #12
 8007ffe:	bd30      	pop	{r4, r5, pc}
 8008000:	410fc271 	.word	0x410fc271
 8008004:	410fc270 	.word	0x410fc270
 8008008:	e000e400 	.word	0xe000e400
 800800c:	200148dc 	.word	0x200148dc
 8008010:	200148d8 	.word	0x200148d8
 8008014:	20000080 	.word	0x20000080

08008018 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008018:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800801c:	2b0f      	cmp	r3, #15
 800801e:	d90e      	bls.n	800803e <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008020:	4a11      	ldr	r2, [pc, #68]	@ (8008068 <vPortValidateInterruptPriority+0x50>)
 8008022:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008024:	4a11      	ldr	r2, [pc, #68]	@ (800806c <vPortValidateInterruptPriority+0x54>)
 8008026:	7812      	ldrb	r2, [r2, #0]
 8008028:	429a      	cmp	r2, r3
 800802a:	d908      	bls.n	800803e <vPortValidateInterruptPriority+0x26>
 800802c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008030:	f383 8811 	msr	BASEPRI, r3
 8008034:	f3bf 8f6f 	isb	sy
 8008038:	f3bf 8f4f 	dsb	sy
 800803c:	e7fe      	b.n	800803c <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800803e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8008042:	4a0b      	ldr	r2, [pc, #44]	@ (8008070 <vPortValidateInterruptPriority+0x58>)
 8008044:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	@ 0xd0c
 8008048:	6812      	ldr	r2, [r2, #0]
 800804a:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800804e:	4293      	cmp	r3, r2
 8008050:	d908      	bls.n	8008064 <vPortValidateInterruptPriority+0x4c>
 8008052:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008056:	f383 8811 	msr	BASEPRI, r3
 800805a:	f3bf 8f6f 	isb	sy
 800805e:	f3bf 8f4f 	dsb	sy
 8008062:	e7fe      	b.n	8008062 <vPortValidateInterruptPriority+0x4a>
	}
 8008064:	4770      	bx	lr
 8008066:	bf00      	nop
 8008068:	e000e3f0 	.word	0xe000e3f0
 800806c:	200148dc 	.word	0x200148dc
 8008070:	200148d8 	.word	0x200148d8

08008074 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008074:	b510      	push	{r4, lr}
 8008076:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008078:	f7ff febc 	bl	8007df4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800807c:	6ba4      	ldr	r4, [r4, #56]	@ 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800807e:	f7ff fed9 	bl	8007e34 <vPortExitCritical>

	return xReturn;
}
 8008082:	fab4 f084 	clz	r0, r4
 8008086:	0940      	lsrs	r0, r0, #5
 8008088:	bd10      	pop	{r4, pc}

0800808a <prvCopyDataToQueue>:
{
 800808a:	b570      	push	{r4, r5, r6, lr}
 800808c:	4616      	mov	r6, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800808e:	6c02      	ldr	r2, [r0, #64]	@ 0x40
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008090:	6b85      	ldr	r5, [r0, #56]	@ 0x38
{
 8008092:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008094:	b942      	cbnz	r2, 80080a8 <prvCopyDataToQueue+0x1e>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008096:	6806      	ldr	r6, [r0, #0]
 8008098:	b99e      	cbnz	r6, 80080c2 <prvCopyDataToQueue+0x38>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800809a:	6880      	ldr	r0, [r0, #8]
 800809c:	f001 f98e 	bl	80093bc <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80080a0:	60a6      	str	r6, [r4, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80080a2:	3501      	adds	r5, #1
 80080a4:	63a5      	str	r5, [r4, #56]	@ 0x38
}
 80080a6:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 80080a8:	b96e      	cbnz	r6, 80080c6 <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80080aa:	6840      	ldr	r0, [r0, #4]
 80080ac:	f00c fd36 	bl	8014b1c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80080b0:	6863      	ldr	r3, [r4, #4]
 80080b2:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80080b4:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80080b6:	68a2      	ldr	r2, [r4, #8]
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80080b8:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80080ba:	4293      	cmp	r3, r2
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80080bc:	bf24      	itt	cs
 80080be:	6823      	ldrcs	r3, [r4, #0]
 80080c0:	6063      	strcs	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 80080c2:	2000      	movs	r0, #0
 80080c4:	e7ed      	b.n	80080a2 <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80080c6:	68c0      	ldr	r0, [r0, #12]
 80080c8:	f00c fd28 	bl	8014b1c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80080cc:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80080ce:	68e3      	ldr	r3, [r4, #12]
 80080d0:	4251      	negs	r1, r2
 80080d2:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80080d4:	6822      	ldr	r2, [r4, #0]
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80080d6:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80080d8:	4293      	cmp	r3, r2
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80080da:	bf3e      	ittt	cc
 80080dc:	68a3      	ldrcc	r3, [r4, #8]
 80080de:	185b      	addcc	r3, r3, r1
 80080e0:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 80080e2:	2e02      	cmp	r6, #2
 80080e4:	d1ed      	bne.n	80080c2 <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80080e6:	b10d      	cbz	r5, 80080ec <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 80080e8:	3d01      	subs	r5, #1
 80080ea:	e7ea      	b.n	80080c2 <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 80080ec:	4628      	mov	r0, r5
 80080ee:	e7d8      	b.n	80080a2 <prvCopyDataToQueue+0x18>

080080f0 <prvCopyDataFromQueue>:
{
 80080f0:	4603      	mov	r3, r0
 80080f2:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80080f4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
{
 80080f6:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80080f8:	b16a      	cbz	r2, 8008116 <prvCopyDataFromQueue+0x26>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80080fa:	68dc      	ldr	r4, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80080fc:	6899      	ldr	r1, [r3, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80080fe:	4414      	add	r4, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008100:	428c      	cmp	r4, r1
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008102:	bf28      	it	cs
 8008104:	6819      	ldrcs	r1, [r3, #0]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008106:	60dc      	str	r4, [r3, #12]
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008108:	bf28      	it	cs
 800810a:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800810c:	68d9      	ldr	r1, [r3, #12]
}
 800810e:	f85d 4b04 	ldr.w	r4, [sp], #4
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008112:	f00c bd03 	b.w	8014b1c <memcpy>
}
 8008116:	f85d 4b04 	ldr.w	r4, [sp], #4
 800811a:	4770      	bx	lr

0800811c <prvUnlockQueue>:
{
 800811c:	b570      	push	{r4, r5, r6, lr}
 800811e:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8008120:	f7ff fe68 	bl	8007df4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8008124:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008128:	f104 0624 	add.w	r6, r4, #36	@ 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 800812c:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800812e:	2d00      	cmp	r5, #0
 8008130:	dc14      	bgt.n	800815c <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 8008132:	23ff      	movs	r3, #255	@ 0xff
 8008134:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
	taskEXIT_CRITICAL();
 8008138:	f7ff fe7c 	bl	8007e34 <vPortExitCritical>
	taskENTER_CRITICAL();
 800813c:	f7ff fe5a 	bl	8007df4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8008140:	f894 5044 	ldrb.w	r5, [r4, #68]	@ 0x44
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008144:	f104 0610 	add.w	r6, r4, #16
		int8_t cRxLock = pxQueue->cRxLock;
 8008148:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800814a:	2d00      	cmp	r5, #0
 800814c:	dc12      	bgt.n	8008174 <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 800814e:	23ff      	movs	r3, #255	@ 0xff
 8008150:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
}
 8008154:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8008158:	f7ff be6c 	b.w	8007e34 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800815c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800815e:	2b00      	cmp	r3, #0
 8008160:	d0e7      	beq.n	8008132 <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008162:	4630      	mov	r0, r6
 8008164:	f001 f84e 	bl	8009204 <xTaskRemoveFromEventList>
 8008168:	b108      	cbz	r0, 800816e <prvUnlockQueue+0x52>
						vTaskMissedYield();
 800816a:	f001 f8d3 	bl	8009314 <vTaskMissedYield>
			--cTxLock;
 800816e:	3d01      	subs	r5, #1
 8008170:	b26d      	sxtb	r5, r5
 8008172:	e7dc      	b.n	800812e <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008174:	6923      	ldr	r3, [r4, #16]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d0e9      	beq.n	800814e <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800817a:	4630      	mov	r0, r6
 800817c:	f001 f842 	bl	8009204 <xTaskRemoveFromEventList>
 8008180:	b108      	cbz	r0, 8008186 <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 8008182:	f001 f8c7 	bl	8009314 <vTaskMissedYield>
				--cRxLock;
 8008186:	3d01      	subs	r5, #1
 8008188:	b26d      	sxtb	r5, r5
 800818a:	e7de      	b.n	800814a <prvUnlockQueue+0x2e>

0800818c <xQueueGenericReset>:
{
 800818c:	b538      	push	{r3, r4, r5, lr}
 800818e:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8008190:	4604      	mov	r4, r0
 8008192:	b940      	cbnz	r0, 80081a6 <xQueueGenericReset+0x1a>
 8008194:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008198:	f383 8811 	msr	BASEPRI, r3
 800819c:	f3bf 8f6f 	isb	sy
 80081a0:	f3bf 8f4f 	dsb	sy
 80081a4:	e7fe      	b.n	80081a4 <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 80081a6:	f7ff fe25 	bl	8007df4 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80081aa:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	@ 0x3c
 80081ae:	6822      	ldr	r2, [r4, #0]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80081b0:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80081b2:	434b      	muls	r3, r1
 80081b4:	18d0      	adds	r0, r2, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80081b6:	1a5b      	subs	r3, r3, r1
 80081b8:	441a      	add	r2, r3
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80081ba:	60a0      	str	r0, [r4, #8]
		pxQueue->cRxLock = queueUNLOCKED;
 80081bc:	23ff      	movs	r3, #255	@ 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80081be:	2000      	movs	r0, #0
 80081c0:	63a0      	str	r0, [r4, #56]	@ 0x38
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80081c2:	60e2      	str	r2, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80081c4:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80081c8:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
		if( xNewQueue == pdFALSE )
 80081cc:	b9a5      	cbnz	r5, 80081f8 <xQueueGenericReset+0x6c>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80081ce:	6923      	ldr	r3, [r4, #16]
 80081d0:	b173      	cbz	r3, 80081f0 <xQueueGenericReset+0x64>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80081d2:	f104 0010 	add.w	r0, r4, #16
 80081d6:	f001 f815 	bl	8009204 <xTaskRemoveFromEventList>
 80081da:	b148      	cbz	r0, 80081f0 <xQueueGenericReset+0x64>
					queueYIELD_IF_USING_PREEMPTION();
 80081dc:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80081e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80081e4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80081e8:	f3bf 8f4f 	dsb	sy
 80081ec:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 80081f0:	f7ff fe20 	bl	8007e34 <vPortExitCritical>
}
 80081f4:	2001      	movs	r0, #1
 80081f6:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80081f8:	f104 0010 	add.w	r0, r4, #16
 80081fc:	f7ff fd54 	bl	8007ca8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008200:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8008204:	f7ff fd50 	bl	8007ca8 <vListInitialise>
 8008208:	e7f2      	b.n	80081f0 <xQueueGenericReset+0x64>

0800820a <xQueueGenericCreateStatic>:
	{
 800820a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800820c:	460d      	mov	r5, r1
 800820e:	461c      	mov	r4, r3
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008210:	b940      	cbnz	r0, 8008224 <xQueueGenericCreateStatic+0x1a>
 8008212:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008216:	f383 8811 	msr	BASEPRI, r3
 800821a:	f3bf 8f6f 	isb	sy
 800821e:	f3bf 8f4f 	dsb	sy
 8008222:	e7fe      	b.n	8008222 <xQueueGenericCreateStatic+0x18>
		configASSERT( pxStaticQueue != NULL );
 8008224:	b943      	cbnz	r3, 8008238 <xQueueGenericCreateStatic+0x2e>
 8008226:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800822a:	f383 8811 	msr	BASEPRI, r3
 800822e:	f3bf 8f6f 	isb	sy
 8008232:	f3bf 8f4f 	dsb	sy
 8008236:	e7fe      	b.n	8008236 <xQueueGenericCreateStatic+0x2c>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008238:	b14a      	cbz	r2, 800824e <xQueueGenericCreateStatic+0x44>
 800823a:	b991      	cbnz	r1, 8008262 <xQueueGenericCreateStatic+0x58>
 800823c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008240:	f383 8811 	msr	BASEPRI, r3
 8008244:	f3bf 8f6f 	isb	sy
 8008248:	f3bf 8f4f 	dsb	sy
 800824c:	e7fe      	b.n	800824c <xQueueGenericCreateStatic+0x42>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800824e:	b141      	cbz	r1, 8008262 <xQueueGenericCreateStatic+0x58>
 8008250:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008254:	f383 8811 	msr	BASEPRI, r3
 8008258:	f3bf 8f6f 	isb	sy
 800825c:	f3bf 8f4f 	dsb	sy
 8008260:	e7fe      	b.n	8008260 <xQueueGenericCreateStatic+0x56>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008262:	2350      	movs	r3, #80	@ 0x50
 8008264:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008266:	9b01      	ldr	r3, [sp, #4]
 8008268:	2b50      	cmp	r3, #80	@ 0x50
 800826a:	d008      	beq.n	800827e <xQueueGenericCreateStatic+0x74>
 800826c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008270:	f383 8811 	msr	BASEPRI, r3
 8008274:	f3bf 8f6f 	isb	sy
 8008278:	f3bf 8f4f 	dsb	sy
 800827c:	e7fe      	b.n	800827c <xQueueGenericCreateStatic+0x72>
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800827e:	2101      	movs	r1, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008280:	2d00      	cmp	r5, #0
 8008282:	bf08      	it	eq
 8008284:	4622      	moveq	r2, r4
	pxNewQueue->uxItemSize = uxItemSize;
 8008286:	e9c4 050f 	strd	r0, r5, [r4, #60]	@ 0x3c
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800828a:	f884 1046 	strb.w	r1, [r4, #70]	@ 0x46
 800828e:	6022      	str	r2, [r4, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008290:	4620      	mov	r0, r4
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008292:	9b01      	ldr	r3, [sp, #4]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008294:	f7ff ff7a 	bl	800818c <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8008298:	f89d 3018 	ldrb.w	r3, [sp, #24]
 800829c:	f884 304c 	strb.w	r3, [r4, #76]	@ 0x4c
	}
 80082a0:	4620      	mov	r0, r4
 80082a2:	b003      	add	sp, #12
 80082a4:	bd30      	pop	{r4, r5, pc}

080082a6 <xQueueGenericCreate>:
	{
 80082a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082a8:	460d      	mov	r5, r1
 80082aa:	4617      	mov	r7, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80082ac:	4606      	mov	r6, r0
 80082ae:	b940      	cbnz	r0, 80082c2 <xQueueGenericCreate+0x1c>
 80082b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082b4:	f383 8811 	msr	BASEPRI, r3
 80082b8:	f3bf 8f6f 	isb	sy
 80082bc:	f3bf 8f4f 	dsb	sy
 80082c0:	e7fe      	b.n	80082c0 <xQueueGenericCreate+0x1a>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80082c2:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80082c4:	3050      	adds	r0, #80	@ 0x50
 80082c6:	f7ff fc19 	bl	8007afc <pvPortMalloc>
		if( pxNewQueue != NULL )
 80082ca:	4604      	mov	r4, r0
 80082cc:	b170      	cbz	r0, 80082ec <xQueueGenericCreate+0x46>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80082ce:	2300      	movs	r3, #0
 80082d0:	f880 3046 	strb.w	r3, [r0, #70]	@ 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 80082d4:	b165      	cbz	r5, 80082f0 <xQueueGenericCreate+0x4a>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80082d6:	f100 0350 	add.w	r3, r0, #80	@ 0x50
	pxNewQueue->uxItemSize = uxItemSize;
 80082da:	e9c4 650f 	strd	r6, r5, [r4, #60]	@ 0x3c
 80082de:	6023      	str	r3, [r4, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80082e0:	2101      	movs	r1, #1
 80082e2:	4620      	mov	r0, r4
 80082e4:	f7ff ff52 	bl	800818c <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 80082e8:	f884 704c 	strb.w	r7, [r4, #76]	@ 0x4c
	}
 80082ec:	4620      	mov	r0, r4
 80082ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80082f0:	4603      	mov	r3, r0
 80082f2:	e7f2      	b.n	80082da <xQueueGenericCreate+0x34>

080082f4 <xQueueCreateCountingSemaphoreStatic>:
	{
 80082f4:	b513      	push	{r0, r1, r4, lr}
 80082f6:	4613      	mov	r3, r2
 80082f8:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 80082fa:	b940      	cbnz	r0, 800830e <xQueueCreateCountingSemaphoreStatic+0x1a>
 80082fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008300:	f383 8811 	msr	BASEPRI, r3
 8008304:	f3bf 8f6f 	isb	sy
 8008308:	f3bf 8f4f 	dsb	sy
 800830c:	e7fe      	b.n	800830c <xQueueCreateCountingSemaphoreStatic+0x18>
		configASSERT( uxInitialCount <= uxMaxCount );
 800830e:	4288      	cmp	r0, r1
 8008310:	d208      	bcs.n	8008324 <xQueueCreateCountingSemaphoreStatic+0x30>
 8008312:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008316:	f383 8811 	msr	BASEPRI, r3
 800831a:	f3bf 8f6f 	isb	sy
 800831e:	f3bf 8f4f 	dsb	sy
 8008322:	e7fe      	b.n	8008322 <xQueueCreateCountingSemaphoreStatic+0x2e>
		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8008324:	2202      	movs	r2, #2
 8008326:	9200      	str	r2, [sp, #0]
 8008328:	2200      	movs	r2, #0
 800832a:	4611      	mov	r1, r2
 800832c:	f7ff ff6d 	bl	800820a <xQueueGenericCreateStatic>
		if( xHandle != NULL )
 8008330:	b100      	cbz	r0, 8008334 <xQueueCreateCountingSemaphoreStatic+0x40>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8008332:	6384      	str	r4, [r0, #56]	@ 0x38
	}
 8008334:	b002      	add	sp, #8
 8008336:	bd10      	pop	{r4, pc}

08008338 <xQueueCreateCountingSemaphore>:
	{
 8008338:	b510      	push	{r4, lr}
 800833a:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 800833c:	b940      	cbnz	r0, 8008350 <xQueueCreateCountingSemaphore+0x18>
 800833e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008342:	f383 8811 	msr	BASEPRI, r3
 8008346:	f3bf 8f6f 	isb	sy
 800834a:	f3bf 8f4f 	dsb	sy
 800834e:	e7fe      	b.n	800834e <xQueueCreateCountingSemaphore+0x16>
		configASSERT( uxInitialCount <= uxMaxCount );
 8008350:	4288      	cmp	r0, r1
 8008352:	d208      	bcs.n	8008366 <xQueueCreateCountingSemaphore+0x2e>
 8008354:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008358:	f383 8811 	msr	BASEPRI, r3
 800835c:	f3bf 8f6f 	isb	sy
 8008360:	f3bf 8f4f 	dsb	sy
 8008364:	e7fe      	b.n	8008364 <xQueueCreateCountingSemaphore+0x2c>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8008366:	2202      	movs	r2, #2
 8008368:	2100      	movs	r1, #0
 800836a:	f7ff ff9c 	bl	80082a6 <xQueueGenericCreate>
		if( xHandle != NULL )
 800836e:	b100      	cbz	r0, 8008372 <xQueueCreateCountingSemaphore+0x3a>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8008370:	6384      	str	r4, [r0, #56]	@ 0x38
	}
 8008372:	bd10      	pop	{r4, pc}

08008374 <xQueueGenericSend>:
{
 8008374:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8008378:	460f      	mov	r7, r1
 800837a:	9201      	str	r2, [sp, #4]
 800837c:	461e      	mov	r6, r3
	configASSERT( pxQueue );
 800837e:	4604      	mov	r4, r0
 8008380:	b940      	cbnz	r0, 8008394 <xQueueGenericSend+0x20>
 8008382:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008386:	f383 8811 	msr	BASEPRI, r3
 800838a:	f3bf 8f6f 	isb	sy
 800838e:	f3bf 8f4f 	dsb	sy
 8008392:	e7fe      	b.n	8008392 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008394:	b951      	cbnz	r1, 80083ac <xQueueGenericSend+0x38>
 8008396:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8008398:	b143      	cbz	r3, 80083ac <xQueueGenericSend+0x38>
 800839a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800839e:	f383 8811 	msr	BASEPRI, r3
 80083a2:	f3bf 8f6f 	isb	sy
 80083a6:	f3bf 8f4f 	dsb	sy
 80083aa:	e7fe      	b.n	80083aa <xQueueGenericSend+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80083ac:	2e02      	cmp	r6, #2
 80083ae:	d10b      	bne.n	80083c8 <xQueueGenericSend+0x54>
 80083b0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80083b2:	2b01      	cmp	r3, #1
 80083b4:	d008      	beq.n	80083c8 <xQueueGenericSend+0x54>
 80083b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083ba:	f383 8811 	msr	BASEPRI, r3
 80083be:	f3bf 8f6f 	isb	sy
 80083c2:	f3bf 8f4f 	dsb	sy
 80083c6:	e7fe      	b.n	80083c6 <xQueueGenericSend+0x52>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80083c8:	f000 ffaa 	bl	8009320 <xTaskGetSchedulerState>
 80083cc:	4605      	mov	r5, r0
 80083ce:	b330      	cbz	r0, 800841e <xQueueGenericSend+0xaa>
 80083d0:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 80083d2:	f04f 0800 	mov.w	r8, #0
		taskENTER_CRITICAL();
 80083d6:	f7ff fd0d 	bl	8007df4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80083da:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80083dc:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80083de:	429a      	cmp	r2, r3
 80083e0:	d301      	bcc.n	80083e6 <xQueueGenericSend+0x72>
 80083e2:	2e02      	cmp	r6, #2
 80083e4:	d127      	bne.n	8008436 <xQueueGenericSend+0xc2>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80083e6:	4632      	mov	r2, r6
 80083e8:	4639      	mov	r1, r7
 80083ea:	4620      	mov	r0, r4
 80083ec:	f7ff fe4d 	bl	800808a <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80083f0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80083f2:	b11b      	cbz	r3, 80083fc <xQueueGenericSend+0x88>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80083f4:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80083f8:	f000 ff04 	bl	8009204 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 80083fc:	b148      	cbz	r0, 8008412 <xQueueGenericSend+0x9e>
						queueYIELD_IF_USING_PREEMPTION();
 80083fe:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8008402:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008406:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800840a:	f3bf 8f4f 	dsb	sy
 800840e:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8008412:	f7ff fd0f 	bl	8007e34 <vPortExitCritical>
				return pdPASS;
 8008416:	2001      	movs	r0, #1
}
 8008418:	b004      	add	sp, #16
 800841a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800841e:	9b01      	ldr	r3, [sp, #4]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d0d6      	beq.n	80083d2 <xQueueGenericSend+0x5e>
 8008424:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008428:	f383 8811 	msr	BASEPRI, r3
 800842c:	f3bf 8f6f 	isb	sy
 8008430:	f3bf 8f4f 	dsb	sy
 8008434:	e7fe      	b.n	8008434 <xQueueGenericSend+0xc0>
				if( xTicksToWait == ( TickType_t ) 0 )
 8008436:	9b01      	ldr	r3, [sp, #4]
 8008438:	b91b      	cbnz	r3, 8008442 <xQueueGenericSend+0xce>
					taskEXIT_CRITICAL();
 800843a:	f7ff fcfb 	bl	8007e34 <vPortExitCritical>
					return errQUEUE_FULL;
 800843e:	2000      	movs	r0, #0
 8008440:	e7ea      	b.n	8008418 <xQueueGenericSend+0xa4>
				else if( xEntryTimeSet == pdFALSE )
 8008442:	b915      	cbnz	r5, 800844a <xQueueGenericSend+0xd6>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008444:	a802      	add	r0, sp, #8
 8008446:	f000 ff1d 	bl	8009284 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800844a:	f7ff fcf3 	bl	8007e34 <vPortExitCritical>
		vTaskSuspendAll();
 800844e:	f000 fd2b 	bl	8008ea8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008452:	f7ff fccf 	bl	8007df4 <vPortEnterCritical>
 8008456:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800845a:	2bff      	cmp	r3, #255	@ 0xff
 800845c:	bf08      	it	eq
 800845e:	f884 8044 	strbeq.w	r8, [r4, #68]	@ 0x44
 8008462:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8008466:	2bff      	cmp	r3, #255	@ 0xff
 8008468:	bf08      	it	eq
 800846a:	f884 8045 	strbeq.w	r8, [r4, #69]	@ 0x45
 800846e:	f7ff fce1 	bl	8007e34 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008472:	a901      	add	r1, sp, #4
 8008474:	a802      	add	r0, sp, #8
 8008476:	f000 ff11 	bl	800929c <xTaskCheckForTimeOut>
 800847a:	bb38      	cbnz	r0, 80084cc <xQueueGenericSend+0x158>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800847c:	f7ff fcba 	bl	8007df4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008480:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8008482:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8008484:	429a      	cmp	r2, r3
 8008486:	d10e      	bne.n	80084a6 <xQueueGenericSend+0x132>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8008488:	f7ff fcd4 	bl	8007e34 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800848c:	9901      	ldr	r1, [sp, #4]
 800848e:	f104 0010 	add.w	r0, r4, #16
 8008492:	f000 fe7f 	bl	8009194 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008496:	4620      	mov	r0, r4
 8008498:	f7ff fe40 	bl	800811c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800849c:	f000 fda8 	bl	8008ff0 <xTaskResumeAll>
 80084a0:	b148      	cbz	r0, 80084b6 <xQueueGenericSend+0x142>
 80084a2:	2501      	movs	r5, #1
 80084a4:	e797      	b.n	80083d6 <xQueueGenericSend+0x62>
	taskEXIT_CRITICAL();
 80084a6:	f7ff fcc5 	bl	8007e34 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 80084aa:	4620      	mov	r0, r4
 80084ac:	f7ff fe36 	bl	800811c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80084b0:	f000 fd9e 	bl	8008ff0 <xTaskResumeAll>
 80084b4:	e7f5      	b.n	80084a2 <xQueueGenericSend+0x12e>
					portYIELD_WITHIN_API();
 80084b6:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80084ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80084be:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80084c2:	f3bf 8f4f 	dsb	sy
 80084c6:	f3bf 8f6f 	isb	sy
 80084ca:	e7ea      	b.n	80084a2 <xQueueGenericSend+0x12e>
			prvUnlockQueue( pxQueue );
 80084cc:	4620      	mov	r0, r4
 80084ce:	f7ff fe25 	bl	800811c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80084d2:	f000 fd8d 	bl	8008ff0 <xTaskResumeAll>
			return errQUEUE_FULL;
 80084d6:	e7b2      	b.n	800843e <xQueueGenericSend+0xca>

080084d8 <xQueueGenericSendFromISR>:
{
 80084d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80084dc:	4689      	mov	r9, r1
 80084de:	4617      	mov	r7, r2
 80084e0:	461e      	mov	r6, r3
	configASSERT( pxQueue );
 80084e2:	4604      	mov	r4, r0
 80084e4:	b940      	cbnz	r0, 80084f8 <xQueueGenericSendFromISR+0x20>
 80084e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084ea:	f383 8811 	msr	BASEPRI, r3
 80084ee:	f3bf 8f6f 	isb	sy
 80084f2:	f3bf 8f4f 	dsb	sy
 80084f6:	e7fe      	b.n	80084f6 <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80084f8:	b951      	cbnz	r1, 8008510 <xQueueGenericSendFromISR+0x38>
 80084fa:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80084fc:	b143      	cbz	r3, 8008510 <xQueueGenericSendFromISR+0x38>
 80084fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008502:	f383 8811 	msr	BASEPRI, r3
 8008506:	f3bf 8f6f 	isb	sy
 800850a:	f3bf 8f4f 	dsb	sy
 800850e:	e7fe      	b.n	800850e <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008510:	2e02      	cmp	r6, #2
 8008512:	d10b      	bne.n	800852c <xQueueGenericSendFromISR+0x54>
 8008514:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8008516:	2b01      	cmp	r3, #1
 8008518:	d008      	beq.n	800852c <xQueueGenericSendFromISR+0x54>
 800851a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800851e:	f383 8811 	msr	BASEPRI, r3
 8008522:	f3bf 8f6f 	isb	sy
 8008526:	f3bf 8f4f 	dsb	sy
 800852a:	e7fe      	b.n	800852a <xQueueGenericSendFromISR+0x52>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800852c:	f7ff fd74 	bl	8008018 <vPortValidateInterruptPriority>
	__asm volatile
 8008530:	f3ef 8811 	mrs	r8, BASEPRI
 8008534:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008538:	f383 8811 	msr	BASEPRI, r3
 800853c:	f3bf 8f6f 	isb	sy
 8008540:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008544:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8008546:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8008548:	429a      	cmp	r2, r3
 800854a:	d301      	bcc.n	8008550 <xQueueGenericSendFromISR+0x78>
 800854c:	2e02      	cmp	r6, #2
 800854e:	d11e      	bne.n	800858e <xQueueGenericSendFromISR+0xb6>
			const int8_t cTxLock = pxQueue->cTxLock;
 8008550:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008554:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
			const int8_t cTxLock = pxQueue->cTxLock;
 8008556:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008558:	4632      	mov	r2, r6
 800855a:	4649      	mov	r1, r9
 800855c:	4620      	mov	r0, r4
 800855e:	f7ff fd94 	bl	800808a <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8008562:	1c6b      	adds	r3, r5, #1
 8008564:	d10e      	bne.n	8008584 <xQueueGenericSendFromISR+0xac>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008566:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8008568:	b13b      	cbz	r3, 800857a <xQueueGenericSendFromISR+0xa2>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800856a:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800856e:	f000 fe49 	bl	8009204 <xTaskRemoveFromEventList>
 8008572:	b110      	cbz	r0, 800857a <xQueueGenericSendFromISR+0xa2>
							if( pxHigherPriorityTaskWoken != NULL )
 8008574:	b10f      	cbz	r7, 800857a <xQueueGenericSendFromISR+0xa2>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008576:	2301      	movs	r3, #1
 8008578:	603b      	str	r3, [r7, #0]
			xReturn = pdPASS;
 800857a:	2001      	movs	r0, #1
	__asm volatile
 800857c:	f388 8811 	msr	BASEPRI, r8
}
 8008580:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008584:	3501      	adds	r5, #1
 8008586:	b26d      	sxtb	r5, r5
 8008588:	f884 5045 	strb.w	r5, [r4, #69]	@ 0x45
 800858c:	e7f5      	b.n	800857a <xQueueGenericSendFromISR+0xa2>
			xReturn = errQUEUE_FULL;
 800858e:	2000      	movs	r0, #0
 8008590:	e7f4      	b.n	800857c <xQueueGenericSendFromISR+0xa4>

08008592 <xQueueGiveFromISR>:
{
 8008592:	b570      	push	{r4, r5, r6, lr}
 8008594:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8008596:	4604      	mov	r4, r0
 8008598:	b940      	cbnz	r0, 80085ac <xQueueGiveFromISR+0x1a>
	__asm volatile
 800859a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800859e:	f383 8811 	msr	BASEPRI, r3
 80085a2:	f3bf 8f6f 	isb	sy
 80085a6:	f3bf 8f4f 	dsb	sy
 80085aa:	e7fe      	b.n	80085aa <xQueueGiveFromISR+0x18>
	configASSERT( pxQueue->uxItemSize == 0 );
 80085ac:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80085ae:	b143      	cbz	r3, 80085c2 <xQueueGiveFromISR+0x30>
 80085b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085b4:	f383 8811 	msr	BASEPRI, r3
 80085b8:	f3bf 8f6f 	isb	sy
 80085bc:	f3bf 8f4f 	dsb	sy
 80085c0:	e7fe      	b.n	80085c0 <xQueueGiveFromISR+0x2e>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80085c2:	6803      	ldr	r3, [r0, #0]
 80085c4:	b953      	cbnz	r3, 80085dc <xQueueGiveFromISR+0x4a>
 80085c6:	6883      	ldr	r3, [r0, #8]
 80085c8:	b143      	cbz	r3, 80085dc <xQueueGiveFromISR+0x4a>
 80085ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085ce:	f383 8811 	msr	BASEPRI, r3
 80085d2:	f3bf 8f6f 	isb	sy
 80085d6:	f3bf 8f4f 	dsb	sy
 80085da:	e7fe      	b.n	80085da <xQueueGiveFromISR+0x48>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80085dc:	f7ff fd1c 	bl	8008018 <vPortValidateInterruptPriority>
	__asm volatile
 80085e0:	f3ef 8611 	mrs	r6, BASEPRI
 80085e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085e8:	f383 8811 	msr	BASEPRI, r3
 80085ec:	f3bf 8f6f 	isb	sy
 80085f0:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80085f4:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 80085f6:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80085f8:	4293      	cmp	r3, r2
 80085fa:	d919      	bls.n	8008630 <xQueueGiveFromISR+0x9e>
			const int8_t cTxLock = pxQueue->cTxLock;
 80085fc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008600:	3201      	adds	r2, #1
			if( cTxLock == queueUNLOCKED )
 8008602:	29ff      	cmp	r1, #255	@ 0xff
			const int8_t cTxLock = pxQueue->cTxLock;
 8008604:	b24b      	sxtb	r3, r1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008606:	63a2      	str	r2, [r4, #56]	@ 0x38
			if( cTxLock == queueUNLOCKED )
 8008608:	d10d      	bne.n	8008626 <xQueueGiveFromISR+0x94>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800860a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800860c:	b13b      	cbz	r3, 800861e <xQueueGiveFromISR+0x8c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800860e:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8008612:	f000 fdf7 	bl	8009204 <xTaskRemoveFromEventList>
 8008616:	b110      	cbz	r0, 800861e <xQueueGiveFromISR+0x8c>
							if( pxHigherPriorityTaskWoken != NULL )
 8008618:	b10d      	cbz	r5, 800861e <xQueueGiveFromISR+0x8c>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800861a:	2301      	movs	r3, #1
 800861c:	602b      	str	r3, [r5, #0]
			xReturn = pdPASS;
 800861e:	2001      	movs	r0, #1
	__asm volatile
 8008620:	f386 8811 	msr	BASEPRI, r6
}
 8008624:	bd70      	pop	{r4, r5, r6, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008626:	3301      	adds	r3, #1
 8008628:	b25b      	sxtb	r3, r3
 800862a:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800862e:	e7f6      	b.n	800861e <xQueueGiveFromISR+0x8c>
			xReturn = errQUEUE_FULL;
 8008630:	2000      	movs	r0, #0
 8008632:	e7f5      	b.n	8008620 <xQueueGiveFromISR+0x8e>

08008634 <xQueueReceive>:
{
 8008634:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8008638:	460e      	mov	r6, r1
 800863a:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 800863c:	4604      	mov	r4, r0
 800863e:	b940      	cbnz	r0, 8008652 <xQueueReceive+0x1e>
	__asm volatile
 8008640:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008644:	f383 8811 	msr	BASEPRI, r3
 8008648:	f3bf 8f6f 	isb	sy
 800864c:	f3bf 8f4f 	dsb	sy
 8008650:	e7fe      	b.n	8008650 <xQueueReceive+0x1c>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008652:	b951      	cbnz	r1, 800866a <xQueueReceive+0x36>
 8008654:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8008656:	b143      	cbz	r3, 800866a <xQueueReceive+0x36>
 8008658:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800865c:	f383 8811 	msr	BASEPRI, r3
 8008660:	f3bf 8f6f 	isb	sy
 8008664:	f3bf 8f4f 	dsb	sy
 8008668:	e7fe      	b.n	8008668 <xQueueReceive+0x34>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800866a:	f000 fe59 	bl	8009320 <xTaskGetSchedulerState>
 800866e:	4605      	mov	r5, r0
 8008670:	b318      	cbz	r0, 80086ba <xQueueReceive+0x86>
 8008672:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 8008674:	f04f 0800 	mov.w	r8, #0
		taskENTER_CRITICAL();
 8008678:	f7ff fbbc 	bl	8007df4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800867c:	6ba7      	ldr	r7, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800867e:	b347      	cbz	r7, 80086d2 <xQueueReceive+0x9e>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008680:	4631      	mov	r1, r6
 8008682:	4620      	mov	r0, r4
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008684:	3f01      	subs	r7, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008686:	f7ff fd33 	bl	80080f0 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800868a:	63a7      	str	r7, [r4, #56]	@ 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800868c:	6923      	ldr	r3, [r4, #16]
 800868e:	b173      	cbz	r3, 80086ae <xQueueReceive+0x7a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008690:	f104 0010 	add.w	r0, r4, #16
 8008694:	f000 fdb6 	bl	8009204 <xTaskRemoveFromEventList>
 8008698:	b148      	cbz	r0, 80086ae <xQueueReceive+0x7a>
						queueYIELD_IF_USING_PREEMPTION();
 800869a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800869e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80086a2:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80086a6:	f3bf 8f4f 	dsb	sy
 80086aa:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 80086ae:	f7ff fbc1 	bl	8007e34 <vPortExitCritical>
				return pdPASS;
 80086b2:	2001      	movs	r0, #1
}
 80086b4:	b004      	add	sp, #16
 80086b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80086ba:	9b01      	ldr	r3, [sp, #4]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d0d9      	beq.n	8008674 <xQueueReceive+0x40>
 80086c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086c4:	f383 8811 	msr	BASEPRI, r3
 80086c8:	f3bf 8f6f 	isb	sy
 80086cc:	f3bf 8f4f 	dsb	sy
 80086d0:	e7fe      	b.n	80086d0 <xQueueReceive+0x9c>
				if( xTicksToWait == ( TickType_t ) 0 )
 80086d2:	9b01      	ldr	r3, [sp, #4]
 80086d4:	b91b      	cbnz	r3, 80086de <xQueueReceive+0xaa>
					taskEXIT_CRITICAL();
 80086d6:	f7ff fbad 	bl	8007e34 <vPortExitCritical>
					return errQUEUE_EMPTY;
 80086da:	2000      	movs	r0, #0
 80086dc:	e7ea      	b.n	80086b4 <xQueueReceive+0x80>
				else if( xEntryTimeSet == pdFALSE )
 80086de:	b915      	cbnz	r5, 80086e6 <xQueueReceive+0xb2>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80086e0:	a802      	add	r0, sp, #8
 80086e2:	f000 fdcf 	bl	8009284 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 80086e6:	f7ff fba5 	bl	8007e34 <vPortExitCritical>
		vTaskSuspendAll();
 80086ea:	f000 fbdd 	bl	8008ea8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80086ee:	f7ff fb81 	bl	8007df4 <vPortEnterCritical>
 80086f2:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80086f6:	2bff      	cmp	r3, #255	@ 0xff
 80086f8:	bf08      	it	eq
 80086fa:	f884 8044 	strbeq.w	r8, [r4, #68]	@ 0x44
 80086fe:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8008702:	2bff      	cmp	r3, #255	@ 0xff
 8008704:	bf08      	it	eq
 8008706:	f884 8045 	strbeq.w	r8, [r4, #69]	@ 0x45
 800870a:	f7ff fb93 	bl	8007e34 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800870e:	a901      	add	r1, sp, #4
 8008710:	a802      	add	r0, sp, #8
 8008712:	f000 fdc3 	bl	800929c <xTaskCheckForTimeOut>
 8008716:	bb00      	cbnz	r0, 800875a <xQueueReceive+0x126>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008718:	4620      	mov	r0, r4
 800871a:	f7ff fcab 	bl	8008074 <prvIsQueueEmpty>
 800871e:	b1b0      	cbz	r0, 800874e <xQueueReceive+0x11a>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008720:	9901      	ldr	r1, [sp, #4]
 8008722:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8008726:	f000 fd35 	bl	8009194 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800872a:	4620      	mov	r0, r4
 800872c:	f7ff fcf6 	bl	800811c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008730:	f000 fc5e 	bl	8008ff0 <xTaskResumeAll>
 8008734:	b948      	cbnz	r0, 800874a <xQueueReceive+0x116>
					portYIELD_WITHIN_API();
 8008736:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800873a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800873e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8008742:	f3bf 8f4f 	dsb	sy
 8008746:	f3bf 8f6f 	isb	sy
 800874a:	2501      	movs	r5, #1
 800874c:	e794      	b.n	8008678 <xQueueReceive+0x44>
				prvUnlockQueue( pxQueue );
 800874e:	4620      	mov	r0, r4
 8008750:	f7ff fce4 	bl	800811c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008754:	f000 fc4c 	bl	8008ff0 <xTaskResumeAll>
 8008758:	e7f7      	b.n	800874a <xQueueReceive+0x116>
			prvUnlockQueue( pxQueue );
 800875a:	4620      	mov	r0, r4
 800875c:	f7ff fcde 	bl	800811c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008760:	f000 fc46 	bl	8008ff0 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008764:	4620      	mov	r0, r4
 8008766:	f7ff fc85 	bl	8008074 <prvIsQueueEmpty>
 800876a:	2800      	cmp	r0, #0
 800876c:	d0ed      	beq.n	800874a <xQueueReceive+0x116>
 800876e:	e7b4      	b.n	80086da <xQueueReceive+0xa6>

08008770 <xQueueSemaphoreTake>:
{
 8008770:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008772:	b085      	sub	sp, #20
	configASSERT( ( pxQueue ) );
 8008774:	4604      	mov	r4, r0
{
 8008776:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 8008778:	b940      	cbnz	r0, 800878c <xQueueSemaphoreTake+0x1c>
 800877a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800877e:	f383 8811 	msr	BASEPRI, r3
 8008782:	f3bf 8f6f 	isb	sy
 8008786:	f3bf 8f4f 	dsb	sy
 800878a:	e7fe      	b.n	800878a <xQueueSemaphoreTake+0x1a>
	configASSERT( pxQueue->uxItemSize == 0 );
 800878c:	6c05      	ldr	r5, [r0, #64]	@ 0x40
 800878e:	b145      	cbz	r5, 80087a2 <xQueueSemaphoreTake+0x32>
 8008790:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008794:	f383 8811 	msr	BASEPRI, r3
 8008798:	f3bf 8f6f 	isb	sy
 800879c:	f3bf 8f4f 	dsb	sy
 80087a0:	e7fe      	b.n	80087a0 <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80087a2:	f000 fdbd 	bl	8009320 <xTaskGetSchedulerState>
 80087a6:	4606      	mov	r6, r0
 80087a8:	b320      	cbz	r0, 80087f4 <xQueueSemaphoreTake+0x84>
 80087aa:	462e      	mov	r6, r5
		prvLockQueue( pxQueue );
 80087ac:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
 80087ae:	f7ff fb21 	bl	8007df4 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80087b2:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80087b4:	b353      	cbz	r3, 800880c <xQueueSemaphoreTake+0x9c>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80087b6:	3b01      	subs	r3, #1
 80087b8:	63a3      	str	r3, [r4, #56]	@ 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80087ba:	6823      	ldr	r3, [r4, #0]
 80087bc:	b913      	cbnz	r3, 80087c4 <xQueueSemaphoreTake+0x54>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80087be:	f000 fe8d 	bl	80094dc <pvTaskIncrementMutexHeldCount>
 80087c2:	60a0      	str	r0, [r4, #8]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80087c4:	6923      	ldr	r3, [r4, #16]
 80087c6:	b173      	cbz	r3, 80087e6 <xQueueSemaphoreTake+0x76>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80087c8:	f104 0010 	add.w	r0, r4, #16
 80087cc:	f000 fd1a 	bl	8009204 <xTaskRemoveFromEventList>
 80087d0:	b148      	cbz	r0, 80087e6 <xQueueSemaphoreTake+0x76>
						queueYIELD_IF_USING_PREEMPTION();
 80087d2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80087d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80087da:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80087de:	f3bf 8f4f 	dsb	sy
 80087e2:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 80087e6:	f7ff fb25 	bl	8007e34 <vPortExitCritical>
				return pdPASS;
 80087ea:	2001      	movs	r0, #1
}
 80087ec:	b005      	add	sp, #20
 80087ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80087f0:	4635      	mov	r5, r6
 80087f2:	e7db      	b.n	80087ac <xQueueSemaphoreTake+0x3c>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80087f4:	9b01      	ldr	r3, [sp, #4]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d0fa      	beq.n	80087f0 <xQueueSemaphoreTake+0x80>
 80087fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087fe:	f383 8811 	msr	BASEPRI, r3
 8008802:	f3bf 8f6f 	isb	sy
 8008806:	f3bf 8f4f 	dsb	sy
 800880a:	e7fe      	b.n	800880a <xQueueSemaphoreTake+0x9a>
				if( xTicksToWait == ( TickType_t ) 0 )
 800880c:	9b01      	ldr	r3, [sp, #4]
 800880e:	b953      	cbnz	r3, 8008826 <xQueueSemaphoreTake+0xb6>
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008810:	2d00      	cmp	r5, #0
 8008812:	d066      	beq.n	80088e2 <xQueueSemaphoreTake+0x172>
 8008814:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008818:	f383 8811 	msr	BASEPRI, r3
 800881c:	f3bf 8f6f 	isb	sy
 8008820:	f3bf 8f4f 	dsb	sy
 8008824:	e7fe      	b.n	8008824 <xQueueSemaphoreTake+0xb4>
				else if( xEntryTimeSet == pdFALSE )
 8008826:	b916      	cbnz	r6, 800882e <xQueueSemaphoreTake+0xbe>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008828:	a802      	add	r0, sp, #8
 800882a:	f000 fd2b 	bl	8009284 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800882e:	f7ff fb01 	bl	8007e34 <vPortExitCritical>
		vTaskSuspendAll();
 8008832:	f000 fb39 	bl	8008ea8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008836:	f7ff fadd 	bl	8007df4 <vPortEnterCritical>
 800883a:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800883e:	2bff      	cmp	r3, #255	@ 0xff
 8008840:	bf08      	it	eq
 8008842:	f884 7044 	strbeq.w	r7, [r4, #68]	@ 0x44
 8008846:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800884a:	2bff      	cmp	r3, #255	@ 0xff
 800884c:	bf08      	it	eq
 800884e:	f884 7045 	strbeq.w	r7, [r4, #69]	@ 0x45
 8008852:	f7ff faef 	bl	8007e34 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008856:	a901      	add	r1, sp, #4
 8008858:	a802      	add	r0, sp, #8
 800885a:	f000 fd1f 	bl	800929c <xTaskCheckForTimeOut>
 800885e:	bb50      	cbnz	r0, 80088b6 <xQueueSemaphoreTake+0x146>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008860:	4620      	mov	r0, r4
 8008862:	f7ff fc07 	bl	8008074 <prvIsQueueEmpty>
 8008866:	b300      	cbz	r0, 80088aa <xQueueSemaphoreTake+0x13a>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008868:	6823      	ldr	r3, [r4, #0]
 800886a:	b93b      	cbnz	r3, 800887c <xQueueSemaphoreTake+0x10c>
						taskENTER_CRITICAL();
 800886c:	f7ff fac2 	bl	8007df4 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008870:	68a0      	ldr	r0, [r4, #8]
 8008872:	f000 fd65 	bl	8009340 <xTaskPriorityInherit>
 8008876:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 8008878:	f7ff fadc 	bl	8007e34 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800887c:	9901      	ldr	r1, [sp, #4]
 800887e:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8008882:	f000 fc87 	bl	8009194 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008886:	4620      	mov	r0, r4
 8008888:	f7ff fc48 	bl	800811c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800888c:	f000 fbb0 	bl	8008ff0 <xTaskResumeAll>
 8008890:	b948      	cbnz	r0, 80088a6 <xQueueSemaphoreTake+0x136>
					portYIELD_WITHIN_API();
 8008892:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8008896:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800889a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800889e:	f3bf 8f4f 	dsb	sy
 80088a2:	f3bf 8f6f 	isb	sy
 80088a6:	2601      	movs	r6, #1
 80088a8:	e781      	b.n	80087ae <xQueueSemaphoreTake+0x3e>
				prvUnlockQueue( pxQueue );
 80088aa:	4620      	mov	r0, r4
 80088ac:	f7ff fc36 	bl	800811c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80088b0:	f000 fb9e 	bl	8008ff0 <xTaskResumeAll>
 80088b4:	e7f7      	b.n	80088a6 <xQueueSemaphoreTake+0x136>
			prvUnlockQueue( pxQueue );
 80088b6:	4620      	mov	r0, r4
 80088b8:	f7ff fc30 	bl	800811c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80088bc:	f000 fb98 	bl	8008ff0 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80088c0:	4620      	mov	r0, r4
 80088c2:	f7ff fbd7 	bl	8008074 <prvIsQueueEmpty>
 80088c6:	2800      	cmp	r0, #0
 80088c8:	d0ed      	beq.n	80088a6 <xQueueSemaphoreTake+0x136>
					if( xInheritanceOccurred != pdFALSE )
 80088ca:	b165      	cbz	r5, 80088e6 <xQueueSemaphoreTake+0x176>
						taskENTER_CRITICAL();
 80088cc:	f7ff fa92 	bl	8007df4 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80088d0:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80088d2:	b119      	cbz	r1, 80088dc <xQueueSemaphoreTake+0x16c>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80088d4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80088d6:	6819      	ldr	r1, [r3, #0]
 80088d8:	f1c1 0138 	rsb	r1, r1, #56	@ 0x38
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80088dc:	68a0      	ldr	r0, [r4, #8]
 80088de:	f000 fdaf 	bl	8009440 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 80088e2:	f7ff faa7 	bl	8007e34 <vPortExitCritical>
					return errQUEUE_EMPTY;
 80088e6:	2000      	movs	r0, #0
 80088e8:	e780      	b.n	80087ec <xQueueSemaphoreTake+0x7c>

080088ea <xQueueReceiveFromISR>:
{
 80088ea:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80088ee:	4689      	mov	r9, r1
 80088f0:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 80088f2:	4604      	mov	r4, r0
 80088f4:	b940      	cbnz	r0, 8008908 <xQueueReceiveFromISR+0x1e>
 80088f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088fa:	f383 8811 	msr	BASEPRI, r3
 80088fe:	f3bf 8f6f 	isb	sy
 8008902:	f3bf 8f4f 	dsb	sy
 8008906:	e7fe      	b.n	8008906 <xQueueReceiveFromISR+0x1c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008908:	b951      	cbnz	r1, 8008920 <xQueueReceiveFromISR+0x36>
 800890a:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800890c:	b143      	cbz	r3, 8008920 <xQueueReceiveFromISR+0x36>
 800890e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008912:	f383 8811 	msr	BASEPRI, r3
 8008916:	f3bf 8f6f 	isb	sy
 800891a:	f3bf 8f4f 	dsb	sy
 800891e:	e7fe      	b.n	800891e <xQueueReceiveFromISR+0x34>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008920:	f7ff fb7a 	bl	8008018 <vPortValidateInterruptPriority>
	__asm volatile
 8008924:	f3ef 8711 	mrs	r7, BASEPRI
 8008928:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800892c:	f383 8811 	msr	BASEPRI, r3
 8008930:	f3bf 8f6f 	isb	sy
 8008934:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008938:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800893a:	b30d      	cbz	r5, 8008980 <xQueueReceiveFromISR+0x96>
			const int8_t cRxLock = pxQueue->cRxLock;
 800893c:	f894 6044 	ldrb.w	r6, [r4, #68]	@ 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008940:	4649      	mov	r1, r9
			const int8_t cRxLock = pxQueue->cRxLock;
 8008942:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008944:	4620      	mov	r0, r4
 8008946:	f7ff fbd3 	bl	80080f0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800894a:	3d01      	subs	r5, #1
			if( cRxLock == queueUNLOCKED )
 800894c:	1c73      	adds	r3, r6, #1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800894e:	63a5      	str	r5, [r4, #56]	@ 0x38
			if( cRxLock == queueUNLOCKED )
 8008950:	d111      	bne.n	8008976 <xQueueReceiveFromISR+0x8c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008952:	6923      	ldr	r3, [r4, #16]
 8008954:	b153      	cbz	r3, 800896c <xQueueReceiveFromISR+0x82>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008956:	f104 0010 	add.w	r0, r4, #16
 800895a:	f000 fc53 	bl	8009204 <xTaskRemoveFromEventList>
 800895e:	b128      	cbz	r0, 800896c <xQueueReceiveFromISR+0x82>
						if( pxHigherPriorityTaskWoken != NULL )
 8008960:	f1b8 0f00 	cmp.w	r8, #0
 8008964:	d002      	beq.n	800896c <xQueueReceiveFromISR+0x82>
							*pxHigherPriorityTaskWoken = pdTRUE;
 8008966:	2301      	movs	r3, #1
 8008968:	f8c8 3000 	str.w	r3, [r8]
			xReturn = pdPASS;
 800896c:	2001      	movs	r0, #1
	__asm volatile
 800896e:	f387 8811 	msr	BASEPRI, r7
}
 8008972:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8008976:	3601      	adds	r6, #1
 8008978:	b276      	sxtb	r6, r6
 800897a:	f884 6044 	strb.w	r6, [r4, #68]	@ 0x44
 800897e:	e7f5      	b.n	800896c <xQueueReceiveFromISR+0x82>
			xReturn = pdFAIL;
 8008980:	4628      	mov	r0, r5
 8008982:	e7f4      	b.n	800896e <xQueueReceiveFromISR+0x84>

08008984 <uxQueueMessagesWaiting>:
{
 8008984:	b510      	push	{r4, lr}
	configASSERT( xQueue );
 8008986:	4604      	mov	r4, r0
 8008988:	b940      	cbnz	r0, 800899c <uxQueueMessagesWaiting+0x18>
	__asm volatile
 800898a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800898e:	f383 8811 	msr	BASEPRI, r3
 8008992:	f3bf 8f6f 	isb	sy
 8008996:	f3bf 8f4f 	dsb	sy
 800899a:	e7fe      	b.n	800899a <uxQueueMessagesWaiting+0x16>
	taskENTER_CRITICAL();
 800899c:	f7ff fa2a 	bl	8007df4 <vPortEnterCritical>
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80089a0:	6ba4      	ldr	r4, [r4, #56]	@ 0x38
	taskEXIT_CRITICAL();
 80089a2:	f7ff fa47 	bl	8007e34 <vPortExitCritical>
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80089a6:	4620      	mov	r0, r4
 80089a8:	bd10      	pop	{r4, pc}

080089aa <uxQueueMessagesWaitingFromISR>:
	configASSERT( pxQueue );
 80089aa:	b940      	cbnz	r0, 80089be <uxQueueMessagesWaitingFromISR+0x14>
 80089ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089b0:	f383 8811 	msr	BASEPRI, r3
 80089b4:	f3bf 8f6f 	isb	sy
 80089b8:	f3bf 8f4f 	dsb	sy
 80089bc:	e7fe      	b.n	80089bc <uxQueueMessagesWaitingFromISR+0x12>
	uxReturn = pxQueue->uxMessagesWaiting;
 80089be:	6b80      	ldr	r0, [r0, #56]	@ 0x38
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80089c0:	4770      	bx	lr
	...

080089c4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80089c4:	b530      	push	{r4, r5, lr}

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80089c6:	4a07      	ldr	r2, [pc, #28]	@ (80089e4 <vQueueAddToRegistry+0x20>)
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80089c8:	2300      	movs	r3, #0
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80089ca:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]
 80089ce:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
 80089d2:	b91d      	cbnz	r5, 80089dc <vQueueAddToRegistry+0x18>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80089d4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80089d8:	6060      	str	r0, [r4, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80089da:	bd30      	pop	{r4, r5, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80089dc:	3301      	adds	r3, #1
 80089de:	2b08      	cmp	r3, #8
 80089e0:	d1f3      	bne.n	80089ca <vQueueAddToRegistry+0x6>
 80089e2:	e7fa      	b.n	80089da <vQueueAddToRegistry+0x16>
 80089e4:	200148e0 	.word	0x200148e0

080089e8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80089e8:	b510      	push	{r4, lr}

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80089ea:	4a09      	ldr	r2, [pc, #36]	@ (8008a10 <vQueueUnregisterQueue+0x28>)
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80089ec:	2300      	movs	r3, #0
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80089ee:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 80089f2:	4281      	cmp	r1, r0
 80089f4:	ea4f 04c3 	mov.w	r4, r3, lsl #3
 80089f8:	d106      	bne.n	8008a08 <vQueueUnregisterQueue+0x20>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80089fa:	4a06      	ldr	r2, [pc, #24]	@ (8008a14 <vQueueUnregisterQueue+0x2c>)
 80089fc:	2100      	movs	r1, #0
 80089fe:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8008a02:	4422      	add	r2, r4
 8008a04:	6051      	str	r1, [r2, #4]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8008a06:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008a08:	3301      	adds	r3, #1
 8008a0a:	2b08      	cmp	r3, #8
 8008a0c:	d1ef      	bne.n	80089ee <vQueueUnregisterQueue+0x6>
 8008a0e:	e7fa      	b.n	8008a06 <vQueueUnregisterQueue+0x1e>
 8008a10:	200148e4 	.word	0x200148e4
 8008a14:	200148e0 	.word	0x200148e0

08008a18 <vQueueDelete>:
{
 8008a18:	b510      	push	{r4, lr}
	configASSERT( pxQueue );
 8008a1a:	b940      	cbnz	r0, 8008a2e <vQueueDelete+0x16>
 8008a1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a20:	f383 8811 	msr	BASEPRI, r3
 8008a24:	f3bf 8f6f 	isb	sy
 8008a28:	f3bf 8f4f 	dsb	sy
 8008a2c:	e7fe      	b.n	8008a2c <vQueueDelete+0x14>
		vQueueUnregisterQueue( pxQueue );
 8008a2e:	f7ff ffdb 	bl	80089e8 <vQueueUnregisterQueue>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8008a32:	f890 3046 	ldrb.w	r3, [r0, #70]	@ 0x46
 8008a36:	b91b      	cbnz	r3, 8008a40 <vQueueDelete+0x28>
}
 8008a38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			vPortFree( pxQueue );
 8008a3c:	f7ff b8f6 	b.w	8007c2c <vPortFree>
}
 8008a40:	bd10      	pop	{r4, pc}

08008a42 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008a42:	b570      	push	{r4, r5, r6, lr}
 8008a44:	4604      	mov	r4, r0
 8008a46:	460d      	mov	r5, r1
 8008a48:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008a4a:	f7ff f9d3 	bl	8007df4 <vPortEnterCritical>
 8008a4e:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8008a52:	2bff      	cmp	r3, #255	@ 0xff
 8008a54:	bf04      	itt	eq
 8008a56:	2300      	moveq	r3, #0
 8008a58:	f884 3044 	strbeq.w	r3, [r4, #68]	@ 0x44
 8008a5c:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8008a60:	2bff      	cmp	r3, #255	@ 0xff
 8008a62:	bf04      	itt	eq
 8008a64:	2300      	moveq	r3, #0
 8008a66:	f884 3045 	strbeq.w	r3, [r4, #69]	@ 0x45
 8008a6a:	f7ff f9e3 	bl	8007e34 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008a6e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8008a70:	b92b      	cbnz	r3, 8008a7e <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008a72:	4632      	mov	r2, r6
 8008a74:	4629      	mov	r1, r5
 8008a76:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8008a7a:	f000 fba5 	bl	80091c8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008a7e:	4620      	mov	r0, r4
	}
 8008a80:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 8008a84:	f7ff bb4a 	b.w	800811c <prvUnlockQueue>

08008a88 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008a88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a8c:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008a8e:	f7ff f9b1 	bl	8007df4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008a92:	4b30      	ldr	r3, [pc, #192]	@ (8008b54 <prvAddNewTaskToReadyList+0xcc>)
		if( pxCurrentTCB == NULL )
 8008a94:	4e30      	ldr	r6, [pc, #192]	@ (8008b58 <prvAddNewTaskToReadyList+0xd0>)
		uxCurrentNumberOfTasks++;
 8008a96:	681a      	ldr	r2, [r3, #0]
 8008a98:	4f30      	ldr	r7, [pc, #192]	@ (8008b5c <prvAddNewTaskToReadyList+0xd4>)
 8008a9a:	3201      	adds	r2, #1
 8008a9c:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8008a9e:	6835      	ldr	r5, [r6, #0]
 8008aa0:	2d00      	cmp	r5, #0
 8008aa2:	d14b      	bne.n	8008b3c <prvAddNewTaskToReadyList+0xb4>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008aa4:	6034      	str	r4, [r6, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	2b01      	cmp	r3, #1
 8008aaa:	d11f      	bne.n	8008aec <prvAddNewTaskToReadyList+0x64>
 8008aac:	46b8      	mov	r8, r7
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008aae:	4640      	mov	r0, r8
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008ab0:	3501      	adds	r5, #1
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008ab2:	f7ff f8f9 	bl	8007ca8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008ab6:	2d38      	cmp	r5, #56	@ 0x38
 8008ab8:	f108 0814 	add.w	r8, r8, #20
 8008abc:	d1f7      	bne.n	8008aae <prvAddNewTaskToReadyList+0x26>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008abe:	f8df 80c4 	ldr.w	r8, [pc, #196]	@ 8008b84 <prvAddNewTaskToReadyList+0xfc>
	vListInitialise( &xDelayedTaskList2 );
 8008ac2:	4d27      	ldr	r5, [pc, #156]	@ (8008b60 <prvAddNewTaskToReadyList+0xd8>)
	vListInitialise( &xDelayedTaskList1 );
 8008ac4:	4640      	mov	r0, r8
 8008ac6:	f7ff f8ef 	bl	8007ca8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008aca:	4628      	mov	r0, r5
 8008acc:	f7ff f8ec 	bl	8007ca8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008ad0:	4824      	ldr	r0, [pc, #144]	@ (8008b64 <prvAddNewTaskToReadyList+0xdc>)
 8008ad2:	f7ff f8e9 	bl	8007ca8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008ad6:	4824      	ldr	r0, [pc, #144]	@ (8008b68 <prvAddNewTaskToReadyList+0xe0>)
 8008ad8:	f7ff f8e6 	bl	8007ca8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008adc:	4823      	ldr	r0, [pc, #140]	@ (8008b6c <prvAddNewTaskToReadyList+0xe4>)
 8008ade:	f7ff f8e3 	bl	8007ca8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008ae2:	4b23      	ldr	r3, [pc, #140]	@ (8008b70 <prvAddNewTaskToReadyList+0xe8>)
 8008ae4:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008ae8:	4b22      	ldr	r3, [pc, #136]	@ (8008b74 <prvAddNewTaskToReadyList+0xec>)
 8008aea:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 8008aec:	4a22      	ldr	r2, [pc, #136]	@ (8008b78 <prvAddNewTaskToReadyList+0xf0>)
 8008aee:	6813      	ldr	r3, [r2, #0]
 8008af0:	3301      	adds	r3, #1
 8008af2:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8008af4:	4a21      	ldr	r2, [pc, #132]	@ (8008b7c <prvAddNewTaskToReadyList+0xf4>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008af6:	6463      	str	r3, [r4, #68]	@ 0x44
		prvAddTaskToReadyList( pxNewTCB );
 8008af8:	6811      	ldr	r1, [r2, #0]
 8008afa:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8008afc:	2014      	movs	r0, #20
 8008afe:	428b      	cmp	r3, r1
 8008b00:	fb00 7003 	mla	r0, r0, r3, r7
 8008b04:	f104 0104 	add.w	r1, r4, #4
 8008b08:	bf88      	it	hi
 8008b0a:	6013      	strhi	r3, [r2, #0]
 8008b0c:	f7ff f8da 	bl	8007cc4 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8008b10:	f7ff f990 	bl	8007e34 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8008b14:	4b1a      	ldr	r3, [pc, #104]	@ (8008b80 <prvAddNewTaskToReadyList+0xf8>)
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	b173      	cbz	r3, 8008b38 <prvAddNewTaskToReadyList+0xb0>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008b1a:	6833      	ldr	r3, [r6, #0]
 8008b1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b1e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8008b20:	429a      	cmp	r2, r3
 8008b22:	d209      	bcs.n	8008b38 <prvAddNewTaskToReadyList+0xb0>
			taskYIELD_IF_USING_PREEMPTION();
 8008b24:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8008b28:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008b2c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8008b30:	f3bf 8f4f 	dsb	sy
 8008b34:	f3bf 8f6f 	isb	sy
}
 8008b38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 8008b3c:	4b10      	ldr	r3, [pc, #64]	@ (8008b80 <prvAddNewTaskToReadyList+0xf8>)
 8008b3e:	681a      	ldr	r2, [r3, #0]
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008b40:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
			if( xSchedulerRunning == pdFALSE )
 8008b42:	2a00      	cmp	r2, #0
 8008b44:	d1d2      	bne.n	8008aec <prvAddNewTaskToReadyList+0x64>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008b46:	6832      	ldr	r2, [r6, #0]
 8008b48:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8008b4a:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 8008b4c:	bf98      	it	ls
 8008b4e:	6034      	strls	r4, [r6, #0]
 8008b50:	e7cc      	b.n	8008aec <prvAddNewTaskToReadyList+0x64>
 8008b52:	bf00      	nop
 8008b54:	20014944 	.word	0x20014944
 8008b58:	20014e18 	.word	0x20014e18
 8008b5c:	200149b8 	.word	0x200149b8
 8008b60:	20014990 	.word	0x20014990
 8008b64:	20014974 	.word	0x20014974
 8008b68:	20014960 	.word	0x20014960
 8008b6c:	20014948 	.word	0x20014948
 8008b70:	2001498c 	.word	0x2001498c
 8008b74:	20014988 	.word	0x20014988
 8008b78:	20014928 	.word	0x20014928
 8008b7c:	2001493c 	.word	0x2001493c
 8008b80:	20014938 	.word	0x20014938
 8008b84:	200149a4 	.word	0x200149a4

08008b88 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008b8a:	4b15      	ldr	r3, [pc, #84]	@ (8008be0 <prvAddCurrentTaskToDelayedList+0x58>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008b8c:	4d15      	ldr	r5, [pc, #84]	@ (8008be4 <prvAddCurrentTaskToDelayedList+0x5c>)
const TickType_t xConstTickCount = xTickCount;
 8008b8e:	681c      	ldr	r4, [r3, #0]
{
 8008b90:	4606      	mov	r6, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008b92:	6828      	ldr	r0, [r5, #0]
 8008b94:	3004      	adds	r0, #4
{
 8008b96:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008b98:	f7ff f8b6 	bl	8007d08 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008b9c:	1c73      	adds	r3, r6, #1
 8008b9e:	d107      	bne.n	8008bb0 <prvAddCurrentTaskToDelayedList+0x28>
 8008ba0:	b137      	cbz	r7, 8008bb0 <prvAddCurrentTaskToDelayedList+0x28>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008ba2:	6829      	ldr	r1, [r5, #0]
 8008ba4:	4810      	ldr	r0, [pc, #64]	@ (8008be8 <prvAddCurrentTaskToDelayedList+0x60>)

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008ba6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008baa:	3104      	adds	r1, #4
 8008bac:	f7ff b88a 	b.w	8007cc4 <vListInsertEnd>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008bb0:	682b      	ldr	r3, [r5, #0]
 8008bb2:	19a4      	adds	r4, r4, r6
 8008bb4:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008bb6:	d307      	bcc.n	8008bc8 <prvAddCurrentTaskToDelayedList+0x40>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008bb8:	4b0c      	ldr	r3, [pc, #48]	@ (8008bec <prvAddCurrentTaskToDelayedList+0x64>)
 8008bba:	6818      	ldr	r0, [r3, #0]
 8008bbc:	6829      	ldr	r1, [r5, #0]
}
 8008bbe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008bc2:	3104      	adds	r1, #4
 8008bc4:	f7ff b889 	b.w	8007cda <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008bc8:	4b09      	ldr	r3, [pc, #36]	@ (8008bf0 <prvAddCurrentTaskToDelayedList+0x68>)
 8008bca:	6818      	ldr	r0, [r3, #0]
 8008bcc:	6829      	ldr	r1, [r5, #0]
 8008bce:	3104      	adds	r1, #4
 8008bd0:	f7ff f883 	bl	8007cda <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008bd4:	4b07      	ldr	r3, [pc, #28]	@ (8008bf4 <prvAddCurrentTaskToDelayedList+0x6c>)
 8008bd6:	681a      	ldr	r2, [r3, #0]
 8008bd8:	42a2      	cmp	r2, r4
					xNextTaskUnblockTime = xTimeToWake;
 8008bda:	bf88      	it	hi
 8008bdc:	601c      	strhi	r4, [r3, #0]
}
 8008bde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008be0:	20014940 	.word	0x20014940
 8008be4:	20014e18 	.word	0x20014e18
 8008be8:	20014948 	.word	0x20014948
 8008bec:	20014988 	.word	0x20014988
 8008bf0:	2001498c 	.word	0x2001498c
 8008bf4:	20014924 	.word	0x20014924

08008bf8 <prvResetNextTaskUnblockTime>:
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008bf8:	4a06      	ldr	r2, [pc, #24]	@ (8008c14 <prvResetNextTaskUnblockTime+0x1c>)
 8008bfa:	6813      	ldr	r3, [r2, #0]
 8008bfc:	6819      	ldr	r1, [r3, #0]
 8008bfe:	4b06      	ldr	r3, [pc, #24]	@ (8008c18 <prvResetNextTaskUnblockTime+0x20>)
 8008c00:	b919      	cbnz	r1, 8008c0a <prvResetNextTaskUnblockTime+0x12>
		xNextTaskUnblockTime = portMAX_DELAY;
 8008c02:	f04f 32ff 	mov.w	r2, #4294967295
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008c06:	601a      	str	r2, [r3, #0]
}
 8008c08:	4770      	bx	lr
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c0a:	6812      	ldr	r2, [r2, #0]
 8008c0c:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008c0e:	68d2      	ldr	r2, [r2, #12]
 8008c10:	6852      	ldr	r2, [r2, #4]
 8008c12:	e7f8      	b.n	8008c06 <prvResetNextTaskUnblockTime+0xe>
 8008c14:	2001498c 	.word	0x2001498c
 8008c18:	20014924 	.word	0x20014924

08008c1c <prvDeleteTCB>:
	{
 8008c1c:	b510      	push	{r4, lr}
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008c1e:	f890 305d 	ldrb.w	r3, [r0, #93]	@ 0x5d
	{
 8008c22:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008c24:	b93b      	cbnz	r3, 8008c36 <prvDeleteTCB+0x1a>
				vPortFree( pxTCB->pxStack );
 8008c26:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8008c28:	f7ff f800 	bl	8007c2c <vPortFree>
				vPortFree( pxTCB );
 8008c2c:	4620      	mov	r0, r4
	}
 8008c2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 8008c32:	f7fe bffb 	b.w	8007c2c <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008c36:	2b01      	cmp	r3, #1
 8008c38:	d0f9      	beq.n	8008c2e <prvDeleteTCB+0x12>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008c3a:	2b02      	cmp	r3, #2
 8008c3c:	d008      	beq.n	8008c50 <prvDeleteTCB+0x34>
 8008c3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c42:	f383 8811 	msr	BASEPRI, r3
 8008c46:	f3bf 8f6f 	isb	sy
 8008c4a:	f3bf 8f4f 	dsb	sy
 8008c4e:	e7fe      	b.n	8008c4e <prvDeleteTCB+0x32>
	}
 8008c50:	bd10      	pop	{r4, pc}
	...

08008c54 <prvIdleTask>:
{
 8008c54:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008c56:	4c13      	ldr	r4, [pc, #76]	@ (8008ca4 <prvIdleTask+0x50>)
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c58:	4f13      	ldr	r7, [pc, #76]	@ (8008ca8 <prvIdleTask+0x54>)
				--uxCurrentNumberOfTasks;
 8008c5a:	4d14      	ldr	r5, [pc, #80]	@ (8008cac <prvIdleTask+0x58>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008c5c:	6823      	ldr	r3, [r4, #0]
 8008c5e:	b973      	cbnz	r3, 8008c7e <prvIdleTask+0x2a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008c60:	4b13      	ldr	r3, [pc, #76]	@ (8008cb0 <prvIdleTask+0x5c>)
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	2b01      	cmp	r3, #1
 8008c66:	d9f8      	bls.n	8008c5a <prvIdleTask+0x6>
				taskYIELD();
 8008c68:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8008c6c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008c70:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8008c74:	f3bf 8f4f 	dsb	sy
 8008c78:	f3bf 8f6f 	isb	sy
 8008c7c:	e7ed      	b.n	8008c5a <prvIdleTask+0x6>
			taskENTER_CRITICAL();
 8008c7e:	f7ff f8b9 	bl	8007df4 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008c86:	1d30      	adds	r0, r6, #4
 8008c88:	f7ff f83e 	bl	8007d08 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008c8c:	682b      	ldr	r3, [r5, #0]
 8008c8e:	3b01      	subs	r3, #1
 8008c90:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008c92:	6823      	ldr	r3, [r4, #0]
 8008c94:	3b01      	subs	r3, #1
 8008c96:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 8008c98:	f7ff f8cc 	bl	8007e34 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8008c9c:	4630      	mov	r0, r6
 8008c9e:	f7ff ffbd 	bl	8008c1c <prvDeleteTCB>
 8008ca2:	e7db      	b.n	8008c5c <prvIdleTask+0x8>
 8008ca4:	2001495c 	.word	0x2001495c
 8008ca8:	20014960 	.word	0x20014960
 8008cac:	20014944 	.word	0x20014944
 8008cb0:	200149b8 	.word	0x200149b8

08008cb4 <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8008cb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008cb8:	e9dd 9409 	ldrd	r9, r4, [sp, #36]	@ 0x24
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008cbc:	0096      	lsls	r6, r2, #2
 8008cbe:	4632      	mov	r2, r6
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8008cc0:	4607      	mov	r7, r0
 8008cc2:	460d      	mov	r5, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008cc4:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8008cc6:	21a5      	movs	r1, #165	@ 0xa5
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8008cc8:	4698      	mov	r8, r3
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008cca:	f00b fe42 	bl	8014952 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008cce:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8008cd0:	3e04      	subs	r6, #4
 8008cd2:	441e      	add	r6, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008cd4:	f026 0607 	bic.w	r6, r6, #7
	if( pcName != NULL )
 8008cd8:	b3b5      	cbz	r5, 8008d48 <prvInitialiseNewTask.constprop.0+0x94>
 8008cda:	1e6b      	subs	r3, r5, #1
 8008cdc:	f104 0233 	add.w	r2, r4, #51	@ 0x33
 8008ce0:	350f      	adds	r5, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008ce2:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8008ce6:	f802 1f01 	strb.w	r1, [r2, #1]!
			if( pcName[ x ] == ( char ) 0x00 )
 8008cea:	b109      	cbz	r1, 8008cf0 <prvInitialiseNewTask.constprop.0+0x3c>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008cec:	42ab      	cmp	r3, r5
 8008cee:	d1f8      	bne.n	8008ce2 <prvInitialiseNewTask.constprop.0+0x2e>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008cf0:	2300      	movs	r3, #0
 8008cf2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008cf6:	9d08      	ldr	r5, [sp, #32]
 8008cf8:	2d37      	cmp	r5, #55	@ 0x37
 8008cfa:	bf28      	it	cs
 8008cfc:	2537      	movcs	r5, #55	@ 0x37
		pxNewTCB->uxMutexesHeld = 0;
 8008cfe:	f04f 0a00 	mov.w	sl, #0
	pxNewTCB->uxPriority = uxPriority;
 8008d02:	62e5      	str	r5, [r4, #44]	@ 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8008d04:	64e5      	str	r5, [r4, #76]	@ 0x4c
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008d06:	1d20      	adds	r0, r4, #4
		pxNewTCB->uxMutexesHeld = 0;
 8008d08:	f8c4 a050 	str.w	sl, [r4, #80]	@ 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008d0c:	f7fe ffd7 	bl	8007cbe <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008d10:	f1c5 0538 	rsb	r5, r5, #56	@ 0x38
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008d14:	f104 0018 	add.w	r0, r4, #24
 8008d18:	f7fe ffd1 	bl	8007cbe <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8008d1c:	f8c4 a058 	str.w	sl, [r4, #88]	@ 0x58
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008d20:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008d22:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008d24:	6264      	str	r4, [r4, #36]	@ 0x24
		pxNewTCB->pxTaskTag = NULL;
 8008d26:	f8c4 a054 	str.w	sl, [r4, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008d2a:	f884 a05c 	strb.w	sl, [r4, #92]	@ 0x5c
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008d2e:	4642      	mov	r2, r8
 8008d30:	4639      	mov	r1, r7
 8008d32:	4630      	mov	r0, r6
 8008d34:	f7ff f836 	bl	8007da4 <pxPortInitialiseStack>
 8008d38:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 8008d3a:	f1b9 0f00 	cmp.w	r9, #0
 8008d3e:	d001      	beq.n	8008d44 <prvInitialiseNewTask.constprop.0+0x90>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008d40:	f8c9 4000 	str.w	r4, [r9]
}
 8008d44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008d48:	f884 5034 	strb.w	r5, [r4, #52]	@ 0x34
 8008d4c:	e7d3      	b.n	8008cf6 <prvInitialiseNewTask.constprop.0+0x42>

08008d4e <xTaskCreateStatic>:
	{
 8008d4e:	b570      	push	{r4, r5, r6, lr}
 8008d50:	b086      	sub	sp, #24
 8008d52:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	@ 0x2c
		configASSERT( puxStackBuffer != NULL );
 8008d56:	b945      	cbnz	r5, 8008d6a <xTaskCreateStatic+0x1c>
 8008d58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d5c:	f383 8811 	msr	BASEPRI, r3
 8008d60:	f3bf 8f6f 	isb	sy
 8008d64:	f3bf 8f4f 	dsb	sy
 8008d68:	e7fe      	b.n	8008d68 <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 8008d6a:	b944      	cbnz	r4, 8008d7e <xTaskCreateStatic+0x30>
 8008d6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d70:	f383 8811 	msr	BASEPRI, r3
 8008d74:	f3bf 8f6f 	isb	sy
 8008d78:	f3bf 8f4f 	dsb	sy
 8008d7c:	e7fe      	b.n	8008d7c <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 8008d7e:	2660      	movs	r6, #96	@ 0x60
 8008d80:	9605      	str	r6, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008d82:	9e05      	ldr	r6, [sp, #20]
 8008d84:	2e60      	cmp	r6, #96	@ 0x60
 8008d86:	d008      	beq.n	8008d9a <xTaskCreateStatic+0x4c>
 8008d88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d8c:	f383 8811 	msr	BASEPRI, r3
 8008d90:	f3bf 8f6f 	isb	sy
 8008d94:	f3bf 8f4f 	dsb	sy
 8008d98:	e7fe      	b.n	8008d98 <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008d9a:	6325      	str	r5, [r4, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008d9c:	2502      	movs	r5, #2
 8008d9e:	f884 505d 	strb.w	r5, [r4, #93]	@ 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008da2:	ad04      	add	r5, sp, #16
 8008da4:	9501      	str	r5, [sp, #4]
 8008da6:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8008da8:	9402      	str	r4, [sp, #8]
 8008daa:	9500      	str	r5, [sp, #0]
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008dac:	9e05      	ldr	r6, [sp, #20]
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008dae:	f7ff ff81 	bl	8008cb4 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008db2:	4620      	mov	r0, r4
 8008db4:	f7ff fe68 	bl	8008a88 <prvAddNewTaskToReadyList>
	}
 8008db8:	9804      	ldr	r0, [sp, #16]
 8008dba:	b006      	add	sp, #24
 8008dbc:	bd70      	pop	{r4, r5, r6, pc}

08008dbe <xTaskCreate>:
	{
 8008dbe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008dc2:	4607      	mov	r7, r0
 8008dc4:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008dc6:	0090      	lsls	r0, r2, #2
	{
 8008dc8:	4688      	mov	r8, r1
 8008dca:	4616      	mov	r6, r2
 8008dcc:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008dce:	f7fe fe95 	bl	8007afc <pvPortMalloc>
			if( pxStack != NULL )
 8008dd2:	4605      	mov	r5, r0
 8008dd4:	b920      	cbnz	r0, 8008de0 <xTaskCreate+0x22>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008dd6:	f04f 30ff 	mov.w	r0, #4294967295
	}
 8008dda:	b005      	add	sp, #20
 8008ddc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008de0:	2060      	movs	r0, #96	@ 0x60
 8008de2:	f7fe fe8b 	bl	8007afc <pvPortMalloc>
				if( pxNewTCB != NULL )
 8008de6:	4604      	mov	r4, r0
 8008de8:	b198      	cbz	r0, 8008e12 <xTaskCreate+0x54>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008dea:	2300      	movs	r3, #0
 8008dec:	f880 305d 	strb.w	r3, [r0, #93]	@ 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008df0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
					pxNewTCB->pxStack = pxStack;
 8008df2:	6305      	str	r5, [r0, #48]	@ 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008df4:	9301      	str	r3, [sp, #4]
 8008df6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008df8:	9002      	str	r0, [sp, #8]
 8008dfa:	9300      	str	r3, [sp, #0]
 8008dfc:	4632      	mov	r2, r6
 8008dfe:	464b      	mov	r3, r9
 8008e00:	4641      	mov	r1, r8
 8008e02:	4638      	mov	r0, r7
 8008e04:	f7ff ff56 	bl	8008cb4 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008e08:	4620      	mov	r0, r4
 8008e0a:	f7ff fe3d 	bl	8008a88 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008e0e:	2001      	movs	r0, #1
 8008e10:	e7e3      	b.n	8008dda <xTaskCreate+0x1c>
					vPortFree( pxStack );
 8008e12:	4628      	mov	r0, r5
 8008e14:	f7fe ff0a 	bl	8007c2c <vPortFree>
		if( pxNewTCB != NULL )
 8008e18:	e7dd      	b.n	8008dd6 <xTaskCreate+0x18>
	...

08008e1c <vTaskStartScheduler>:
{
 8008e1c:	b510      	push	{r4, lr}
 8008e1e:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008e20:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008e22:	aa07      	add	r2, sp, #28
 8008e24:	a906      	add	r1, sp, #24
 8008e26:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008e28:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008e2c:	f7fe fe28 	bl	8007a80 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008e30:	9b05      	ldr	r3, [sp, #20]
 8008e32:	9302      	str	r3, [sp, #8]
 8008e34:	9b06      	ldr	r3, [sp, #24]
 8008e36:	9a07      	ldr	r2, [sp, #28]
 8008e38:	4916      	ldr	r1, [pc, #88]	@ (8008e94 <vTaskStartScheduler+0x78>)
 8008e3a:	4817      	ldr	r0, [pc, #92]	@ (8008e98 <vTaskStartScheduler+0x7c>)
 8008e3c:	e9cd 4300 	strd	r4, r3, [sp]
 8008e40:	4623      	mov	r3, r4
 8008e42:	f7ff ff84 	bl	8008d4e <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 8008e46:	b318      	cbz	r0, 8008e90 <vTaskStartScheduler+0x74>
			xReturn = xTimerCreateTimerTask();
 8008e48:	f000 fba6 	bl	8009598 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 8008e4c:	2801      	cmp	r0, #1
 8008e4e:	d114      	bne.n	8008e7a <vTaskStartScheduler+0x5e>
 8008e50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e54:	f383 8811 	msr	BASEPRI, r3
 8008e58:	f3bf 8f6f 	isb	sy
 8008e5c:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8008e60:	4b0e      	ldr	r3, [pc, #56]	@ (8008e9c <vTaskStartScheduler+0x80>)
 8008e62:	f04f 32ff 	mov.w	r2, #4294967295
 8008e66:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008e68:	4b0d      	ldr	r3, [pc, #52]	@ (8008ea0 <vTaskStartScheduler+0x84>)
 8008e6a:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008e6c:	4b0d      	ldr	r3, [pc, #52]	@ (8008ea4 <vTaskStartScheduler+0x88>)
 8008e6e:	601c      	str	r4, [r3, #0]
}
 8008e70:	b008      	add	sp, #32
 8008e72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 8008e76:	f7ff b84d 	b.w	8007f14 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008e7a:	3001      	adds	r0, #1
 8008e7c:	d108      	bne.n	8008e90 <vTaskStartScheduler+0x74>
 8008e7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e82:	f383 8811 	msr	BASEPRI, r3
 8008e86:	f3bf 8f6f 	isb	sy
 8008e8a:	f3bf 8f4f 	dsb	sy
 8008e8e:	e7fe      	b.n	8008e8e <vTaskStartScheduler+0x72>
}
 8008e90:	b008      	add	sp, #32
 8008e92:	bd10      	pop	{r4, pc}
 8008e94:	08016820 	.word	0x08016820
 8008e98:	08008c55 	.word	0x08008c55
 8008e9c:	20014924 	.word	0x20014924
 8008ea0:	20014938 	.word	0x20014938
 8008ea4:	20014940 	.word	0x20014940

08008ea8 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8008ea8:	4a02      	ldr	r2, [pc, #8]	@ (8008eb4 <vTaskSuspendAll+0xc>)
 8008eaa:	6813      	ldr	r3, [r2, #0]
 8008eac:	3301      	adds	r3, #1
 8008eae:	6013      	str	r3, [r2, #0]
}
 8008eb0:	4770      	bx	lr
 8008eb2:	bf00      	nop
 8008eb4:	20014920 	.word	0x20014920

08008eb8 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8008eb8:	4b01      	ldr	r3, [pc, #4]	@ (8008ec0 <xTaskGetTickCount+0x8>)
 8008eba:	6818      	ldr	r0, [r3, #0]
}
 8008ebc:	4770      	bx	lr
 8008ebe:	bf00      	nop
 8008ec0:	20014940 	.word	0x20014940

08008ec4 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008ec4:	4b3f      	ldr	r3, [pc, #252]	@ (8008fc4 <xTaskIncrementTick+0x100>)
 8008ec6:	681b      	ldr	r3, [r3, #0]
{
 8008ec8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d172      	bne.n	8008fb6 <xTaskIncrementTick+0xf2>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008ed0:	4b3d      	ldr	r3, [pc, #244]	@ (8008fc8 <xTaskIncrementTick+0x104>)
 8008ed2:	681c      	ldr	r4, [r3, #0]
 8008ed4:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 8008ed6:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008ed8:	b9bc      	cbnz	r4, 8008f0a <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8008eda:	4b3c      	ldr	r3, [pc, #240]	@ (8008fcc <xTaskIncrementTick+0x108>)
 8008edc:	681a      	ldr	r2, [r3, #0]
 8008ede:	6812      	ldr	r2, [r2, #0]
 8008ee0:	b142      	cbz	r2, 8008ef4 <xTaskIncrementTick+0x30>
 8008ee2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ee6:	f383 8811 	msr	BASEPRI, r3
 8008eea:	f3bf 8f6f 	isb	sy
 8008eee:	f3bf 8f4f 	dsb	sy
 8008ef2:	e7fe      	b.n	8008ef2 <xTaskIncrementTick+0x2e>
 8008ef4:	4a36      	ldr	r2, [pc, #216]	@ (8008fd0 <xTaskIncrementTick+0x10c>)
 8008ef6:	6819      	ldr	r1, [r3, #0]
 8008ef8:	6810      	ldr	r0, [r2, #0]
 8008efa:	6018      	str	r0, [r3, #0]
 8008efc:	6011      	str	r1, [r2, #0]
 8008efe:	4a35      	ldr	r2, [pc, #212]	@ (8008fd4 <xTaskIncrementTick+0x110>)
 8008f00:	6813      	ldr	r3, [r2, #0]
 8008f02:	3301      	adds	r3, #1
 8008f04:	6013      	str	r3, [r2, #0]
 8008f06:	f7ff fe77 	bl	8008bf8 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008f0a:	4d33      	ldr	r5, [pc, #204]	@ (8008fd8 <xTaskIncrementTick+0x114>)
 8008f0c:	4e33      	ldr	r6, [pc, #204]	@ (8008fdc <xTaskIncrementTick+0x118>)
 8008f0e:	682b      	ldr	r3, [r5, #0]
 8008f10:	4f33      	ldr	r7, [pc, #204]	@ (8008fe0 <xTaskIncrementTick+0x11c>)
 8008f12:	429c      	cmp	r4, r3
BaseType_t xSwitchRequired = pdFALSE;
 8008f14:	f04f 0b00 	mov.w	fp, #0
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008f18:	d212      	bcs.n	8008f40 <xTaskIncrementTick+0x7c>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008f1a:	683a      	ldr	r2, [r7, #0]
 8008f1c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8008f1e:	2114      	movs	r1, #20
 8008f20:	434a      	muls	r2, r1
 8008f22:	58b2      	ldr	r2, [r6, r2]
				xSwitchRequired = pdTRUE;
 8008f24:	2a02      	cmp	r2, #2
			if( xYieldPending != pdFALSE )
 8008f26:	4a2f      	ldr	r2, [pc, #188]	@ (8008fe4 <xTaskIncrementTick+0x120>)
 8008f28:	6812      	ldr	r2, [r2, #0]
				xSwitchRequired = pdTRUE;
 8008f2a:	bf28      	it	cs
 8008f2c:	f04f 0b01 	movcs.w	fp, #1
				xSwitchRequired = pdTRUE;
 8008f30:	2a00      	cmp	r2, #0
 8008f32:	bf18      	it	ne
 8008f34:	f04f 0b01 	movne.w	fp, #1
}
 8008f38:	4658      	mov	r0, fp
 8008f3a:	b003      	add	sp, #12
 8008f3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008f40:	f8df 9088 	ldr.w	r9, [pc, #136]	@ 8008fcc <xTaskIncrementTick+0x108>
					prvAddTaskToReadyList( pxTCB );
 8008f44:	f8df a0a4 	ldr.w	sl, [pc, #164]	@ 8008fec <xTaskIncrementTick+0x128>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008f48:	f8d9 2000 	ldr.w	r2, [r9]
 8008f4c:	6812      	ldr	r2, [r2, #0]
 8008f4e:	b91a      	cbnz	r2, 8008f58 <xTaskIncrementTick+0x94>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f50:	f04f 32ff 	mov.w	r2, #4294967295
 8008f54:	602a      	str	r2, [r5, #0]
					break;
 8008f56:	e7e0      	b.n	8008f1a <xTaskIncrementTick+0x56>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f58:	f8d9 2000 	ldr.w	r2, [r9]
 8008f5c:	68d2      	ldr	r2, [r2, #12]
 8008f5e:	f8d2 800c 	ldr.w	r8, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008f62:	f8d8 1004 	ldr.w	r1, [r8, #4]
					if( xConstTickCount < xItemValue )
 8008f66:	428c      	cmp	r4, r1
 8008f68:	d201      	bcs.n	8008f6e <xTaskIncrementTick+0xaa>
						xNextTaskUnblockTime = xItemValue;
 8008f6a:	6029      	str	r1, [r5, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008f6c:	e7d5      	b.n	8008f1a <xTaskIncrementTick+0x56>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008f6e:	f108 0304 	add.w	r3, r8, #4
 8008f72:	4618      	mov	r0, r3
 8008f74:	9301      	str	r3, [sp, #4]
 8008f76:	f7fe fec7 	bl	8007d08 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008f7a:	f8d8 1028 	ldr.w	r1, [r8, #40]	@ 0x28
 8008f7e:	b119      	cbz	r1, 8008f88 <xTaskIncrementTick+0xc4>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008f80:	f108 0018 	add.w	r0, r8, #24
 8008f84:	f7fe fec0 	bl	8007d08 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008f88:	f8d8 002c 	ldr.w	r0, [r8, #44]	@ 0x2c
 8008f8c:	f8da 1000 	ldr.w	r1, [sl]
 8008f90:	2314      	movs	r3, #20
 8008f92:	4288      	cmp	r0, r1
 8008f94:	bf88      	it	hi
 8008f96:	f8ca 0000 	strhi.w	r0, [sl]
 8008f9a:	9901      	ldr	r1, [sp, #4]
 8008f9c:	fb03 6000 	mla	r0, r3, r0, r6
 8008fa0:	f7fe fe90 	bl	8007cc4 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008fa4:	6838      	ldr	r0, [r7, #0]
 8008fa6:	f8d8 102c 	ldr.w	r1, [r8, #44]	@ 0x2c
 8008faa:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
							xSwitchRequired = pdTRUE;
 8008fac:	4291      	cmp	r1, r2
 8008fae:	bf28      	it	cs
 8008fb0:	f04f 0b01 	movcs.w	fp, #1
 8008fb4:	e7c8      	b.n	8008f48 <xTaskIncrementTick+0x84>
		++xPendedTicks;
 8008fb6:	4a0c      	ldr	r2, [pc, #48]	@ (8008fe8 <xTaskIncrementTick+0x124>)
 8008fb8:	6813      	ldr	r3, [r2, #0]
 8008fba:	3301      	adds	r3, #1
 8008fbc:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8008fbe:	f04f 0b00 	mov.w	fp, #0
 8008fc2:	e7b9      	b.n	8008f38 <xTaskIncrementTick+0x74>
 8008fc4:	20014920 	.word	0x20014920
 8008fc8:	20014940 	.word	0x20014940
 8008fcc:	2001498c 	.word	0x2001498c
 8008fd0:	20014988 	.word	0x20014988
 8008fd4:	2001492c 	.word	0x2001492c
 8008fd8:	20014924 	.word	0x20014924
 8008fdc:	200149b8 	.word	0x200149b8
 8008fe0:	20014e18 	.word	0x20014e18
 8008fe4:	20014930 	.word	0x20014930
 8008fe8:	20014934 	.word	0x20014934
 8008fec:	2001493c 	.word	0x2001493c

08008ff0 <xTaskResumeAll>:
{
 8008ff0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	configASSERT( uxSchedulerSuspended );
 8008ff4:	4c30      	ldr	r4, [pc, #192]	@ (80090b8 <xTaskResumeAll+0xc8>)
 8008ff6:	6823      	ldr	r3, [r4, #0]
 8008ff8:	b943      	cbnz	r3, 800900c <xTaskResumeAll+0x1c>
 8008ffa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ffe:	f383 8811 	msr	BASEPRI, r3
 8009002:	f3bf 8f6f 	isb	sy
 8009006:	f3bf 8f4f 	dsb	sy
 800900a:	e7fe      	b.n	800900a <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 800900c:	f7fe fef2 	bl	8007df4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8009010:	6823      	ldr	r3, [r4, #0]
 8009012:	3b01      	subs	r3, #1
 8009014:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009016:	6824      	ldr	r4, [r4, #0]
 8009018:	b12c      	cbz	r4, 8009026 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 800901a:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800901c:	f7fe ff0a 	bl	8007e34 <vPortExitCritical>
}
 8009020:	4620      	mov	r0, r4
 8009022:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009026:	4b25      	ldr	r3, [pc, #148]	@ (80090bc <xTaskResumeAll+0xcc>)
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	2b00      	cmp	r3, #0
 800902c:	d0f5      	beq.n	800901a <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800902e:	4d24      	ldr	r5, [pc, #144]	@ (80090c0 <xTaskResumeAll+0xd0>)
					prvAddTaskToReadyList( pxTCB );
 8009030:	4e24      	ldr	r6, [pc, #144]	@ (80090c4 <xTaskResumeAll+0xd4>)
 8009032:	f8df 80a0 	ldr.w	r8, [pc, #160]	@ 80090d4 <xTaskResumeAll+0xe4>
 8009036:	e01d      	b.n	8009074 <xTaskResumeAll+0x84>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009038:	68eb      	ldr	r3, [r5, #12]
 800903a:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800903c:	1d27      	adds	r7, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800903e:	f104 0018 	add.w	r0, r4, #24
 8009042:	f7fe fe61 	bl	8007d08 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009046:	4638      	mov	r0, r7
 8009048:	f7fe fe5e 	bl	8007d08 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800904c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800904e:	6832      	ldr	r2, [r6, #0]
 8009050:	2014      	movs	r0, #20
 8009052:	4293      	cmp	r3, r2
 8009054:	fb00 8003 	mla	r0, r0, r3, r8
 8009058:	4639      	mov	r1, r7
 800905a:	bf88      	it	hi
 800905c:	6033      	strhi	r3, [r6, #0]
 800905e:	f7fe fe31 	bl	8007cc4 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009062:	4b19      	ldr	r3, [pc, #100]	@ (80090c8 <xTaskResumeAll+0xd8>)
 8009064:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800906a:	429a      	cmp	r2, r3
 800906c:	d302      	bcc.n	8009074 <xTaskResumeAll+0x84>
						xYieldPending = pdTRUE;
 800906e:	4b17      	ldr	r3, [pc, #92]	@ (80090cc <xTaskResumeAll+0xdc>)
 8009070:	2201      	movs	r2, #1
 8009072:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009074:	682b      	ldr	r3, [r5, #0]
 8009076:	2b00      	cmp	r3, #0
 8009078:	d1de      	bne.n	8009038 <xTaskResumeAll+0x48>
				if( pxTCB != NULL )
 800907a:	b10c      	cbz	r4, 8009080 <xTaskResumeAll+0x90>
					prvResetNextTaskUnblockTime();
 800907c:	f7ff fdbc 	bl	8008bf8 <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009080:	4d13      	ldr	r5, [pc, #76]	@ (80090d0 <xTaskResumeAll+0xe0>)
 8009082:	682c      	ldr	r4, [r5, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 8009084:	b144      	cbz	r4, 8009098 <xTaskResumeAll+0xa8>
								xYieldPending = pdTRUE;
 8009086:	4e11      	ldr	r6, [pc, #68]	@ (80090cc <xTaskResumeAll+0xdc>)
 8009088:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 800908a:	f7ff ff1b 	bl	8008ec4 <xTaskIncrementTick>
 800908e:	b100      	cbz	r0, 8009092 <xTaskResumeAll+0xa2>
								xYieldPending = pdTRUE;
 8009090:	6037      	str	r7, [r6, #0]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009092:	3c01      	subs	r4, #1
 8009094:	d1f9      	bne.n	800908a <xTaskResumeAll+0x9a>
						xPendedTicks = 0;
 8009096:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8009098:	4b0c      	ldr	r3, [pc, #48]	@ (80090cc <xTaskResumeAll+0xdc>)
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	2b00      	cmp	r3, #0
 800909e:	d0bc      	beq.n	800901a <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 80090a0:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80090a4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80090a8:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80090ac:	f3bf 8f4f 	dsb	sy
 80090b0:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 80090b4:	2401      	movs	r4, #1
 80090b6:	e7b1      	b.n	800901c <xTaskResumeAll+0x2c>
 80090b8:	20014920 	.word	0x20014920
 80090bc:	20014944 	.word	0x20014944
 80090c0:	20014974 	.word	0x20014974
 80090c4:	2001493c 	.word	0x2001493c
 80090c8:	20014e18 	.word	0x20014e18
 80090cc:	20014930 	.word	0x20014930
 80090d0:	20014934 	.word	0x20014934
 80090d4:	200149b8 	.word	0x200149b8

080090d8 <vTaskDelay>:
	{
 80090d8:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 80090da:	b950      	cbnz	r0, 80090f2 <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
 80090dc:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80090e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80090e4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80090e8:	f3bf 8f4f 	dsb	sy
 80090ec:	f3bf 8f6f 	isb	sy
	}
 80090f0:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 80090f2:	4b0a      	ldr	r3, [pc, #40]	@ (800911c <vTaskDelay+0x44>)
 80090f4:	6819      	ldr	r1, [r3, #0]
 80090f6:	b141      	cbz	r1, 800910a <vTaskDelay+0x32>
 80090f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090fc:	f383 8811 	msr	BASEPRI, r3
 8009100:	f3bf 8f6f 	isb	sy
 8009104:	f3bf 8f4f 	dsb	sy
 8009108:	e7fe      	b.n	8009108 <vTaskDelay+0x30>
			vTaskSuspendAll();
 800910a:	f7ff fecd 	bl	8008ea8 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800910e:	f7ff fd3b 	bl	8008b88 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8009112:	f7ff ff6d 	bl	8008ff0 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8009116:	2800      	cmp	r0, #0
 8009118:	d0e0      	beq.n	80090dc <vTaskDelay+0x4>
 800911a:	e7e9      	b.n	80090f0 <vTaskDelay+0x18>
 800911c:	20014920 	.word	0x20014920

08009120 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009120:	4b17      	ldr	r3, [pc, #92]	@ (8009180 <vTaskSwitchContext+0x60>)
 8009122:	681a      	ldr	r2, [r3, #0]
 8009124:	4b17      	ldr	r3, [pc, #92]	@ (8009184 <vTaskSwitchContext+0x64>)
{
 8009126:	b570      	push	{r4, r5, r6, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009128:	b112      	cbz	r2, 8009130 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 800912a:	2201      	movs	r2, #1
 800912c:	601a      	str	r2, [r3, #0]
}
 800912e:	bd70      	pop	{r4, r5, r6, pc}
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009130:	4d15      	ldr	r5, [pc, #84]	@ (8009188 <vTaskSwitchContext+0x68>)
		xYieldPending = pdFALSE;
 8009132:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009134:	682a      	ldr	r2, [r5, #0]
 8009136:	4915      	ldr	r1, [pc, #84]	@ (800918c <vTaskSwitchContext+0x6c>)
 8009138:	2614      	movs	r6, #20
 800913a:	fb06 f302 	mul.w	r3, r6, r2
 800913e:	18c8      	adds	r0, r1, r3
 8009140:	58cc      	ldr	r4, [r1, r3]
 8009142:	b18c      	cbz	r4, 8009168 <vTaskSwitchContext+0x48>
 8009144:	6844      	ldr	r4, [r0, #4]
 8009146:	3308      	adds	r3, #8
 8009148:	6864      	ldr	r4, [r4, #4]
 800914a:	6044      	str	r4, [r0, #4]
 800914c:	440b      	add	r3, r1
 800914e:	429c      	cmp	r4, r3
 8009150:	bf04      	itt	eq
 8009152:	6863      	ldreq	r3, [r4, #4]
 8009154:	6043      	streq	r3, [r0, #4]
 8009156:	2314      	movs	r3, #20
 8009158:	fb03 1102 	mla	r1, r3, r2, r1
 800915c:	684b      	ldr	r3, [r1, #4]
 800915e:	68d9      	ldr	r1, [r3, #12]
 8009160:	4b0b      	ldr	r3, [pc, #44]	@ (8009190 <vTaskSwitchContext+0x70>)
 8009162:	6019      	str	r1, [r3, #0]
 8009164:	602a      	str	r2, [r5, #0]
}
 8009166:	e7e2      	b.n	800912e <vTaskSwitchContext+0xe>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009168:	b942      	cbnz	r2, 800917c <vTaskSwitchContext+0x5c>
 800916a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800916e:	f383 8811 	msr	BASEPRI, r3
 8009172:	f3bf 8f6f 	isb	sy
 8009176:	f3bf 8f4f 	dsb	sy
 800917a:	e7fe      	b.n	800917a <vTaskSwitchContext+0x5a>
 800917c:	3a01      	subs	r2, #1
 800917e:	e7dc      	b.n	800913a <vTaskSwitchContext+0x1a>
 8009180:	20014920 	.word	0x20014920
 8009184:	20014930 	.word	0x20014930
 8009188:	2001493c 	.word	0x2001493c
 800918c:	200149b8 	.word	0x200149b8
 8009190:	20014e18 	.word	0x20014e18

08009194 <vTaskPlaceOnEventList>:
{
 8009194:	b510      	push	{r4, lr}
 8009196:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 8009198:	b940      	cbnz	r0, 80091ac <vTaskPlaceOnEventList+0x18>
 800919a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800919e:	f383 8811 	msr	BASEPRI, r3
 80091a2:	f3bf 8f6f 	isb	sy
 80091a6:	f3bf 8f4f 	dsb	sy
 80091aa:	e7fe      	b.n	80091aa <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80091ac:	4b05      	ldr	r3, [pc, #20]	@ (80091c4 <vTaskPlaceOnEventList+0x30>)
 80091ae:	6819      	ldr	r1, [r3, #0]
 80091b0:	3118      	adds	r1, #24
 80091b2:	f7fe fd92 	bl	8007cda <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80091b6:	4620      	mov	r0, r4
 80091b8:	2101      	movs	r1, #1
}
 80091ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80091be:	f7ff bce3 	b.w	8008b88 <prvAddCurrentTaskToDelayedList>
 80091c2:	bf00      	nop
 80091c4:	20014e18 	.word	0x20014e18

080091c8 <vTaskPlaceOnEventListRestricted>:
	{
 80091c8:	b538      	push	{r3, r4, r5, lr}
 80091ca:	460d      	mov	r5, r1
 80091cc:	4614      	mov	r4, r2
		configASSERT( pxEventList );
 80091ce:	b940      	cbnz	r0, 80091e2 <vTaskPlaceOnEventListRestricted+0x1a>
 80091d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091d4:	f383 8811 	msr	BASEPRI, r3
 80091d8:	f3bf 8f6f 	isb	sy
 80091dc:	f3bf 8f4f 	dsb	sy
 80091e0:	e7fe      	b.n	80091e0 <vTaskPlaceOnEventListRestricted+0x18>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80091e2:	4b07      	ldr	r3, [pc, #28]	@ (8009200 <vTaskPlaceOnEventListRestricted+0x38>)
 80091e4:	6819      	ldr	r1, [r3, #0]
 80091e6:	3118      	adds	r1, #24
 80091e8:	f7fe fd6c 	bl	8007cc4 <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 80091ec:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80091ee:	4621      	mov	r1, r4
 80091f0:	bf0c      	ite	eq
 80091f2:	4628      	moveq	r0, r5
 80091f4:	f04f 30ff 	movne.w	r0, #4294967295
	}
 80091f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80091fc:	f7ff bcc4 	b.w	8008b88 <prvAddCurrentTaskToDelayedList>
 8009200:	20014e18 	.word	0x20014e18

08009204 <xTaskRemoveFromEventList>:
{
 8009204:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009206:	68c3      	ldr	r3, [r0, #12]
 8009208:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800920a:	b944      	cbnz	r4, 800921e <xTaskRemoveFromEventList+0x1a>
 800920c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009210:	f383 8811 	msr	BASEPRI, r3
 8009214:	f3bf 8f6f 	isb	sy
 8009218:	f3bf 8f4f 	dsb	sy
 800921c:	e7fe      	b.n	800921c <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800921e:	f104 0518 	add.w	r5, r4, #24
 8009222:	4628      	mov	r0, r5
 8009224:	f7fe fd70 	bl	8007d08 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009228:	4b10      	ldr	r3, [pc, #64]	@ (800926c <xTaskRemoveFromEventList+0x68>)
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	b9db      	cbnz	r3, 8009266 <xTaskRemoveFromEventList+0x62>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800922e:	1d25      	adds	r5, r4, #4
 8009230:	4628      	mov	r0, r5
 8009232:	f7fe fd69 	bl	8007d08 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009236:	4a0e      	ldr	r2, [pc, #56]	@ (8009270 <xTaskRemoveFromEventList+0x6c>)
 8009238:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800923a:	6811      	ldr	r1, [r2, #0]
 800923c:	428b      	cmp	r3, r1
 800923e:	bf88      	it	hi
 8009240:	6013      	strhi	r3, [r2, #0]
 8009242:	4a0c      	ldr	r2, [pc, #48]	@ (8009274 <xTaskRemoveFromEventList+0x70>)
 8009244:	2014      	movs	r0, #20
 8009246:	4629      	mov	r1, r5
 8009248:	fb00 2003 	mla	r0, r0, r3, r2
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800924c:	f7fe fd3a 	bl	8007cc4 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009250:	4b09      	ldr	r3, [pc, #36]	@ (8009278 <xTaskRemoveFromEventList+0x74>)
 8009252:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009258:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 800925a:	bf83      	ittte	hi
 800925c:	4b07      	ldrhi	r3, [pc, #28]	@ (800927c <xTaskRemoveFromEventList+0x78>)
 800925e:	2001      	movhi	r0, #1
 8009260:	6018      	strhi	r0, [r3, #0]
		xReturn = pdFALSE;
 8009262:	2000      	movls	r0, #0
}
 8009264:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009266:	4806      	ldr	r0, [pc, #24]	@ (8009280 <xTaskRemoveFromEventList+0x7c>)
 8009268:	4629      	mov	r1, r5
 800926a:	e7ef      	b.n	800924c <xTaskRemoveFromEventList+0x48>
 800926c:	20014920 	.word	0x20014920
 8009270:	2001493c 	.word	0x2001493c
 8009274:	200149b8 	.word	0x200149b8
 8009278:	20014e18 	.word	0x20014e18
 800927c:	20014930 	.word	0x20014930
 8009280:	20014974 	.word	0x20014974

08009284 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009284:	4b03      	ldr	r3, [pc, #12]	@ (8009294 <vTaskInternalSetTimeOutState+0x10>)
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800928a:	4b03      	ldr	r3, [pc, #12]	@ (8009298 <vTaskInternalSetTimeOutState+0x14>)
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	6043      	str	r3, [r0, #4]
}
 8009290:	4770      	bx	lr
 8009292:	bf00      	nop
 8009294:	2001492c 	.word	0x2001492c
 8009298:	20014940 	.word	0x20014940

0800929c <xTaskCheckForTimeOut>:
{
 800929c:	b570      	push	{r4, r5, r6, lr}
 800929e:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 80092a0:	4605      	mov	r5, r0
 80092a2:	b940      	cbnz	r0, 80092b6 <xTaskCheckForTimeOut+0x1a>
 80092a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092a8:	f383 8811 	msr	BASEPRI, r3
 80092ac:	f3bf 8f6f 	isb	sy
 80092b0:	f3bf 8f4f 	dsb	sy
 80092b4:	e7fe      	b.n	80092b4 <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 80092b6:	b941      	cbnz	r1, 80092ca <xTaskCheckForTimeOut+0x2e>
 80092b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092bc:	f383 8811 	msr	BASEPRI, r3
 80092c0:	f3bf 8f6f 	isb	sy
 80092c4:	f3bf 8f4f 	dsb	sy
 80092c8:	e7fe      	b.n	80092c8 <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 80092ca:	f7fe fd93 	bl	8007df4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 80092ce:	4b0f      	ldr	r3, [pc, #60]	@ (800930c <xTaskCheckForTimeOut+0x70>)
 80092d0:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 80092d2:	6823      	ldr	r3, [r4, #0]
 80092d4:	1c5a      	adds	r2, r3, #1
 80092d6:	d010      	beq.n	80092fa <xTaskCheckForTimeOut+0x5e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80092d8:	480d      	ldr	r0, [pc, #52]	@ (8009310 <xTaskCheckForTimeOut+0x74>)
 80092da:	682e      	ldr	r6, [r5, #0]
 80092dc:	6800      	ldr	r0, [r0, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80092de:	686a      	ldr	r2, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80092e0:	4286      	cmp	r6, r0
 80092e2:	d001      	beq.n	80092e8 <xTaskCheckForTimeOut+0x4c>
 80092e4:	428a      	cmp	r2, r1
 80092e6:	d90f      	bls.n	8009308 <xTaskCheckForTimeOut+0x6c>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80092e8:	1a88      	subs	r0, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80092ea:	4283      	cmp	r3, r0
 80092ec:	d90a      	bls.n	8009304 <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= xElapsedTime;
 80092ee:	1a5b      	subs	r3, r3, r1
 80092f0:	4413      	add	r3, r2
 80092f2:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80092f4:	4628      	mov	r0, r5
 80092f6:	f7ff ffc5 	bl	8009284 <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 80092fa:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80092fc:	f7fe fd9a 	bl	8007e34 <vPortExitCritical>
}
 8009300:	4620      	mov	r0, r4
 8009302:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 8009304:	2300      	movs	r3, #0
 8009306:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8009308:	2401      	movs	r4, #1
 800930a:	e7f7      	b.n	80092fc <xTaskCheckForTimeOut+0x60>
 800930c:	20014940 	.word	0x20014940
 8009310:	2001492c 	.word	0x2001492c

08009314 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8009314:	4b01      	ldr	r3, [pc, #4]	@ (800931c <vTaskMissedYield+0x8>)
 8009316:	2201      	movs	r2, #1
 8009318:	601a      	str	r2, [r3, #0]
}
 800931a:	4770      	bx	lr
 800931c:	20014930 	.word	0x20014930

08009320 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8009320:	4b05      	ldr	r3, [pc, #20]	@ (8009338 <xTaskGetSchedulerState+0x18>)
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	b133      	cbz	r3, 8009334 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009326:	4b05      	ldr	r3, [pc, #20]	@ (800933c <xTaskGetSchedulerState+0x1c>)
 8009328:	6818      	ldr	r0, [r3, #0]
 800932a:	fab0 f080 	clz	r0, r0
 800932e:	0940      	lsrs	r0, r0, #5
 8009330:	0040      	lsls	r0, r0, #1
 8009332:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009334:	2001      	movs	r0, #1
	}
 8009336:	4770      	bx	lr
 8009338:	20014938 	.word	0x20014938
 800933c:	20014920 	.word	0x20014920

08009340 <xTaskPriorityInherit>:
	{
 8009340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 8009342:	4604      	mov	r4, r0
 8009344:	b338      	cbz	r0, 8009396 <xTaskPriorityInherit+0x56>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8009346:	4d1a      	ldr	r5, [pc, #104]	@ (80093b0 <xTaskPriorityInherit+0x70>)
 8009348:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 800934a:	682a      	ldr	r2, [r5, #0]
 800934c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800934e:	4293      	cmp	r3, r2
 8009350:	d226      	bcs.n	80093a0 <xTaskPriorityInherit+0x60>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009352:	6982      	ldr	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8009354:	4e17      	ldr	r6, [pc, #92]	@ (80093b4 <xTaskPriorityInherit+0x74>)
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009356:	2a00      	cmp	r2, #0
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009358:	bfa1      	itttt	ge
 800935a:	682a      	ldrge	r2, [r5, #0]
 800935c:	6ad2      	ldrge	r2, [r2, #44]	@ 0x2c
 800935e:	f1c2 0238 	rsbge	r2, r2, #56	@ 0x38
 8009362:	6182      	strge	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8009364:	2214      	movs	r2, #20
 8009366:	fb02 6303 	mla	r3, r2, r3, r6
 800936a:	6942      	ldr	r2, [r0, #20]
 800936c:	429a      	cmp	r2, r3
 800936e:	d113      	bne.n	8009398 <xTaskPriorityInherit+0x58>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009370:	1d07      	adds	r7, r0, #4
 8009372:	4638      	mov	r0, r7
 8009374:	f7fe fcc8 	bl	8007d08 <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009378:	682b      	ldr	r3, [r5, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800937a:	4a0f      	ldr	r2, [pc, #60]	@ (80093b8 <xTaskPriorityInherit+0x78>)
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800937c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800937e:	6811      	ldr	r1, [r2, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009380:	62e3      	str	r3, [r4, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009382:	2014      	movs	r0, #20
 8009384:	428b      	cmp	r3, r1
 8009386:	fb00 6003 	mla	r0, r0, r3, r6
 800938a:	4639      	mov	r1, r7
 800938c:	bf88      	it	hi
 800938e:	6013      	strhi	r3, [r2, #0]
 8009390:	f7fe fc98 	bl	8007cc4 <vListInsertEnd>
				xReturn = pdTRUE;
 8009394:	2001      	movs	r0, #1
	}
 8009396:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009398:	682b      	ldr	r3, [r5, #0]
 800939a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800939c:	62c3      	str	r3, [r0, #44]	@ 0x2c
 800939e:	e7f9      	b.n	8009394 <xTaskPriorityInherit+0x54>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80093a0:	682b      	ldr	r3, [r5, #0]
 80093a2:	6cc0      	ldr	r0, [r0, #76]	@ 0x4c
 80093a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093a6:	4298      	cmp	r0, r3
 80093a8:	bf2c      	ite	cs
 80093aa:	2000      	movcs	r0, #0
 80093ac:	2001      	movcc	r0, #1
 80093ae:	e7f2      	b.n	8009396 <xTaskPriorityInherit+0x56>
 80093b0:	20014e18 	.word	0x20014e18
 80093b4:	200149b8 	.word	0x200149b8
 80093b8:	2001493c 	.word	0x2001493c

080093bc <xTaskPriorityDisinherit>:
	{
 80093bc:	b538      	push	{r3, r4, r5, lr}
		if( pxMutexHolder != NULL )
 80093be:	b908      	cbnz	r0, 80093c4 <xTaskPriorityDisinherit+0x8>
	BaseType_t xReturn = pdFALSE;
 80093c0:	2000      	movs	r0, #0
	}
 80093c2:	bd38      	pop	{r3, r4, r5, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 80093c4:	4b1b      	ldr	r3, [pc, #108]	@ (8009434 <xTaskPriorityDisinherit+0x78>)
 80093c6:	681c      	ldr	r4, [r3, #0]
 80093c8:	4284      	cmp	r4, r0
 80093ca:	d008      	beq.n	80093de <xTaskPriorityDisinherit+0x22>
 80093cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093d0:	f383 8811 	msr	BASEPRI, r3
 80093d4:	f3bf 8f6f 	isb	sy
 80093d8:	f3bf 8f4f 	dsb	sy
 80093dc:	e7fe      	b.n	80093dc <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 80093de:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80093e0:	b943      	cbnz	r3, 80093f4 <xTaskPriorityDisinherit+0x38>
 80093e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093e6:	f383 8811 	msr	BASEPRI, r3
 80093ea:	f3bf 8f6f 	isb	sy
 80093ee:	f3bf 8f4f 	dsb	sy
 80093f2:	e7fe      	b.n	80093f2 <xTaskPriorityDisinherit+0x36>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80093f4:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80093f6:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
			( pxTCB->uxMutexesHeld )--;
 80093f8:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80093fa:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
 80093fc:	6523      	str	r3, [r4, #80]	@ 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80093fe:	d0df      	beq.n	80093c0 <xTaskPriorityDisinherit+0x4>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009400:	2b00      	cmp	r3, #0
 8009402:	d1dd      	bne.n	80093c0 <xTaskPriorityDisinherit+0x4>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009404:	1d25      	adds	r5, r4, #4
 8009406:	4628      	mov	r0, r5
 8009408:	f7fe fc7e 	bl	8007d08 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800940c:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800940e:	62e3      	str	r3, [r4, #44]	@ 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009410:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009414:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8009416:	4a08      	ldr	r2, [pc, #32]	@ (8009438 <xTaskPriorityDisinherit+0x7c>)
 8009418:	6811      	ldr	r1, [r2, #0]
 800941a:	428b      	cmp	r3, r1
 800941c:	bf88      	it	hi
 800941e:	6013      	strhi	r3, [r2, #0]
 8009420:	4a06      	ldr	r2, [pc, #24]	@ (800943c <xTaskPriorityDisinherit+0x80>)
 8009422:	2014      	movs	r0, #20
 8009424:	fb00 2003 	mla	r0, r0, r3, r2
 8009428:	4629      	mov	r1, r5
 800942a:	f7fe fc4b 	bl	8007cc4 <vListInsertEnd>
					xReturn = pdTRUE;
 800942e:	2001      	movs	r0, #1
		return xReturn;
 8009430:	e7c7      	b.n	80093c2 <xTaskPriorityDisinherit+0x6>
 8009432:	bf00      	nop
 8009434:	20014e18 	.word	0x20014e18
 8009438:	2001493c 	.word	0x2001493c
 800943c:	200149b8 	.word	0x200149b8

08009440 <vTaskPriorityDisinheritAfterTimeout>:
	{
 8009440:	b570      	push	{r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 8009442:	4604      	mov	r4, r0
 8009444:	2800      	cmp	r0, #0
 8009446:	d041      	beq.n	80094cc <vTaskPriorityDisinheritAfterTimeout+0x8c>
			configASSERT( pxTCB->uxMutexesHeld );
 8009448:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 800944a:	b942      	cbnz	r2, 800945e <vTaskPriorityDisinheritAfterTimeout+0x1e>
 800944c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009450:	f383 8811 	msr	BASEPRI, r3
 8009454:	f3bf 8f6f 	isb	sy
 8009458:	f3bf 8f4f 	dsb	sy
 800945c:	e7fe      	b.n	800945c <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800945e:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8009460:	4299      	cmp	r1, r3
 8009462:	bf38      	it	cc
 8009464:	4619      	movcc	r1, r3
			if( pxTCB->uxPriority != uxPriorityToUse )
 8009466:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8009468:	428b      	cmp	r3, r1
 800946a:	d02f      	beq.n	80094cc <vTaskPriorityDisinheritAfterTimeout+0x8c>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800946c:	2a01      	cmp	r2, #1
 800946e:	d12d      	bne.n	80094cc <vTaskPriorityDisinheritAfterTimeout+0x8c>
					configASSERT( pxTCB != pxCurrentTCB );
 8009470:	4a17      	ldr	r2, [pc, #92]	@ (80094d0 <vTaskPriorityDisinheritAfterTimeout+0x90>)
 8009472:	6812      	ldr	r2, [r2, #0]
 8009474:	4282      	cmp	r2, r0
 8009476:	d108      	bne.n	800948a <vTaskPriorityDisinheritAfterTimeout+0x4a>
 8009478:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800947c:	f383 8811 	msr	BASEPRI, r3
 8009480:	f3bf 8f6f 	isb	sy
 8009484:	f3bf 8f4f 	dsb	sy
 8009488:	e7fe      	b.n	8009488 <vTaskPriorityDisinheritAfterTimeout+0x48>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800948a:	6982      	ldr	r2, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800948c:	4d11      	ldr	r5, [pc, #68]	@ (80094d4 <vTaskPriorityDisinheritAfterTimeout+0x94>)
					pxTCB->uxPriority = uxPriorityToUse;
 800948e:	62c1      	str	r1, [r0, #44]	@ 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009490:	2a00      	cmp	r2, #0
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009492:	f04f 0214 	mov.w	r2, #20
 8009496:	fb02 5303 	mla	r3, r2, r3, r5
 800949a:	6942      	ldr	r2, [r0, #20]
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800949c:	bfa4      	itt	ge
 800949e:	f1c1 0138 	rsbge	r1, r1, #56	@ 0x38
 80094a2:	6181      	strge	r1, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80094a4:	429a      	cmp	r2, r3
 80094a6:	d111      	bne.n	80094cc <vTaskPriorityDisinheritAfterTimeout+0x8c>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80094a8:	1d06      	adds	r6, r0, #4
 80094aa:	4630      	mov	r0, r6
 80094ac:	f7fe fc2c 	bl	8007d08 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 80094b0:	4a09      	ldr	r2, [pc, #36]	@ (80094d8 <vTaskPriorityDisinheritAfterTimeout+0x98>)
 80094b2:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80094b4:	6811      	ldr	r1, [r2, #0]
 80094b6:	2014      	movs	r0, #20
 80094b8:	428b      	cmp	r3, r1
 80094ba:	fb00 5003 	mla	r0, r0, r3, r5
 80094be:	4631      	mov	r1, r6
	}
 80094c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
						prvAddTaskToReadyList( pxTCB );
 80094c4:	bf88      	it	hi
 80094c6:	6013      	strhi	r3, [r2, #0]
 80094c8:	f7fe bbfc 	b.w	8007cc4 <vListInsertEnd>
	}
 80094cc:	bd70      	pop	{r4, r5, r6, pc}
 80094ce:	bf00      	nop
 80094d0:	20014e18 	.word	0x20014e18
 80094d4:	200149b8 	.word	0x200149b8
 80094d8:	2001493c 	.word	0x2001493c

080094dc <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 80094dc:	4b04      	ldr	r3, [pc, #16]	@ (80094f0 <pvTaskIncrementMutexHeldCount+0x14>)
 80094de:	681a      	ldr	r2, [r3, #0]
 80094e0:	b11a      	cbz	r2, 80094ea <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 80094e2:	6819      	ldr	r1, [r3, #0]
 80094e4:	6d0a      	ldr	r2, [r1, #80]	@ 0x50
 80094e6:	3201      	adds	r2, #1
 80094e8:	650a      	str	r2, [r1, #80]	@ 0x50
		return pxCurrentTCB;
 80094ea:	6818      	ldr	r0, [r3, #0]
	}
 80094ec:	4770      	bx	lr
 80094ee:	bf00      	nop
 80094f0:	20014e18 	.word	0x20014e18

080094f4 <prvInsertTimerInActiveList>:
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );

	if( xNextExpiryTime <= xTimeNow )
 80094f4:	4291      	cmp	r1, r2
{
 80094f6:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80094f8:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80094fa:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 80094fc:	d80a      	bhi.n	8009514 <prvInsertTimerInActiveList+0x20>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80094fe:	1ad2      	subs	r2, r2, r3
 8009500:	6983      	ldr	r3, [r0, #24]
 8009502:	429a      	cmp	r2, r3
 8009504:	d20d      	bcs.n	8009522 <prvInsertTimerInActiveList+0x2e>
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009506:	4b08      	ldr	r3, [pc, #32]	@ (8009528 <prvInsertTimerInActiveList+0x34>)
 8009508:	1d01      	adds	r1, r0, #4
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800950a:	6818      	ldr	r0, [r3, #0]
 800950c:	f7fe fbe5 	bl	8007cda <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8009510:	2000      	movs	r0, #0
		}
	}

	return xProcessTimerNow;
}
 8009512:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009514:	429a      	cmp	r2, r3
 8009516:	d201      	bcs.n	800951c <prvInsertTimerInActiveList+0x28>
 8009518:	4299      	cmp	r1, r3
 800951a:	d202      	bcs.n	8009522 <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800951c:	4b03      	ldr	r3, [pc, #12]	@ (800952c <prvInsertTimerInActiveList+0x38>)
 800951e:	1d01      	adds	r1, r0, #4
 8009520:	e7f3      	b.n	800950a <prvInsertTimerInActiveList+0x16>
			xProcessTimerNow = pdTRUE;
 8009522:	2001      	movs	r0, #1
	return xProcessTimerNow;
 8009524:	e7f5      	b.n	8009512 <prvInsertTimerInActiveList+0x1e>
 8009526:	bf00      	nop
 8009528:	20014f18 	.word	0x20014f18
 800952c:	20014f1c 	.word	0x20014f1c

08009530 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009530:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 8009532:	4c11      	ldr	r4, [pc, #68]	@ (8009578 <prvCheckForValidListAndQueue+0x48>)
	taskENTER_CRITICAL();
 8009534:	f7fe fc5e 	bl	8007df4 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 8009538:	6825      	ldr	r5, [r4, #0]
 800953a:	b9bd      	cbnz	r5, 800956c <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
 800953c:	4f0f      	ldr	r7, [pc, #60]	@ (800957c <prvCheckForValidListAndQueue+0x4c>)
			vListInitialise( &xActiveTimerList2 );
 800953e:	4e10      	ldr	r6, [pc, #64]	@ (8009580 <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList1 );
 8009540:	4638      	mov	r0, r7
 8009542:	f7fe fbb1 	bl	8007ca8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009546:	4630      	mov	r0, r6
 8009548:	f7fe fbae 	bl	8007ca8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800954c:	4b0d      	ldr	r3, [pc, #52]	@ (8009584 <prvCheckForValidListAndQueue+0x54>)
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800954e:	4a0e      	ldr	r2, [pc, #56]	@ (8009588 <prvCheckForValidListAndQueue+0x58>)
			pxCurrentTimerList = &xActiveTimerList1;
 8009550:	601f      	str	r7, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009552:	4b0e      	ldr	r3, [pc, #56]	@ (800958c <prvCheckForValidListAndQueue+0x5c>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009554:	2110      	movs	r1, #16
			pxOverflowTimerList = &xActiveTimerList2;
 8009556:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009558:	200a      	movs	r0, #10
 800955a:	4b0d      	ldr	r3, [pc, #52]	@ (8009590 <prvCheckForValidListAndQueue+0x60>)
 800955c:	9500      	str	r5, [sp, #0]
 800955e:	f7fe fe54 	bl	800820a <xQueueGenericCreateStatic>
 8009562:	6020      	str	r0, [r4, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009564:	b110      	cbz	r0, 800956c <prvCheckForValidListAndQueue+0x3c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009566:	490b      	ldr	r1, [pc, #44]	@ (8009594 <prvCheckForValidListAndQueue+0x64>)
 8009568:	f7ff fa2c 	bl	80089c4 <vQueueAddToRegistry>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 800956c:	b003      	add	sp, #12
 800956e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 8009572:	f7fe bc5f 	b.w	8007e34 <vPortExitCritical>
 8009576:	bf00      	nop
 8009578:	20014f14 	.word	0x20014f14
 800957c:	20014f34 	.word	0x20014f34
 8009580:	20014f20 	.word	0x20014f20
 8009584:	20014f1c 	.word	0x20014f1c
 8009588:	20014e6c 	.word	0x20014e6c
 800958c:	20014f18 	.word	0x20014f18
 8009590:	20014e1c 	.word	0x20014e1c
 8009594:	08016825 	.word	0x08016825

08009598 <xTimerCreateTimerTask>:
{
 8009598:	b510      	push	{r4, lr}
 800959a:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 800959c:	f7ff ffc8 	bl	8009530 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 80095a0:	4b12      	ldr	r3, [pc, #72]	@ (80095ec <xTimerCreateTimerTask+0x54>)
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	b1b3      	cbz	r3, 80095d4 <xTimerCreateTimerTask+0x3c>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80095a6:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80095a8:	aa07      	add	r2, sp, #28
 80095aa:	a906      	add	r1, sp, #24
 80095ac:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80095ae:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80095b2:	f7fe fa71 	bl	8007a98 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80095b6:	9b05      	ldr	r3, [sp, #20]
 80095b8:	9302      	str	r3, [sp, #8]
 80095ba:	9b06      	ldr	r3, [sp, #24]
 80095bc:	9301      	str	r3, [sp, #4]
 80095be:	2302      	movs	r3, #2
 80095c0:	9300      	str	r3, [sp, #0]
 80095c2:	9a07      	ldr	r2, [sp, #28]
 80095c4:	490a      	ldr	r1, [pc, #40]	@ (80095f0 <xTimerCreateTimerTask+0x58>)
 80095c6:	480b      	ldr	r0, [pc, #44]	@ (80095f4 <xTimerCreateTimerTask+0x5c>)
 80095c8:	4623      	mov	r3, r4
 80095ca:	f7ff fbc0 	bl	8008d4e <xTaskCreateStatic>
 80095ce:	4b0a      	ldr	r3, [pc, #40]	@ (80095f8 <xTimerCreateTimerTask+0x60>)
 80095d0:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 80095d2:	b940      	cbnz	r0, 80095e6 <xTimerCreateTimerTask+0x4e>
 80095d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095d8:	f383 8811 	msr	BASEPRI, r3
 80095dc:	f3bf 8f6f 	isb	sy
 80095e0:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 80095e4:	e7fe      	b.n	80095e4 <xTimerCreateTimerTask+0x4c>
}
 80095e6:	2001      	movs	r0, #1
 80095e8:	b008      	add	sp, #32
 80095ea:	bd10      	pop	{r4, pc}
 80095ec:	20014f14 	.word	0x20014f14
 80095f0:	0801682a 	.word	0x0801682a
 80095f4:	080096f9 	.word	0x080096f9
 80095f8:	20014f10 	.word	0x20014f10

080095fc <xTimerGenericCommand>:
{
 80095fc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80095fe:	4616      	mov	r6, r2
	configASSERT( xTimer );
 8009600:	4604      	mov	r4, r0
{
 8009602:	461a      	mov	r2, r3
	configASSERT( xTimer );
 8009604:	b940      	cbnz	r0, 8009618 <xTimerGenericCommand+0x1c>
 8009606:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800960a:	f383 8811 	msr	BASEPRI, r3
 800960e:	f3bf 8f6f 	isb	sy
 8009612:	f3bf 8f4f 	dsb	sy
 8009616:	e7fe      	b.n	8009616 <xTimerGenericCommand+0x1a>
	if( xTimerQueue != NULL )
 8009618:	4d0d      	ldr	r5, [pc, #52]	@ (8009650 <xTimerGenericCommand+0x54>)
 800961a:	6828      	ldr	r0, [r5, #0]
 800961c:	b180      	cbz	r0, 8009640 <xTimerGenericCommand+0x44>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800961e:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009620:	e9cd 1600 	strd	r1, r6, [sp]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009624:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009626:	dc0d      	bgt.n	8009644 <xTimerGenericCommand+0x48>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009628:	f7ff fe7a 	bl	8009320 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800962c:	2300      	movs	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800962e:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009630:	bf08      	it	eq
 8009632:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009634:	6828      	ldr	r0, [r5, #0]
 8009636:	bf18      	it	ne
 8009638:	461a      	movne	r2, r3
 800963a:	4669      	mov	r1, sp
 800963c:	f7fe fe9a 	bl	8008374 <xQueueGenericSend>
}
 8009640:	b004      	add	sp, #16
 8009642:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009644:	2300      	movs	r3, #0
 8009646:	4669      	mov	r1, sp
 8009648:	f7fe ff46 	bl	80084d8 <xQueueGenericSendFromISR>
 800964c:	e7f8      	b.n	8009640 <xTimerGenericCommand+0x44>
 800964e:	bf00      	nop
 8009650:	20014f14 	.word	0x20014f14

08009654 <prvSampleTimeNow>:
{
 8009654:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	if( xTimeNow < xLastTime )
 8009658:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 80096f4 <prvSampleTimeNow+0xa0>
{
 800965c:	4606      	mov	r6, r0
	xTimeNow = xTaskGetTickCount();
 800965e:	f7ff fc2b 	bl	8008eb8 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8009662:	f8d8 3000 	ldr.w	r3, [r8]
 8009666:	4283      	cmp	r3, r0
	xTimeNow = xTaskGetTickCount();
 8009668:	4605      	mov	r5, r0
	if( xTimeNow < xLastTime )
 800966a:	d909      	bls.n	8009680 <prvSampleTimeNow+0x2c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800966c:	4f1f      	ldr	r7, [pc, #124]	@ (80096ec <prvSampleTimeNow+0x98>)
 800966e:	683b      	ldr	r3, [r7, #0]
 8009670:	681a      	ldr	r2, [r3, #0]
 8009672:	b96a      	cbnz	r2, 8009690 <prvSampleTimeNow+0x3c>
	pxCurrentTimerList = pxOverflowTimerList;
 8009674:	4a1e      	ldr	r2, [pc, #120]	@ (80096f0 <prvSampleTimeNow+0x9c>)
 8009676:	6811      	ldr	r1, [r2, #0]
 8009678:	6039      	str	r1, [r7, #0]
	pxOverflowTimerList = pxTemp;
 800967a:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
 800967c:	2301      	movs	r3, #1
 800967e:	e000      	b.n	8009682 <prvSampleTimeNow+0x2e>
 8009680:	2300      	movs	r3, #0
}
 8009682:	4628      	mov	r0, r5
		*pxTimerListsWereSwitched = pdTRUE;
 8009684:	6033      	str	r3, [r6, #0]
	xLastTime = xTimeNow;
 8009686:	f8c8 5000 	str.w	r5, [r8]
}
 800968a:	b002      	add	sp, #8
 800968c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009690:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009692:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009694:	f8d3 9000 	ldr.w	r9, [r3]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009698:	f104 0a04 	add.w	sl, r4, #4
 800969c:	4650      	mov	r0, sl
 800969e:	f7fe fb33 	bl	8007d08 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80096a2:	6a23      	ldr	r3, [r4, #32]
 80096a4:	4620      	mov	r0, r4
 80096a6:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80096a8:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 80096ac:	075b      	lsls	r3, r3, #29
 80096ae:	d5de      	bpl.n	800966e <prvSampleTimeNow+0x1a>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80096b0:	69a3      	ldr	r3, [r4, #24]
 80096b2:	444b      	add	r3, r9
			if( xReloadTime > xNextExpireTime )
 80096b4:	4599      	cmp	r9, r3
 80096b6:	d206      	bcs.n	80096c6 <prvSampleTimeNow+0x72>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80096b8:	6838      	ldr	r0, [r7, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80096ba:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80096bc:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80096be:	4651      	mov	r1, sl
 80096c0:	f7fe fb0b 	bl	8007cda <vListInsert>
 80096c4:	e7d3      	b.n	800966e <prvSampleTimeNow+0x1a>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80096c6:	2300      	movs	r3, #0
 80096c8:	9300      	str	r3, [sp, #0]
 80096ca:	464a      	mov	r2, r9
 80096cc:	4619      	mov	r1, r3
 80096ce:	4620      	mov	r0, r4
 80096d0:	f7ff ff94 	bl	80095fc <xTimerGenericCommand>
				configASSERT( xResult );
 80096d4:	2800      	cmp	r0, #0
 80096d6:	d1ca      	bne.n	800966e <prvSampleTimeNow+0x1a>
 80096d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096dc:	f383 8811 	msr	BASEPRI, r3
 80096e0:	f3bf 8f6f 	isb	sy
 80096e4:	f3bf 8f4f 	dsb	sy
 80096e8:	e7fe      	b.n	80096e8 <prvSampleTimeNow+0x94>
 80096ea:	bf00      	nop
 80096ec:	20014f1c 	.word	0x20014f1c
 80096f0:	20014f18 	.word	0x20014f18
 80096f4:	20014f0c 	.word	0x20014f0c

080096f8 <prvTimerTask>:
{
 80096f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80096fc:	4d6e      	ldr	r5, [pc, #440]	@ (80098b8 <prvTimerTask+0x1c0>)
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80096fe:	4e6f      	ldr	r6, [pc, #444]	@ (80098bc <prvTimerTask+0x1c4>)
{
 8009700:	b089      	sub	sp, #36	@ 0x24
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009702:	682b      	ldr	r3, [r5, #0]
 8009704:	f8d3 8000 	ldr.w	r8, [r3]
 8009708:	f1b8 0f00 	cmp.w	r8, #0
 800970c:	d035      	beq.n	800977a <prvTimerTask+0x82>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800970e:	68db      	ldr	r3, [r3, #12]
 8009710:	f8d3 8000 	ldr.w	r8, [r3]
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009714:	2400      	movs	r4, #0
	vTaskSuspendAll();
 8009716:	f7ff fbc7 	bl	8008ea8 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800971a:	a804      	add	r0, sp, #16
 800971c:	f7ff ff9a 	bl	8009654 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 8009720:	9b04      	ldr	r3, [sp, #16]
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009722:	4681      	mov	r9, r0
		if( xTimerListsWereSwitched == pdFALSE )
 8009724:	2b00      	cmp	r3, #0
 8009726:	d169      	bne.n	80097fc <prvTimerTask+0x104>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009728:	2c00      	cmp	r4, #0
 800972a:	d14c      	bne.n	80097c6 <prvTimerTask+0xce>
 800972c:	4540      	cmp	r0, r8
 800972e:	d350      	bcc.n	80097d2 <prvTimerTask+0xda>
				( void ) xTaskResumeAll();
 8009730:	f7ff fc5e 	bl	8008ff0 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009734:	682b      	ldr	r3, [r5, #0]
 8009736:	68db      	ldr	r3, [r3, #12]
 8009738:	68df      	ldr	r7, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800973a:	1d38      	adds	r0, r7, #4
 800973c:	f7fe fae4 	bl	8007d08 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009740:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009744:	0758      	lsls	r0, r3, #29
 8009746:	d51a      	bpl.n	800977e <prvTimerTask+0x86>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009748:	69b9      	ldr	r1, [r7, #24]
 800974a:	4643      	mov	r3, r8
 800974c:	464a      	mov	r2, r9
 800974e:	4441      	add	r1, r8
 8009750:	4638      	mov	r0, r7
 8009752:	f7ff fecf 	bl	80094f4 <prvInsertTimerInActiveList>
 8009756:	b1b0      	cbz	r0, 8009786 <prvTimerTask+0x8e>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009758:	9400      	str	r4, [sp, #0]
 800975a:	4623      	mov	r3, r4
 800975c:	4642      	mov	r2, r8
 800975e:	4621      	mov	r1, r4
 8009760:	4638      	mov	r0, r7
 8009762:	f7ff ff4b 	bl	80095fc <xTimerGenericCommand>
			configASSERT( xResult );
 8009766:	b970      	cbnz	r0, 8009786 <prvTimerTask+0x8e>
 8009768:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800976c:	f383 8811 	msr	BASEPRI, r3
 8009770:	f3bf 8f6f 	isb	sy
 8009774:	f3bf 8f4f 	dsb	sy
 8009778:	e7fe      	b.n	8009778 <prvTimerTask+0x80>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800977a:	2401      	movs	r4, #1
 800977c:	e7cb      	b.n	8009716 <prvTimerTask+0x1e>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800977e:	f023 0301 	bic.w	r3, r3, #1
 8009782:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009786:	6a3b      	ldr	r3, [r7, #32]
 8009788:	4638      	mov	r0, r7
 800978a:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800978c:	6830      	ldr	r0, [r6, #0]
 800978e:	2200      	movs	r2, #0
 8009790:	a904      	add	r1, sp, #16
 8009792:	f7fe ff4f 	bl	8008634 <xQueueReceive>
 8009796:	2800      	cmp	r0, #0
 8009798:	d0b3      	beq.n	8009702 <prvTimerTask+0xa>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800979a:	9b04      	ldr	r3, [sp, #16]
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800979c:	9806      	ldr	r0, [sp, #24]
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800979e:	2b00      	cmp	r3, #0
 80097a0:	db2f      	blt.n	8009802 <prvTimerTask+0x10a>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80097a2:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80097a4:	6963      	ldr	r3, [r4, #20]
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d132      	bne.n	8009810 <prvTimerTask+0x118>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80097aa:	a803      	add	r0, sp, #12
 80097ac:	f7ff ff52 	bl	8009654 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 80097b0:	9b04      	ldr	r3, [sp, #16]
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80097b2:	4602      	mov	r2, r0
			switch( xMessage.xMessageID )
 80097b4:	2b09      	cmp	r3, #9
 80097b6:	d8e9      	bhi.n	800978c <prvTimerTask+0x94>
 80097b8:	e8df f003 	tbb	[pc, r3]
 80097bc:	572e2e2e 	.word	0x572e2e2e
 80097c0:	2e2e765e 	.word	0x2e2e765e
 80097c4:	5e57      	.short	0x5e57
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80097c6:	4b3e      	ldr	r3, [pc, #248]	@ (80098c0 <prvTimerTask+0x1c8>)
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	681c      	ldr	r4, [r3, #0]
 80097cc:	fab4 f484 	clz	r4, r4
 80097d0:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80097d2:	6830      	ldr	r0, [r6, #0]
 80097d4:	4622      	mov	r2, r4
 80097d6:	eba8 0109 	sub.w	r1, r8, r9
 80097da:	f7ff f932 	bl	8008a42 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80097de:	f7ff fc07 	bl	8008ff0 <xTaskResumeAll>
 80097e2:	2800      	cmp	r0, #0
 80097e4:	d1d2      	bne.n	800978c <prvTimerTask+0x94>
					portYIELD_WITHIN_API();
 80097e6:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80097ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80097ee:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80097f2:	f3bf 8f4f 	dsb	sy
 80097f6:	f3bf 8f6f 	isb	sy
 80097fa:	e7c7      	b.n	800978c <prvTimerTask+0x94>
			( void ) xTaskResumeAll();
 80097fc:	f7ff fbf8 	bl	8008ff0 <xTaskResumeAll>
}
 8009800:	e7c4      	b.n	800978c <prvTimerTask+0x94>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009802:	9b05      	ldr	r3, [sp, #20]
 8009804:	9907      	ldr	r1, [sp, #28]
 8009806:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009808:	9b04      	ldr	r3, [sp, #16]
 800980a:	2b00      	cmp	r3, #0
 800980c:	dbbe      	blt.n	800978c <prvTimerTask+0x94>
 800980e:	e7c8      	b.n	80097a2 <prvTimerTask+0xaa>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009810:	1d20      	adds	r0, r4, #4
 8009812:	f7fe fa79 	bl	8007d08 <uxListRemove>
 8009816:	e7c8      	b.n	80097aa <prvTimerTask+0xb2>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009818:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800981c:	69a1      	ldr	r1, [r4, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800981e:	f043 0301 	orr.w	r3, r3, #1
 8009822:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009826:	9b05      	ldr	r3, [sp, #20]
 8009828:	4620      	mov	r0, r4
 800982a:	4419      	add	r1, r3
 800982c:	f7ff fe62 	bl	80094f4 <prvInsertTimerInActiveList>
 8009830:	2800      	cmp	r0, #0
 8009832:	d0ab      	beq.n	800978c <prvTimerTask+0x94>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009834:	6a23      	ldr	r3, [r4, #32]
 8009836:	4620      	mov	r0, r4
 8009838:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800983a:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800983e:	0759      	lsls	r1, r3, #29
 8009840:	d5a4      	bpl.n	800978c <prvTimerTask+0x94>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009842:	69a2      	ldr	r2, [r4, #24]
 8009844:	9905      	ldr	r1, [sp, #20]
 8009846:	2300      	movs	r3, #0
 8009848:	440a      	add	r2, r1
 800984a:	9300      	str	r3, [sp, #0]
 800984c:	4619      	mov	r1, r3
 800984e:	4620      	mov	r0, r4
 8009850:	f7ff fed4 	bl	80095fc <xTimerGenericCommand>
							configASSERT( xResult );
 8009854:	2800      	cmp	r0, #0
 8009856:	d199      	bne.n	800978c <prvTimerTask+0x94>
 8009858:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800985c:	f383 8811 	msr	BASEPRI, r3
 8009860:	f3bf 8f6f 	isb	sy
 8009864:	f3bf 8f4f 	dsb	sy
 8009868:	e7fe      	b.n	8009868 <prvTimerTask+0x170>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800986a:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800986e:	f023 0301 	bic.w	r3, r3, #1
 8009872:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
 8009876:	e789      	b.n	800978c <prvTimerTask+0x94>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009878:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800987c:	f043 0301 	orr.w	r3, r3, #1
 8009880:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009884:	9905      	ldr	r1, [sp, #20]
 8009886:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009888:	b941      	cbnz	r1, 800989c <prvTimerTask+0x1a4>
 800988a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800988e:	f383 8811 	msr	BASEPRI, r3
 8009892:	f3bf 8f6f 	isb	sy
 8009896:	f3bf 8f4f 	dsb	sy
 800989a:	e7fe      	b.n	800989a <prvTimerTask+0x1a2>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800989c:	4603      	mov	r3, r0
 800989e:	4401      	add	r1, r0
 80098a0:	4620      	mov	r0, r4
 80098a2:	f7ff fe27 	bl	80094f4 <prvInsertTimerInActiveList>
					break;
 80098a6:	e771      	b.n	800978c <prvTimerTask+0x94>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80098a8:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 80098ac:	079a      	lsls	r2, r3, #30
 80098ae:	d4de      	bmi.n	800986e <prvTimerTask+0x176>
							vPortFree( pxTimer );
 80098b0:	4620      	mov	r0, r4
 80098b2:	f7fe f9bb 	bl	8007c2c <vPortFree>
 80098b6:	e769      	b.n	800978c <prvTimerTask+0x94>
 80098b8:	20014f1c 	.word	0x20014f1c
 80098bc:	20014f14 	.word	0x20014f14
 80098c0:	20014f18 	.word	0x20014f18

080098c4 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 80098c4:	8880      	ldrh	r0, [r0, #4]
 80098c6:	4770      	bx	lr

080098c8 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 80098c8:	b570      	push	{r4, r5, r6, lr}
 80098ca:	6803      	ldr	r3, [r0, #0]
 80098cc:	4605      	mov	r5, r0
 80098ce:	460c      	mov	r4, r1
 80098d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098d2:	2100      	movs	r1, #0
 80098d4:	4798      	blx	r3
 80098d6:	682b      	ldr	r3, [r5, #0]
 80098d8:	4606      	mov	r6, r0
 80098da:	6a1b      	ldr	r3, [r3, #32]
 80098dc:	4628      	mov	r0, r5
 80098de:	4798      	blx	r3
 80098e0:	1ba4      	subs	r4, r4, r6
 80098e2:	b2a4      	uxth	r4, r4
 80098e4:	fbb4 f0f0 	udiv	r0, r4, r0
 80098e8:	bd70      	pop	{r4, r5, r6, pc}

080098ea <_ZN8touchgfx17AbstractPartition5clearEv>:
 80098ea:	2300      	movs	r3, #0
 80098ec:	8083      	strh	r3, [r0, #4]
 80098ee:	4770      	bx	lr

080098f0 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 80098f0:	b510      	push	{r4, lr}
 80098f2:	6803      	ldr	r3, [r0, #0]
 80098f4:	8881      	ldrh	r1, [r0, #4]
 80098f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098f8:	4604      	mov	r4, r0
 80098fa:	4798      	blx	r3
 80098fc:	88a3      	ldrh	r3, [r4, #4]
 80098fe:	3301      	adds	r3, #1
 8009900:	80a3      	strh	r3, [r4, #4]
 8009902:	bd10      	pop	{r4, pc}

08009904 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 8009904:	6803      	ldr	r3, [r0, #0]
 8009906:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009908:	4718      	bx	r3

0800990a <_ZN8touchgfx17AbstractPartitionD1Ev>:
 800990a:	4770      	bx	lr

0800990c <_ZN8touchgfx17AbstractPartitionC1Ev>:
 800990c:	4a02      	ldr	r2, [pc, #8]	@ (8009918 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 800990e:	6002      	str	r2, [r0, #0]
 8009910:	2200      	movs	r2, #0
 8009912:	8082      	strh	r2, [r0, #4]
 8009914:	4770      	bx	lr
 8009916:	bf00      	nop
 8009918:	0801683c 	.word	0x0801683c

0800991c <_ZN8touchgfx9Container13getFirstChildEv>:
 800991c:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 800991e:	4770      	bx	lr

08009920 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 8009920:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8009922:	2000      	movs	r0, #0
 8009924:	b12b      	cbz	r3, 8009932 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8009926:	b920      	cbnz	r0, 8009932 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8009928:	1a5a      	subs	r2, r3, r1
 800992a:	4250      	negs	r0, r2
 800992c:	4150      	adcs	r0, r2
 800992e:	699b      	ldr	r3, [r3, #24]
 8009930:	e7f8      	b.n	8009924 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 8009932:	4770      	bx	lr

08009934 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 8009934:	2300      	movs	r3, #0
 8009936:	6148      	str	r0, [r1, #20]
 8009938:	618b      	str	r3, [r1, #24]
 800993a:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800993c:	b913      	cbnz	r3, 8009944 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x10>
 800993e:	6281      	str	r1, [r0, #40]	@ 0x28
 8009940:	4770      	bx	lr
 8009942:	4613      	mov	r3, r2
 8009944:	699a      	ldr	r2, [r3, #24]
 8009946:	2a00      	cmp	r2, #0
 8009948:	d1fb      	bne.n	8009942 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xe>
 800994a:	6199      	str	r1, [r3, #24]
 800994c:	4770      	bx	lr

0800994e <_ZN8touchgfx9Container9removeAllEv>:
 800994e:	2200      	movs	r2, #0
 8009950:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8009952:	b123      	cbz	r3, 800995e <_ZN8touchgfx9Container9removeAllEv+0x10>
 8009954:	6999      	ldr	r1, [r3, #24]
 8009956:	6281      	str	r1, [r0, #40]	@ 0x28
 8009958:	e9c3 2205 	strd	r2, r2, [r3, #20]
 800995c:	e7f8      	b.n	8009950 <_ZN8touchgfx9Container9removeAllEv+0x2>
 800995e:	4770      	bx	lr

08009960 <_ZN8touchgfx9Container6unlinkEv>:
 8009960:	2300      	movs	r3, #0
 8009962:	6283      	str	r3, [r0, #40]	@ 0x28
 8009964:	4770      	bx	lr

08009966 <_ZNK8touchgfx9Container12getSolidRectEv>:
 8009966:	2200      	movs	r2, #0
 8009968:	8002      	strh	r2, [r0, #0]
 800996a:	8042      	strh	r2, [r0, #2]
 800996c:	8082      	strh	r2, [r0, #4]
 800996e:	80c2      	strh	r2, [r0, #6]
 8009970:	4770      	bx	lr

08009972 <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 8009972:	b570      	push	{r4, r5, r6, lr}
 8009974:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8009976:	460d      	mov	r5, r1
 8009978:	4616      	mov	r6, r2
 800997a:	b13c      	cbz	r4, 800998c <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 800997c:	6823      	ldr	r3, [r4, #0]
 800997e:	4620      	mov	r0, r4
 8009980:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009982:	4632      	mov	r2, r6
 8009984:	4629      	mov	r1, r5
 8009986:	4798      	blx	r3
 8009988:	69a4      	ldr	r4, [r4, #24]
 800998a:	e7f6      	b.n	800997a <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 800998c:	bd70      	pop	{r4, r5, r6, pc}

0800998e <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 800998e:	b538      	push	{r3, r4, r5, lr}
 8009990:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8009992:	460d      	mov	r5, r1
 8009994:	b134      	cbz	r4, 80099a4 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 8009996:	682b      	ldr	r3, [r5, #0]
 8009998:	4621      	mov	r1, r4
 800999a:	689b      	ldr	r3, [r3, #8]
 800999c:	4628      	mov	r0, r5
 800999e:	4798      	blx	r3
 80099a0:	69a4      	ldr	r4, [r4, #24]
 80099a2:	e7f7      	b.n	8009994 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 80099a4:	bd38      	pop	{r3, r4, r5, pc}

080099a6 <_ZN8touchgfx9ContainerD1Ev>:
 80099a6:	4770      	bx	lr

080099a8 <_ZN8touchgfx9ContainerD0Ev>:
 80099a8:	b510      	push	{r4, lr}
 80099aa:	212c      	movs	r1, #44	@ 0x2c
 80099ac:	4604      	mov	r4, r0
 80099ae:	f00a f9d2 	bl	8013d56 <_ZdlPvj>
 80099b2:	4620      	mov	r0, r4
 80099b4:	bd10      	pop	{r4, pc}

080099b6 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 80099b6:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80099b8:	b19b      	cbz	r3, 80099e2 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 80099ba:	428b      	cmp	r3, r1
 80099bc:	d109      	bne.n	80099d2 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 80099be:	699a      	ldr	r2, [r3, #24]
 80099c0:	2100      	movs	r1, #0
 80099c2:	6159      	str	r1, [r3, #20]
 80099c4:	6282      	str	r2, [r0, #40]	@ 0x28
 80099c6:	b902      	cbnz	r2, 80099ca <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 80099c8:	4770      	bx	lr
 80099ca:	6199      	str	r1, [r3, #24]
 80099cc:	4770      	bx	lr
 80099ce:	4613      	mov	r3, r2
 80099d0:	b13a      	cbz	r2, 80099e2 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 80099d2:	699a      	ldr	r2, [r3, #24]
 80099d4:	428a      	cmp	r2, r1
 80099d6:	d1fa      	bne.n	80099ce <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 80099d8:	698a      	ldr	r2, [r1, #24]
 80099da:	619a      	str	r2, [r3, #24]
 80099dc:	2300      	movs	r3, #0
 80099de:	e9c1 3305 	strd	r3, r3, [r1, #20]
 80099e2:	4770      	bx	lr

080099e4 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 80099e4:	b410      	push	{r4}
 80099e6:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80099e8:	4604      	mov	r4, r0
 80099ea:	b92b      	cbnz	r3, 80099f8 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 80099ec:	6803      	ldr	r3, [r0, #0]
 80099ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80099f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80099f4:	4611      	mov	r1, r2
 80099f6:	4718      	bx	r3
 80099f8:	b941      	cbnz	r1, 8009a0c <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 80099fa:	6193      	str	r3, [r2, #24]
 80099fc:	6282      	str	r2, [r0, #40]	@ 0x28
 80099fe:	6154      	str	r4, [r2, #20]
 8009a00:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009a04:	4770      	bx	lr
 8009a06:	4603      	mov	r3, r0
 8009a08:	2800      	cmp	r0, #0
 8009a0a:	d0f9      	beq.n	8009a00 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 8009a0c:	4299      	cmp	r1, r3
 8009a0e:	6998      	ldr	r0, [r3, #24]
 8009a10:	d1f9      	bne.n	8009a06 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 8009a12:	6190      	str	r0, [r2, #24]
 8009a14:	618a      	str	r2, [r1, #24]
 8009a16:	e7f2      	b.n	80099fe <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

08009a18 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 8009a18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a1c:	461f      	mov	r7, r3
 8009a1e:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 8009a22:	460d      	mov	r5, r1
 8009a24:	4616      	mov	r6, r2
 8009a26:	b103      	cbz	r3, 8009a2a <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 8009a28:	6038      	str	r0, [r7, #0]
 8009a2a:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8009a2c:	b314      	cbz	r4, 8009a74 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 8009a2e:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 8009a32:	b1eb      	cbz	r3, 8009a70 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8009a34:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8009a38:	428d      	cmp	r5, r1
 8009a3a:	db19      	blt.n	8009a70 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8009a3c:	8923      	ldrh	r3, [r4, #8]
 8009a3e:	b289      	uxth	r1, r1
 8009a40:	440b      	add	r3, r1
 8009a42:	b21b      	sxth	r3, r3
 8009a44:	429d      	cmp	r5, r3
 8009a46:	da13      	bge.n	8009a70 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8009a48:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8009a4c:	4296      	cmp	r6, r2
 8009a4e:	db0f      	blt.n	8009a70 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8009a50:	8963      	ldrh	r3, [r4, #10]
 8009a52:	b292      	uxth	r2, r2
 8009a54:	4413      	add	r3, r2
 8009a56:	b21b      	sxth	r3, r3
 8009a58:	429e      	cmp	r6, r3
 8009a5a:	da09      	bge.n	8009a70 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8009a5c:	6823      	ldr	r3, [r4, #0]
 8009a5e:	1ab2      	subs	r2, r6, r2
 8009a60:	1a69      	subs	r1, r5, r1
 8009a62:	f8d3 8024 	ldr.w	r8, [r3, #36]	@ 0x24
 8009a66:	b212      	sxth	r2, r2
 8009a68:	463b      	mov	r3, r7
 8009a6a:	b209      	sxth	r1, r1
 8009a6c:	4620      	mov	r0, r4
 8009a6e:	47c0      	blx	r8
 8009a70:	69a4      	ldr	r4, [r4, #24]
 8009a72:	e7db      	b.n	8009a2c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 8009a74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009a78 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 8009a78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a7c:	4c6e      	ldr	r4, [pc, #440]	@ (8009c38 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
 8009a7e:	b0a1      	sub	sp, #132	@ 0x84
 8009a80:	6824      	ldr	r4, [r4, #0]
 8009a82:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
 8009a84:	f894 9049 	ldrb.w	r9, [r4, #73]	@ 0x49
 8009a88:	9303      	str	r3, [sp, #12]
 8009a8a:	2400      	movs	r4, #0
 8009a8c:	802c      	strh	r4, [r5, #0]
 8009a8e:	9d2b      	ldr	r5, [sp, #172]	@ 0xac
 8009a90:	802c      	strh	r4, [r5, #0]
 8009a92:	601c      	str	r4, [r3, #0]
 8009a94:	4606      	mov	r6, r0
 8009a96:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8009a9a:	f7ff ffbd 	bl	8009a18 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8009a9e:	f1b9 0f03 	cmp.w	r9, #3
 8009aa2:	f340 80c2 	ble.w	8009c2a <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b2>
 8009aa6:	4631      	mov	r1, r6
 8009aa8:	a80c      	add	r0, sp, #48	@ 0x30
 8009aaa:	f004 ff51 	bl	800e950 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8009aae:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 8009ab2:	9306      	str	r3, [sp, #24]
 8009ab4:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 8009ab8:	9307      	str	r3, [sp, #28]
 8009aba:	9b03      	ldr	r3, [sp, #12]
 8009abc:	f8d3 a000 	ldr.w	sl, [r3]
 8009ac0:	f1ba 0f00 	cmp.w	sl, #0
 8009ac4:	f000 80b4 	beq.w	8009c30 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b8>
 8009ac8:	4651      	mov	r1, sl
 8009aca:	a810      	add	r0, sp, #64	@ 0x40
 8009acc:	f004 ff40 	bl	800e950 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8009ad0:	9b01      	ldr	r3, [sp, #4]
 8009ad2:	9a06      	ldr	r2, [sp, #24]
 8009ad4:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	@ 0x44
 8009ad8:	189d      	adds	r5, r3, r2
 8009ada:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	@ 0x40
 8009ade:	9a07      	ldr	r2, [sp, #28]
 8009ae0:	2002      	movs	r0, #2
 8009ae2:	fb91 f1f0 	sdiv	r1, r1, r0
 8009ae6:	4419      	add	r1, r3
 8009ae8:	1a6d      	subs	r5, r5, r1
 8009aea:	9b02      	ldr	r3, [sp, #8]
 8009aec:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	@ 0x42
 8009af0:	4413      	add	r3, r2
 8009af2:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	@ 0x46
 8009af6:	fb92 f2f0 	sdiv	r2, r2, r0
 8009afa:	440a      	add	r2, r1
 8009afc:	1a9b      	subs	r3, r3, r2
 8009afe:	435b      	muls	r3, r3
 8009b00:	fb05 3505 	mla	r5, r5, r5, r3
 8009b04:	4f4d      	ldr	r7, [pc, #308]	@ (8009c3c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c4>)
 8009b06:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8009b08:	ac10      	add	r4, sp, #64	@ 0x40
 8009b0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009b0c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8009b0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009b10:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8009b12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009b14:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8009b18:	f1b9 0f0c 	cmp.w	r9, #12
 8009b1c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8009b20:	f04f 0303 	mov.w	r3, #3
 8009b24:	bfc8      	it	gt
 8009b26:	4698      	movgt	r8, r3
 8009b28:	f8cd 9000 	str.w	r9, [sp]
 8009b2c:	f04f 0400 	mov.w	r4, #0
 8009b30:	bfdc      	itt	le
 8009b32:	f109 32ff 	addle.w	r2, r9, #4294967295
 8009b36:	fb92 f8f3 	sdivle	r8, r2, r3
 8009b3a:	1c63      	adds	r3, r4, #1
 8009b3c:	aa10      	add	r2, sp, #64	@ 0x40
 8009b3e:	f004 0401 	and.w	r4, r4, #1
 8009b42:	9308      	str	r3, [sp, #32]
 8009b44:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 8009b48:	9b00      	ldr	r3, [sp, #0]
 8009b4a:	fb93 f3f8 	sdiv	r3, r3, r8
 8009b4e:	b29b      	uxth	r3, r3
 8009b50:	3404      	adds	r4, #4
 8009b52:	f04f 0b00 	mov.w	fp, #0
 8009b56:	9304      	str	r3, [sp, #16]
 8009b58:	9a04      	ldr	r2, [sp, #16]
 8009b5a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8009b5e:	fb13 f302 	smulbb	r3, r3, r2
 8009b62:	9a01      	ldr	r2, [sp, #4]
 8009b64:	b29b      	uxth	r3, r3
 8009b66:	1899      	adds	r1, r3, r2
 8009b68:	9305      	str	r3, [sp, #20]
 8009b6a:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8009b6e:	b209      	sxth	r1, r1
 8009b70:	4299      	cmp	r1, r3
 8009b72:	db4d      	blt.n	8009c10 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8009b74:	8932      	ldrh	r2, [r6, #8]
 8009b76:	4413      	add	r3, r2
 8009b78:	b21b      	sxth	r3, r3
 8009b7a:	4299      	cmp	r1, r3
 8009b7c:	da48      	bge.n	8009c10 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8009b7e:	9b04      	ldr	r3, [sp, #16]
 8009b80:	6827      	ldr	r7, [r4, #0]
 8009b82:	fb17 f703 	smulbb	r7, r7, r3
 8009b86:	9b02      	ldr	r3, [sp, #8]
 8009b88:	b2bf      	uxth	r7, r7
 8009b8a:	18fa      	adds	r2, r7, r3
 8009b8c:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8009b90:	b212      	sxth	r2, r2
 8009b92:	429a      	cmp	r2, r3
 8009b94:	db3c      	blt.n	8009c10 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8009b96:	8970      	ldrh	r0, [r6, #10]
 8009b98:	4403      	add	r3, r0
 8009b9a:	b21b      	sxth	r3, r3
 8009b9c:	429a      	cmp	r2, r3
 8009b9e:	da37      	bge.n	8009c10 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8009ba0:	2300      	movs	r3, #0
 8009ba2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009ba4:	4630      	mov	r0, r6
 8009ba6:	ab0b      	add	r3, sp, #44	@ 0x2c
 8009ba8:	f7ff ff36 	bl	8009a18 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8009bac:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009bae:	b37a      	cbz	r2, 8009c10 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8009bb0:	4552      	cmp	r2, sl
 8009bb2:	d02d      	beq.n	8009c10 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8009bb4:	4611      	mov	r1, r2
 8009bb6:	a80e      	add	r0, sp, #56	@ 0x38
 8009bb8:	9209      	str	r2, [sp, #36]	@ 0x24
 8009bba:	f004 fec9 	bl	800e950 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8009bbe:	9a06      	ldr	r2, [sp, #24]
 8009bc0:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	@ 0x38
 8009bc4:	9b01      	ldr	r3, [sp, #4]
 8009bc6:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	@ 0x3c
 8009bca:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	@ 0x3e
 8009bce:	4413      	add	r3, r2
 8009bd0:	f04f 0e02 	mov.w	lr, #2
 8009bd4:	fb91 f1fe 	sdiv	r1, r1, lr
 8009bd8:	4401      	add	r1, r0
 8009bda:	1a58      	subs	r0, r3, r1
 8009bdc:	9a07      	ldr	r2, [sp, #28]
 8009bde:	9b02      	ldr	r3, [sp, #8]
 8009be0:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	@ 0x3a
 8009be4:	fb9c fcfe 	sdiv	ip, ip, lr
 8009be8:	4413      	add	r3, r2
 8009bea:	448c      	add	ip, r1
 8009bec:	eba3 030c 	sub.w	r3, r3, ip
 8009bf0:	435b      	muls	r3, r3
 8009bf2:	fb00 3300 	mla	r3, r0, r0, r3
 8009bf6:	42ab      	cmp	r3, r5
 8009bf8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009bfa:	d208      	bcs.n	8009c0e <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
 8009bfc:	9803      	ldr	r0, [sp, #12]
 8009bfe:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009c00:	6001      	str	r1, [r0, #0]
 8009c02:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 8009c04:	9805      	ldr	r0, [sp, #20]
 8009c06:	8008      	strh	r0, [r1, #0]
 8009c08:	992b      	ldr	r1, [sp, #172]	@ 0xac
 8009c0a:	461d      	mov	r5, r3
 8009c0c:	800f      	strh	r7, [r1, #0]
 8009c0e:	4692      	mov	sl, r2
 8009c10:	f10b 0b01 	add.w	fp, fp, #1
 8009c14:	f1bb 0f04 	cmp.w	fp, #4
 8009c18:	f104 0408 	add.w	r4, r4, #8
 8009c1c:	d19c      	bne.n	8009b58 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
 8009c1e:	9b00      	ldr	r3, [sp, #0]
 8009c20:	9c08      	ldr	r4, [sp, #32]
 8009c22:	444b      	add	r3, r9
 8009c24:	4544      	cmp	r4, r8
 8009c26:	9300      	str	r3, [sp, #0]
 8009c28:	d187      	bne.n	8009b3a <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
 8009c2a:	b021      	add	sp, #132	@ 0x84
 8009c2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c30:	f04f 35ff 	mov.w	r5, #4294967295
 8009c34:	e766      	b.n	8009b04 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 8009c36:	bf00      	nop
 8009c38:	20014f54 	.word	0x20014f54
 8009c3c:	08015600 	.word	0x08015600

08009c40 <_ZN8touchgfx4RectaNERKS0_>:
 8009c40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009c44:	f9b1 7000 	ldrsh.w	r7, [r1]
 8009c48:	888c      	ldrh	r4, [r1, #4]
 8009c4a:	f9b0 9000 	ldrsh.w	r9, [r0]
 8009c4e:	443c      	add	r4, r7
 8009c50:	b2a4      	uxth	r4, r4
 8009c52:	fa0f f884 	sxth.w	r8, r4
 8009c56:	45c1      	cmp	r9, r8
 8009c58:	da2f      	bge.n	8009cba <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8009c5a:	8882      	ldrh	r2, [r0, #4]
 8009c5c:	444a      	add	r2, r9
 8009c5e:	b292      	uxth	r2, r2
 8009c60:	fa0f fe82 	sxth.w	lr, r2
 8009c64:	4577      	cmp	r7, lr
 8009c66:	da28      	bge.n	8009cba <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8009c68:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8009c6c:	88cb      	ldrh	r3, [r1, #6]
 8009c6e:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8009c72:	442b      	add	r3, r5
 8009c74:	b21b      	sxth	r3, r3
 8009c76:	429e      	cmp	r6, r3
 8009c78:	da1f      	bge.n	8009cba <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8009c7a:	88c3      	ldrh	r3, [r0, #6]
 8009c7c:	4433      	add	r3, r6
 8009c7e:	b29b      	uxth	r3, r3
 8009c80:	fa0f fc83 	sxth.w	ip, r3
 8009c84:	4565      	cmp	r5, ip
 8009c86:	da18      	bge.n	8009cba <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8009c88:	454f      	cmp	r7, r9
 8009c8a:	bfb8      	it	lt
 8009c8c:	464f      	movlt	r7, r9
 8009c8e:	42b5      	cmp	r5, r6
 8009c90:	bfb8      	it	lt
 8009c92:	4635      	movlt	r5, r6
 8009c94:	45f0      	cmp	r8, lr
 8009c96:	bfd8      	it	le
 8009c98:	4622      	movle	r2, r4
 8009c9a:	1bd2      	subs	r2, r2, r7
 8009c9c:	8082      	strh	r2, [r0, #4]
 8009c9e:	884a      	ldrh	r2, [r1, #2]
 8009ca0:	88c9      	ldrh	r1, [r1, #6]
 8009ca2:	8007      	strh	r7, [r0, #0]
 8009ca4:	440a      	add	r2, r1
 8009ca6:	b292      	uxth	r2, r2
 8009ca8:	b211      	sxth	r1, r2
 8009caa:	458c      	cmp	ip, r1
 8009cac:	bfa8      	it	ge
 8009cae:	4613      	movge	r3, r2
 8009cb0:	1b5b      	subs	r3, r3, r5
 8009cb2:	80c3      	strh	r3, [r0, #6]
 8009cb4:	8045      	strh	r5, [r0, #2]
 8009cb6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009cba:	2300      	movs	r3, #0
 8009cbc:	8003      	strh	r3, [r0, #0]
 8009cbe:	8043      	strh	r3, [r0, #2]
 8009cc0:	8083      	strh	r3, [r0, #4]
 8009cc2:	80c3      	strh	r3, [r0, #6]
 8009cc4:	e7f7      	b.n	8009cb6 <_ZN8touchgfx4RectaNERKS0_+0x76>

08009cc6 <_ZNK8touchgfx4Rect7isEmptyEv>:
 8009cc6:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	dd06      	ble.n	8009cdc <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 8009cce:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8009cd2:	2800      	cmp	r0, #0
 8009cd4:	bfcc      	ite	gt
 8009cd6:	2000      	movgt	r0, #0
 8009cd8:	2001      	movle	r0, #1
 8009cda:	4770      	bx	lr
 8009cdc:	2001      	movs	r0, #1
 8009cde:	4770      	bx	lr

08009ce0 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 8009ce0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ce4:	2300      	movs	r3, #0
 8009ce6:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 8009ce8:	8003      	strh	r3, [r0, #0]
 8009cea:	4604      	mov	r4, r0
 8009cec:	8043      	strh	r3, [r0, #2]
 8009cee:	8083      	strh	r3, [r0, #4]
 8009cf0:	80c3      	strh	r3, [r0, #6]
 8009cf2:	2d00      	cmp	r5, #0
 8009cf4:	d040      	beq.n	8009d78 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 8009cf6:	1d28      	adds	r0, r5, #4
 8009cf8:	f7ff ffe5 	bl	8009cc6 <_ZNK8touchgfx4Rect7isEmptyEv>
 8009cfc:	b988      	cbnz	r0, 8009d22 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8009cfe:	4620      	mov	r0, r4
 8009d00:	f7ff ffe1 	bl	8009cc6 <_ZNK8touchgfx4Rect7isEmptyEv>
 8009d04:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8009d08:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8009d0c:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 8009d10:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 8009d14:	b138      	cbz	r0, 8009d26 <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 8009d16:	8022      	strh	r2, [r4, #0]
 8009d18:	8063      	strh	r3, [r4, #2]
 8009d1a:	f8a4 e004 	strh.w	lr, [r4, #4]
 8009d1e:	f8a4 c006 	strh.w	ip, [r4, #6]
 8009d22:	69ad      	ldr	r5, [r5, #24]
 8009d24:	e7e5      	b.n	8009cf2 <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 8009d26:	f9b4 0000 	ldrsh.w	r0, [r4]
 8009d2a:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8009d2e:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 8009d32:	4290      	cmp	r0, r2
 8009d34:	4607      	mov	r7, r0
 8009d36:	bfa8      	it	ge
 8009d38:	4617      	movge	r7, r2
 8009d3a:	4472      	add	r2, lr
 8009d3c:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 8009d40:	8027      	strh	r7, [r4, #0]
 8009d42:	4299      	cmp	r1, r3
 8009d44:	460e      	mov	r6, r1
 8009d46:	4440      	add	r0, r8
 8009d48:	bfa8      	it	ge
 8009d4a:	461e      	movge	r6, r3
 8009d4c:	4471      	add	r1, lr
 8009d4e:	4463      	add	r3, ip
 8009d50:	b200      	sxth	r0, r0
 8009d52:	b212      	sxth	r2, r2
 8009d54:	b209      	sxth	r1, r1
 8009d56:	b21b      	sxth	r3, r3
 8009d58:	4290      	cmp	r0, r2
 8009d5a:	bfac      	ite	ge
 8009d5c:	ebc7 0200 	rsbge	r2, r7, r0
 8009d60:	ebc7 0202 	rsblt	r2, r7, r2
 8009d64:	4299      	cmp	r1, r3
 8009d66:	bfac      	ite	ge
 8009d68:	ebc6 0301 	rsbge	r3, r6, r1
 8009d6c:	ebc6 0303 	rsblt	r3, r6, r3
 8009d70:	8066      	strh	r6, [r4, #2]
 8009d72:	80a2      	strh	r2, [r4, #4]
 8009d74:	80e3      	strh	r3, [r4, #6]
 8009d76:	e7d4      	b.n	8009d22 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8009d78:	4620      	mov	r0, r4
 8009d7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009d7e <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 8009d7e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8009d82:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 8009d86:	b383      	cbz	r3, 8009dea <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8009d88:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8009d8a:	b374      	cbz	r4, 8009dea <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8009d8c:	f9b1 5000 	ldrsh.w	r5, [r1]
 8009d90:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 8009d94:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 8009d98:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 8009d9c:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 8009da0:	b303      	cbz	r3, 8009de4 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8009da2:	4668      	mov	r0, sp
 8009da4:	1d21      	adds	r1, r4, #4
 8009da6:	f8ad 5000 	strh.w	r5, [sp]
 8009daa:	f8ad 6002 	strh.w	r6, [sp, #2]
 8009dae:	f8ad 7004 	strh.w	r7, [sp, #4]
 8009db2:	f8ad 8006 	strh.w	r8, [sp, #6]
 8009db6:	f7ff ff43 	bl	8009c40 <_ZN8touchgfx4RectaNERKS0_>
 8009dba:	4668      	mov	r0, sp
 8009dbc:	f7ff ff83 	bl	8009cc6 <_ZNK8touchgfx4Rect7isEmptyEv>
 8009dc0:	b980      	cbnz	r0, 8009de4 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8009dc2:	f8bd 3000 	ldrh.w	r3, [sp]
 8009dc6:	88a2      	ldrh	r2, [r4, #4]
 8009dc8:	1a9b      	subs	r3, r3, r2
 8009dca:	f8ad 3000 	strh.w	r3, [sp]
 8009dce:	88e2      	ldrh	r2, [r4, #6]
 8009dd0:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8009dd4:	1a9b      	subs	r3, r3, r2
 8009dd6:	f8ad 3002 	strh.w	r3, [sp, #2]
 8009dda:	6823      	ldr	r3, [r4, #0]
 8009ddc:	4669      	mov	r1, sp
 8009dde:	689b      	ldr	r3, [r3, #8]
 8009de0:	4620      	mov	r0, r4
 8009de2:	4798      	blx	r3
 8009de4:	69a4      	ldr	r4, [r4, #24]
 8009de6:	2c00      	cmp	r4, #0
 8009de8:	d1d8      	bne.n	8009d9c <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 8009dea:	b002      	add	sp, #8
 8009dec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009df0 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 8009df0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009df2:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 8009df6:	460d      	mov	r5, r1
 8009df8:	4616      	mov	r6, r2
 8009dfa:	b323      	cbz	r3, 8009e46 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8009dfc:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8009dfe:	b314      	cbz	r4, 8009e46 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8009e00:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 8009e04:	b1eb      	cbz	r3, 8009e42 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8009e06:	6828      	ldr	r0, [r5, #0]
 8009e08:	6869      	ldr	r1, [r5, #4]
 8009e0a:	466b      	mov	r3, sp
 8009e0c:	c303      	stmia	r3!, {r0, r1}
 8009e0e:	4668      	mov	r0, sp
 8009e10:	1d21      	adds	r1, r4, #4
 8009e12:	f7ff ff15 	bl	8009c40 <_ZN8touchgfx4RectaNERKS0_>
 8009e16:	4668      	mov	r0, sp
 8009e18:	f7ff ff55 	bl	8009cc6 <_ZNK8touchgfx4Rect7isEmptyEv>
 8009e1c:	b988      	cbnz	r0, 8009e42 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8009e1e:	f8bd 3000 	ldrh.w	r3, [sp]
 8009e22:	88a2      	ldrh	r2, [r4, #4]
 8009e24:	1a9b      	subs	r3, r3, r2
 8009e26:	f8ad 3000 	strh.w	r3, [sp]
 8009e2a:	88e2      	ldrh	r2, [r4, #6]
 8009e2c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8009e30:	1a9b      	subs	r3, r3, r2
 8009e32:	f8ad 3002 	strh.w	r3, [sp, #2]
 8009e36:	6823      	ldr	r3, [r4, #0]
 8009e38:	4632      	mov	r2, r6
 8009e3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009e3c:	4669      	mov	r1, sp
 8009e3e:	4620      	mov	r0, r4
 8009e40:	4798      	blx	r3
 8009e42:	69a4      	ldr	r4, [r4, #24]
 8009e44:	e7db      	b.n	8009dfe <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 8009e46:	b002      	add	sp, #8
 8009e48:	bd70      	pop	{r4, r5, r6, pc}

08009e4a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 8009e4a:	b513      	push	{r0, r1, r4, lr}
 8009e4c:	6803      	ldr	r3, [r0, #0]
 8009e4e:	f8d3 40a8 	ldr.w	r4, [r3, #168]	@ 0xa8
 8009e52:	2300      	movs	r3, #0
 8009e54:	e9cd 3300 	strd	r3, r3, [sp]
 8009e58:	466b      	mov	r3, sp
 8009e5a:	47a0      	blx	r4
 8009e5c:	b002      	add	sp, #8
 8009e5e:	bd10      	pop	{r4, pc}

08009e60 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 8009e60:	2301      	movs	r3, #1
 8009e62:	f880 304b 	strb.w	r3, [r0, #75]	@ 0x4b
 8009e66:	f880 306d 	strb.w	r3, [r0, #109]	@ 0x6d
 8009e6a:	4770      	bx	lr

08009e6c <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 8009e6c:	2301      	movs	r3, #1
 8009e6e:	f880 304b 	strb.w	r3, [r0, #75]	@ 0x4b
 8009e72:	f880 306d 	strb.w	r3, [r0, #109]	@ 0x6d
 8009e76:	4770      	bx	lr

08009e78 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 8009e78:	6843      	ldr	r3, [r0, #4]
 8009e7a:	2201      	movs	r2, #1
 8009e7c:	725a      	strb	r2, [r3, #9]
 8009e7e:	6840      	ldr	r0, [r0, #4]
 8009e80:	6803      	ldr	r3, [r0, #0]
 8009e82:	691b      	ldr	r3, [r3, #16]
 8009e84:	4718      	bx	r3

08009e86 <_ZN8touchgfx3HAL8flushDMAEv>:
 8009e86:	6840      	ldr	r0, [r0, #4]
 8009e88:	6803      	ldr	r3, [r0, #0]
 8009e8a:	689b      	ldr	r3, [r3, #8]
 8009e8c:	4718      	bx	r3

08009e8e <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 8009e8e:	b530      	push	{r4, r5, lr}
 8009e90:	b08b      	sub	sp, #44	@ 0x2c
 8009e92:	6804      	ldr	r4, [r0, #0]
 8009e94:	f89d 5058 	ldrb.w	r5, [sp, #88]	@ 0x58
 8009e98:	9509      	str	r5, [sp, #36]	@ 0x24
 8009e9a:	f89d 5054 	ldrb.w	r5, [sp, #84]	@ 0x54
 8009e9e:	9508      	str	r5, [sp, #32]
 8009ea0:	f89d 5050 	ldrb.w	r5, [sp, #80]	@ 0x50
 8009ea4:	9507      	str	r5, [sp, #28]
 8009ea6:	f8bd 504c 	ldrh.w	r5, [sp, #76]	@ 0x4c
 8009eaa:	9506      	str	r5, [sp, #24]
 8009eac:	f89d 5048 	ldrb.w	r5, [sp, #72]	@ 0x48
 8009eb0:	9505      	str	r5, [sp, #20]
 8009eb2:	f89d 5044 	ldrb.w	r5, [sp, #68]	@ 0x44
 8009eb6:	9504      	str	r5, [sp, #16]
 8009eb8:	f8bd 5040 	ldrh.w	r5, [sp, #64]	@ 0x40
 8009ebc:	9503      	str	r5, [sp, #12]
 8009ebe:	f8bd 503c 	ldrh.w	r5, [sp, #60]	@ 0x3c
 8009ec2:	9502      	str	r5, [sp, #8]
 8009ec4:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 8009ec8:	e9cd 3500 	strd	r3, r5, [sp]
 8009ecc:	4613      	mov	r3, r2
 8009ece:	6be4      	ldr	r4, [r4, #60]	@ 0x3c
 8009ed0:	2200      	movs	r2, #0
 8009ed2:	47a0      	blx	r4
 8009ed4:	b00b      	add	sp, #44	@ 0x2c
 8009ed6:	bd30      	pop	{r4, r5, pc}

08009ed8 <_ZN8touchgfx3HAL10beginFrameEv>:
 8009ed8:	4b04      	ldr	r3, [pc, #16]	@ (8009eec <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 8009eda:	781b      	ldrb	r3, [r3, #0]
 8009edc:	b123      	cbz	r3, 8009ee8 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 8009ede:	f890 006e 	ldrb.w	r0, [r0, #110]	@ 0x6e
 8009ee2:	f080 0001 	eor.w	r0, r0, #1
 8009ee6:	4770      	bx	lr
 8009ee8:	2001      	movs	r0, #1
 8009eea:	4770      	bx	lr
 8009eec:	20014f52 	.word	0x20014f52

08009ef0 <_ZN8touchgfx3HAL8endFrameEv>:
 8009ef0:	b510      	push	{r4, lr}
 8009ef2:	4604      	mov	r4, r0
 8009ef4:	6840      	ldr	r0, [r0, #4]
 8009ef6:	6803      	ldr	r3, [r0, #0]
 8009ef8:	689b      	ldr	r3, [r3, #8]
 8009efa:	4798      	blx	r3
 8009efc:	f894 306d 	ldrb.w	r3, [r4, #109]	@ 0x6d
 8009f00:	b113      	cbz	r3, 8009f08 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 8009f02:	2301      	movs	r3, #1
 8009f04:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
 8009f08:	bd10      	pop	{r4, pc}

08009f0a <_ZN8touchgfx3HAL10initializeEv>:
 8009f0a:	b510      	push	{r4, lr}
 8009f0c:	4604      	mov	r4, r0
 8009f0e:	f7f8 fe99 	bl	8002c44 <_ZN8touchgfx10OSWrappers10initializeEv>
 8009f12:	f7f8 fda1 	bl	8002a58 <_ZN8touchgfx4GPIO4initEv>
 8009f16:	6860      	ldr	r0, [r4, #4]
 8009f18:	6803      	ldr	r3, [r0, #0]
 8009f1a:	68db      	ldr	r3, [r3, #12]
 8009f1c:	4798      	blx	r3
 8009f1e:	68e0      	ldr	r0, [r4, #12]
 8009f20:	6803      	ldr	r3, [r0, #0]
 8009f22:	689b      	ldr	r3, [r3, #8]
 8009f24:	4798      	blx	r3
 8009f26:	6823      	ldr	r3, [r4, #0]
 8009f28:	4620      	mov	r0, r4
 8009f2a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009f2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009f30:	4718      	bx	r3
	...

08009f34 <_ZN8touchgfx3HAL4tickEv>:
 8009f34:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8009f36:	6803      	ldr	r3, [r0, #0]
 8009f38:	4d5b      	ldr	r5, [pc, #364]	@ (800a0a8 <_ZN8touchgfx3HAL4tickEv+0x174>)
 8009f3a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009f3e:	4604      	mov	r4, r0
 8009f40:	4798      	blx	r3
 8009f42:	2800      	cmp	r0, #0
 8009f44:	f000 8095 	beq.w	800a072 <_ZN8touchgfx3HAL4tickEv+0x13e>
 8009f48:	2001      	movs	r0, #1
 8009f4a:	f7f8 fd03 	bl	8002954 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8009f4e:	f894 306a 	ldrb.w	r3, [r4, #106]	@ 0x6a
 8009f52:	f884 306b 	strb.w	r3, [r4, #107]	@ 0x6b
 8009f56:	f894 3079 	ldrb.w	r3, [r4, #121]	@ 0x79
 8009f5a:	2600      	movs	r6, #0
 8009f5c:	f884 606a 	strb.w	r6, [r4, #106]	@ 0x6a
 8009f60:	f884 604b 	strb.w	r6, [r4, #75]	@ 0x4b
 8009f64:	b133      	cbz	r3, 8009f74 <_ZN8touchgfx3HAL4tickEv+0x40>
 8009f66:	6823      	ldr	r3, [r4, #0]
 8009f68:	4620      	mov	r0, r4
 8009f6a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8009f6e:	4798      	blx	r3
 8009f70:	f884 6079 	strb.w	r6, [r4, #121]	@ 0x79
 8009f74:	f894 304a 	ldrb.w	r3, [r4, #74]	@ 0x4a
 8009f78:	6862      	ldr	r2, [r4, #4]
 8009f7a:	f083 0301 	eor.w	r3, r3, #1
 8009f7e:	7253      	strb	r3, [r2, #9]
 8009f80:	2601      	movs	r6, #1
 8009f82:	702e      	strb	r6, [r5, #0]
 8009f84:	f003 fbf6 	bl	800d774 <_ZN8touchgfx11Application11getInstanceEv>
 8009f88:	6803      	ldr	r3, [r0, #0]
 8009f8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f8c:	4798      	blx	r3
 8009f8e:	f894 306b 	ldrb.w	r3, [r4, #107]	@ 0x6b
 8009f92:	b90b      	cbnz	r3, 8009f98 <_ZN8touchgfx3HAL4tickEv+0x64>
 8009f94:	f884 606b 	strb.w	r6, [r4, #107]	@ 0x6b
 8009f98:	f003 fbec 	bl	800d774 <_ZN8touchgfx11Application11getInstanceEv>
 8009f9c:	6803      	ldr	r3, [r0, #0]
 8009f9e:	695b      	ldr	r3, [r3, #20]
 8009fa0:	4798      	blx	r3
 8009fa2:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8009fa4:	6803      	ldr	r3, [r0, #0]
 8009fa6:	691b      	ldr	r3, [r3, #16]
 8009fa8:	4798      	blx	r3
 8009faa:	f894 306b 	ldrb.w	r3, [r4, #107]	@ 0x6b
 8009fae:	f894 206c 	ldrb.w	r2, [r4, #108]	@ 0x6c
 8009fb2:	3b01      	subs	r3, #1
 8009fb4:	b2db      	uxtb	r3, r3
 8009fb6:	f884 306b 	strb.w	r3, [r4, #107]	@ 0x6b
 8009fba:	b10a      	cbz	r2, 8009fc0 <_ZN8touchgfx3HAL4tickEv+0x8c>
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d1eb      	bne.n	8009f98 <_ZN8touchgfx3HAL4tickEv+0x64>
 8009fc0:	4a3a      	ldr	r2, [pc, #232]	@ (800a0ac <_ZN8touchgfx3HAL4tickEv+0x178>)
 8009fc2:	f994 1068 	ldrsb.w	r1, [r4, #104]	@ 0x68
 8009fc6:	7813      	ldrb	r3, [r2, #0]
 8009fc8:	3301      	adds	r3, #1
 8009fca:	b25b      	sxtb	r3, r3
 8009fcc:	4299      	cmp	r1, r3
 8009fce:	7013      	strb	r3, [r2, #0]
 8009fd0:	dc10      	bgt.n	8009ff4 <_ZN8touchgfx3HAL4tickEv+0xc0>
 8009fd2:	68e0      	ldr	r0, [r4, #12]
 8009fd4:	2300      	movs	r3, #0
 8009fd6:	7013      	strb	r3, [r2, #0]
 8009fd8:	6803      	ldr	r3, [r0, #0]
 8009fda:	aa03      	add	r2, sp, #12
 8009fdc:	68db      	ldr	r3, [r3, #12]
 8009fde:	a902      	add	r1, sp, #8
 8009fe0:	4798      	blx	r3
 8009fe2:	6823      	ldr	r3, [r4, #0]
 8009fe4:	2800      	cmp	r0, #0
 8009fe6:	d050      	beq.n	800a08a <_ZN8touchgfx3HAL4tickEv+0x156>
 8009fe8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8009fec:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8009ff0:	4620      	mov	r0, r4
 8009ff2:	4798      	blx	r3
 8009ff4:	6960      	ldr	r0, [r4, #20]
 8009ff6:	2300      	movs	r3, #0
 8009ff8:	f88d 3007 	strb.w	r3, [sp, #7]
 8009ffc:	b158      	cbz	r0, 800a016 <_ZN8touchgfx3HAL4tickEv+0xe2>
 8009ffe:	6803      	ldr	r3, [r0, #0]
 800a000:	f10d 0107 	add.w	r1, sp, #7
 800a004:	68db      	ldr	r3, [r3, #12]
 800a006:	4798      	blx	r3
 800a008:	b128      	cbz	r0, 800a016 <_ZN8touchgfx3HAL4tickEv+0xe2>
 800a00a:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 800a00c:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800a010:	6803      	ldr	r3, [r0, #0]
 800a012:	68db      	ldr	r3, [r3, #12]
 800a014:	4798      	blx	r3
 800a016:	f104 001c 	add.w	r0, r4, #28
 800a01a:	f009 fde7 	bl	8013bec <_ZN8touchgfx8Gestures4tickEv>
 800a01e:	f894 3070 	ldrb.w	r3, [r4, #112]	@ 0x70
 800a022:	b30b      	cbz	r3, 800a068 <_ZN8touchgfx3HAL4tickEv+0x134>
 800a024:	6920      	ldr	r0, [r4, #16]
 800a026:	6803      	ldr	r3, [r0, #0]
 800a028:	691b      	ldr	r3, [r3, #16]
 800a02a:	4798      	blx	r3
 800a02c:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 800a02e:	4606      	mov	r6, r0
 800a030:	b903      	cbnz	r3, 800a034 <_ZN8touchgfx3HAL4tickEv+0x100>
 800a032:	6760      	str	r0, [r4, #116]	@ 0x74
 800a034:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 800a036:	4a1e      	ldr	r2, [pc, #120]	@ (800a0b0 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 800a038:	1af3      	subs	r3, r6, r3
 800a03a:	4293      	cmp	r3, r2
 800a03c:	d914      	bls.n	800a068 <_ZN8touchgfx3HAL4tickEv+0x134>
 800a03e:	6920      	ldr	r0, [r4, #16]
 800a040:	6803      	ldr	r3, [r0, #0]
 800a042:	699b      	ldr	r3, [r3, #24]
 800a044:	4798      	blx	r3
 800a046:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 800a048:	2264      	movs	r2, #100	@ 0x64
 800a04a:	1af3      	subs	r3, r6, r3
 800a04c:	fbb3 f3f2 	udiv	r3, r3, r2
 800a050:	fbb0 f0f3 	udiv	r0, r0, r3
 800a054:	2800      	cmp	r0, #0
 800a056:	dc1d      	bgt.n	800a094 <_ZN8touchgfx3HAL4tickEv+0x160>
 800a058:	f884 2069 	strb.w	r2, [r4, #105]	@ 0x69
 800a05c:	6920      	ldr	r0, [r4, #16]
 800a05e:	6803      	ldr	r3, [r0, #0]
 800a060:	2100      	movs	r1, #0
 800a062:	69db      	ldr	r3, [r3, #28]
 800a064:	4798      	blx	r3
 800a066:	6766      	str	r6, [r4, #116]	@ 0x74
 800a068:	f003 fb84 	bl	800d774 <_ZN8touchgfx11Application11getInstanceEv>
 800a06c:	6803      	ldr	r3, [r0, #0]
 800a06e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a070:	4798      	blx	r3
 800a072:	6823      	ldr	r3, [r4, #0]
 800a074:	4620      	mov	r0, r4
 800a076:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800a07a:	4798      	blx	r3
 800a07c:	2001      	movs	r0, #1
 800a07e:	f7f8 fc93 	bl	80029a8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 800a082:	2300      	movs	r3, #0
 800a084:	702b      	strb	r3, [r5, #0]
 800a086:	b004      	add	sp, #16
 800a088:	bd70      	pop	{r4, r5, r6, pc}
 800a08a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800a08e:	4620      	mov	r0, r4
 800a090:	4798      	blx	r3
 800a092:	e7af      	b.n	8009ff4 <_ZN8touchgfx3HAL4tickEv+0xc0>
 800a094:	2863      	cmp	r0, #99	@ 0x63
 800a096:	bfcb      	itete	gt
 800a098:	2300      	movgt	r3, #0
 800a09a:	f1c0 0064 	rsble	r0, r0, #100	@ 0x64
 800a09e:	f884 3069 	strbgt.w	r3, [r4, #105]	@ 0x69
 800a0a2:	f884 0069 	strble.w	r0, [r4, #105]	@ 0x69
 800a0a6:	e7d9      	b.n	800a05c <_ZN8touchgfx3HAL4tickEv+0x128>
 800a0a8:	20014f58 	.word	0x20014f58
 800a0ac:	20014f59 	.word	0x20014f59
 800a0b0:	05f5e100 	.word	0x05f5e100

0800a0b4 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 800a0b4:	b510      	push	{r4, lr}
 800a0b6:	4604      	mov	r4, r0
 800a0b8:	f7f8 fdf4 	bl	8002ca4 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>
 800a0bc:	6863      	ldr	r3, [r4, #4]
 800a0be:	2200      	movs	r2, #0
 800a0c0:	729a      	strb	r2, [r3, #10]
 800a0c2:	bd10      	pop	{r4, pc}

0800a0c4 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 800a0c4:	65c1      	str	r1, [r0, #92]	@ 0x5c
 800a0c6:	301c      	adds	r0, #28
 800a0c8:	f009 bd8e 	b.w	8013be8 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

0800a0cc <_ZN8touchgfx3HAL5touchEll>:
 800a0cc:	b530      	push	{r4, r5, lr}
 800a0ce:	b087      	sub	sp, #28
 800a0d0:	4604      	mov	r4, r0
 800a0d2:	a804      	add	r0, sp, #16
 800a0d4:	e9cd 1204 	strd	r1, r2, [sp, #16]
 800a0d8:	f003 f934 	bl	800d344 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 800a0dc:	9b04      	ldr	r3, [sp, #16]
 800a0de:	f8ad 300c 	strh.w	r3, [sp, #12]
 800a0e2:	a906      	add	r1, sp, #24
 800a0e4:	9b05      	ldr	r3, [sp, #20]
 800a0e6:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 800a0ea:	a803      	add	r0, sp, #12
 800a0ec:	f003 f97c 	bl	800d3e8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 800a0f0:	f894 106f 	ldrb.w	r1, [r4, #111]	@ 0x6f
 800a0f4:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 800a0f8:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800a0fc:	f104 001c 	add.w	r0, r4, #28
 800a100:	b189      	cbz	r1, 800a126 <_ZN8touchgfx3HAL5touchEll+0x5a>
 800a102:	f8b4 5064 	ldrh.w	r5, [r4, #100]	@ 0x64
 800a106:	9300      	str	r3, [sp, #0]
 800a108:	f8b4 1060 	ldrh.w	r1, [r4, #96]	@ 0x60
 800a10c:	4613      	mov	r3, r2
 800a10e:	462a      	mov	r2, r5
 800a110:	f009 fd7a 	bl	8013c08 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 800a114:	b128      	cbz	r0, 800a122 <_ZN8touchgfx3HAL5touchEll+0x56>
 800a116:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 800a11a:	6623      	str	r3, [r4, #96]	@ 0x60
 800a11c:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 800a120:	6663      	str	r3, [r4, #100]	@ 0x64
 800a122:	b007      	add	sp, #28
 800a124:	bd30      	pop	{r4, r5, pc}
 800a126:	f009 fdaf 	bl	8013c88 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 800a12a:	2301      	movs	r3, #1
 800a12c:	f884 306f 	strb.w	r3, [r4, #111]	@ 0x6f
 800a130:	e7f1      	b.n	800a116 <_ZN8touchgfx3HAL5touchEll+0x4a>

0800a132 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 800a132:	b510      	push	{r4, lr}
 800a134:	2b00      	cmp	r3, #0
 800a136:	d046      	beq.n	800a1c6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 800a138:	ea81 0002 	eor.w	r0, r1, r2
 800a13c:	07c4      	lsls	r4, r0, #31
 800a13e:	d508      	bpl.n	800a152 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 800a140:	440b      	add	r3, r1
 800a142:	3a01      	subs	r2, #1
 800a144:	428b      	cmp	r3, r1
 800a146:	d93e      	bls.n	800a1c6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 800a148:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 800a14c:	f801 0b01 	strb.w	r0, [r1], #1
 800a150:	e7f8      	b.n	800a144 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 800a152:	07d0      	lsls	r0, r2, #31
 800a154:	bf42      	ittt	mi
 800a156:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 800a15a:	f801 0b01 	strbmi.w	r0, [r1], #1
 800a15e:	f103 33ff 	addmi.w	r3, r3, #4294967295
 800a162:	2b01      	cmp	r3, #1
 800a164:	d911      	bls.n	800a18a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 800a166:	ea81 0402 	eor.w	r4, r1, r2
 800a16a:	07a4      	lsls	r4, r4, #30
 800a16c:	4610      	mov	r0, r2
 800a16e:	d022      	beq.n	800a1b6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 800a170:	f023 0401 	bic.w	r4, r3, #1
 800a174:	440c      	add	r4, r1
 800a176:	428c      	cmp	r4, r1
 800a178:	4602      	mov	r2, r0
 800a17a:	d904      	bls.n	800a186 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 800a17c:	8812      	ldrh	r2, [r2, #0]
 800a17e:	f821 2b02 	strh.w	r2, [r1], #2
 800a182:	3002      	adds	r0, #2
 800a184:	e7f7      	b.n	800a176 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 800a186:	f003 0301 	and.w	r3, r3, #1
 800a18a:	f023 0003 	bic.w	r0, r3, #3
 800a18e:	4408      	add	r0, r1
 800a190:	4288      	cmp	r0, r1
 800a192:	4614      	mov	r4, r2
 800a194:	d904      	bls.n	800a1a0 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 800a196:	6824      	ldr	r4, [r4, #0]
 800a198:	f841 4b04 	str.w	r4, [r1], #4
 800a19c:	3204      	adds	r2, #4
 800a19e:	e7f7      	b.n	800a190 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 800a1a0:	f003 0303 	and.w	r3, r3, #3
 800a1a4:	440b      	add	r3, r1
 800a1a6:	3a01      	subs	r2, #1
 800a1a8:	428b      	cmp	r3, r1
 800a1aa:	d90c      	bls.n	800a1c6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 800a1ac:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 800a1b0:	f801 0b01 	strb.w	r0, [r1], #1
 800a1b4:	e7f8      	b.n	800a1a8 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 800a1b6:	0790      	lsls	r0, r2, #30
 800a1b8:	d0e7      	beq.n	800a18a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 800a1ba:	f832 0b02 	ldrh.w	r0, [r2], #2
 800a1be:	f821 0b02 	strh.w	r0, [r1], #2
 800a1c2:	3b02      	subs	r3, #2
 800a1c4:	e7e1      	b.n	800a18a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 800a1c6:	2001      	movs	r0, #1
 800a1c8:	bd10      	pop	{r4, pc}

0800a1ca <_ZN8touchgfx3HAL7noTouchEv>:
 800a1ca:	b510      	push	{r4, lr}
 800a1cc:	f890 306f 	ldrb.w	r3, [r0, #111]	@ 0x6f
 800a1d0:	4604      	mov	r4, r0
 800a1d2:	b153      	cbz	r3, 800a1ea <_ZN8touchgfx3HAL7noTouchEv+0x20>
 800a1d4:	f8b0 3064 	ldrh.w	r3, [r0, #100]	@ 0x64
 800a1d8:	f8b0 2060 	ldrh.w	r2, [r0, #96]	@ 0x60
 800a1dc:	2101      	movs	r1, #1
 800a1de:	301c      	adds	r0, #28
 800a1e0:	f009 fd52 	bl	8013c88 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 800a1e4:	2300      	movs	r3, #0
 800a1e6:	f884 306f 	strb.w	r3, [r4, #111]	@ 0x6f
 800a1ea:	bd10      	pop	{r4, pc}

0800a1ec <_ZN8touchgfx3HAL3lcdEv>:
 800a1ec:	4b04      	ldr	r3, [pc, #16]	@ (800a200 <_ZN8touchgfx3HAL3lcdEv+0x14>)
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 800a1f4:	b10a      	cbz	r2, 800a1fa <_ZN8touchgfx3HAL3lcdEv+0xe>
 800a1f6:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 800a1f8:	b900      	cbnz	r0, 800a1fc <_ZN8touchgfx3HAL3lcdEv+0x10>
 800a1fa:	6898      	ldr	r0, [r3, #8]
 800a1fc:	4770      	bx	lr
 800a1fe:	bf00      	nop
 800a200:	20014f54 	.word	0x20014f54

0800a204 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 800a204:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a208:	b085      	sub	sp, #20
 800a20a:	ad04      	add	r5, sp, #16
 800a20c:	4604      	mov	r4, r0
 800a20e:	2000      	movs	r0, #0
 800a210:	f845 0d04 	str.w	r0, [r5, #-4]!
 800a214:	69a0      	ldr	r0, [r4, #24]
 800a216:	6806      	ldr	r6, [r0, #0]
 800a218:	9501      	str	r5, [sp, #4]
 800a21a:	f8bd 5030 	ldrh.w	r5, [sp, #48]	@ 0x30
 800a21e:	9500      	str	r5, [sp, #0]
 800a220:	6835      	ldr	r5, [r6, #0]
 800a222:	4699      	mov	r9, r3
 800a224:	460f      	mov	r7, r1
 800a226:	4690      	mov	r8, r2
 800a228:	47a8      	blx	r5
 800a22a:	4d10      	ldr	r5, [pc, #64]	@ (800a26c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
 800a22c:	4606      	mov	r6, r0
 800a22e:	f8a5 9000 	strh.w	r9, [r5]
 800a232:	f7ff ffdb 	bl	800a1ec <_ZN8touchgfx3HAL3lcdEv>
 800a236:	6803      	ldr	r3, [r0, #0]
 800a238:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a23a:	4798      	blx	r3
 800a23c:	b128      	cbz	r0, 800a24a <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
 800a23e:	2801      	cmp	r0, #1
 800a240:	d00b      	beq.n	800a25a <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
 800a242:	4630      	mov	r0, r6
 800a244:	b005      	add	sp, #20
 800a246:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a24a:	882b      	ldrh	r3, [r5, #0]
 800a24c:	fb08 7203 	mla	r2, r8, r3, r7
 800a250:	9b03      	ldr	r3, [sp, #12]
 800a252:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 800a256:	63e3      	str	r3, [r4, #60]	@ 0x3c
 800a258:	e7f3      	b.n	800a242 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 800a25a:	882a      	ldrh	r2, [r5, #0]
 800a25c:	9b03      	ldr	r3, [sp, #12]
 800a25e:	fb08 7202 	mla	r2, r8, r2, r7
 800a262:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800a266:	1a9a      	subs	r2, r3, r2
 800a268:	63e2      	str	r2, [r4, #60]	@ 0x3c
 800a26a:	e7ea      	b.n	800a242 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 800a26c:	20014f4e 	.word	0x20014f4e

0800a270 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 800a270:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a272:	b08b      	sub	sp, #44	@ 0x2c
 800a274:	4617      	mov	r7, r2
 800a276:	4604      	mov	r4, r0
 800a278:	460e      	mov	r6, r1
 800a27a:	461d      	mov	r5, r3
 800a27c:	f7ff ffb6 	bl	800a1ec <_ZN8touchgfx3HAL3lcdEv>
 800a280:	6803      	ldr	r3, [r0, #0]
 800a282:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a284:	4798      	blx	r3
 800a286:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 800a28a:	9007      	str	r0, [sp, #28]
 800a28c:	e9cd 0308 	strd	r0, r3, [sp, #32]
 800a290:	4b0d      	ldr	r3, [pc, #52]	@ (800a2c8 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 800a292:	6822      	ldr	r2, [r4, #0]
 800a294:	881b      	ldrh	r3, [r3, #0]
 800a296:	9306      	str	r3, [sp, #24]
 800a298:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 800a29c:	9305      	str	r3, [sp, #20]
 800a29e:	f89d 304c 	ldrb.w	r3, [sp, #76]	@ 0x4c
 800a2a2:	9304      	str	r3, [sp, #16]
 800a2a4:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 800a2a8:	9303      	str	r3, [sp, #12]
 800a2aa:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 800a2ae:	9302      	str	r3, [sp, #8]
 800a2b0:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 800a2b4:	e9cd 5300 	strd	r5, r3, [sp]
 800a2b8:	4631      	mov	r1, r6
 800a2ba:	6bd5      	ldr	r5, [r2, #60]	@ 0x3c
 800a2bc:	463b      	mov	r3, r7
 800a2be:	2200      	movs	r2, #0
 800a2c0:	4620      	mov	r0, r4
 800a2c2:	47a8      	blx	r5
 800a2c4:	b00b      	add	sp, #44	@ 0x2c
 800a2c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a2c8:	20014f4e 	.word	0x20014f4e

0800a2cc <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 800a2cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a2d0:	4698      	mov	r8, r3
 800a2d2:	6803      	ldr	r3, [r0, #0]
 800a2d4:	6bdd      	ldr	r5, [r3, #60]	@ 0x3c
 800a2d6:	4b15      	ldr	r3, [pc, #84]	@ (800a32c <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 800a2d8:	b08b      	sub	sp, #44	@ 0x2c
 800a2da:	4617      	mov	r7, r2
 800a2dc:	f8b3 9000 	ldrh.w	r9, [r3]
 800a2e0:	460e      	mov	r6, r1
 800a2e2:	4604      	mov	r4, r0
 800a2e4:	f7ff ff82 	bl	800a1ec <_ZN8touchgfx3HAL3lcdEv>
 800a2e8:	6803      	ldr	r3, [r0, #0]
 800a2ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a2ec:	4798      	blx	r3
 800a2ee:	f89d 3058 	ldrb.w	r3, [sp, #88]	@ 0x58
 800a2f2:	e9cd 0308 	strd	r0, r3, [sp, #32]
 800a2f6:	2302      	movs	r3, #2
 800a2f8:	e9cd 9306 	strd	r9, r3, [sp, #24]
 800a2fc:	2301      	movs	r3, #1
 800a2fe:	9305      	str	r3, [sp, #20]
 800a300:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 800a304:	9304      	str	r3, [sp, #16]
 800a306:	f8bd 3050 	ldrh.w	r3, [sp, #80]	@ 0x50
 800a30a:	9303      	str	r3, [sp, #12]
 800a30c:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 800a310:	9302      	str	r3, [sp, #8]
 800a312:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 800a316:	2200      	movs	r2, #0
 800a318:	e9cd 8300 	strd	r8, r3, [sp]
 800a31c:	4631      	mov	r1, r6
 800a31e:	463b      	mov	r3, r7
 800a320:	4620      	mov	r0, r4
 800a322:	47a8      	blx	r5
 800a324:	b00b      	add	sp, #44	@ 0x2c
 800a326:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a32a:	bf00      	nop
 800a32c:	20014f4e 	.word	0x20014f4e

0800a330 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 800a330:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a334:	4698      	mov	r8, r3
 800a336:	6803      	ldr	r3, [r0, #0]
 800a338:	6d9d      	ldr	r5, [r3, #88]	@ 0x58
 800a33a:	4b11      	ldr	r3, [pc, #68]	@ (800a380 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 800a33c:	b087      	sub	sp, #28
 800a33e:	f8b3 9000 	ldrh.w	r9, [r3]
 800a342:	460e      	mov	r6, r1
 800a344:	4617      	mov	r7, r2
 800a346:	4604      	mov	r4, r0
 800a348:	f7ff ff50 	bl	800a1ec <_ZN8touchgfx3HAL3lcdEv>
 800a34c:	6803      	ldr	r3, [r0, #0]
 800a34e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a350:	4798      	blx	r3
 800a352:	f89d 3044 	ldrb.w	r3, [sp, #68]	@ 0x44
 800a356:	f8cd 900c 	str.w	r9, [sp, #12]
 800a35a:	e9cd 0304 	strd	r0, r3, [sp, #16]
 800a35e:	f89d 3040 	ldrb.w	r3, [sp, #64]	@ 0x40
 800a362:	9302      	str	r3, [sp, #8]
 800a364:	f8bd 303c 	ldrh.w	r3, [sp, #60]	@ 0x3c
 800a368:	9301      	str	r3, [sp, #4]
 800a36a:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 800a36e:	9300      	str	r3, [sp, #0]
 800a370:	463a      	mov	r2, r7
 800a372:	4643      	mov	r3, r8
 800a374:	4631      	mov	r1, r6
 800a376:	4620      	mov	r0, r4
 800a378:	47a8      	blx	r5
 800a37a:	b007      	add	sp, #28
 800a37c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a380:	20014f4e 	.word	0x20014f4e

0800a384 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 800a384:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a388:	4604      	mov	r4, r0
 800a38a:	b08f      	sub	sp, #60	@ 0x3c
 800a38c:	4610      	mov	r0, r2
 800a38e:	460d      	mov	r5, r1
 800a390:	4691      	mov	r9, r2
 800a392:	461e      	mov	r6, r3
 800a394:	f006 fdec 	bl	8010f70 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 800a398:	2800      	cmp	r0, #0
 800a39a:	f000 809d 	beq.w	800a4d8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
 800a39e:	6823      	ldr	r3, [r4, #0]
 800a3a0:	f8df b198 	ldr.w	fp, [pc, #408]	@ 800a53c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 800a3a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3a6:	f8df a198 	ldr.w	sl, [pc, #408]	@ 800a540 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
 800a3aa:	4f61      	ldr	r7, [pc, #388]	@ (800a530 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 800a3ac:	4620      	mov	r0, r4
 800a3ae:	4798      	blx	r3
 800a3b0:	6823      	ldr	r3, [r4, #0]
 800a3b2:	4620      	mov	r0, r4
 800a3b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3b6:	4798      	blx	r3
 800a3b8:	f8bb 3000 	ldrh.w	r3, [fp]
 800a3bc:	9301      	str	r3, [sp, #4]
 800a3be:	f10d 0838 	add.w	r8, sp, #56	@ 0x38
 800a3c2:	f8ba 3000 	ldrh.w	r3, [sl]
 800a3c6:	9302      	str	r3, [sp, #8]
 800a3c8:	883b      	ldrh	r3, [r7, #0]
 800a3ca:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 800a3ce:	9303      	str	r3, [sp, #12]
 800a3d0:	4b58      	ldr	r3, [pc, #352]	@ (800a534 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 800a3d2:	9305      	str	r3, [sp, #20]
 800a3d4:	881a      	ldrh	r2, [r3, #0]
 800a3d6:	9204      	str	r2, [sp, #16]
 800a3d8:	4640      	mov	r0, r8
 800a3da:	f006 fe5d 	bl	8011098 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800a3de:	8038      	strh	r0, [r7, #0]
 800a3e0:	4640      	mov	r0, r8
 800a3e2:	f006 fe8d 	bl	8011100 <_ZNK8touchgfx6Bitmap9getHeightEv>
 800a3e6:	9b05      	ldr	r3, [sp, #20]
 800a3e8:	b280      	uxth	r0, r0
 800a3ea:	8018      	strh	r0, [r3, #0]
 800a3ec:	4b52      	ldr	r3, [pc, #328]	@ (800a538 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 800a3ee:	781b      	ldrb	r3, [r3, #0]
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d174      	bne.n	800a4de <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 800a3f4:	883b      	ldrh	r3, [r7, #0]
 800a3f6:	f8ab 3000 	strh.w	r3, [fp]
 800a3fa:	f8aa 0000 	strh.w	r0, [sl]
 800a3fe:	4648      	mov	r0, r9
 800a400:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	@ 0x3c
 800a404:	f006 fdb4 	bl	8010f70 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 800a408:	e9c4 000f 	strd	r0, r0, [r4, #60]	@ 0x3c
 800a40c:	2200      	movs	r2, #0
 800a40e:	4611      	mov	r1, r2
 800a410:	4628      	mov	r0, r5
 800a412:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 800a416:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 800a41a:	f7f6 fdcb 	bl	8000fb4 <_ZN8touchgfx8Drawable5setXYEss>
 800a41e:	2301      	movs	r3, #1
 800a420:	f895 b025 	ldrb.w	fp, [r5, #37]	@ 0x25
 800a424:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 800a428:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	dd5c      	ble.n	800a4ea <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 800a430:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 800a434:	2b00      	cmp	r3, #0
 800a436:	dd58      	ble.n	800a4ea <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 800a438:	462a      	mov	r2, r5
 800a43a:	ab0a      	add	r3, sp, #40	@ 0x28
 800a43c:	f852 0f04 	ldr.w	r0, [r2, #4]!
 800a440:	6851      	ldr	r1, [r2, #4]
 800a442:	c303      	stmia	r3!, {r0, r1}
 800a444:	4631      	mov	r1, r6
 800a446:	a80a      	add	r0, sp, #40	@ 0x28
 800a448:	f7ff fbfa 	bl	8009c40 <_ZN8touchgfx4RectaNERKS0_>
 800a44c:	4b38      	ldr	r3, [pc, #224]	@ (800a530 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 800a44e:	f9b3 2000 	ldrsh.w	r2, [r3]
 800a452:	f8ad 2034 	strh.w	r2, [sp, #52]	@ 0x34
 800a456:	2100      	movs	r1, #0
 800a458:	aa0a      	add	r2, sp, #40	@ 0x28
 800a45a:	4b36      	ldr	r3, [pc, #216]	@ (800a534 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 800a45c:	910c      	str	r1, [sp, #48]	@ 0x30
 800a45e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a462:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a466:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 800a46a:	ab08      	add	r3, sp, #32
 800a46c:	e883 0003 	stmia.w	r3, {r0, r1}
 800a470:	4618      	mov	r0, r3
 800a472:	a90c      	add	r1, sp, #48	@ 0x30
 800a474:	f7ff fbe4 	bl	8009c40 <_ZN8touchgfx4RectaNERKS0_>
 800a478:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d13c      	bne.n	800a4f8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
 800a47e:	2000      	movs	r0, #0
 800a480:	f884 0058 	strb.w	r0, [r4, #88]	@ 0x58
 800a484:	2600      	movs	r6, #0
 800a486:	682a      	ldr	r2, [r5, #0]
 800a488:	696b      	ldr	r3, [r5, #20]
 800a48a:	616e      	str	r6, [r5, #20]
 800a48c:	9305      	str	r3, [sp, #20]
 800a48e:	6892      	ldr	r2, [r2, #8]
 800a490:	a908      	add	r1, sp, #32
 800a492:	4628      	mov	r0, r5
 800a494:	4790      	blx	r2
 800a496:	9b05      	ldr	r3, [sp, #20]
 800a498:	616b      	str	r3, [r5, #20]
 800a49a:	4652      	mov	r2, sl
 800a49c:	f884 6058 	strb.w	r6, [r4, #88]	@ 0x58
 800a4a0:	4649      	mov	r1, r9
 800a4a2:	4628      	mov	r0, r5
 800a4a4:	f885 b025 	strb.w	fp, [r5, #37]	@ 0x25
 800a4a8:	f7f6 fd84 	bl	8000fb4 <_ZN8touchgfx8Drawable5setXYEss>
 800a4ac:	4b23      	ldr	r3, [pc, #140]	@ (800a53c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 800a4ae:	9a01      	ldr	r2, [sp, #4]
 800a4b0:	801a      	strh	r2, [r3, #0]
 800a4b2:	4b23      	ldr	r3, [pc, #140]	@ (800a540 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
 800a4b4:	9a02      	ldr	r2, [sp, #8]
 800a4b6:	801a      	strh	r2, [r3, #0]
 800a4b8:	4b1d      	ldr	r3, [pc, #116]	@ (800a530 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 800a4ba:	9a03      	ldr	r2, [sp, #12]
 800a4bc:	801a      	strh	r2, [r3, #0]
 800a4be:	4b1d      	ldr	r3, [pc, #116]	@ (800a534 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 800a4c0:	9a04      	ldr	r2, [sp, #16]
 800a4c2:	801a      	strh	r2, [r3, #0]
 800a4c4:	e9c4 870f 	strd	r8, r7, [r4, #60]	@ 0x3c
 800a4c8:	6823      	ldr	r3, [r4, #0]
 800a4ca:	4620      	mov	r0, r4
 800a4cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4ce:	4798      	blx	r3
 800a4d0:	6823      	ldr	r3, [r4, #0]
 800a4d2:	4620      	mov	r0, r4
 800a4d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4d6:	4798      	blx	r3
 800a4d8:	b00f      	add	sp, #60	@ 0x3c
 800a4da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4de:	883b      	ldrh	r3, [r7, #0]
 800a4e0:	f8ab 0000 	strh.w	r0, [fp]
 800a4e4:	f8aa 3000 	strh.w	r3, [sl]
 800a4e8:	e789      	b.n	800a3fe <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 800a4ea:	462a      	mov	r2, r5
 800a4ec:	ab0a      	add	r3, sp, #40	@ 0x28
 800a4ee:	f852 0f04 	ldr.w	r0, [r2, #4]!
 800a4f2:	6851      	ldr	r1, [r2, #4]
 800a4f4:	c303      	stmia	r3!, {r0, r1}
 800a4f6:	e7a9      	b.n	800a44c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
 800a4f8:	a807      	add	r0, sp, #28
 800a4fa:	f006 ff43 	bl	8011384 <_ZNK8touchgfx6Bitmap9getFormatEv>
 800a4fe:	4606      	mov	r6, r0
 800a500:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 800a502:	6803      	ldr	r3, [r0, #0]
 800a504:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a506:	4798      	blx	r3
 800a508:	4286      	cmp	r6, r0
 800a50a:	d1b8      	bne.n	800a47e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 800a50c:	f7ff fe6e 	bl	800a1ec <_ZN8touchgfx3HAL3lcdEv>
 800a510:	6803      	ldr	r3, [r0, #0]
 800a512:	4606      	mov	r6, r0
 800a514:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a516:	9305      	str	r3, [sp, #20]
 800a518:	a807      	add	r0, sp, #28
 800a51a:	f006 ff33 	bl	8011384 <_ZNK8touchgfx6Bitmap9getFormatEv>
 800a51e:	9b05      	ldr	r3, [sp, #20]
 800a520:	4601      	mov	r1, r0
 800a522:	4630      	mov	r0, r6
 800a524:	4798      	blx	r3
 800a526:	f080 0001 	eor.w	r0, r0, #1
 800a52a:	b2c0      	uxtb	r0, r0
 800a52c:	e7a8      	b.n	800a480 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
 800a52e:	bf00      	nop
 800a530:	20014f48 	.word	0x20014f48
 800a534:	20014f4a 	.word	0x20014f4a
 800a538:	20014f4c 	.word	0x20014f4c
 800a53c:	20014f4e 	.word	0x20014f4e
 800a540:	20014f50 	.word	0x20014f50

0800a544 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 800a544:	b510      	push	{r4, lr}
 800a546:	4b07      	ldr	r3, [pc, #28]	@ (800a564 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 800a548:	781b      	ldrb	r3, [r3, #0]
 800a54a:	4604      	mov	r4, r0
 800a54c:	b13b      	cbz	r3, 800a55e <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 800a54e:	6803      	ldr	r3, [r0, #0]
 800a550:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a552:	4798      	blx	r3
 800a554:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800a556:	4283      	cmp	r3, r0
 800a558:	d101      	bne.n	800a55e <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 800a55a:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 800a55c:	bd10      	pop	{r4, pc}
 800a55e:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 800a560:	e7fc      	b.n	800a55c <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 800a562:	bf00      	nop
 800a564:	20014f52 	.word	0x20014f52

0800a568 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 800a568:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a56c:	b08a      	sub	sp, #40	@ 0x28
 800a56e:	461d      	mov	r5, r3
 800a570:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a574:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800a578:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 800a57c:	f8ad 3018 	strh.w	r3, [sp, #24]
 800a580:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 800a584:	f8ad 301a 	strh.w	r3, [sp, #26]
 800a588:	2400      	movs	r4, #0
 800a58a:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 800a58e:	f8bd 604c 	ldrh.w	r6, [sp, #76]	@ 0x4c
 800a592:	f8ad 301c 	strh.w	r3, [sp, #28]
 800a596:	4690      	mov	r8, r2
 800a598:	4607      	mov	r7, r0
 800a59a:	9404      	str	r4, [sp, #16]
 800a59c:	f88d 4020 	strb.w	r4, [sp, #32]
 800a5a0:	f7ff ffd0 	bl	800a544 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800a5a4:	fb06 8505 	mla	r5, r6, r5, r8
 800a5a8:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 800a5ac:	6878      	ldr	r0, [r7, #4]
 800a5ae:	9505      	str	r5, [sp, #20]
 800a5b0:	f8ad 601e 	strh.w	r6, [sp, #30]
 800a5b4:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 800a5b8:	f88d 4021 	strb.w	r4, [sp, #33]	@ 0x21
 800a5bc:	f88d 4023 	strb.w	r4, [sp, #35]	@ 0x23
 800a5c0:	f88d 4024 	strb.w	r4, [sp, #36]	@ 0x24
 800a5c4:	6803      	ldr	r3, [r0, #0]
 800a5c6:	a901      	add	r1, sp, #4
 800a5c8:	685b      	ldr	r3, [r3, #4]
 800a5ca:	4798      	blx	r3
 800a5cc:	b00a      	add	sp, #40	@ 0x28
 800a5ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a5d2 <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 800a5d2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a5d6:	b08b      	sub	sp, #44	@ 0x2c
 800a5d8:	2400      	movs	r4, #0
 800a5da:	461d      	mov	r5, r3
 800a5dc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a5e0:	4688      	mov	r8, r1
 800a5e2:	4691      	mov	r9, r2
 800a5e4:	f8bd 6050 	ldrh.w	r6, [sp, #80]	@ 0x50
 800a5e8:	9404      	str	r4, [sp, #16]
 800a5ea:	4607      	mov	r7, r0
 800a5ec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a5f0:	f7ff ffa8 	bl	800a544 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800a5f4:	fb06 9505 	mla	r5, r6, r5, r9
 800a5f8:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 800a5fc:	f8ad 3018 	strh.w	r3, [sp, #24]
 800a600:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 800a604:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 800a608:	6878      	ldr	r0, [r7, #4]
 800a60a:	9505      	str	r5, [sp, #20]
 800a60c:	f8ad 301a 	strh.w	r3, [sp, #26]
 800a610:	f8ad 401c 	strh.w	r4, [sp, #28]
 800a614:	f8ad 601e 	strh.w	r6, [sp, #30]
 800a618:	f8cd 8010 	str.w	r8, [sp, #16]
 800a61c:	f8ad 4020 	strh.w	r4, [sp, #32]
 800a620:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 800a624:	f88d 4023 	strb.w	r4, [sp, #35]	@ 0x23
 800a628:	f88d 4024 	strb.w	r4, [sp, #36]	@ 0x24
 800a62c:	6803      	ldr	r3, [r0, #0]
 800a62e:	a901      	add	r1, sp, #4
 800a630:	685b      	ldr	r3, [r3, #4]
 800a632:	4798      	blx	r3
 800a634:	b00b      	add	sp, #44	@ 0x2c
 800a636:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

0800a63c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 800a63c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a640:	b08a      	sub	sp, #40	@ 0x28
 800a642:	4698      	mov	r8, r3
 800a644:	f89d 505c 	ldrb.w	r5, [sp, #92]	@ 0x5c
 800a648:	f89d c054 	ldrb.w	ip, [sp, #84]	@ 0x54
 800a64c:	f8bd 7058 	ldrh.w	r7, [sp, #88]	@ 0x58
 800a650:	f89d 4060 	ldrb.w	r4, [sp, #96]	@ 0x60
 800a654:	2300      	movs	r3, #0
 800a656:	2d0b      	cmp	r5, #11
 800a658:	4606      	mov	r6, r0
 800a65a:	9304      	str	r3, [sp, #16]
 800a65c:	f89d 0050 	ldrb.w	r0, [sp, #80]	@ 0x50
 800a660:	d138      	bne.n	800a6d4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x98>
 800a662:	2380      	movs	r3, #128	@ 0x80
 800a664:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800a668:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 800a66c:	f8ad 3018 	strh.w	r3, [sp, #24]
 800a670:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 800a674:	f8ad 301a 	strh.w	r3, [sp, #26]
 800a678:	f88d 0020 	strb.w	r0, [sp, #32]
 800a67c:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 800a680:	f8ad 301c 	strh.w	r3, [sp, #28]
 800a684:	4630      	mov	r0, r6
 800a686:	9203      	str	r2, [sp, #12]
 800a688:	f7ff ff5c 	bl	800a544 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800a68c:	2c0b      	cmp	r4, #11
 800a68e:	bf98      	it	ls
 800a690:	4b1b      	ldrls	r3, [pc, #108]	@ (800a700 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
 800a692:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 800a696:	bf98      	it	ls
 800a698:	5d19      	ldrbls	r1, [r3, r4]
 800a69a:	f8ad 701e 	strh.w	r7, [sp, #30]
 800a69e:	bf88      	it	hi
 800a6a0:	2100      	movhi	r1, #0
 800a6a2:	fb02 8307 	mla	r3, r2, r7, r8
 800a6a6:	10c9      	asrs	r1, r1, #3
 800a6a8:	fb01 0003 	mla	r0, r1, r3, r0
 800a6ac:	f89d 3064 	ldrb.w	r3, [sp, #100]	@ 0x64
 800a6b0:	9005      	str	r0, [sp, #20]
 800a6b2:	f88d 3023 	strb.w	r3, [sp, #35]	@ 0x23
 800a6b6:	6870      	ldr	r0, [r6, #4]
 800a6b8:	f88d 5021 	strb.w	r5, [sp, #33]	@ 0x21
 800a6bc:	2300      	movs	r3, #0
 800a6be:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 800a6c2:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 800a6c6:	6803      	ldr	r3, [r0, #0]
 800a6c8:	a901      	add	r1, sp, #4
 800a6ca:	685b      	ldr	r3, [r3, #4]
 800a6cc:	4798      	blx	r3
 800a6ce:	b00a      	add	sp, #40	@ 0x28
 800a6d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a6d4:	2d02      	cmp	r5, #2
 800a6d6:	d109      	bne.n	800a6ec <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xb0>
 800a6d8:	28ff      	cmp	r0, #255	@ 0xff
 800a6da:	d105      	bne.n	800a6e8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xac>
 800a6dc:	f1bc 0f00 	cmp.w	ip, #0
 800a6e0:	bf14      	ite	ne
 800a6e2:	2340      	movne	r3, #64	@ 0x40
 800a6e4:	2320      	moveq	r3, #32
 800a6e6:	e7bd      	b.n	800a664 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 800a6e8:	2340      	movs	r3, #64	@ 0x40
 800a6ea:	e7bb      	b.n	800a664 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 800a6ec:	28ff      	cmp	r0, #255	@ 0xff
 800a6ee:	d105      	bne.n	800a6fc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc0>
 800a6f0:	f1bc 0f00 	cmp.w	ip, #0
 800a6f4:	bf14      	ite	ne
 800a6f6:	2304      	movne	r3, #4
 800a6f8:	2301      	moveq	r3, #1
 800a6fa:	e7b3      	b.n	800a664 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 800a6fc:	2304      	movs	r3, #4
 800a6fe:	e7b1      	b.n	800a664 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 800a700:	080168f8 	.word	0x080168f8

0800a704 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 800a704:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a708:	b08b      	sub	sp, #44	@ 0x2c
 800a70a:	461d      	mov	r5, r3
 800a70c:	f89d 9058 	ldrb.w	r9, [sp, #88]	@ 0x58
 800a710:	f89d 6060 	ldrb.w	r6, [sp, #96]	@ 0x60
 800a714:	f8bd a05c 	ldrh.w	sl, [sp, #92]	@ 0x5c
 800a718:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 800a71c:	bf14      	ite	ne
 800a71e:	2308      	movne	r3, #8
 800a720:	2302      	moveq	r3, #2
 800a722:	2400      	movs	r4, #0
 800a724:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a728:	4688      	mov	r8, r1
 800a72a:	4693      	mov	fp, r2
 800a72c:	9404      	str	r4, [sp, #16]
 800a72e:	4607      	mov	r7, r0
 800a730:	f7ff ff08 	bl	800a544 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800a734:	2e0b      	cmp	r6, #11
 800a736:	bf98      	it	ls
 800a738:	4b15      	ldrls	r3, [pc, #84]	@ (800a790 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
 800a73a:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 800a73e:	bf98      	it	ls
 800a740:	5d9c      	ldrbls	r4, [r3, r6]
 800a742:	f8bd 3050 	ldrh.w	r3, [sp, #80]	@ 0x50
 800a746:	f8ad 3018 	strh.w	r3, [sp, #24]
 800a74a:	fb05 b50a 	mla	r5, r5, sl, fp
 800a74e:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 800a752:	f8ad 301a 	strh.w	r3, [sp, #26]
 800a756:	10e4      	asrs	r4, r4, #3
 800a758:	fb04 0405 	mla	r4, r4, r5, r0
 800a75c:	2300      	movs	r3, #0
 800a75e:	6878      	ldr	r0, [r7, #4]
 800a760:	9405      	str	r4, [sp, #20]
 800a762:	f8ad 301c 	strh.w	r3, [sp, #28]
 800a766:	f8ad a01e 	strh.w	sl, [sp, #30]
 800a76a:	f8cd 8010 	str.w	r8, [sp, #16]
 800a76e:	f88d 9020 	strb.w	r9, [sp, #32]
 800a772:	f88d 2023 	strb.w	r2, [sp, #35]	@ 0x23
 800a776:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 800a77a:	f88d 6021 	strb.w	r6, [sp, #33]	@ 0x21
 800a77e:	f88d 6022 	strb.w	r6, [sp, #34]	@ 0x22
 800a782:	6803      	ldr	r3, [r0, #0]
 800a784:	a901      	add	r1, sp, #4
 800a786:	685b      	ldr	r3, [r3, #4]
 800a788:	4798      	blx	r3
 800a78a:	b00b      	add	sp, #44	@ 0x2c
 800a78c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a790:	080168f8 	.word	0x080168f8

0800a794 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 800a794:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a798:	461e      	mov	r6, r3
 800a79a:	4b0a      	ldr	r3, [pc, #40]	@ (800a7c4 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
 800a79c:	460f      	mov	r7, r1
 800a79e:	881d      	ldrh	r5, [r3, #0]
 800a7a0:	4690      	mov	r8, r2
 800a7a2:	f7ff fd23 	bl	800a1ec <_ZN8touchgfx3HAL3lcdEv>
 800a7a6:	6803      	ldr	r3, [r0, #0]
 800a7a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a7aa:	4798      	blx	r3
 800a7ac:	280b      	cmp	r0, #11
 800a7ae:	bf9a      	itte	ls
 800a7b0:	4b05      	ldrls	r3, [pc, #20]	@ (800a7c8 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 800a7b2:	5c1c      	ldrbls	r4, [r3, r0]
 800a7b4:	2400      	movhi	r4, #0
 800a7b6:	fb08 7005 	mla	r0, r8, r5, r7
 800a7ba:	10e4      	asrs	r4, r4, #3
 800a7bc:	fb04 6000 	mla	r0, r4, r0, r6
 800a7c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a7c4:	20014f4e 	.word	0x20014f4e
 800a7c8:	080168f8 	.word	0x080168f8

0800a7cc <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 800a7cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a7ce:	b08b      	sub	sp, #44	@ 0x2c
 800a7d0:	461f      	mov	r7, r3
 800a7d2:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 800a7d6:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800a7da:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 800a7de:	f8ad 3018 	strh.w	r3, [sp, #24]
 800a7e2:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 800a7e6:	f8ad 301a 	strh.w	r3, [sp, #26]
 800a7ea:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 800a7ee:	f8ad 301c 	strh.w	r3, [sp, #28]
 800a7f2:	2500      	movs	r5, #0
 800a7f4:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 800a7f8:	f88d 3020 	strb.w	r3, [sp, #32]
 800a7fc:	4604      	mov	r4, r0
 800a7fe:	4616      	mov	r6, r2
 800a800:	9504      	str	r5, [sp, #16]
 800a802:	f7ff fe9f 	bl	800a544 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800a806:	463a      	mov	r2, r7
 800a808:	4631      	mov	r1, r6
 800a80a:	4603      	mov	r3, r0
 800a80c:	4620      	mov	r0, r4
 800a80e:	f7ff ffc1 	bl	800a794 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800a812:	4b0e      	ldr	r3, [pc, #56]	@ (800a84c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
 800a814:	9005      	str	r0, [sp, #20]
 800a816:	881b      	ldrh	r3, [r3, #0]
 800a818:	f8ad 301e 	strh.w	r3, [sp, #30]
 800a81c:	f7ff fce6 	bl	800a1ec <_ZN8touchgfx3HAL3lcdEv>
 800a820:	6803      	ldr	r3, [r0, #0]
 800a822:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a824:	4798      	blx	r3
 800a826:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a828:	f88d 0022 	strb.w	r0, [sp, #34]	@ 0x22
 800a82c:	f88d 0021 	strb.w	r0, [sp, #33]	@ 0x21
 800a830:	9304      	str	r3, [sp, #16]
 800a832:	6860      	ldr	r0, [r4, #4]
 800a834:	f89d 3058 	ldrb.w	r3, [sp, #88]	@ 0x58
 800a838:	f88d 3023 	strb.w	r3, [sp, #35]	@ 0x23
 800a83c:	f88d 5024 	strb.w	r5, [sp, #36]	@ 0x24
 800a840:	6803      	ldr	r3, [r0, #0]
 800a842:	a901      	add	r1, sp, #4
 800a844:	685b      	ldr	r3, [r3, #4]
 800a846:	4798      	blx	r3
 800a848:	b00b      	add	sp, #44	@ 0x2c
 800a84a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a84c:	20014f4e 	.word	0x20014f4e

0800a850 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 800a850:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a852:	b08d      	sub	sp, #52	@ 0x34
 800a854:	466b      	mov	r3, sp
 800a856:	e883 0006 	stmia.w	r3, {r1, r2}
 800a85a:	2300      	movs	r3, #0
 800a85c:	9306      	str	r3, [sp, #24]
 800a85e:	6803      	ldr	r3, [r0, #0]
 800a860:	f8bd 6000 	ldrh.w	r6, [sp]
 800a864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a866:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 800a86a:	2501      	movs	r5, #1
 800a86c:	9503      	str	r5, [sp, #12]
 800a86e:	4604      	mov	r4, r0
 800a870:	4798      	blx	r3
 800a872:	463a      	mov	r2, r7
 800a874:	4631      	mov	r1, r6
 800a876:	4603      	mov	r3, r0
 800a878:	4620      	mov	r0, r4
 800a87a:	f7ff ff8b 	bl	800a794 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800a87e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800a880:	9307      	str	r3, [sp, #28]
 800a882:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800a886:	f8ad 3020 	strh.w	r3, [sp, #32]
 800a88a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800a88e:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 800a892:	4b0f      	ldr	r3, [pc, #60]	@ (800a8d0 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 800a894:	9004      	str	r0, [sp, #16]
 800a896:	881b      	ldrh	r3, [r3, #0]
 800a898:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 800a89c:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 800a8a0:	f7ff fca4 	bl	800a1ec <_ZN8touchgfx3HAL3lcdEv>
 800a8a4:	6803      	ldr	r3, [r0, #0]
 800a8a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a8a8:	4798      	blx	r3
 800a8aa:	23ff      	movs	r3, #255	@ 0xff
 800a8ac:	f88d 0029 	strb.w	r0, [sp, #41]	@ 0x29
 800a8b0:	f88d 002a 	strb.w	r0, [sp, #42]	@ 0x2a
 800a8b4:	6860      	ldr	r0, [r4, #4]
 800a8b6:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
 800a8ba:	f88d 502b 	strb.w	r5, [sp, #43]	@ 0x2b
 800a8be:	f88d 502c 	strb.w	r5, [sp, #44]	@ 0x2c
 800a8c2:	6803      	ldr	r3, [r0, #0]
 800a8c4:	a903      	add	r1, sp, #12
 800a8c6:	685b      	ldr	r3, [r3, #4]
 800a8c8:	4798      	blx	r3
 800a8ca:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 800a8cc:	b00d      	add	sp, #52	@ 0x34
 800a8ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a8d0:	20014f4e 	.word	0x20014f4e

0800a8d4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 800a8d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8d8:	b08c      	sub	sp, #48	@ 0x30
 800a8da:	461e      	mov	r6, r3
 800a8dc:	466d      	mov	r5, sp
 800a8de:	2300      	movs	r3, #0
 800a8e0:	e885 0006 	stmia.w	r5, {r1, r2}
 800a8e4:	9306      	str	r3, [sp, #24]
 800a8e6:	6803      	ldr	r3, [r0, #0]
 800a8e8:	f8bd 7000 	ldrh.w	r7, [sp]
 800a8ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a8ee:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 800a8f2:	2501      	movs	r5, #1
 800a8f4:	9503      	str	r5, [sp, #12]
 800a8f6:	4604      	mov	r4, r0
 800a8f8:	4798      	blx	r3
 800a8fa:	4642      	mov	r2, r8
 800a8fc:	4639      	mov	r1, r7
 800a8fe:	4603      	mov	r3, r0
 800a900:	4620      	mov	r0, r4
 800a902:	f7ff ff47 	bl	800a794 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800a906:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800a90a:	f8ad 3020 	strh.w	r3, [sp, #32]
 800a90e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800a912:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 800a916:	4b11      	ldr	r3, [pc, #68]	@ (800a95c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
 800a918:	9004      	str	r0, [sp, #16]
 800a91a:	881b      	ldrh	r3, [r3, #0]
 800a91c:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 800a920:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a922:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 800a926:	9607      	str	r6, [sp, #28]
 800a928:	f7ff fc60 	bl	800a1ec <_ZN8touchgfx3HAL3lcdEv>
 800a92c:	6803      	ldr	r3, [r0, #0]
 800a92e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a930:	4798      	blx	r3
 800a932:	23ff      	movs	r3, #255	@ 0xff
 800a934:	f88d 0029 	strb.w	r0, [sp, #41]	@ 0x29
 800a938:	f88d 002a 	strb.w	r0, [sp, #42]	@ 0x2a
 800a93c:	6860      	ldr	r0, [r4, #4]
 800a93e:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
 800a942:	f88d 502b 	strb.w	r5, [sp, #43]	@ 0x2b
 800a946:	f88d 502c 	strb.w	r5, [sp, #44]	@ 0x2c
 800a94a:	6803      	ldr	r3, [r0, #0]
 800a94c:	a903      	add	r1, sp, #12
 800a94e:	685b      	ldr	r3, [r3, #4]
 800a950:	4798      	blx	r3
 800a952:	4630      	mov	r0, r6
 800a954:	b00c      	add	sp, #48	@ 0x30
 800a956:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a95a:	bf00      	nop
 800a95c:	20014f4e 	.word	0x20014f4e

0800a960 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
 800a960:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a962:	b085      	sub	sp, #20
 800a964:	ac02      	add	r4, sp, #8
 800a966:	e884 0006 	stmia.w	r4, {r1, r2}
 800a96a:	4605      	mov	r5, r0
 800a96c:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 800a970:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 800a974:	f7ff fde6 	bl	800a544 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800a978:	463a      	mov	r2, r7
 800a97a:	4603      	mov	r3, r0
 800a97c:	4631      	mov	r1, r6
 800a97e:	4628      	mov	r0, r5
 800a980:	f7ff ff08 	bl	800a794 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800a984:	4a05      	ldr	r2, [pc, #20]	@ (800a99c <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
 800a986:	682b      	ldr	r3, [r5, #0]
 800a988:	8812      	ldrh	r2, [r2, #0]
 800a98a:	9200      	str	r2, [sp, #0]
 800a98c:	6ede      	ldr	r6, [r3, #108]	@ 0x6c
 800a98e:	e894 0006 	ldmia.w	r4, {r1, r2}
 800a992:	4603      	mov	r3, r0
 800a994:	4628      	mov	r0, r5
 800a996:	47b0      	blx	r6
 800a998:	b005      	add	sp, #20
 800a99a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a99c:	20014f4e 	.word	0x20014f4e

0800a9a0 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 800a9a0:	b570      	push	{r4, r5, r6, lr}
 800a9a2:	f890 306e 	ldrb.w	r3, [r0, #110]	@ 0x6e
 800a9a6:	4604      	mov	r4, r0
 800a9a8:	b19b      	cbz	r3, 800a9d2 <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 800a9aa:	2002      	movs	r0, #2
 800a9ac:	f7f8 f826 	bl	80029fc <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 800a9b0:	2300      	movs	r3, #0
 800a9b2:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
 800a9b6:	f884 306d 	strb.w	r3, [r4, #109]	@ 0x6d
 800a9ba:	6823      	ldr	r3, [r4, #0]
 800a9bc:	4620      	mov	r0, r4
 800a9be:	f8d3 50b8 	ldr.w	r5, [r3, #184]	@ 0xb8
 800a9c2:	f7ff fdbf 	bl	800a544 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800a9c6:	462b      	mov	r3, r5
 800a9c8:	4601      	mov	r1, r0
 800a9ca:	4620      	mov	r0, r4
 800a9cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a9d0:	4718      	bx	r3
 800a9d2:	bd70      	pop	{r4, r5, r6, pc}

0800a9d4 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 800a9d4:	b538      	push	{r3, r4, r5, lr}
 800a9d6:	f890 307b 	ldrb.w	r3, [r0, #123]	@ 0x7b
 800a9da:	428b      	cmp	r3, r1
 800a9dc:	4604      	mov	r4, r0
 800a9de:	460d      	mov	r5, r1
 800a9e0:	d006      	beq.n	800a9f0 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
 800a9e2:	6803      	ldr	r3, [r0, #0]
 800a9e4:	b929      	cbnz	r1, 800a9f2 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
 800a9e6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800a9ea:	4798      	blx	r3
 800a9ec:	f884 507b 	strb.w	r5, [r4, #123]	@ 0x7b
 800a9f0:	bd38      	pop	{r3, r4, r5, pc}
 800a9f2:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800a9f6:	e7f8      	b.n	800a9ea <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

0800a9f8 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 800a9f8:	b510      	push	{r4, lr}
 800a9fa:	4b0d      	ldr	r3, [pc, #52]	@ (800aa30 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 800a9fc:	781b      	ldrb	r3, [r3, #0]
 800a9fe:	4604      	mov	r4, r0
 800aa00:	b95b      	cbnz	r3, 800aa1a <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 800aa02:	f890 3048 	ldrb.w	r3, [r0, #72]	@ 0x48
 800aa06:	2b02      	cmp	r3, #2
 800aa08:	d007      	beq.n	800aa1a <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 800aa0a:	6840      	ldr	r0, [r0, #4]
 800aa0c:	f000 f912 	bl	800ac34 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 800aa10:	b118      	cbz	r0, 800aa1a <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 800aa12:	6862      	ldr	r2, [r4, #4]
 800aa14:	7a53      	ldrb	r3, [r2, #9]
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d0fc      	beq.n	800aa14 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 800aa1a:	f7f8 f93b 	bl	8002c94 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 800aa1e:	4620      	mov	r0, r4
 800aa20:	2100      	movs	r1, #0
 800aa22:	f7ff ffd7 	bl	800a9d4 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 800aa26:	4620      	mov	r0, r4
 800aa28:	f7ff fd8c 	bl	800a544 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800aa2c:	bd10      	pop	{r4, pc}
 800aa2e:	bf00      	nop
 800aa30:	20014f52 	.word	0x20014f52

0800aa34 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 800aa34:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 800aa38:	1a13      	subs	r3, r2, r0
 800aa3a:	4258      	negs	r0, r3
 800aa3c:	4158      	adcs	r0, r3
 800aa3e:	4770      	bx	lr

0800aa40 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 800aa40:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 800aa44:	1a9b      	subs	r3, r3, r2
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	bfdc      	itt	le
 800aa4a:	6882      	ldrle	r2, [r0, #8]
 800aa4c:	189b      	addle	r3, r3, r2
 800aa4e:	2b01      	cmp	r3, #1
 800aa50:	bfcc      	ite	gt
 800aa52:	2000      	movgt	r0, #0
 800aa54:	2001      	movle	r0, #1
 800aa56:	4770      	bx	lr

0800aa58 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 800aa58:	6902      	ldr	r2, [r0, #16]
 800aa5a:	6843      	ldr	r3, [r0, #4]
 800aa5c:	2024      	movs	r0, #36	@ 0x24
 800aa5e:	fb00 3002 	mla	r0, r0, r2, r3
 800aa62:	4770      	bx	lr

0800aa64 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 800aa64:	6803      	ldr	r3, [r0, #0]
 800aa66:	691b      	ldr	r3, [r3, #16]
 800aa68:	4718      	bx	r3

0800aa6a <_ZN8touchgfx13DMA_Interface7executeEv>:
 800aa6a:	b570      	push	{r4, r5, r6, lr}
 800aa6c:	2301      	movs	r3, #1
 800aa6e:	7203      	strb	r3, [r0, #8]
 800aa70:	4604      	mov	r4, r0
 800aa72:	6840      	ldr	r0, [r0, #4]
 800aa74:	6803      	ldr	r3, [r0, #0]
 800aa76:	699b      	ldr	r3, [r3, #24]
 800aa78:	4798      	blx	r3
 800aa7a:	6803      	ldr	r3, [r0, #0]
 800aa7c:	2b40      	cmp	r3, #64	@ 0x40
 800aa7e:	4605      	mov	r5, r0
 800aa80:	d00c      	beq.n	800aa9c <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800aa82:	d810      	bhi.n	800aaa6 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 800aa84:	2b04      	cmp	r3, #4
 800aa86:	d01d      	beq.n	800aac4 <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
 800aa88:	d804      	bhi.n	800aa94 <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
 800aa8a:	2b01      	cmp	r3, #1
 800aa8c:	d006      	beq.n	800aa9c <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800aa8e:	2b02      	cmp	r3, #2
 800aa90:	d02c      	beq.n	800aaec <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 800aa92:	bd70      	pop	{r4, r5, r6, pc}
 800aa94:	2b08      	cmp	r3, #8
 800aa96:	d01d      	beq.n	800aad4 <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
 800aa98:	2b20      	cmp	r3, #32
 800aa9a:	d1fa      	bne.n	800aa92 <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
 800aa9c:	6823      	ldr	r3, [r4, #0]
 800aa9e:	4620      	mov	r0, r4
 800aaa0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aaa2:	4798      	blx	r3
 800aaa4:	e013      	b.n	800aace <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 800aaa6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800aaaa:	d0f7      	beq.n	800aa9c <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800aaac:	d804      	bhi.n	800aab8 <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
 800aaae:	2b80      	cmp	r3, #128	@ 0x80
 800aab0:	d0f4      	beq.n	800aa9c <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800aab2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800aab6:	e7f0      	b.n	800aa9a <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
 800aab8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800aabc:	d0ee      	beq.n	800aa9c <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800aabe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800aac2:	e7e5      	b.n	800aa90 <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 800aac4:	6823      	ldr	r3, [r4, #0]
 800aac6:	7f01      	ldrb	r1, [r0, #28]
 800aac8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aaca:	4620      	mov	r0, r4
 800aacc:	4798      	blx	r3
 800aace:	6823      	ldr	r3, [r4, #0]
 800aad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aad2:	e006      	b.n	800aae2 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 800aad4:	6823      	ldr	r3, [r4, #0]
 800aad6:	7f01      	ldrb	r1, [r0, #28]
 800aad8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aada:	4620      	mov	r0, r4
 800aadc:	4798      	blx	r3
 800aade:	6823      	ldr	r3, [r4, #0]
 800aae0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aae2:	4629      	mov	r1, r5
 800aae4:	4620      	mov	r0, r4
 800aae6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800aaea:	4718      	bx	r3
 800aaec:	6823      	ldr	r3, [r4, #0]
 800aaee:	4620      	mov	r0, r4
 800aaf0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aaf2:	4798      	blx	r3
 800aaf4:	e7f3      	b.n	800aade <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

0800aaf6 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 800aaf6:	4770      	bx	lr

0800aaf8 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 800aaf8:	4770      	bx	lr

0800aafa <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
 800aafa:	4770      	bx	lr

0800aafc <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 800aafc:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 800ab00:	1ad2      	subs	r2, r2, r3
 800ab02:	2a00      	cmp	r2, #0
 800ab04:	b510      	push	{r4, lr}
 800ab06:	bfdc      	itt	le
 800ab08:	6884      	ldrle	r4, [r0, #8]
 800ab0a:	1912      	addle	r2, r2, r4
 800ab0c:	2a01      	cmp	r2, #1
 800ab0e:	dd16      	ble.n	800ab3e <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
 800ab10:	6842      	ldr	r2, [r0, #4]
 800ab12:	2424      	movs	r4, #36	@ 0x24
 800ab14:	fb04 2303 	mla	r3, r4, r3, r2
 800ab18:	f101 0220 	add.w	r2, r1, #32
 800ab1c:	f851 4b04 	ldr.w	r4, [r1], #4
 800ab20:	f843 4b04 	str.w	r4, [r3], #4
 800ab24:	4291      	cmp	r1, r2
 800ab26:	d1f9      	bne.n	800ab1c <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 800ab28:	780a      	ldrb	r2, [r1, #0]
 800ab2a:	701a      	strb	r2, [r3, #0]
 800ab2c:	68c3      	ldr	r3, [r0, #12]
 800ab2e:	6882      	ldr	r2, [r0, #8]
 800ab30:	f3bf 8f5b 	dmb	ish
 800ab34:	3301      	adds	r3, #1
 800ab36:	429a      	cmp	r2, r3
 800ab38:	bfd8      	it	le
 800ab3a:	1a9b      	suble	r3, r3, r2
 800ab3c:	60c3      	str	r3, [r0, #12]
 800ab3e:	bd10      	pop	{r4, pc}

0800ab40 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 800ab40:	6903      	ldr	r3, [r0, #16]
 800ab42:	6882      	ldr	r2, [r0, #8]
 800ab44:	f3bf 8f5b 	dmb	ish
 800ab48:	3301      	adds	r3, #1
 800ab4a:	429a      	cmp	r2, r3
 800ab4c:	bfd8      	it	le
 800ab4e:	1a9b      	suble	r3, r3, r2
 800ab50:	6103      	str	r3, [r0, #16]
 800ab52:	4770      	bx	lr

0800ab54 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 800ab54:	b570      	push	{r4, r5, r6, lr}
 800ab56:	4604      	mov	r4, r0
 800ab58:	460e      	mov	r6, r1
 800ab5a:	6860      	ldr	r0, [r4, #4]
 800ab5c:	6803      	ldr	r3, [r0, #0]
 800ab5e:	685b      	ldr	r3, [r3, #4]
 800ab60:	4798      	blx	r3
 800ab62:	2800      	cmp	r0, #0
 800ab64:	d1f9      	bne.n	800ab5a <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 800ab66:	4d0d      	ldr	r5, [pc, #52]	@ (800ab9c <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 800ab68:	6828      	ldr	r0, [r5, #0]
 800ab6a:	6803      	ldr	r3, [r0, #0]
 800ab6c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ab6e:	4798      	blx	r3
 800ab70:	f7f8 f89e 	bl	8002cb0 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 800ab74:	6828      	ldr	r0, [r5, #0]
 800ab76:	2101      	movs	r1, #1
 800ab78:	f7ff ff2c 	bl	800a9d4 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 800ab7c:	6860      	ldr	r0, [r4, #4]
 800ab7e:	6803      	ldr	r3, [r0, #0]
 800ab80:	4631      	mov	r1, r6
 800ab82:	689b      	ldr	r3, [r3, #8]
 800ab84:	4798      	blx	r3
 800ab86:	6823      	ldr	r3, [r4, #0]
 800ab88:	4620      	mov	r0, r4
 800ab8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab8c:	4798      	blx	r3
 800ab8e:	6828      	ldr	r0, [r5, #0]
 800ab90:	6803      	ldr	r3, [r0, #0]
 800ab92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ab96:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ab98:	4718      	bx	r3
 800ab9a:	bf00      	nop
 800ab9c:	20014f54 	.word	0x20014f54

0800aba0 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 800aba0:	b508      	push	{r3, lr}
 800aba2:	f7f8 f877 	bl	8002c94 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 800aba6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800abaa:	f7f8 b87b 	b.w	8002ca4 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0800abae <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 800abae:	b510      	push	{r4, lr}
 800abb0:	2114      	movs	r1, #20
 800abb2:	4604      	mov	r4, r0
 800abb4:	f009 f8cf 	bl	8013d56 <_ZdlPvj>
 800abb8:	4620      	mov	r0, r4
 800abba:	bd10      	pop	{r4, pc}

0800abbc <_ZN8touchgfx13DMA_Interface5startEv>:
 800abbc:	b510      	push	{r4, lr}
 800abbe:	4604      	mov	r4, r0
 800abc0:	6840      	ldr	r0, [r0, #4]
 800abc2:	6803      	ldr	r3, [r0, #0]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	4798      	blx	r3
 800abc8:	b948      	cbnz	r0, 800abde <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 800abca:	7a63      	ldrb	r3, [r4, #9]
 800abcc:	b13b      	cbz	r3, 800abde <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 800abce:	7a23      	ldrb	r3, [r4, #8]
 800abd0:	b92b      	cbnz	r3, 800abde <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 800abd2:	6823      	ldr	r3, [r4, #0]
 800abd4:	4620      	mov	r0, r4
 800abd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800abd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800abdc:	4718      	bx	r3
 800abde:	bd10      	pop	{r4, pc}

0800abe0 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 800abe0:	b570      	push	{r4, r5, r6, lr}
 800abe2:	4604      	mov	r4, r0
 800abe4:	6840      	ldr	r0, [r0, #4]
 800abe6:	6803      	ldr	r3, [r0, #0]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	4798      	blx	r3
 800abec:	4605      	mov	r5, r0
 800abee:	b930      	cbnz	r0, 800abfe <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 800abf0:	7a23      	ldrb	r3, [r4, #8]
 800abf2:	b123      	cbz	r3, 800abfe <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 800abf4:	6860      	ldr	r0, [r4, #4]
 800abf6:	6803      	ldr	r3, [r0, #0]
 800abf8:	695b      	ldr	r3, [r3, #20]
 800abfa:	4798      	blx	r3
 800abfc:	7225      	strb	r5, [r4, #8]
 800abfe:	6860      	ldr	r0, [r4, #4]
 800ac00:	6803      	ldr	r3, [r0, #0]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	4798      	blx	r3
 800ac06:	b928      	cbnz	r0, 800ac14 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 800ac08:	6823      	ldr	r3, [r4, #0]
 800ac0a:	4620      	mov	r0, r4
 800ac0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac0e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ac12:	4718      	bx	r3
 800ac14:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ac18:	f7f8 b852 	b.w	8002cc0 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

0800ac1c <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 800ac1c:	b510      	push	{r4, lr}
 800ac1e:	4c04      	ldr	r4, [pc, #16]	@ (800ac30 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 800ac20:	6082      	str	r2, [r0, #8]
 800ac22:	2200      	movs	r2, #0
 800ac24:	e9c0 4100 	strd	r4, r1, [r0]
 800ac28:	e9c0 2203 	strd	r2, r2, [r0, #12]
 800ac2c:	bd10      	pop	{r4, pc}
 800ac2e:	bf00      	nop
 800ac30:	0801690c 	.word	0x0801690c

0800ac34 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 800ac34:	6840      	ldr	r0, [r0, #4]
 800ac36:	6803      	ldr	r3, [r0, #0]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	4718      	bx	r3

0800ac3c <_ZNK8touchgfx8TextArea12getWildcard1Ev>:
 800ac3c:	2000      	movs	r0, #0
 800ac3e:	4770      	bx	lr

0800ac40 <_ZNK8touchgfx8TextArea12getAlignmentEv>:
 800ac40:	4b07      	ldr	r3, [pc, #28]	@ (800ac60 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x20>)
 800ac42:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
 800ac44:	881b      	ldrh	r3, [r3, #0]
 800ac46:	4293      	cmp	r3, r2
 800ac48:	bf81      	itttt	hi
 800ac4a:	4b06      	ldrhi	r3, [pc, #24]	@ (800ac64 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x24>)
 800ac4c:	681b      	ldrhi	r3, [r3, #0]
 800ac4e:	eb03 0342 	addhi.w	r3, r3, r2, lsl #1
 800ac52:	7858      	ldrbhi	r0, [r3, #1]
 800ac54:	bf8c      	ite	hi
 800ac56:	f000 0003 	andhi.w	r0, r0, #3
 800ac5a:	2000      	movls	r0, #0
 800ac5c:	4770      	bx	lr
 800ac5e:	bf00      	nop
 800ac60:	20014fa8 	.word	0x20014fa8
 800ac64:	20014fa4 	.word	0x20014fa4

0800ac68 <_ZN8touchgfx8TextAreaD1Ev>:
 800ac68:	4770      	bx	lr
	...

0800ac6c <_ZNK8touchgfx8TextArea13getTextHeightEv>:
 800ac6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac70:	4b10      	ldr	r3, [pc, #64]	@ (800acb4 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x48>)
 800ac72:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 800ac74:	881b      	ldrh	r3, [r3, #0]
 800ac76:	428b      	cmp	r3, r1
 800ac78:	4604      	mov	r4, r0
 800ac7a:	d918      	bls.n	800acae <_ZNK8touchgfx8TextArea13getTextHeightEv+0x42>
 800ac7c:	6803      	ldr	r3, [r0, #0]
 800ac7e:	6f9d      	ldr	r5, [r3, #120]	@ 0x78
 800ac80:	4b0d      	ldr	r3, [pc, #52]	@ (800acb8 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x4c>)
 800ac82:	6818      	ldr	r0, [r3, #0]
 800ac84:	f7f9 fb7c 	bl	8004380 <_ZNK8touchgfx5Texts7getTextEt>
 800ac88:	6823      	ldr	r3, [r4, #0]
 800ac8a:	4606      	mov	r6, r0
 800ac8c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ac8e:	4620      	mov	r0, r4
 800ac90:	4798      	blx	r3
 800ac92:	6823      	ldr	r3, [r4, #0]
 800ac94:	4607      	mov	r7, r0
 800ac96:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ac9a:	4620      	mov	r0, r4
 800ac9c:	4798      	blx	r3
 800ac9e:	463a      	mov	r2, r7
 800aca0:	4603      	mov	r3, r0
 800aca2:	4631      	mov	r1, r6
 800aca4:	4620      	mov	r0, r4
 800aca6:	46ac      	mov	ip, r5
 800aca8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800acac:	4760      	bx	ip
 800acae:	2000      	movs	r0, #0
 800acb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800acb4:	20014fa8 	.word	0x20014fa8
 800acb8:	20014fb0 	.word	0x20014fb0

0800acbc <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 800acbc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800acc0:	4b17      	ldr	r3, [pc, #92]	@ (800ad20 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x64>)
 800acc2:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 800acc4:	881b      	ldrh	r3, [r3, #0]
 800acc6:	428b      	cmp	r3, r1
 800acc8:	4604      	mov	r4, r0
 800acca:	d926      	bls.n	800ad1a <_ZNK8touchgfx8TextArea12getTextWidthEv+0x5e>
 800accc:	4b15      	ldr	r3, [pc, #84]	@ (800ad24 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x68>)
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 800acd4:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 800acd8:	4b13      	ldr	r3, [pc, #76]	@ (800ad28 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 800acda:	7855      	ldrb	r5, [r2, #1]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 800ace2:	6833      	ldr	r3, [r6, #0]
 800ace4:	69df      	ldr	r7, [r3, #28]
 800ace6:	4b11      	ldr	r3, [pc, #68]	@ (800ad2c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x70>)
 800ace8:	6818      	ldr	r0, [r3, #0]
 800acea:	f7f9 fb49 	bl	8004380 <_ZNK8touchgfx5Texts7getTextEt>
 800acee:	6823      	ldr	r3, [r4, #0]
 800acf0:	4680      	mov	r8, r0
 800acf2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800acf4:	4620      	mov	r0, r4
 800acf6:	4798      	blx	r3
 800acf8:	6823      	ldr	r3, [r4, #0]
 800acfa:	4681      	mov	r9, r0
 800acfc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ad00:	4620      	mov	r0, r4
 800ad02:	4798      	blx	r3
 800ad04:	f3c5 0581 	ubfx	r5, r5, #2, #2
 800ad08:	9000      	str	r0, [sp, #0]
 800ad0a:	464b      	mov	r3, r9
 800ad0c:	4642      	mov	r2, r8
 800ad0e:	4629      	mov	r1, r5
 800ad10:	4630      	mov	r0, r6
 800ad12:	47b8      	blx	r7
 800ad14:	b003      	add	sp, #12
 800ad16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ad1a:	2000      	movs	r0, #0
 800ad1c:	e7fa      	b.n	800ad14 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x58>
 800ad1e:	bf00      	nop
 800ad20:	20014fa8 	.word	0x20014fa8
 800ad24:	20014fa4 	.word	0x20014fa4
 800ad28:	20014fac 	.word	0x20014fac
 800ad2c:	20014fb0 	.word	0x20014fb0

0800ad30 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 800ad30:	b40e      	push	{r1, r2, r3}
 800ad32:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad36:	4b2f      	ldr	r3, [pc, #188]	@ (800adf4 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc4>)
 800ad38:	881a      	ldrh	r2, [r3, #0]
 800ad3a:	8d83      	ldrh	r3, [r0, #44]	@ 0x2c
 800ad3c:	429a      	cmp	r2, r3
 800ad3e:	b09d      	sub	sp, #116	@ 0x74
 800ad40:	4604      	mov	r4, r0
 800ad42:	d954      	bls.n	800adee <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xbe>
 800ad44:	f8df 90b0 	ldr.w	r9, [pc, #176]	@ 800adf8 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc8>
 800ad48:	f8df 80b0 	ldr.w	r8, [pc, #176]	@ 800adfc <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xcc>
 800ad4c:	aa26      	add	r2, sp, #152	@ 0x98
 800ad4e:	9202      	str	r2, [sp, #8]
 800ad50:	f8d9 2000 	ldr.w	r2, [r9]
 800ad54:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 800ad58:	f8d8 3000 	ldr.w	r3, [r8]
 800ad5c:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 800ad60:	682b      	ldr	r3, [r5, #0]
 800ad62:	4628      	mov	r0, r5
 800ad64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad66:	4798      	blx	r3
 800ad68:	b207      	sxth	r7, r0
 800ad6a:	4606      	mov	r6, r0
 800ad6c:	a803      	add	r0, sp, #12
 800ad6e:	f004 f9ad 	bl	800f0cc <_ZN8touchgfx12TextProviderC1Ev>
 800ad72:	682b      	ldr	r3, [r5, #0]
 800ad74:	4628      	mov	r0, r5
 800ad76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ad78:	4798      	blx	r3
 800ad7a:	682b      	ldr	r3, [r5, #0]
 800ad7c:	4682      	mov	sl, r0
 800ad7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ad80:	4628      	mov	r0, r5
 800ad82:	4798      	blx	r3
 800ad84:	4653      	mov	r3, sl
 800ad86:	9000      	str	r0, [sp, #0]
 800ad88:	9a02      	ldr	r2, [sp, #8]
 800ad8a:	9925      	ldr	r1, [sp, #148]	@ 0x94
 800ad8c:	a803      	add	r0, sp, #12
 800ad8e:	f004 f9f8 	bl	800f182 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800ad92:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 800ad94:	f8d9 3000 	ldr.w	r3, [r9]
 800ad98:	f894 c037 	ldrb.w	ip, [r4, #55]	@ 0x37
 800ad9c:	8925      	ldrh	r5, [r4, #8]
 800ad9e:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 800ada2:	eb03 0142 	add.w	r1, r3, r2, lsl #1
 800ada6:	eba5 050c 	sub.w	r5, r5, ip
 800adaa:	784a      	ldrb	r2, [r1, #1]
 800adac:	f8d8 3000 	ldr.w	r3, [r8]
 800adb0:	f894 1039 	ldrb.w	r1, [r4, #57]	@ 0x39
 800adb4:	b22d      	sxth	r5, r5
 800adb6:	9500      	str	r5, [sp, #0]
 800adb8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800adbc:	f3c2 0281 	ubfx	r2, r2, #2, #2
 800adc0:	a803      	add	r0, sp, #12
 800adc2:	f002 f82d 	bl	800ce20 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 800adc6:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	@ 0x34
 800adca:	18b9      	adds	r1, r7, r2
 800adcc:	2900      	cmp	r1, #0
 800adce:	b203      	sxth	r3, r0
 800add0:	dd0b      	ble.n	800adea <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xba>
 800add2:	3b01      	subs	r3, #1
 800add4:	fb13 f302 	smulbb	r3, r3, r2
 800add8:	fb16 3300 	smlabb	r3, r6, r0, r3
 800addc:	b21f      	sxth	r7, r3
 800adde:	4638      	mov	r0, r7
 800ade0:	b01d      	add	sp, #116	@ 0x74
 800ade2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ade6:	b003      	add	sp, #12
 800ade8:	4770      	bx	lr
 800adea:	2b00      	cmp	r3, #0
 800adec:	dcf7      	bgt.n	800adde <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 800adee:	2700      	movs	r7, #0
 800adf0:	e7f5      	b.n	800adde <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 800adf2:	bf00      	nop
 800adf4:	20014fa8 	.word	0x20014fa8
 800adf8:	20014fa4 	.word	0x20014fa4
 800adfc:	20014fac 	.word	0x20014fac

0800ae00 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>:
 800ae00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae04:	4bbc      	ldr	r3, [pc, #752]	@ (800b0f8 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2f8>)
 800ae06:	460c      	mov	r4, r1
 800ae08:	881b      	ldrh	r3, [r3, #0]
 800ae0a:	8d89      	ldrh	r1, [r1, #44]	@ 0x2c
 800ae0c:	428b      	cmp	r3, r1
 800ae0e:	b0a9      	sub	sp, #164	@ 0xa4
 800ae10:	4680      	mov	r8, r0
 800ae12:	d809      	bhi.n	800ae28 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x28>
 800ae14:	2300      	movs	r3, #0
 800ae16:	f04f 32ff 	mov.w	r2, #4294967295
 800ae1a:	e9c0 3200 	strd	r3, r2, [r0]
 800ae1e:	6083      	str	r3, [r0, #8]
 800ae20:	4640      	mov	r0, r8
 800ae22:	b029      	add	sp, #164	@ 0xa4
 800ae24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae28:	4eb4      	ldr	r6, [pc, #720]	@ (800b0fc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2fc>)
 800ae2a:	6833      	ldr	r3, [r6, #0]
 800ae2c:	f813 2011 	ldrb.w	r2, [r3, r1, lsl #1]
 800ae30:	4bb3      	ldr	r3, [pc, #716]	@ (800b100 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x300>)
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 800ae38:	4bb2      	ldr	r3, [pc, #712]	@ (800b104 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x304>)
 800ae3a:	6818      	ldr	r0, [r3, #0]
 800ae3c:	f7f9 faa0 	bl	8004380 <_ZNK8touchgfx5Texts7getTextEt>
 800ae40:	682b      	ldr	r3, [r5, #0]
 800ae42:	4681      	mov	r9, r0
 800ae44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae46:	4628      	mov	r0, r5
 800ae48:	4798      	blx	r3
 800ae4a:	8ea7      	ldrh	r7, [r4, #52]	@ 0x34
 800ae4c:	b203      	sxth	r3, r0
 800ae4e:	4407      	add	r7, r0
 800ae50:	9304      	str	r3, [sp, #16]
 800ae52:	b2bb      	uxth	r3, r7
 800ae54:	9303      	str	r3, [sp, #12]
 800ae56:	f894 3039 	ldrb.w	r3, [r4, #57]	@ 0x39
 800ae5a:	4682      	mov	sl, r0
 800ae5c:	a80f      	add	r0, sp, #60	@ 0x3c
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	f040 80a6 	bne.w	800afb0 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x1b0>
 800ae64:	f004 f932 	bl	800f0cc <_ZN8touchgfx12TextProviderC1Ev>
 800ae68:	682b      	ldr	r3, [r5, #0]
 800ae6a:	4628      	mov	r0, r5
 800ae6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ae6e:	4798      	blx	r3
 800ae70:	682b      	ldr	r3, [r5, #0]
 800ae72:	4606      	mov	r6, r0
 800ae74:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ae76:	4628      	mov	r0, r5
 800ae78:	4798      	blx	r3
 800ae7a:	6823      	ldr	r3, [r4, #0]
 800ae7c:	4607      	mov	r7, r0
 800ae7e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ae80:	4620      	mov	r0, r4
 800ae82:	4798      	blx	r3
 800ae84:	6823      	ldr	r3, [r4, #0]
 800ae86:	4683      	mov	fp, r0
 800ae88:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ae8c:	4620      	mov	r0, r4
 800ae8e:	4798      	blx	r3
 800ae90:	463b      	mov	r3, r7
 800ae92:	e9cd b000 	strd	fp, r0, [sp]
 800ae96:	4649      	mov	r1, r9
 800ae98:	4632      	mov	r2, r6
 800ae9a:	a80f      	add	r0, sp, #60	@ 0x3c
 800ae9c:	f004 f986 	bl	800f1ac <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 800aea0:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 800aea4:	f8df b254 	ldr.w	fp, [pc, #596]	@ 800b0fc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2fc>
 800aea8:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
 800aeac:	f04f 0600 	mov.w	r6, #0
 800aeb0:	bf0c      	ite	eq
 800aeb2:	f9b4 900a 	ldrsheq.w	r9, [r4, #10]
 800aeb6:	f9b4 9008 	ldrshne.w	r9, [r4, #8]
 800aeba:	4637      	mov	r7, r6
 800aebc:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 800aebe:	f8db 3000 	ldr.w	r3, [fp]
 800aec2:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 800aec6:	4629      	mov	r1, r5
 800aec8:	785b      	ldrb	r3, [r3, #1]
 800aeca:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800aece:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800aed2:	a80f      	add	r0, sp, #60	@ 0x3c
 800aed4:	f001 f8cf 	bl	800c076 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 800aed8:	9b03      	ldr	r3, [sp, #12]
 800aeda:	4286      	cmp	r6, r0
 800aedc:	bfb8      	it	lt
 800aede:	4606      	movlt	r6, r0
 800aee0:	3701      	adds	r7, #1
 800aee2:	eba9 0903 	sub.w	r9, r9, r3
 800aee6:	a80f      	add	r0, sp, #60	@ 0x3c
 800aee8:	b236      	sxth	r6, r6
 800aeea:	b2bf      	uxth	r7, r7
 800aeec:	fa0f f989 	sxth.w	r9, r9
 800aef0:	f004 f913 	bl	800f11a <_ZN8touchgfx12TextProvider11endOfStringEv>
 800aef4:	b918      	cbnz	r0, 800aefe <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfe>
 800aef6:	7a2b      	ldrb	r3, [r5, #8]
 800aef8:	444b      	add	r3, r9
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	dcde      	bgt.n	800aebc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xbc>
 800aefe:	9b03      	ldr	r3, [sp, #12]
 800af00:	9a04      	ldr	r2, [sp, #16]
 800af02:	f895 9009 	ldrb.w	r9, [r5, #9]
 800af06:	fb13 f707 	smulbb	r7, r3, r7
 800af0a:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 800af0c:	1aff      	subs	r7, r7, r3
 800af0e:	b2bf      	uxth	r7, r7
 800af10:	b23b      	sxth	r3, r7
 800af12:	429a      	cmp	r2, r3
 800af14:	bfa8      	it	ge
 800af16:	4657      	movge	r7, sl
 800af18:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 800af1c:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
 800af20:	6823      	ldr	r3, [r4, #0]
 800af22:	bf08      	it	eq
 800af24:	f9b4 a008 	ldrsheq.w	sl, [r4, #8]
 800af28:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800af2a:	bf18      	it	ne
 800af2c:	f9b4 a00a 	ldrshne.w	sl, [r4, #10]
 800af30:	4620      	mov	r0, r4
 800af32:	4798      	blx	r3
 800af34:	444f      	add	r7, r9
 800af36:	fa1f f987 	uxth.w	r9, r7
 800af3a:	2801      	cmp	r0, #1
 800af3c:	fa0f f789 	sxth.w	r7, r9
 800af40:	b2b3      	uxth	r3, r6
 800af42:	f000 80e1 	beq.w	800b108 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x308>
 800af46:	2802      	cmp	r0, #2
 800af48:	f894 6037 	ldrb.w	r6, [r4, #55]	@ 0x37
 800af4c:	f000 80e2 	beq.w	800b114 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x314>
 800af50:	7aea      	ldrb	r2, [r5, #11]
 800af52:	7b2d      	ldrb	r5, [r5, #12]
 800af54:	b236      	sxth	r6, r6
 800af56:	1ab6      	subs	r6, r6, r2
 800af58:	442a      	add	r2, r5
 800af5a:	4413      	add	r3, r2
 800af5c:	f894 2038 	ldrb.w	r2, [r4, #56]	@ 0x38
 800af60:	fa1f fa86 	uxth.w	sl, r6
 800af64:	b29b      	uxth	r3, r3
 800af66:	2a02      	cmp	r2, #2
 800af68:	fa0f fb8a 	sxth.w	fp, sl
 800af6c:	b21e      	sxth	r6, r3
 800af6e:	f000 80d5 	beq.w	800b11c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x31c>
 800af72:	2a03      	cmp	r2, #3
 800af74:	f000 80dd 	beq.w	800b132 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x332>
 800af78:	2a01      	cmp	r2, #1
 800af7a:	f040 80e5 	bne.w	800b148 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x348>
 800af7e:	8925      	ldrh	r5, [r4, #8]
 800af80:	4633      	mov	r3, r6
 800af82:	eba5 0909 	sub.w	r9, r5, r9
 800af86:	463e      	mov	r6, r7
 800af88:	465d      	mov	r5, fp
 800af8a:	461f      	mov	r7, r3
 800af8c:	fa0f fb89 	sxth.w	fp, r9
 800af90:	4b5c      	ldr	r3, [pc, #368]	@ (800b104 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x304>)
 800af92:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 800af94:	6818      	ldr	r0, [r3, #0]
 800af96:	f7f9 f9f3 	bl	8004380 <_ZNK8touchgfx5Texts7getTextEt>
 800af9a:	f8a8 b000 	strh.w	fp, [r8]
 800af9e:	f8a8 5002 	strh.w	r5, [r8, #2]
 800afa2:	f8a8 6004 	strh.w	r6, [r8, #4]
 800afa6:	f8a8 7006 	strh.w	r7, [r8, #6]
 800afaa:	f8c8 0008 	str.w	r0, [r8, #8]
 800afae:	e737      	b.n	800ae20 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x20>
 800afb0:	f004 f88c 	bl	800f0cc <_ZN8touchgfx12TextProviderC1Ev>
 800afb4:	682b      	ldr	r3, [r5, #0]
 800afb6:	4628      	mov	r0, r5
 800afb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800afba:	4798      	blx	r3
 800afbc:	682b      	ldr	r3, [r5, #0]
 800afbe:	4607      	mov	r7, r0
 800afc0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800afc2:	4628      	mov	r0, r5
 800afc4:	4798      	blx	r3
 800afc6:	6823      	ldr	r3, [r4, #0]
 800afc8:	4683      	mov	fp, r0
 800afca:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800afcc:	4620      	mov	r0, r4
 800afce:	4798      	blx	r3
 800afd0:	6822      	ldr	r2, [r4, #0]
 800afd2:	9005      	str	r0, [sp, #20]
 800afd4:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800afd8:	4620      	mov	r0, r4
 800afda:	4790      	blx	r2
 800afdc:	9b05      	ldr	r3, [sp, #20]
 800afde:	9001      	str	r0, [sp, #4]
 800afe0:	463a      	mov	r2, r7
 800afe2:	4649      	mov	r1, r9
 800afe4:	9300      	str	r3, [sp, #0]
 800afe6:	a80f      	add	r0, sp, #60	@ 0x3c
 800afe8:	465b      	mov	r3, fp
 800afea:	f004 f8df 	bl	800f1ac <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 800afee:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 800aff2:	f9b4 9008 	ldrsh.w	r9, [r4, #8]
 800aff6:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 800aff8:	f894 0039 	ldrb.w	r0, [r4, #57]	@ 0x39
 800affc:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
 800b000:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 800b004:	bf0a      	itet	eq
 800b006:	464a      	moveq	r2, r9
 800b008:	461a      	movne	r2, r3
 800b00a:	4699      	moveq	r9, r3
 800b00c:	f894 3037 	ldrb.w	r3, [r4, #55]	@ 0x37
 800b010:	1ad2      	subs	r2, r2, r3
 800b012:	6833      	ldr	r3, [r6, #0]
 800b014:	f9b4 6034 	ldrsh.w	r6, [r4, #52]	@ 0x34
 800b018:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 800b01c:	af0f      	add	r7, sp, #60	@ 0x3c
 800b01e:	7859      	ldrb	r1, [r3, #1]
 800b020:	9707      	str	r7, [sp, #28]
 800b022:	2300      	movs	r3, #0
 800b024:	f3c1 0181 	ubfx	r1, r1, #2, #2
 800b028:	f8ad 3018 	strh.w	r3, [sp, #24]
 800b02c:	f88d 1020 	strb.w	r1, [sp, #32]
 800b030:	f88d 0021 	strb.w	r0, [sp, #33]	@ 0x21
 800b034:	9509      	str	r5, [sp, #36]	@ 0x24
 800b036:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 800b03a:	f8ad 902a 	strh.w	r9, [sp, #42]	@ 0x2a
 800b03e:	f8ad 602c 	strh.w	r6, [sp, #44]	@ 0x2c
 800b042:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 800b046:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
 800b04a:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 800b04e:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 800b052:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 800b056:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
 800b05a:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 800b05e:	b350      	cbz	r0, 800b0b6 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b6>
 800b060:	682b      	ldr	r3, [r5, #0]
 800b062:	4628      	mov	r0, r5
 800b064:	695b      	ldr	r3, [r3, #20]
 800b066:	4798      	blx	r3
 800b068:	4607      	mov	r7, r0
 800b06a:	b320      	cbz	r0, 800b0b6 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b6>
 800b06c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b06e:	6803      	ldr	r3, [r0, #0]
 800b070:	4639      	mov	r1, r7
 800b072:	68db      	ldr	r3, [r3, #12]
 800b074:	4798      	blx	r3
 800b076:	4606      	mov	r6, r0
 800b078:	b1e8      	cbz	r0, 800b0b6 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b6>
 800b07a:	7b43      	ldrb	r3, [r0, #13]
 800b07c:	7a82      	ldrb	r2, [r0, #10]
 800b07e:	005b      	lsls	r3, r3, #1
 800b080:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b084:	4313      	orrs	r3, r2
 800b086:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
 800b08a:	f89d 3021 	ldrb.w	r3, [sp, #33]	@ 0x21
 800b08e:	2b06      	cmp	r3, #6
 800b090:	d111      	bne.n	800b0b6 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b6>
 800b092:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b094:	6803      	ldr	r3, [r0, #0]
 800b096:	4632      	mov	r2, r6
 800b098:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b09a:	4639      	mov	r1, r7
 800b09c:	4798      	blx	r3
 800b09e:	7b73      	ldrb	r3, [r6, #13]
 800b0a0:	005b      	lsls	r3, r3, #1
 800b0a2:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 800b0a6:	7ab3      	ldrb	r3, [r6, #10]
 800b0a8:	4313      	orrs	r3, r2
 800b0aa:	4418      	add	r0, r3
 800b0ac:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 800b0b0:	4418      	add	r0, r3
 800b0b2:	f8ad 0038 	strh.w	r0, [sp, #56]	@ 0x38
 800b0b6:	2600      	movs	r6, #0
 800b0b8:	4637      	mov	r7, r6
 800b0ba:	a806      	add	r0, sp, #24
 800b0bc:	f001 fdac 	bl	800cc18 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 800b0c0:	f8bd 0036 	ldrh.w	r0, [sp, #54]	@ 0x36
 800b0c4:	9b03      	ldr	r3, [sp, #12]
 800b0c6:	4286      	cmp	r6, r0
 800b0c8:	eba9 0903 	sub.w	r9, r9, r3
 800b0cc:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 800b0d0:	bfb8      	it	lt
 800b0d2:	4606      	movlt	r6, r0
 800b0d4:	3701      	adds	r7, #1
 800b0d6:	b236      	sxth	r6, r6
 800b0d8:	b2bf      	uxth	r7, r7
 800b0da:	fa0f f989 	sxth.w	r9, r9
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	f43f af0d 	beq.w	800aefe <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfe>
 800b0e4:	f89d 303a 	ldrb.w	r3, [sp, #58]	@ 0x3a
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	f47f af08 	bne.w	800aefe <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfe>
 800b0ee:	7a2b      	ldrb	r3, [r5, #8]
 800b0f0:	444b      	add	r3, r9
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	dce1      	bgt.n	800b0ba <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2ba>
 800b0f6:	e702      	b.n	800aefe <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfe>
 800b0f8:	20014fa8 	.word	0x20014fa8
 800b0fc:	20014fa4 	.word	0x20014fa4
 800b100:	20014fac 	.word	0x20014fac
 800b104:	20014fb0 	.word	0x20014fb0
 800b108:	ebaa 0606 	sub.w	r6, sl, r6
 800b10c:	2002      	movs	r0, #2
 800b10e:	fb96 f6f0 	sdiv	r6, r6, r0
 800b112:	e71d      	b.n	800af50 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x150>
 800b114:	441e      	add	r6, r3
 800b116:	ebaa 0606 	sub.w	r6, sl, r6
 800b11a:	e719      	b.n	800af50 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x150>
 800b11c:	8925      	ldrh	r5, [r4, #8]
 800b11e:	1aed      	subs	r5, r5, r3
 800b120:	eba5 050a 	sub.w	r5, r5, sl
 800b124:	fa0f fb85 	sxth.w	fp, r5
 800b128:	8965      	ldrh	r5, [r4, #10]
 800b12a:	eba5 0509 	sub.w	r5, r5, r9
 800b12e:	b22d      	sxth	r5, r5
 800b130:	e72e      	b.n	800af90 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x190>
 800b132:	8965      	ldrh	r5, [r4, #10]
 800b134:	1aed      	subs	r5, r5, r3
 800b136:	eba5 050a 	sub.w	r5, r5, sl
 800b13a:	4633      	mov	r3, r6
 800b13c:	b22d      	sxth	r5, r5
 800b13e:	463e      	mov	r6, r7
 800b140:	f04f 0b00 	mov.w	fp, #0
 800b144:	461f      	mov	r7, r3
 800b146:	e723      	b.n	800af90 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x190>
 800b148:	2500      	movs	r5, #0
 800b14a:	e721      	b.n	800af90 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x190>

0800b14c <_ZN8touchgfx8TextAreaD0Ev>:
 800b14c:	b510      	push	{r4, lr}
 800b14e:	2148      	movs	r1, #72	@ 0x48
 800b150:	4604      	mov	r4, r0
 800b152:	f008 fe00 	bl	8013d56 <_ZdlPvj>
 800b156:	4620      	mov	r0, r4
 800b158:	bd10      	pop	{r4, pc}
	...

0800b15c <_ZNK8touchgfx8TextArea17invalidateContentEv>:
 800b15c:	b513      	push	{r0, r1, r4, lr}
 800b15e:	f890 3036 	ldrb.w	r3, [r0, #54]	@ 0x36
 800b162:	4604      	mov	r4, r0
 800b164:	b1fb      	cbz	r3, 800b1a6 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 800b166:	4b16      	ldr	r3, [pc, #88]	@ (800b1c0 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x64>)
 800b168:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 800b16a:	881b      	ldrh	r3, [r3, #0]
 800b16c:	428b      	cmp	r3, r1
 800b16e:	d91a      	bls.n	800b1a6 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 800b170:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 800b174:	2b00      	cmp	r3, #0
 800b176:	dd16      	ble.n	800b1a6 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 800b178:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	dd12      	ble.n	800b1a6 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 800b180:	4b10      	ldr	r3, [pc, #64]	@ (800b1c4 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x68>)
 800b182:	6818      	ldr	r0, [r3, #0]
 800b184:	f7f9 f8fc 	bl	8004380 <_ZNK8touchgfx5Texts7getTextEt>
 800b188:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	@ 0x42
 800b18c:	6822      	ldr	r2, [r4, #0]
 800b18e:	2b00      	cmp	r3, #0
 800b190:	db06      	blt.n	800b1a0 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
 800b192:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	@ 0x40
 800b196:	2b00      	cmp	r3, #0
 800b198:	db02      	blt.n	800b1a0 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
 800b19a:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800b19c:	4298      	cmp	r0, r3
 800b19e:	d004      	beq.n	800b1aa <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4e>
 800b1a0:	6953      	ldr	r3, [r2, #20]
 800b1a2:	4620      	mov	r0, r4
 800b1a4:	4798      	blx	r3
 800b1a6:	b002      	add	sp, #8
 800b1a8:	bd10      	pop	{r4, pc}
 800b1aa:	f104 013c 	add.w	r1, r4, #60	@ 0x3c
 800b1ae:	c903      	ldmia	r1, {r0, r1}
 800b1b0:	466b      	mov	r3, sp
 800b1b2:	e883 0003 	stmia.w	r3, {r0, r1}
 800b1b6:	6912      	ldr	r2, [r2, #16]
 800b1b8:	4619      	mov	r1, r3
 800b1ba:	4620      	mov	r0, r4
 800b1bc:	4790      	blx	r2
 800b1be:	e7f2      	b.n	800b1a6 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 800b1c0:	20014fa8 	.word	0x20014fa8
 800b1c4:	20014fb0 	.word	0x20014fb0

0800b1c8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 800b1c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b1cc:	4b44      	ldr	r3, [pc, #272]	@ (800b2e0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x118>)
 800b1ce:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
 800b1d0:	881b      	ldrh	r3, [r3, #0]
 800b1d2:	4293      	cmp	r3, r2
 800b1d4:	b08e      	sub	sp, #56	@ 0x38
 800b1d6:	4604      	mov	r4, r0
 800b1d8:	d97e      	bls.n	800b2d8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 800b1da:	6808      	ldr	r0, [r1, #0]
 800b1dc:	4d41      	ldr	r5, [pc, #260]	@ (800b2e4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x11c>)
 800b1de:	6849      	ldr	r1, [r1, #4]
 800b1e0:	ab05      	add	r3, sp, #20
 800b1e2:	c303      	stmia	r3!, {r0, r1}
 800b1e4:	4611      	mov	r1, r2
 800b1e6:	6828      	ldr	r0, [r5, #0]
 800b1e8:	f7f9 f8ca 	bl	8004380 <_ZNK8touchgfx5Texts7getTextEt>
 800b1ec:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	@ 0x42
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	db11      	blt.n	800b218 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 800b1f4:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	@ 0x40
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	db0d      	blt.n	800b218 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 800b1fc:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800b1fe:	4298      	cmp	r0, r3
 800b200:	d10a      	bne.n	800b218 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 800b202:	f104 023c 	add.w	r2, r4, #60	@ 0x3c
 800b206:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b20a:	ab09      	add	r3, sp, #36	@ 0x24
 800b20c:	e883 0003 	stmia.w	r3, {r0, r1}
 800b210:	4619      	mov	r1, r3
 800b212:	a805      	add	r0, sp, #20
 800b214:	f7fe fd14 	bl	8009c40 <_ZN8touchgfx4RectaNERKS0_>
 800b218:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	dd5b      	ble.n	800b2d8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 800b220:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 800b224:	2b00      	cmp	r3, #0
 800b226:	dd57      	ble.n	800b2d8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 800b228:	4f2f      	ldr	r7, [pc, #188]	@ (800b2e8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x120>)
 800b22a:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 800b22c:	683b      	ldr	r3, [r7, #0]
 800b22e:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 800b232:	4b2e      	ldr	r3, [pc, #184]	@ (800b2ec <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x124>)
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 800b23a:	2e00      	cmp	r6, #0
 800b23c:	d04c      	beq.n	800b2d8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 800b23e:	6823      	ldr	r3, [r4, #0]
 800b240:	f894 8036 	ldrb.w	r8, [r4, #54]	@ 0x36
 800b244:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b246:	4620      	mov	r0, r4
 800b248:	4798      	blx	r3
 800b24a:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 800b24c:	683b      	ldr	r3, [r7, #0]
 800b24e:	f9b4 c034 	ldrsh.w	ip, [r4, #52]	@ 0x34
 800b252:	f894 e038 	ldrb.w	lr, [r4, #56]	@ 0x38
 800b256:	f894 7037 	ldrb.w	r7, [r4, #55]	@ 0x37
 800b25a:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800b25c:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 800b260:	f894 2039 	ldrb.w	r2, [r4, #57]	@ 0x39
 800b264:	785b      	ldrb	r3, [r3, #1]
 800b266:	9609      	str	r6, [sp, #36]	@ 0x24
 800b268:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800b26c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b270:	4b1f      	ldr	r3, [pc, #124]	@ (800b2f0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x128>)
 800b272:	f88d 0028 	strb.w	r0, [sp, #40]	@ 0x28
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	f88d e02a 	strb.w	lr, [sp, #42]	@ 0x2a
 800b27c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800b27e:	f8ad c030 	strh.w	ip, [sp, #48]	@ 0x30
 800b282:	f88d 8032 	strb.w	r8, [sp, #50]	@ 0x32
 800b286:	f88d 7033 	strb.w	r7, [sp, #51]	@ 0x33
 800b28a:	f88d 2034 	strb.w	r2, [sp, #52]	@ 0x34
 800b28e:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 800b292:	b10a      	cbz	r2, 800b298 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd0>
 800b294:	6cde      	ldr	r6, [r3, #76]	@ 0x4c
 800b296:	b906      	cbnz	r6, 800b29a <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd2>
 800b298:	689e      	ldr	r6, [r3, #8]
 800b29a:	af07      	add	r7, sp, #28
 800b29c:	4621      	mov	r1, r4
 800b29e:	4638      	mov	r0, r7
 800b2a0:	f003 fb56 	bl	800e950 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800b2a4:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 800b2a6:	6828      	ldr	r0, [r5, #0]
 800b2a8:	f7f9 f86a 	bl	8004380 <_ZNK8touchgfx5Texts7getTextEt>
 800b2ac:	6823      	ldr	r3, [r4, #0]
 800b2ae:	4605      	mov	r5, r0
 800b2b0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b2b2:	4620      	mov	r0, r4
 800b2b4:	4798      	blx	r3
 800b2b6:	6823      	ldr	r3, [r4, #0]
 800b2b8:	4680      	mov	r8, r0
 800b2ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b2be:	4620      	mov	r0, r4
 800b2c0:	4798      	blx	r3
 800b2c2:	e9cd 8002 	strd	r8, r0, [sp, #8]
 800b2c6:	ab09      	add	r3, sp, #36	@ 0x24
 800b2c8:	9300      	str	r3, [sp, #0]
 800b2ca:	9501      	str	r5, [sp, #4]
 800b2cc:	ab05      	add	r3, sp, #20
 800b2ce:	e897 0006 	ldmia.w	r7, {r1, r2}
 800b2d2:	4630      	mov	r0, r6
 800b2d4:	f7f9 f807 	bl	80042e6 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 800b2d8:	b00e      	add	sp, #56	@ 0x38
 800b2da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b2de:	bf00      	nop
 800b2e0:	20014fa8 	.word	0x20014fa8
 800b2e4:	20014fb0 	.word	0x20014fb0
 800b2e8:	20014fa4 	.word	0x20014fa4
 800b2ec:	20014fac 	.word	0x20014fac
 800b2f0:	20014f54 	.word	0x20014f54

0800b2f4 <_ZN8touchgfx8Drawable14setWidthHeightEss>:
 800b2f4:	b570      	push	{r4, r5, r6, lr}
 800b2f6:	6803      	ldr	r3, [r0, #0]
 800b2f8:	4604      	mov	r4, r0
 800b2fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b2fc:	4615      	mov	r5, r2
 800b2fe:	4798      	blx	r3
 800b300:	6823      	ldr	r3, [r4, #0]
 800b302:	4629      	mov	r1, r5
 800b304:	4620      	mov	r0, r4
 800b306:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b308:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b30c:	4718      	bx	r3
	...

0800b310 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 800b310:	b538      	push	{r3, r4, r5, lr}
 800b312:	4b0e      	ldr	r3, [pc, #56]	@ (800b34c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x3c>)
 800b314:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
 800b316:	881b      	ldrh	r3, [r3, #0]
 800b318:	429a      	cmp	r2, r3
 800b31a:	4604      	mov	r4, r0
 800b31c:	d214      	bcs.n	800b348 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x38>
 800b31e:	6803      	ldr	r3, [r0, #0]
 800b320:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b322:	4798      	blx	r3
 800b324:	6823      	ldr	r3, [r4, #0]
 800b326:	4605      	mov	r5, r0
 800b328:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b32a:	4620      	mov	r0, r4
 800b32c:	4798      	blx	r3
 800b32e:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 800b332:	b22d      	sxth	r5, r5
 800b334:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
 800b338:	4601      	mov	r1, r0
 800b33a:	bf06      	itte	eq
 800b33c:	4602      	moveq	r2, r0
 800b33e:	4629      	moveq	r1, r5
 800b340:	462a      	movne	r2, r5
 800b342:	4620      	mov	r0, r4
 800b344:	f7ff ffd6 	bl	800b2f4 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 800b348:	bd38      	pop	{r3, r4, r5, pc}
 800b34a:	bf00      	nop
 800b34c:	20014fa8 	.word	0x20014fa8

0800b350 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>:
 800b350:	b530      	push	{r4, r5, lr}
 800b352:	888b      	ldrh	r3, [r1, #4]
 800b354:	8583      	strh	r3, [r0, #44]	@ 0x2c
 800b356:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 800b35a:	b085      	sub	sp, #20
 800b35c:	4604      	mov	r4, r0
 800b35e:	b923      	cbnz	r3, 800b36a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 800b360:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 800b364:	b90b      	cbnz	r3, 800b36a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 800b366:	f7ff ffd3 	bl	800b310 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 800b36a:	6823      	ldr	r3, [r4, #0]
 800b36c:	466d      	mov	r5, sp
 800b36e:	4621      	mov	r1, r4
 800b370:	4628      	mov	r0, r5
 800b372:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b376:	4798      	blx	r3
 800b378:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800b37c:	343c      	adds	r4, #60	@ 0x3c
 800b37e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b382:	b005      	add	sp, #20
 800b384:	bd30      	pop	{r4, r5, pc}

0800b386 <_ZNK8touchgfx3Box12getSolidRectEv>:
 800b386:	2300      	movs	r3, #0
 800b388:	8083      	strh	r3, [r0, #4]
 800b38a:	80c3      	strh	r3, [r0, #6]
 800b38c:	8003      	strh	r3, [r0, #0]
 800b38e:	8043      	strh	r3, [r0, #2]
 800b390:	f891 3026 	ldrb.w	r3, [r1, #38]	@ 0x26
 800b394:	2bff      	cmp	r3, #255	@ 0xff
 800b396:	bf01      	itttt	eq
 800b398:	890b      	ldrheq	r3, [r1, #8]
 800b39a:	8083      	strheq	r3, [r0, #4]
 800b39c:	894b      	ldrheq	r3, [r1, #10]
 800b39e:	80c3      	strheq	r3, [r0, #6]
 800b3a0:	4770      	bx	lr
	...

0800b3a4 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 800b3a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b3a6:	4604      	mov	r4, r0
 800b3a8:	6808      	ldr	r0, [r1, #0]
 800b3aa:	6849      	ldr	r1, [r1, #4]
 800b3ac:	466b      	mov	r3, sp
 800b3ae:	c303      	stmia	r3!, {r0, r1}
 800b3b0:	6823      	ldr	r3, [r4, #0]
 800b3b2:	4669      	mov	r1, sp
 800b3b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3b6:	4620      	mov	r0, r4
 800b3b8:	4798      	blx	r3
 800b3ba:	4b08      	ldr	r3, [pc, #32]	@ (800b3dc <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 800b3c2:	b10a      	cbz	r2, 800b3c8 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 800b3c4:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 800b3c6:	b900      	cbnz	r0, 800b3ca <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 800b3c8:	6898      	ldr	r0, [r3, #8]
 800b3ca:	6803      	ldr	r3, [r0, #0]
 800b3cc:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800b3ce:	6a1d      	ldr	r5, [r3, #32]
 800b3d0:	f894 3026 	ldrb.w	r3, [r4, #38]	@ 0x26
 800b3d4:	4669      	mov	r1, sp
 800b3d6:	47a8      	blx	r5
 800b3d8:	b003      	add	sp, #12
 800b3da:	bd30      	pop	{r4, r5, pc}
 800b3dc:	20014f54 	.word	0x20014f54

0800b3e0 <_ZN8touchgfx3BoxD1Ev>:
 800b3e0:	4770      	bx	lr

0800b3e2 <_ZN8touchgfx3BoxD0Ev>:
 800b3e2:	b510      	push	{r4, lr}
 800b3e4:	212c      	movs	r1, #44	@ 0x2c
 800b3e6:	4604      	mov	r4, r0
 800b3e8:	f008 fcb5 	bl	8013d56 <_ZdlPvj>
 800b3ec:	4620      	mov	r0, r4
 800b3ee:	bd10      	pop	{r4, pc}

0800b3f0 <_ZNK8touchgfx3Box17invalidateContentEv>:
 800b3f0:	f890 2026 	ldrb.w	r2, [r0, #38]	@ 0x26
 800b3f4:	b12a      	cbz	r2, 800b402 <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 800b3f6:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 800b3fa:	b112      	cbz	r2, 800b402 <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 800b3fc:	6803      	ldr	r3, [r0, #0]
 800b3fe:	695b      	ldr	r3, [r3, #20]
 800b400:	4718      	bx	r3
 800b402:	4770      	bx	lr

0800b404 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE>:
 800b404:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b408:	4b2f      	ldr	r3, [pc, #188]	@ (800b4c8 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xc4>)
 800b40a:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
 800b40c:	881b      	ldrh	r3, [r3, #0]
 800b40e:	4293      	cmp	r3, r2
 800b410:	b08d      	sub	sp, #52	@ 0x34
 800b412:	4604      	mov	r4, r0
 800b414:	460f      	mov	r7, r1
 800b416:	d954      	bls.n	800b4c2 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xbe>
 800b418:	4b2c      	ldr	r3, [pc, #176]	@ (800b4cc <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xc8>)
 800b41a:	6819      	ldr	r1, [r3, #0]
 800b41c:	eb01 0342 	add.w	r3, r1, r2, lsl #1
 800b420:	f811 1012 	ldrb.w	r1, [r1, r2, lsl #1]
 800b424:	4a2a      	ldr	r2, [pc, #168]	@ (800b4d0 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xcc>)
 800b426:	6812      	ldr	r2, [r2, #0]
 800b428:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 800b42c:	2900      	cmp	r1, #0
 800b42e:	d048      	beq.n	800b4c2 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xbe>
 800b430:	785a      	ldrb	r2, [r3, #1]
 800b432:	f894 3039 	ldrb.w	r3, [r4, #57]	@ 0x39
 800b436:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 800b43a:	4b26      	ldr	r3, [pc, #152]	@ (800b4d4 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xd0>)
 800b43c:	f890 5036 	ldrb.w	r5, [r0, #54]	@ 0x36
 800b440:	f9b0 c034 	ldrsh.w	ip, [r0, #52]	@ 0x34
 800b444:	f890 e038 	ldrb.w	lr, [r0, #56]	@ 0x38
 800b448:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 800b44a:	f890 0037 	ldrb.w	r0, [r0, #55]	@ 0x37
 800b44e:	9107      	str	r1, [sp, #28]
 800b450:	f3c2 0801 	ubfx	r8, r2, #0, #2
 800b454:	f3c2 0281 	ubfx	r2, r2, #2, #2
 800b458:	f88d 2021 	strb.w	r2, [sp, #33]	@ 0x21
 800b45c:	681a      	ldr	r2, [r3, #0]
 800b45e:	f88d 8020 	strb.w	r8, [sp, #32]
 800b462:	f892 3058 	ldrb.w	r3, [r2, #88]	@ 0x58
 800b466:	f88d e022 	strb.w	lr, [sp, #34]	@ 0x22
 800b46a:	9609      	str	r6, [sp, #36]	@ 0x24
 800b46c:	f8ad c028 	strh.w	ip, [sp, #40]	@ 0x28
 800b470:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 800b474:	f88d 002b 	strb.w	r0, [sp, #43]	@ 0x2b
 800b478:	b10b      	cbz	r3, 800b47e <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x7a>
 800b47a:	6cd5      	ldr	r5, [r2, #76]	@ 0x4c
 800b47c:	b905      	cbnz	r5, 800b480 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x7c>
 800b47e:	6895      	ldr	r5, [r2, #8]
 800b480:	ae05      	add	r6, sp, #20
 800b482:	4621      	mov	r1, r4
 800b484:	4630      	mov	r0, r6
 800b486:	f003 fa63 	bl	800e950 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800b48a:	4b13      	ldr	r3, [pc, #76]	@ (800b4d8 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xd4>)
 800b48c:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 800b48e:	6818      	ldr	r0, [r3, #0]
 800b490:	f7f8 ff76 	bl	8004380 <_ZNK8touchgfx5Texts7getTextEt>
 800b494:	6823      	ldr	r3, [r4, #0]
 800b496:	4680      	mov	r8, r0
 800b498:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b49a:	4620      	mov	r0, r4
 800b49c:	4798      	blx	r3
 800b49e:	6823      	ldr	r3, [r4, #0]
 800b4a0:	4681      	mov	r9, r0
 800b4a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b4a6:	4620      	mov	r0, r4
 800b4a8:	4798      	blx	r3
 800b4aa:	e9cd 9002 	strd	r9, r0, [sp, #8]
 800b4ae:	ab07      	add	r3, sp, #28
 800b4b0:	9300      	str	r3, [sp, #0]
 800b4b2:	f8cd 8004 	str.w	r8, [sp, #4]
 800b4b6:	463b      	mov	r3, r7
 800b4b8:	e896 0006 	ldmia.w	r6, {r1, r2}
 800b4bc:	4628      	mov	r0, r5
 800b4be:	f7f8 ff12 	bl	80042e6 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 800b4c2:	b00d      	add	sp, #52	@ 0x34
 800b4c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b4c8:	20014fa8 	.word	0x20014fa8
 800b4cc:	20014fa4 	.word	0x20014fa4
 800b4d0:	20014fac 	.word	0x20014fac
 800b4d4:	20014f54 	.word	0x20014f54
 800b4d8:	20014fb0 	.word	0x20014fb0

0800b4dc <_ZN8touchgfx5ImageD1Ev>:
 800b4dc:	4770      	bx	lr

0800b4de <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 800b4de:	b570      	push	{r4, r5, r6, lr}
 800b4e0:	880b      	ldrh	r3, [r1, #0]
 800b4e2:	84c3      	strh	r3, [r0, #38]	@ 0x26
 800b4e4:	4604      	mov	r4, r0
 800b4e6:	4608      	mov	r0, r1
 800b4e8:	460d      	mov	r5, r1
 800b4ea:	f005 fdd5 	bl	8011098 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800b4ee:	4606      	mov	r6, r0
 800b4f0:	4628      	mov	r0, r5
 800b4f2:	f005 fe05 	bl	8011100 <_ZNK8touchgfx6Bitmap9getHeightEv>
 800b4f6:	6823      	ldr	r3, [r4, #0]
 800b4f8:	4605      	mov	r5, r0
 800b4fa:	4631      	mov	r1, r6
 800b4fc:	4620      	mov	r0, r4
 800b4fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b500:	4798      	blx	r3
 800b502:	6823      	ldr	r3, [r4, #0]
 800b504:	4629      	mov	r1, r5
 800b506:	4620      	mov	r0, r4
 800b508:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b50a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b50e:	4718      	bx	r3

0800b510 <_ZN8touchgfx5ImageD0Ev>:
 800b510:	b510      	push	{r4, lr}
 800b512:	212c      	movs	r1, #44	@ 0x2c
 800b514:	4604      	mov	r4, r0
 800b516:	f008 fc1e 	bl	8013d56 <_ZdlPvj>
 800b51a:	4620      	mov	r0, r4
 800b51c:	bd10      	pop	{r4, pc}

0800b51e <_ZNK8touchgfx5Image12getSolidRectEv>:
 800b51e:	b510      	push	{r4, lr}
 800b520:	f891 3028 	ldrb.w	r3, [r1, #40]	@ 0x28
 800b524:	2bff      	cmp	r3, #255	@ 0xff
 800b526:	4604      	mov	r4, r0
 800b528:	d006      	beq.n	800b538 <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 800b52a:	2300      	movs	r3, #0
 800b52c:	8003      	strh	r3, [r0, #0]
 800b52e:	8043      	strh	r3, [r0, #2]
 800b530:	8083      	strh	r3, [r0, #4]
 800b532:	80c3      	strh	r3, [r0, #6]
 800b534:	4620      	mov	r0, r4
 800b536:	bd10      	pop	{r4, pc}
 800b538:	3126      	adds	r1, #38	@ 0x26
 800b53a:	f005 fe15 	bl	8011168 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 800b53e:	e7f9      	b.n	800b534 <_ZNK8touchgfx5Image12getSolidRectEv+0x16>

0800b540 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 800b540:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b544:	4604      	mov	r4, r0
 800b546:	b088      	sub	sp, #32
 800b548:	f854 3b26 	ldr.w	r3, [r4], #38
 800b54c:	2500      	movs	r5, #0
 800b54e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b550:	460f      	mov	r7, r1
 800b552:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800b556:	a904      	add	r1, sp, #16
 800b558:	4606      	mov	r6, r0
 800b55a:	4798      	blx	r3
 800b55c:	4620      	mov	r0, r4
 800b55e:	f005 fd9b 	bl	8011098 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800b562:	4680      	mov	r8, r0
 800b564:	4620      	mov	r0, r4
 800b566:	f005 fdcb 	bl	8011100 <_ZNK8touchgfx6Bitmap9getHeightEv>
 800b56a:	9506      	str	r5, [sp, #24]
 800b56c:	ad06      	add	r5, sp, #24
 800b56e:	f8ad 001e 	strh.w	r0, [sp, #30]
 800b572:	4639      	mov	r1, r7
 800b574:	4628      	mov	r0, r5
 800b576:	f8ad 801c 	strh.w	r8, [sp, #28]
 800b57a:	f7fe fb61 	bl	8009c40 <_ZN8touchgfx4RectaNERKS0_>
 800b57e:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 800b582:	2b00      	cmp	r3, #0
 800b584:	dd19      	ble.n	800b5ba <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 800b586:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	dd15      	ble.n	800b5ba <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 800b58e:	4b0c      	ldr	r3, [pc, #48]	@ (800b5c0 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 800b596:	b10a      	cbz	r2, 800b59c <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
 800b598:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 800b59a:	b900      	cbnz	r0, 800b59e <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
 800b59c:	6898      	ldr	r0, [r3, #8]
 800b59e:	6801      	ldr	r1, [r0, #0]
 800b5a0:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 800b5a4:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 800b5a8:	2701      	movs	r7, #1
 800b5aa:	9702      	str	r7, [sp, #8]
 800b5ac:	f896 6028 	ldrb.w	r6, [r6, #40]	@ 0x28
 800b5b0:	e9cd 5600 	strd	r5, r6, [sp]
 800b5b4:	688d      	ldr	r5, [r1, #8]
 800b5b6:	4621      	mov	r1, r4
 800b5b8:	47a8      	blx	r5
 800b5ba:	b008      	add	sp, #32
 800b5bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b5c0:	20014f54 	.word	0x20014f54

0800b5c4 <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 800b5c4:	b510      	push	{r4, lr}
 800b5c6:	6803      	ldr	r3, [r0, #0]
 800b5c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5ca:	460c      	mov	r4, r1
 800b5cc:	4798      	blx	r3
 800b5ce:	1b03      	subs	r3, r0, r4
 800b5d0:	4258      	negs	r0, r3
 800b5d2:	4158      	adcs	r0, r3
 800b5d4:	bd10      	pop	{r4, pc}
	...

0800b5d8 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 800b5d8:	4b01      	ldr	r3, [pc, #4]	@ (800b5e0 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 800b5da:	6019      	str	r1, [r3, #0]
 800b5dc:	4770      	bx	lr
 800b5de:	bf00      	nop
 800b5e0:	20014f5c 	.word	0x20014f5c

0800b5e4 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 800b5e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5e8:	4696      	mov	lr, r2
 800b5ea:	4605      	mov	r5, r0
 800b5ec:	4614      	mov	r4, r2
 800b5ee:	460e      	mov	r6, r1
 800b5f0:	461f      	mov	r7, r3
 800b5f2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800b5f6:	b097      	sub	sp, #92	@ 0x5c
 800b5f8:	f10d 0c1c 	add.w	ip, sp, #28
 800b5fc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b600:	f8de 3000 	ldr.w	r3, [lr]
 800b604:	f8cc 3000 	str.w	r3, [ip]
 800b608:	f104 0e14 	add.w	lr, r4, #20
 800b60c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800b610:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 800b614:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b618:	f8de 3000 	ldr.w	r3, [lr]
 800b61c:	f8cc 3000 	str.w	r3, [ip]
 800b620:	f104 0e28 	add.w	lr, r4, #40	@ 0x28
 800b624:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800b628:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 800b62c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b630:	f89d 908c 	ldrb.w	r9, [sp, #140]	@ 0x8c
 800b634:	f8bd a090 	ldrh.w	sl, [sp, #144]	@ 0x90
 800b638:	f8bd 8088 	ldrh.w	r8, [sp, #136]	@ 0x88
 800b63c:	f8de 3000 	ldr.w	r3, [lr]
 800b640:	f8cc 3000 	str.w	r3, [ip]
 800b644:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800b646:	682b      	ldr	r3, [r5, #0]
 800b648:	9201      	str	r2, [sp, #4]
 800b64a:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 800b64e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800b650:	9200      	str	r2, [sp, #0]
 800b652:	f8cd 8008 	str.w	r8, [sp, #8]
 800b656:	f8d3 b03c 	ldr.w	fp, [r3, #60]	@ 0x3c
 800b65a:	aa07      	add	r2, sp, #28
 800b65c:	463b      	mov	r3, r7
 800b65e:	4631      	mov	r1, r6
 800b660:	4628      	mov	r0, r5
 800b662:	47d8      	blx	fp
 800b664:	46a6      	mov	lr, r4
 800b666:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800b66a:	f10d 0c1c 	add.w	ip, sp, #28
 800b66e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b672:	f8de 3000 	ldr.w	r3, [lr]
 800b676:	f8cc 3000 	str.w	r3, [ip]
 800b67a:	f104 0e28 	add.w	lr, r4, #40	@ 0x28
 800b67e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800b682:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 800b686:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b68a:	343c      	adds	r4, #60	@ 0x3c
 800b68c:	f8de 3000 	ldr.w	r3, [lr]
 800b690:	f8cc 3000 	str.w	r3, [ip]
 800b694:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b696:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 800b69a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b69e:	6823      	ldr	r3, [r4, #0]
 800b6a0:	f8cc 3000 	str.w	r3, [ip]
 800b6a4:	682b      	ldr	r3, [r5, #0]
 800b6a6:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 800b6aa:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800b6ac:	9201      	str	r2, [sp, #4]
 800b6ae:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800b6b0:	9200      	str	r2, [sp, #0]
 800b6b2:	f8cd 8008 	str.w	r8, [sp, #8]
 800b6b6:	6bdc      	ldr	r4, [r3, #60]	@ 0x3c
 800b6b8:	aa07      	add	r2, sp, #28
 800b6ba:	463b      	mov	r3, r7
 800b6bc:	4631      	mov	r1, r6
 800b6be:	4628      	mov	r0, r5
 800b6c0:	47a0      	blx	r4
 800b6c2:	b017      	add	sp, #92	@ 0x5c
 800b6c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b6c8 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 800b6c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6cc:	b08d      	sub	sp, #52	@ 0x34
 800b6ce:	4688      	mov	r8, r1
 800b6d0:	9916      	ldr	r1, [sp, #88]	@ 0x58
 800b6d2:	f8d3 c000 	ldr.w	ip, [r3]
 800b6d6:	680f      	ldr	r7, [r1, #0]
 800b6d8:	f8bd 4070 	ldrh.w	r4, [sp, #112]	@ 0x70
 800b6dc:	ed92 4a09 	vldr	s8, [r2, #36]	@ 0x24
 800b6e0:	edd2 4a0b 	vldr	s9, [r2, #44]	@ 0x2c
 800b6e4:	edd3 6a07 	vldr	s13, [r3, #28]
 800b6e8:	9918      	ldr	r1, [sp, #96]	@ 0x60
 800b6ea:	f8dd a064 	ldr.w	sl, [sp, #100]	@ 0x64
 800b6ee:	f9b1 9000 	ldrsh.w	r9, [r1]
 800b6f2:	f9ba 1000 	ldrsh.w	r1, [sl]
 800b6f6:	edd3 1a0a 	vldr	s3, [r3, #40]	@ 0x28
 800b6fa:	ed93 2a0d 	vldr	s4, [r3, #52]	@ 0x34
 800b6fe:	eba7 070c 	sub.w	r7, r7, ip
 800b702:	42bc      	cmp	r4, r7
 800b704:	bfa8      	it	ge
 800b706:	463c      	movge	r4, r7
 800b708:	ee07 4a90 	vmov	s15, r4
 800b70c:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 800b710:	edd2 7a0d 	vldr	s15, [r2, #52]	@ 0x34
 800b714:	ee25 4a04 	vmul.f32	s8, s10, s8
 800b718:	ee65 4a24 	vmul.f32	s9, s10, s9
 800b71c:	ee25 5a27 	vmul.f32	s10, s10, s15
 800b720:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800b724:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800b728:	eb09 0e0c 	add.w	lr, r9, ip
 800b72c:	4571      	cmp	r1, lr
 800b72e:	ee71 0aa4 	vadd.f32	s1, s3, s9
 800b732:	ee32 1a05 	vadd.f32	s2, s4, s10
 800b736:	ee36 0a84 	vadd.f32	s0, s13, s8
 800b73a:	ee61 1a87 	vmul.f32	s3, s3, s14
 800b73e:	ee22 2a07 	vmul.f32	s4, s4, s14
 800b742:	f340 808d 	ble.w	800b860 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x198>
 800b746:	eba1 060e 	sub.w	r6, r1, lr
 800b74a:	fb96 f5f4 	sdiv	r5, r6, r4
 800b74e:	ee07 5a10 	vmov	s14, r5
 800b752:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b756:	2d00      	cmp	r5, #0
 800b758:	fb04 6615 	mls	r6, r4, r5, r6
 800b75c:	eea7 0a04 	vfma.f32	s0, s14, s8
 800b760:	eee7 0a24 	vfma.f32	s1, s14, s9
 800b764:	eea7 1a05 	vfma.f32	s2, s14, s10
 800b768:	dd13      	ble.n	800b792 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xca>
 800b76a:	ee70 6a44 	vsub.f32	s13, s0, s8
 800b76e:	ee70 1ae4 	vsub.f32	s3, s1, s9
 800b772:	eef5 6a40 	vcmp.f32	s13, #0.0
 800b776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b77a:	bf18      	it	ne
 800b77c:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 800b780:	ee31 2a45 	vsub.f32	s4, s2, s10
 800b784:	bf08      	it	eq
 800b786:	eeb0 7a67 	vmoveq.f32	s14, s15
 800b78a:	ee61 1a87 	vmul.f32	s3, s3, s14
 800b78e:	ee22 2a07 	vmul.f32	s4, s4, s14
 800b792:	fb05 f204 	mul.w	r2, r5, r4
 800b796:	1abf      	subs	r7, r7, r2
 800b798:	4494      	add	ip, r2
 800b79a:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 800b79e:	4411      	add	r1, r2
 800b7a0:	eb09 020c 	add.w	r2, r9, ip
 800b7a4:	443a      	add	r2, r7
 800b7a6:	b209      	sxth	r1, r1
 800b7a8:	428a      	cmp	r2, r1
 800b7aa:	bfc4      	itt	gt
 800b7ac:	eba1 0209 	subgt.w	r2, r1, r9
 800b7b0:	eba2 070c 	subgt.w	r7, r2, ip
 800b7b4:	2f00      	cmp	r7, #0
 800b7b6:	dd50      	ble.n	800b85a <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x192>
 800b7b8:	fb97 f1f4 	sdiv	r1, r7, r4
 800b7bc:	fb04 7211 	mls	r2, r4, r1, r7
 800b7c0:	b90a      	cbnz	r2, 800b7c6 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfe>
 800b7c2:	3901      	subs	r1, #1
 800b7c4:	4622      	mov	r2, r4
 800b7c6:	eec7 3a80 	vdiv.f32	s7, s15, s0
 800b7ca:	6840      	ldr	r0, [r0, #4]
 800b7cc:	900b      	str	r0, [sp, #44]	@ 0x2c
 800b7ce:	f8d0 a000 	ldr.w	sl, [r0]
 800b7d2:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 800b7d4:	9008      	str	r0, [sp, #32]
 800b7d6:	f89d b06c 	ldrb.w	fp, [sp, #108]	@ 0x6c
 800b7da:	9818      	ldr	r0, [sp, #96]	@ 0x60
 800b7dc:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800b7e0:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 800b7e4:	695b      	ldr	r3, [r3, #20]
 800b7e6:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800b7e8:	445b      	add	r3, fp
 800b7ea:	eef0 6a42 	vmov.f32	s13, s4
 800b7ee:	ee60 2aa3 	vmul.f32	s5, s1, s7
 800b7f2:	ee21 3a23 	vmul.f32	s6, s2, s7
 800b7f6:	ee72 7ae1 	vsub.f32	s15, s5, s3
 800b7fa:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 800b7fe:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 800b802:	9307      	str	r3, [sp, #28]
 800b804:	ee17 7a90 	vmov	r7, s15
 800b808:	ee73 7a42 	vsub.f32	s15, s6, s4
 800b80c:	eeb0 7a61 	vmov.f32	s14, s3
 800b810:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 800b814:	ee16 3a90 	vmov	r3, s13
 800b818:	fb97 f7f4 	sdiv	r7, r7, r4
 800b81c:	ee17 ca90 	vmov	ip, s15
 800b820:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 800b824:	fb9c fcf4 	sdiv	ip, ip, r4
 800b828:	fb0c 3306 	mla	r3, ip, r6, r3
 800b82c:	9302      	str	r3, [sp, #8]
 800b82e:	ee17 3a10 	vmov	r3, s14
 800b832:	44b6      	add	lr, r6
 800b834:	fb04 e505 	mla	r5, r4, r5, lr
 800b838:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 800b83c:	fb07 3706 	mla	r7, r7, r6, r3
 800b840:	e9cd 8505 	strd	r8, r5, [sp, #20]
 800b844:	e9cd 4700 	strd	r4, r7, [sp]
 800b848:	2900      	cmp	r1, #0
 800b84a:	bfcc      	ite	gt
 800b84c:	46a1      	movgt	r9, r4
 800b84e:	4691      	movle	r9, r2
 800b850:	eba9 0306 	sub.w	r3, r9, r6
 800b854:	f8da 4008 	ldr.w	r4, [sl, #8]
 800b858:	47a0      	blx	r4
 800b85a:	b00d      	add	sp, #52	@ 0x34
 800b85c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b860:	2500      	movs	r5, #0
 800b862:	462e      	mov	r6, r5
 800b864:	e799      	b.n	800b79a <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd2>
	...

0800b868 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 800b868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b86c:	b0db      	sub	sp, #364	@ 0x16c
 800b86e:	461d      	mov	r5, r3
 800b870:	f8bd 3198 	ldrh.w	r3, [sp, #408]	@ 0x198
 800b874:	930a      	str	r3, [sp, #40]	@ 0x28
 800b876:	f89d 319c 	ldrb.w	r3, [sp, #412]	@ 0x19c
 800b87a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b87c:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	@ 0x1a0
 800b880:	9310      	str	r3, [sp, #64]	@ 0x40
 800b882:	6803      	ldr	r3, [r0, #0]
 800b884:	910f      	str	r1, [sp, #60]	@ 0x3c
 800b886:	6c5f      	ldr	r7, [r3, #68]	@ 0x44
 800b888:	9009      	str	r0, [sp, #36]	@ 0x24
 800b88a:	4614      	mov	r4, r2
 800b88c:	4629      	mov	r1, r5
 800b88e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 800b892:	f8dd b194 	ldr.w	fp, [sp, #404]	@ 0x194
 800b896:	47b8      	blx	r7
 800b898:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b89a:	6058      	str	r0, [r3, #4]
 800b89c:	2800      	cmp	r0, #0
 800b89e:	f000 83a1 	beq.w	800bfe4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800b8a2:	682b      	ldr	r3, [r5, #0]
 800b8a4:	9314      	str	r3, [sp, #80]	@ 0x50
 800b8a6:	686b      	ldr	r3, [r5, #4]
 800b8a8:	9315      	str	r3, [sp, #84]	@ 0x54
 800b8aa:	4bc4      	ldr	r3, [pc, #784]	@ (800bbbc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 800b8ac:	ed94 7a02 	vldr	s14, [r4, #8]
 800b8b0:	7819      	ldrb	r1, [r3, #0]
 800b8b2:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 800b8b6:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 800b8ba:	2900      	cmp	r1, #0
 800b8bc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b8c0:	bf16      	itet	ne
 800b8c2:	4619      	movne	r1, r3
 800b8c4:	4611      	moveq	r1, r2
 800b8c6:	4613      	movne	r3, r2
 800b8c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b8cc:	9116      	str	r1, [sp, #88]	@ 0x58
 800b8ce:	e9cd 3217 	strd	r3, r2, [sp, #92]	@ 0x5c
 800b8d2:	f240 8387 	bls.w	800bfe4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800b8d6:	ed94 7a07 	vldr	s14, [r4, #28]
 800b8da:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b8de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b8e2:	f240 837f 	bls.w	800bfe4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800b8e6:	ed94 7a0c 	vldr	s14, [r4, #48]	@ 0x30
 800b8ea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b8ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b8f2:	f240 8377 	bls.w	800bfe4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800b8f6:	6822      	ldr	r2, [r4, #0]
 800b8f8:	4bb1      	ldr	r3, [pc, #708]	@ (800bbc0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 800b8fa:	429a      	cmp	r2, r3
 800b8fc:	f2c0 8372 	blt.w	800bfe4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800b900:	49b0      	ldr	r1, [pc, #704]	@ (800bbc4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 800b902:	6963      	ldr	r3, [r4, #20]
 800b904:	428a      	cmp	r2, r1
 800b906:	f300 836d 	bgt.w	800bfe4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800b90a:	f503 331c 	add.w	r3, r3, #159744	@ 0x27000
 800b90e:	48ae      	ldr	r0, [pc, #696]	@ (800bbc8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 800b910:	33ff      	adds	r3, #255	@ 0xff
 800b912:	4283      	cmp	r3, r0
 800b914:	f200 8366 	bhi.w	800bfe4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800b918:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800b91a:	4dac      	ldr	r5, [pc, #688]	@ (800bbcc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 800b91c:	f503 331c 	add.w	r3, r3, #159744	@ 0x27000
 800b920:	33ff      	adds	r3, #255	@ 0xff
 800b922:	42ab      	cmp	r3, r5
 800b924:	f200 835e 	bhi.w	800bfe4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800b928:	6862      	ldr	r2, [r4, #4]
 800b92a:	f502 331c 	add.w	r3, r2, #159744	@ 0x27000
 800b92e:	33ff      	adds	r3, #255	@ 0xff
 800b930:	4283      	cmp	r3, r0
 800b932:	f200 8357 	bhi.w	800bfe4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800b936:	69a1      	ldr	r1, [r4, #24]
 800b938:	f501 331c 	add.w	r3, r1, #159744	@ 0x27000
 800b93c:	33ff      	adds	r3, #255	@ 0xff
 800b93e:	4283      	cmp	r3, r0
 800b940:	f200 8350 	bhi.w	800bfe4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800b944:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800b946:	f503 301c 	add.w	r0, r3, #159744	@ 0x27000
 800b94a:	30ff      	adds	r0, #255	@ 0xff
 800b94c:	42a8      	cmp	r0, r5
 800b94e:	f200 8349 	bhi.w	800bfe4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800b952:	428a      	cmp	r2, r1
 800b954:	f280 8110 	bge.w	800bb78 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 800b958:	429a      	cmp	r2, r3
 800b95a:	f300 8119 	bgt.w	800bb90 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 800b95e:	4299      	cmp	r1, r3
 800b960:	f280 811d 	bge.w	800bb9e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 800b964:	2502      	movs	r5, #2
 800b966:	2701      	movs	r7, #1
 800b968:	46a9      	mov	r9, r5
 800b96a:	46b8      	mov	r8, r7
 800b96c:	f04f 0a00 	mov.w	sl, #0
 800b970:	4621      	mov	r1, r4
 800b972:	a849      	add	r0, sp, #292	@ 0x124
 800b974:	f004 fd4c 	bl	8010410 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 800b978:	4622      	mov	r2, r4
 800b97a:	4653      	mov	r3, sl
 800b97c:	a949      	add	r1, sp, #292	@ 0x124
 800b97e:	f8cd 9000 	str.w	r9, [sp]
 800b982:	a819      	add	r0, sp, #100	@ 0x64
 800b984:	f004 fe74 	bl	8010670 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 800b988:	4622      	mov	r2, r4
 800b98a:	4653      	mov	r3, sl
 800b98c:	a949      	add	r1, sp, #292	@ 0x124
 800b98e:	f8cd 8000 	str.w	r8, [sp]
 800b992:	a829      	add	r0, sp, #164	@ 0xa4
 800b994:	f004 fe6c 	bl	8010670 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 800b998:	4643      	mov	r3, r8
 800b99a:	4622      	mov	r2, r4
 800b99c:	a949      	add	r1, sp, #292	@ 0x124
 800b99e:	f8cd 9000 	str.w	r9, [sp]
 800b9a2:	a839      	add	r0, sp, #228	@ 0xe4
 800b9a4:	f004 fe64 	bl	8010670 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 800b9a8:	42af      	cmp	r7, r5
 800b9aa:	bfb5      	itete	lt
 800b9ac:	2300      	movlt	r3, #0
 800b9ae:	2301      	movge	r3, #1
 800b9b0:	930e      	strlt	r3, [sp, #56]	@ 0x38
 800b9b2:	930e      	strge	r3, [sp, #56]	@ 0x38
 800b9b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b9b6:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b9ba:	af12      	add	r7, sp, #72	@ 0x48
 800b9bc:	bfb9      	ittee	lt
 800b9be:	ad29      	addlt	r5, sp, #164	@ 0xa4
 800b9c0:	ac19      	addlt	r4, sp, #100	@ 0x64
 800b9c2:	ad19      	addge	r5, sp, #100	@ 0x64
 800b9c4:	ac29      	addge	r4, sp, #164	@ 0xa4
 800b9c6:	e887 0003 	stmia.w	r7, {r0, r1}
 800b9ca:	b928      	cbnz	r0, 800b9d8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 800b9cc:	4b80      	ldr	r3, [pc, #512]	@ (800bbd0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 800b9ce:	6818      	ldr	r0, [r3, #0]
 800b9d0:	6803      	ldr	r3, [r0, #0]
 800b9d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b9d4:	4798      	blx	r3
 800b9d6:	6038      	str	r0, [r7, #0]
 800b9d8:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 800b9da:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 800b9de:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b9e2:	930c      	str	r3, [sp, #48]	@ 0x30
 800b9e4:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800b9e6:	6963      	ldr	r3, [r4, #20]
 800b9e8:	9a2f      	ldr	r2, [sp, #188]	@ 0xbc
 800b9ea:	440b      	add	r3, r1
 800b9ec:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 800b9f0:	4408      	add	r0, r1
 800b9f2:	b200      	sxth	r0, r0
 800b9f4:	4283      	cmp	r3, r0
 800b9f6:	900d      	str	r0, [sp, #52]	@ 0x34
 800b9f8:	f280 80dd 	bge.w	800bbb6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 800b9fc:	428b      	cmp	r3, r1
 800b9fe:	da08      	bge.n	800ba12 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 800ba00:	2a00      	cmp	r2, #0
 800ba02:	dd06      	ble.n	800ba12 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 800ba04:	1acb      	subs	r3, r1, r3
 800ba06:	429a      	cmp	r2, r3
 800ba08:	f2c0 80e4 	blt.w	800bbd4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	f300 80e2 	bgt.w	800bbd6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 800ba12:	6967      	ldr	r7, [r4, #20]
 800ba14:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ba16:	443b      	add	r3, r7
 800ba18:	461f      	mov	r7, r3
 800ba1a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ba1c:	1bdf      	subs	r7, r3, r7
 800ba1e:	4297      	cmp	r7, r2
 800ba20:	bfa8      	it	ge
 800ba22:	4617      	movge	r7, r2
 800ba24:	f10d 0850 	add.w	r8, sp, #80	@ 0x50
 800ba28:	2f00      	cmp	r7, #0
 800ba2a:	f340 8166 	ble.w	800bcfa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 800ba2e:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 800ba30:	6829      	ldr	r1, [r5, #0]
 800ba32:	f9b3 2000 	ldrsh.w	r2, [r3]
 800ba36:	f9bb 3000 	ldrsh.w	r3, [fp]
 800ba3a:	6820      	ldr	r0, [r4, #0]
 800ba3c:	4411      	add	r1, r2
 800ba3e:	4299      	cmp	r1, r3
 800ba40:	dd1a      	ble.n	800ba78 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 800ba42:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 800ba46:	440b      	add	r3, r1
 800ba48:	4402      	add	r2, r0
 800ba4a:	b21b      	sxth	r3, r3
 800ba4c:	429a      	cmp	r2, r3
 800ba4e:	dc13      	bgt.n	800ba78 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 800ba50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba52:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	9206      	str	r2, [sp, #24]
 800ba58:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800ba5a:	9205      	str	r2, [sp, #20]
 800ba5c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ba5e:	9500      	str	r5, [sp, #0]
 800ba60:	e9cd b203 	strd	fp, r2, [sp, #12]
 800ba64:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 800ba66:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ba68:	e9cd 8201 	strd	r8, r2, [sp, #4]
 800ba6c:	a912      	add	r1, sp, #72	@ 0x48
 800ba6e:	f8d3 9048 	ldr.w	r9, [r3, #72]	@ 0x48
 800ba72:	aa49      	add	r2, sp, #292	@ 0x124
 800ba74:	4623      	mov	r3, r4
 800ba76:	47c8      	blx	r9
 800ba78:	e9d4 2300 	ldrd	r2, r3, [r4]
 800ba7c:	441a      	add	r2, r3
 800ba7e:	6963      	ldr	r3, [r4, #20]
 800ba80:	ed94 7a0a 	vldr	s14, [r4, #40]	@ 0x28
 800ba84:	edd4 7a0b 	vldr	s15, [r4, #44]	@ 0x2c
 800ba88:	edd4 6a0e 	vldr	s13, [r4, #56]	@ 0x38
 800ba8c:	68a1      	ldr	r1, [r4, #8]
 800ba8e:	ed94 6a08 	vldr	s12, [r4, #32]
 800ba92:	6022      	str	r2, [r4, #0]
 800ba94:	3301      	adds	r3, #1
 800ba96:	6163      	str	r3, [r4, #20]
 800ba98:	69a3      	ldr	r3, [r4, #24]
 800ba9a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ba9e:	3b01      	subs	r3, #1
 800baa0:	edd4 7a0d 	vldr	s15, [r4, #52]	@ 0x34
 800baa4:	61a3      	str	r3, [r4, #24]
 800baa6:	6923      	ldr	r3, [r4, #16]
 800baa8:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 800baac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bab0:	edd4 6a07 	vldr	s13, [r4, #28]
 800bab4:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 800bab8:	440b      	add	r3, r1
 800baba:	68e1      	ldr	r1, [r4, #12]
 800babc:	6123      	str	r3, [r4, #16]
 800babe:	ee76 6a86 	vadd.f32	s13, s13, s12
 800bac2:	428b      	cmp	r3, r1
 800bac4:	edc4 6a07 	vstr	s13, [r4, #28]
 800bac8:	db15      	blt.n	800baf6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 800baca:	ed94 6a09 	vldr	s12, [r4, #36]	@ 0x24
 800bace:	ee76 6a26 	vadd.f32	s13, s12, s13
 800bad2:	3201      	adds	r2, #1
 800bad4:	edc4 6a07 	vstr	s13, [r4, #28]
 800bad8:	edd4 6a0c 	vldr	s13, [r4, #48]	@ 0x30
 800badc:	6022      	str	r2, [r4, #0]
 800bade:	ee36 7a87 	vadd.f32	s14, s13, s14
 800bae2:	1a5b      	subs	r3, r3, r1
 800bae4:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 800bae8:	ed94 7a0f 	vldr	s14, [r4, #60]	@ 0x3c
 800baec:	6123      	str	r3, [r4, #16]
 800baee:	ee77 7a27 	vadd.f32	s15, s14, s15
 800baf2:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 800baf6:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bafa:	441a      	add	r2, r3
 800bafc:	696b      	ldr	r3, [r5, #20]
 800bafe:	ed95 7a0a 	vldr	s14, [r5, #40]	@ 0x28
 800bb02:	edd5 7a0b 	vldr	s15, [r5, #44]	@ 0x2c
 800bb06:	edd5 6a0e 	vldr	s13, [r5, #56]	@ 0x38
 800bb0a:	68a9      	ldr	r1, [r5, #8]
 800bb0c:	ed95 6a08 	vldr	s12, [r5, #32]
 800bb10:	602a      	str	r2, [r5, #0]
 800bb12:	3301      	adds	r3, #1
 800bb14:	616b      	str	r3, [r5, #20]
 800bb16:	69ab      	ldr	r3, [r5, #24]
 800bb18:	ee37 7a27 	vadd.f32	s14, s14, s15
 800bb1c:	3b01      	subs	r3, #1
 800bb1e:	edd5 7a0d 	vldr	s15, [r5, #52]	@ 0x34
 800bb22:	61ab      	str	r3, [r5, #24]
 800bb24:	692b      	ldr	r3, [r5, #16]
 800bb26:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 800bb2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bb2e:	edd5 6a07 	vldr	s13, [r5, #28]
 800bb32:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 800bb36:	440b      	add	r3, r1
 800bb38:	68e9      	ldr	r1, [r5, #12]
 800bb3a:	612b      	str	r3, [r5, #16]
 800bb3c:	ee76 6a86 	vadd.f32	s13, s13, s12
 800bb40:	428b      	cmp	r3, r1
 800bb42:	edc5 6a07 	vstr	s13, [r5, #28]
 800bb46:	db15      	blt.n	800bb74 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 800bb48:	ed95 6a09 	vldr	s12, [r5, #36]	@ 0x24
 800bb4c:	ee76 6a26 	vadd.f32	s13, s12, s13
 800bb50:	3201      	adds	r2, #1
 800bb52:	edc5 6a07 	vstr	s13, [r5, #28]
 800bb56:	edd5 6a0c 	vldr	s13, [r5, #48]	@ 0x30
 800bb5a:	602a      	str	r2, [r5, #0]
 800bb5c:	ee36 7a87 	vadd.f32	s14, s13, s14
 800bb60:	1a5b      	subs	r3, r3, r1
 800bb62:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 800bb66:	ed95 7a0f 	vldr	s14, [r5, #60]	@ 0x3c
 800bb6a:	612b      	str	r3, [r5, #16]
 800bb6c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bb70:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 800bb74:	3f01      	subs	r7, #1
 800bb76:	e757      	b.n	800ba28 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 800bb78:	4299      	cmp	r1, r3
 800bb7a:	dc13      	bgt.n	800bba4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 800bb7c:	429a      	cmp	r2, r3
 800bb7e:	da14      	bge.n	800bbaa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 800bb80:	2502      	movs	r5, #2
 800bb82:	2703      	movs	r7, #3
 800bb84:	46a9      	mov	r9, r5
 800bb86:	f04f 0800 	mov.w	r8, #0
 800bb8a:	f04f 0a01 	mov.w	sl, #1
 800bb8e:	e6ef      	b.n	800b970 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 800bb90:	2501      	movs	r5, #1
 800bb92:	2700      	movs	r7, #0
 800bb94:	46a9      	mov	r9, r5
 800bb96:	46b8      	mov	r8, r7
 800bb98:	f04f 0a02 	mov.w	sl, #2
 800bb9c:	e6e8      	b.n	800b970 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 800bb9e:	2501      	movs	r5, #1
 800bba0:	2702      	movs	r7, #2
 800bba2:	e6e1      	b.n	800b968 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 800bba4:	2500      	movs	r5, #0
 800bba6:	2701      	movs	r7, #1
 800bba8:	e7f4      	b.n	800bb94 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 800bbaa:	2702      	movs	r7, #2
 800bbac:	2503      	movs	r5, #3
 800bbae:	f04f 0900 	mov.w	r9, #0
 800bbb2:	46b8      	mov	r8, r7
 800bbb4:	e7e9      	b.n	800bb8a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 800bbb6:	4613      	mov	r3, r2
 800bbb8:	e728      	b.n	800ba0c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 800bbba:	bf00      	nop
 800bbbc:	20014f4c 	.word	0x20014f4c
 800bbc0:	fffd8f01 	.word	0xfffd8f01
 800bbc4:	00027100 	.word	0x00027100
 800bbc8:	0004e1ff 	.word	0x0004e1ff
 800bbcc:	0004e1fe 	.word	0x0004e1fe
 800bbd0:	20014f54 	.word	0x20014f54
 800bbd4:	4613      	mov	r3, r2
 800bbd6:	992b      	ldr	r1, [sp, #172]	@ 0xac
 800bbd8:	9111      	str	r1, [sp, #68]	@ 0x44
 800bbda:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	@ 0xa4
 800bbde:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	@ 0xb0
 800bbe2:	9f2e      	ldr	r7, [sp, #184]	@ 0xb8
 800bbe4:	eddd 4a34 	vldr	s9, [sp, #208]	@ 0xd0
 800bbe8:	ed9d 7a33 	vldr	s14, [sp, #204]	@ 0xcc
 800bbec:	ed9d 4a37 	vldr	s8, [sp, #220]	@ 0xdc
 800bbf0:	eddd 7a36 	vldr	s15, [sp, #216]	@ 0xd8
 800bbf4:	eddd 3a31 	vldr	s7, [sp, #196]	@ 0xc4
 800bbf8:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 800bbfc:	ed9d 5a32 	vldr	s10, [sp, #200]	@ 0xc8
 800bc00:	eddd 5a35 	vldr	s11, [sp, #212]	@ 0xd4
 800bc04:	ed9d 6a38 	vldr	s12, [sp, #224]	@ 0xe0
 800bc08:	469e      	mov	lr, r3
 800bc0a:	469c      	mov	ip, r3
 800bc0c:	f04f 0900 	mov.w	r9, #0
 800bc10:	f1bc 0f00 	cmp.w	ip, #0
 800bc14:	d147      	bne.n	800bca6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 800bc16:	eb03 0c07 	add.w	ip, r3, r7
 800bc1a:	1ad7      	subs	r7, r2, r3
 800bc1c:	f1b9 0f00 	cmp.w	r9, #0
 800bc20:	d009      	beq.n	800bc36 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 800bc22:	e9cd c72e 	strd	ip, r7, [sp, #184]	@ 0xb8
 800bc26:	9029      	str	r0, [sp, #164]	@ 0xa4
 800bc28:	ed8d 7a33 	vstr	s14, [sp, #204]	@ 0xcc
 800bc2c:	edcd 7a36 	vstr	s15, [sp, #216]	@ 0xd8
 800bc30:	edcd 6a30 	vstr	s13, [sp, #192]	@ 0xc0
 800bc34:	912d      	str	r1, [sp, #180]	@ 0xb4
 800bc36:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 800bc38:	9111      	str	r1, [sp, #68]	@ 0x44
 800bc3a:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	@ 0x64
 800bc3e:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	@ 0x78
 800bc42:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	@ 0x70
 800bc46:	eddd 4a24 	vldr	s9, [sp, #144]	@ 0x90
 800bc4a:	eddd 6a23 	vldr	s13, [sp, #140]	@ 0x8c
 800bc4e:	ed9d 4a27 	vldr	s8, [sp, #156]	@ 0x9c
 800bc52:	ed9d 7a26 	vldr	s14, [sp, #152]	@ 0x98
 800bc56:	eddd 3a21 	vldr	s7, [sp, #132]	@ 0x84
 800bc5a:	eddd 7a20 	vldr	s15, [sp, #128]	@ 0x80
 800bc5e:	ed9d 5a22 	vldr	s10, [sp, #136]	@ 0x88
 800bc62:	eddd 5a25 	vldr	s11, [sp, #148]	@ 0x94
 800bc66:	ed9d 6a28 	vldr	s12, [sp, #160]	@ 0xa0
 800bc6a:	f04f 0800 	mov.w	r8, #0
 800bc6e:	f1be 0f00 	cmp.w	lr, #0
 800bc72:	d031      	beq.n	800bcd8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 800bc74:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 800bc76:	4431      	add	r1, r6
 800bc78:	4549      	cmp	r1, r9
 800bc7a:	4450      	add	r0, sl
 800bc7c:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800bc80:	ee37 7a04 	vadd.f32	s14, s14, s8
 800bc84:	ee77 7aa3 	vadd.f32	s15, s15, s7
 800bc88:	db08      	blt.n	800bc9c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 800bc8a:	ee77 7a85 	vadd.f32	s15, s15, s10
 800bc8e:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800bc92:	ee37 7a06 	vadd.f32	s14, s14, s12
 800bc96:	3001      	adds	r0, #1
 800bc98:	eba1 0109 	sub.w	r1, r1, r9
 800bc9c:	f10e 3eff 	add.w	lr, lr, #4294967295
 800bca0:	f04f 0801 	mov.w	r8, #1
 800bca4:	e7e3      	b.n	800bc6e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 800bca6:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 800bca8:	4431      	add	r1, r6
 800bcaa:	4541      	cmp	r1, r8
 800bcac:	4450      	add	r0, sl
 800bcae:	ee37 7a24 	vadd.f32	s14, s14, s9
 800bcb2:	ee77 7a84 	vadd.f32	s15, s15, s8
 800bcb6:	ee76 6aa3 	vadd.f32	s13, s13, s7
 800bcba:	db08      	blt.n	800bcce <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 800bcbc:	ee76 6a85 	vadd.f32	s13, s13, s10
 800bcc0:	ee37 7a25 	vadd.f32	s14, s14, s11
 800bcc4:	ee77 7a86 	vadd.f32	s15, s15, s12
 800bcc8:	3001      	adds	r0, #1
 800bcca:	eba1 0108 	sub.w	r1, r1, r8
 800bcce:	f10c 3cff 	add.w	ip, ip, #4294967295
 800bcd2:	f04f 0901 	mov.w	r9, #1
 800bcd6:	e79b      	b.n	800bc10 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 800bcd8:	449c      	add	ip, r3
 800bcda:	1aff      	subs	r7, r7, r3
 800bcdc:	f1b8 0f00 	cmp.w	r8, #0
 800bce0:	d009      	beq.n	800bcf6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 800bce2:	e9cd c71e 	strd	ip, r7, [sp, #120]	@ 0x78
 800bce6:	9019      	str	r0, [sp, #100]	@ 0x64
 800bce8:	edcd 6a23 	vstr	s13, [sp, #140]	@ 0x8c
 800bcec:	ed8d 7a26 	vstr	s14, [sp, #152]	@ 0x98
 800bcf0:	edcd 7a20 	vstr	s15, [sp, #128]	@ 0x80
 800bcf4:	911d      	str	r1, [sp, #116]	@ 0x74
 800bcf6:	1ad2      	subs	r2, r2, r3
 800bcf8:	e68b      	b.n	800ba12 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 800bcfa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bcfc:	9a3f      	ldr	r2, [sp, #252]	@ 0xfc
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	f000 80d1 	beq.w	800bea6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 800bd04:	ad19      	add	r5, sp, #100	@ 0x64
 800bd06:	ac39      	add	r4, sp, #228	@ 0xe4
 800bd08:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 800bd0a:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 800bd0e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800bd12:	930c      	str	r3, [sp, #48]	@ 0x30
 800bd14:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800bd16:	6963      	ldr	r3, [r4, #20]
 800bd18:	440b      	add	r3, r1
 800bd1a:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 800bd1e:	4408      	add	r0, r1
 800bd20:	b200      	sxth	r0, r0
 800bd22:	4283      	cmp	r3, r0
 800bd24:	900d      	str	r0, [sp, #52]	@ 0x34
 800bd26:	f280 80c1 	bge.w	800beac <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 800bd2a:	428b      	cmp	r3, r1
 800bd2c:	da08      	bge.n	800bd40 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 800bd2e:	2a00      	cmp	r2, #0
 800bd30:	dd06      	ble.n	800bd40 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 800bd32:	1acb      	subs	r3, r1, r3
 800bd34:	429a      	cmp	r2, r3
 800bd36:	f2c0 80bb 	blt.w	800beb0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	f300 80b9 	bgt.w	800beb2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 800bd40:	6967      	ldr	r7, [r4, #20]
 800bd42:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bd44:	443b      	add	r3, r7
 800bd46:	461f      	mov	r7, r3
 800bd48:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bd4a:	1bdf      	subs	r7, r3, r7
 800bd4c:	4297      	cmp	r7, r2
 800bd4e:	bfa8      	it	ge
 800bd50:	4617      	movge	r7, r2
 800bd52:	f10d 0850 	add.w	r8, sp, #80	@ 0x50
 800bd56:	2f00      	cmp	r7, #0
 800bd58:	f340 813c 	ble.w	800bfd4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 800bd5c:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 800bd5e:	6829      	ldr	r1, [r5, #0]
 800bd60:	f9b3 2000 	ldrsh.w	r2, [r3]
 800bd64:	f9bb 3000 	ldrsh.w	r3, [fp]
 800bd68:	6820      	ldr	r0, [r4, #0]
 800bd6a:	4411      	add	r1, r2
 800bd6c:	4299      	cmp	r1, r3
 800bd6e:	dd1a      	ble.n	800bda6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 800bd70:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 800bd74:	440b      	add	r3, r1
 800bd76:	4402      	add	r2, r0
 800bd78:	b21b      	sxth	r3, r3
 800bd7a:	429a      	cmp	r2, r3
 800bd7c:	dc13      	bgt.n	800bda6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 800bd7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd80:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	9206      	str	r2, [sp, #24]
 800bd86:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800bd88:	9205      	str	r2, [sp, #20]
 800bd8a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bd8c:	9500      	str	r5, [sp, #0]
 800bd8e:	e9cd b203 	strd	fp, r2, [sp, #12]
 800bd92:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 800bd94:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bd96:	e9cd 8201 	strd	r8, r2, [sp, #4]
 800bd9a:	a912      	add	r1, sp, #72	@ 0x48
 800bd9c:	f8d3 9048 	ldr.w	r9, [r3, #72]	@ 0x48
 800bda0:	aa49      	add	r2, sp, #292	@ 0x124
 800bda2:	4623      	mov	r3, r4
 800bda4:	47c8      	blx	r9
 800bda6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800bdaa:	441a      	add	r2, r3
 800bdac:	6963      	ldr	r3, [r4, #20]
 800bdae:	ed94 7a0a 	vldr	s14, [r4, #40]	@ 0x28
 800bdb2:	edd4 7a0b 	vldr	s15, [r4, #44]	@ 0x2c
 800bdb6:	edd4 6a0e 	vldr	s13, [r4, #56]	@ 0x38
 800bdba:	68a1      	ldr	r1, [r4, #8]
 800bdbc:	ed94 6a08 	vldr	s12, [r4, #32]
 800bdc0:	6022      	str	r2, [r4, #0]
 800bdc2:	3301      	adds	r3, #1
 800bdc4:	6163      	str	r3, [r4, #20]
 800bdc6:	69a3      	ldr	r3, [r4, #24]
 800bdc8:	ee37 7a27 	vadd.f32	s14, s14, s15
 800bdcc:	3b01      	subs	r3, #1
 800bdce:	edd4 7a0d 	vldr	s15, [r4, #52]	@ 0x34
 800bdd2:	61a3      	str	r3, [r4, #24]
 800bdd4:	6923      	ldr	r3, [r4, #16]
 800bdd6:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 800bdda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bdde:	edd4 6a07 	vldr	s13, [r4, #28]
 800bde2:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 800bde6:	440b      	add	r3, r1
 800bde8:	68e1      	ldr	r1, [r4, #12]
 800bdea:	6123      	str	r3, [r4, #16]
 800bdec:	ee76 6a86 	vadd.f32	s13, s13, s12
 800bdf0:	428b      	cmp	r3, r1
 800bdf2:	edc4 6a07 	vstr	s13, [r4, #28]
 800bdf6:	db15      	blt.n	800be24 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 800bdf8:	ed94 6a09 	vldr	s12, [r4, #36]	@ 0x24
 800bdfc:	ee76 6a26 	vadd.f32	s13, s12, s13
 800be00:	3201      	adds	r2, #1
 800be02:	edc4 6a07 	vstr	s13, [r4, #28]
 800be06:	edd4 6a0c 	vldr	s13, [r4, #48]	@ 0x30
 800be0a:	6022      	str	r2, [r4, #0]
 800be0c:	ee36 7a87 	vadd.f32	s14, s13, s14
 800be10:	1a5b      	subs	r3, r3, r1
 800be12:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 800be16:	ed94 7a0f 	vldr	s14, [r4, #60]	@ 0x3c
 800be1a:	6123      	str	r3, [r4, #16]
 800be1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800be20:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 800be24:	e9d5 2300 	ldrd	r2, r3, [r5]
 800be28:	441a      	add	r2, r3
 800be2a:	696b      	ldr	r3, [r5, #20]
 800be2c:	ed95 7a0a 	vldr	s14, [r5, #40]	@ 0x28
 800be30:	edd5 7a0b 	vldr	s15, [r5, #44]	@ 0x2c
 800be34:	edd5 6a0e 	vldr	s13, [r5, #56]	@ 0x38
 800be38:	68a9      	ldr	r1, [r5, #8]
 800be3a:	ed95 6a08 	vldr	s12, [r5, #32]
 800be3e:	602a      	str	r2, [r5, #0]
 800be40:	3301      	adds	r3, #1
 800be42:	616b      	str	r3, [r5, #20]
 800be44:	69ab      	ldr	r3, [r5, #24]
 800be46:	ee37 7a27 	vadd.f32	s14, s14, s15
 800be4a:	3b01      	subs	r3, #1
 800be4c:	edd5 7a0d 	vldr	s15, [r5, #52]	@ 0x34
 800be50:	61ab      	str	r3, [r5, #24]
 800be52:	692b      	ldr	r3, [r5, #16]
 800be54:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 800be58:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800be5c:	edd5 6a07 	vldr	s13, [r5, #28]
 800be60:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 800be64:	440b      	add	r3, r1
 800be66:	68e9      	ldr	r1, [r5, #12]
 800be68:	612b      	str	r3, [r5, #16]
 800be6a:	ee76 6a86 	vadd.f32	s13, s13, s12
 800be6e:	428b      	cmp	r3, r1
 800be70:	edc5 6a07 	vstr	s13, [r5, #28]
 800be74:	db15      	blt.n	800bea2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 800be76:	ed95 6a09 	vldr	s12, [r5, #36]	@ 0x24
 800be7a:	ee76 6a26 	vadd.f32	s13, s12, s13
 800be7e:	3201      	adds	r2, #1
 800be80:	edc5 6a07 	vstr	s13, [r5, #28]
 800be84:	edd5 6a0c 	vldr	s13, [r5, #48]	@ 0x30
 800be88:	602a      	str	r2, [r5, #0]
 800be8a:	ee36 7a87 	vadd.f32	s14, s13, s14
 800be8e:	1a5b      	subs	r3, r3, r1
 800be90:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 800be94:	ed95 7a0f 	vldr	s14, [r5, #60]	@ 0x3c
 800be98:	612b      	str	r3, [r5, #16]
 800be9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800be9e:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 800bea2:	3f01      	subs	r7, #1
 800bea4:	e757      	b.n	800bd56 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 800bea6:	ad39      	add	r5, sp, #228	@ 0xe4
 800bea8:	ac19      	add	r4, sp, #100	@ 0x64
 800beaa:	e72d      	b.n	800bd08 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 800beac:	4613      	mov	r3, r2
 800beae:	e744      	b.n	800bd3a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 800beb0:	4613      	mov	r3, r2
 800beb2:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	@ 0xe4
 800beb6:	9e3b      	ldr	r6, [sp, #236]	@ 0xec
 800beb8:	f8dd c0f8 	ldr.w	ip, [sp, #248]	@ 0xf8
 800bebc:	ed9d 7a43 	vldr	s14, [sp, #268]	@ 0x10c
 800bec0:	eddd 4a44 	vldr	s9, [sp, #272]	@ 0x110
 800bec4:	eddd 7a46 	vldr	s15, [sp, #280]	@ 0x118
 800bec8:	ed9d 4a47 	vldr	s8, [sp, #284]	@ 0x11c
 800becc:	eddd 6a40 	vldr	s13, [sp, #256]	@ 0x100
 800bed0:	eddd 3a41 	vldr	s7, [sp, #260]	@ 0x104
 800bed4:	993d      	ldr	r1, [sp, #244]	@ 0xf4
 800bed6:	f8dd 80f0 	ldr.w	r8, [sp, #240]	@ 0xf0
 800beda:	ed9d 5a42 	vldr	s10, [sp, #264]	@ 0x108
 800bede:	eddd 5a45 	vldr	s11, [sp, #276]	@ 0x114
 800bee2:	ed9d 6a48 	vldr	s12, [sp, #288]	@ 0x120
 800bee6:	960e      	str	r6, [sp, #56]	@ 0x38
 800bee8:	469e      	mov	lr, r3
 800beea:	461f      	mov	r7, r3
 800beec:	f04f 0900 	mov.w	r9, #0
 800bef0:	2f00      	cmp	r7, #0
 800bef2:	d146      	bne.n	800bf82 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 800bef4:	449c      	add	ip, r3
 800bef6:	1ad7      	subs	r7, r2, r3
 800bef8:	f1b9 0f00 	cmp.w	r9, #0
 800befc:	d009      	beq.n	800bf12 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 800befe:	e9cd c73e 	strd	ip, r7, [sp, #248]	@ 0xf8
 800bf02:	9039      	str	r0, [sp, #228]	@ 0xe4
 800bf04:	913d      	str	r1, [sp, #244]	@ 0xf4
 800bf06:	edcd 6a40 	vstr	s13, [sp, #256]	@ 0x100
 800bf0a:	ed8d 7a43 	vstr	s14, [sp, #268]	@ 0x10c
 800bf0e:	edcd 7a46 	vstr	s15, [sp, #280]	@ 0x118
 800bf12:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 800bf14:	910e      	str	r1, [sp, #56]	@ 0x38
 800bf16:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	@ 0x64
 800bf1a:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	@ 0x78
 800bf1e:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	@ 0x70
 800bf22:	eddd 4a24 	vldr	s9, [sp, #144]	@ 0x90
 800bf26:	eddd 6a23 	vldr	s13, [sp, #140]	@ 0x8c
 800bf2a:	ed9d 4a27 	vldr	s8, [sp, #156]	@ 0x9c
 800bf2e:	ed9d 7a26 	vldr	s14, [sp, #152]	@ 0x98
 800bf32:	eddd 3a21 	vldr	s7, [sp, #132]	@ 0x84
 800bf36:	eddd 7a20 	vldr	s15, [sp, #128]	@ 0x80
 800bf3a:	ed9d 5a22 	vldr	s10, [sp, #136]	@ 0x88
 800bf3e:	eddd 5a25 	vldr	s11, [sp, #148]	@ 0x94
 800bf42:	ed9d 6a28 	vldr	s12, [sp, #160]	@ 0xa0
 800bf46:	f04f 0800 	mov.w	r8, #0
 800bf4a:	f1be 0f00 	cmp.w	lr, #0
 800bf4e:	d030      	beq.n	800bfb2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 800bf50:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 800bf52:	4431      	add	r1, r6
 800bf54:	4549      	cmp	r1, r9
 800bf56:	4450      	add	r0, sl
 800bf58:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800bf5c:	ee37 7a04 	vadd.f32	s14, s14, s8
 800bf60:	ee77 7aa3 	vadd.f32	s15, s15, s7
 800bf64:	db08      	blt.n	800bf78 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 800bf66:	ee77 7a85 	vadd.f32	s15, s15, s10
 800bf6a:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800bf6e:	ee37 7a06 	vadd.f32	s14, s14, s12
 800bf72:	3001      	adds	r0, #1
 800bf74:	eba1 0109 	sub.w	r1, r1, r9
 800bf78:	f10e 3eff 	add.w	lr, lr, #4294967295
 800bf7c:	f04f 0801 	mov.w	r8, #1
 800bf80:	e7e3      	b.n	800bf4a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 800bf82:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 800bf84:	4431      	add	r1, r6
 800bf86:	4541      	cmp	r1, r8
 800bf88:	4450      	add	r0, sl
 800bf8a:	ee37 7a24 	vadd.f32	s14, s14, s9
 800bf8e:	ee77 7a84 	vadd.f32	s15, s15, s8
 800bf92:	ee76 6aa3 	vadd.f32	s13, s13, s7
 800bf96:	db08      	blt.n	800bfaa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 800bf98:	ee76 6a85 	vadd.f32	s13, s13, s10
 800bf9c:	ee37 7a25 	vadd.f32	s14, s14, s11
 800bfa0:	ee77 7a86 	vadd.f32	s15, s15, s12
 800bfa4:	3001      	adds	r0, #1
 800bfa6:	eba1 0108 	sub.w	r1, r1, r8
 800bfaa:	3f01      	subs	r7, #1
 800bfac:	f04f 0901 	mov.w	r9, #1
 800bfb0:	e79e      	b.n	800bef0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 800bfb2:	449c      	add	ip, r3
 800bfb4:	1aff      	subs	r7, r7, r3
 800bfb6:	f1b8 0f00 	cmp.w	r8, #0
 800bfba:	d009      	beq.n	800bfd0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 800bfbc:	e9cd c71e 	strd	ip, r7, [sp, #120]	@ 0x78
 800bfc0:	9019      	str	r0, [sp, #100]	@ 0x64
 800bfc2:	edcd 6a23 	vstr	s13, [sp, #140]	@ 0x8c
 800bfc6:	ed8d 7a26 	vstr	s14, [sp, #152]	@ 0x98
 800bfca:	edcd 7a20 	vstr	s15, [sp, #128]	@ 0x80
 800bfce:	911d      	str	r1, [sp, #116]	@ 0x74
 800bfd0:	1ad2      	subs	r2, r2, r3
 800bfd2:	e6b5      	b.n	800bd40 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 800bfd4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	b923      	cbnz	r3, 800bfe4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800bfda:	4b04      	ldr	r3, [pc, #16]	@ (800bfec <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 800bfdc:	6818      	ldr	r0, [r3, #0]
 800bfde:	6803      	ldr	r3, [r0, #0]
 800bfe0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bfe2:	4798      	blx	r3
 800bfe4:	b05b      	add	sp, #364	@ 0x16c
 800bfe6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bfea:	bf00      	nop
 800bfec:	20014f54 	.word	0x20014f54

0800bff0 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>:
 800bff0:	b570      	push	{r4, r5, r6, lr}
 800bff2:	4604      	mov	r4, r0
 800bff4:	f89d 601c 	ldrb.w	r6, [sp, #28]
 800bff8:	9805      	ldr	r0, [sp, #20]
 800bffa:	6061      	str	r1, [r4, #4]
 800bffc:	2500      	movs	r5, #0
 800bffe:	f89d 1010 	ldrb.w	r1, [sp, #16]
 800c002:	8263      	strh	r3, [r4, #18]
 800c004:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 800c008:	8025      	strh	r5, [r4, #0]
 800c00a:	7221      	strb	r1, [r4, #8]
 800c00c:	7266      	strb	r6, [r4, #9]
 800c00e:	60e0      	str	r0, [r4, #12]
 800c010:	8222      	strh	r2, [r4, #16]
 800c012:	82a3      	strh	r3, [r4, #20]
 800c014:	82e5      	strh	r5, [r4, #22]
 800c016:	8325      	strh	r5, [r4, #24]
 800c018:	8365      	strh	r5, [r4, #26]
 800c01a:	83a5      	strh	r5, [r4, #28]
 800c01c:	83e5      	strh	r5, [r4, #30]
 800c01e:	8425      	strh	r5, [r4, #32]
 800c020:	f884 5022 	strb.w	r5, [r4, #34]	@ 0x22
 800c024:	b32e      	cbz	r6, 800c072 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 800c026:	6803      	ldr	r3, [r0, #0]
 800c028:	695b      	ldr	r3, [r3, #20]
 800c02a:	4798      	blx	r3
 800c02c:	4606      	mov	r6, r0
 800c02e:	b300      	cbz	r0, 800c072 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 800c030:	68e0      	ldr	r0, [r4, #12]
 800c032:	6803      	ldr	r3, [r0, #0]
 800c034:	4631      	mov	r1, r6
 800c036:	68db      	ldr	r3, [r3, #12]
 800c038:	4798      	blx	r3
 800c03a:	4605      	mov	r5, r0
 800c03c:	b1c8      	cbz	r0, 800c072 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 800c03e:	7b43      	ldrb	r3, [r0, #13]
 800c040:	7a82      	ldrb	r2, [r0, #10]
 800c042:	005b      	lsls	r3, r3, #1
 800c044:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c048:	4313      	orrs	r3, r2
 800c04a:	8423      	strh	r3, [r4, #32]
 800c04c:	7a63      	ldrb	r3, [r4, #9]
 800c04e:	2b06      	cmp	r3, #6
 800c050:	d10f      	bne.n	800c072 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 800c052:	68e0      	ldr	r0, [r4, #12]
 800c054:	6803      	ldr	r3, [r0, #0]
 800c056:	462a      	mov	r2, r5
 800c058:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c05a:	4631      	mov	r1, r6
 800c05c:	4798      	blx	r3
 800c05e:	7b6b      	ldrb	r3, [r5, #13]
 800c060:	005b      	lsls	r3, r3, #1
 800c062:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 800c066:	7aab      	ldrb	r3, [r5, #10]
 800c068:	4313      	orrs	r3, r2
 800c06a:	4418      	add	r0, r3
 800c06c:	8c23      	ldrh	r3, [r4, #32]
 800c06e:	4418      	add	r0, r3
 800c070:	8420      	strh	r0, [r4, #32]
 800c072:	4620      	mov	r0, r4
 800c074:	bd70      	pop	{r4, r5, r6, pc}

0800c076 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 800c076:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c07a:	2400      	movs	r4, #0
 800c07c:	b085      	sub	sp, #20
 800c07e:	4681      	mov	r9, r0
 800c080:	4688      	mov	r8, r1
 800c082:	4692      	mov	sl, r2
 800c084:	469b      	mov	fp, r3
 800c086:	4627      	mov	r7, r4
 800c088:	4625      	mov	r5, r4
 800c08a:	4626      	mov	r6, r4
 800c08c:	4554      	cmp	r4, sl
 800c08e:	da2a      	bge.n	800c0e6 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 800c090:	2300      	movs	r3, #0
 800c092:	9303      	str	r3, [sp, #12]
 800c094:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 800c098:	429d      	cmp	r5, r3
 800c09a:	d004      	beq.n	800c0a6 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
 800c09c:	f242 030b 	movw	r3, #8203	@ 0x200b
 800c0a0:	429d      	cmp	r5, r3
 800c0a2:	bf18      	it	ne
 800c0a4:	462f      	movne	r7, r5
 800c0a6:	ab03      	add	r3, sp, #12
 800c0a8:	4642      	mov	r2, r8
 800c0aa:	4659      	mov	r1, fp
 800c0ac:	4648      	mov	r0, r9
 800c0ae:	f003 ffc5 	bl	801003c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800c0b2:	4605      	mov	r5, r0
 800c0b4:	b1b8      	cbz	r0, 800c0e6 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 800c0b6:	280a      	cmp	r0, #10
 800c0b8:	d015      	beq.n	800c0e6 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 800c0ba:	9a03      	ldr	r2, [sp, #12]
 800c0bc:	b18a      	cbz	r2, 800c0e2 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
 800c0be:	7b50      	ldrb	r0, [r2, #13]
 800c0c0:	7a93      	ldrb	r3, [r2, #10]
 800c0c2:	8895      	ldrh	r5, [r2, #4]
 800c0c4:	0040      	lsls	r0, r0, #1
 800c0c6:	f400 7080 	and.w	r0, r0, #256	@ 0x100
 800c0ca:	4303      	orrs	r3, r0
 800c0cc:	9301      	str	r3, [sp, #4]
 800c0ce:	f8d8 3000 	ldr.w	r3, [r8]
 800c0d2:	4639      	mov	r1, r7
 800c0d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c0d6:	4640      	mov	r0, r8
 800c0d8:	4798      	blx	r3
 800c0da:	9b01      	ldr	r3, [sp, #4]
 800c0dc:	4418      	add	r0, r3
 800c0de:	4406      	add	r6, r0
 800c0e0:	b2b6      	uxth	r6, r6
 800c0e2:	3401      	adds	r4, #1
 800c0e4:	e7d2      	b.n	800c08c <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
 800c0e6:	4630      	mov	r0, r6
 800c0e8:	b005      	add	sp, #20
 800c0ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c0ee <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 800c0ee:	2a02      	cmp	r2, #2
 800c0f0:	b530      	push	{r4, r5, lr}
 800c0f2:	d011      	beq.n	800c118 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 800c0f4:	2a03      	cmp	r2, #3
 800c0f6:	d01c      	beq.n	800c132 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 800c0f8:	2a01      	cmp	r2, #1
 800c0fa:	d10c      	bne.n	800c116 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 800c0fc:	888b      	ldrh	r3, [r1, #4]
 800c0fe:	8801      	ldrh	r1, [r0, #0]
 800c100:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 800c104:	8844      	ldrh	r4, [r0, #2]
 800c106:	8004      	strh	r4, [r0, #0]
 800c108:	1a5b      	subs	r3, r3, r1
 800c10a:	1a9b      	subs	r3, r3, r2
 800c10c:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 800c110:	8043      	strh	r3, [r0, #2]
 800c112:	8081      	strh	r1, [r0, #4]
 800c114:	80c2      	strh	r2, [r0, #6]
 800c116:	bd30      	pop	{r4, r5, pc}
 800c118:	88cb      	ldrh	r3, [r1, #6]
 800c11a:	8842      	ldrh	r2, [r0, #2]
 800c11c:	1a9b      	subs	r3, r3, r2
 800c11e:	88c2      	ldrh	r2, [r0, #6]
 800c120:	1a9b      	subs	r3, r3, r2
 800c122:	888a      	ldrh	r2, [r1, #4]
 800c124:	8801      	ldrh	r1, [r0, #0]
 800c126:	8043      	strh	r3, [r0, #2]
 800c128:	1a52      	subs	r2, r2, r1
 800c12a:	8881      	ldrh	r1, [r0, #4]
 800c12c:	1a52      	subs	r2, r2, r1
 800c12e:	8002      	strh	r2, [r0, #0]
 800c130:	e7f1      	b.n	800c116 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 800c132:	88cb      	ldrh	r3, [r1, #6]
 800c134:	8841      	ldrh	r1, [r0, #2]
 800c136:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 800c13a:	f9b0 5000 	ldrsh.w	r5, [r0]
 800c13e:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 800c142:	8045      	strh	r5, [r0, #2]
 800c144:	1a5b      	subs	r3, r3, r1
 800c146:	1a9b      	subs	r3, r3, r2
 800c148:	8003      	strh	r3, [r0, #0]
 800c14a:	8082      	strh	r2, [r0, #4]
 800c14c:	80c4      	strh	r4, [r0, #6]
 800c14e:	e7e2      	b.n	800c116 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

0800c150 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 800c150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c154:	b09f      	sub	sp, #124	@ 0x7c
 800c156:	920f      	str	r2, [sp, #60]	@ 0x3c
 800c158:	9312      	str	r3, [sp, #72]	@ 0x48
 800c15a:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 800c15c:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 800c15e:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
 800c160:	8812      	ldrh	r2, [r2, #0]
 800c162:	889b      	ldrh	r3, [r3, #4]
 800c164:	900e      	str	r0, [sp, #56]	@ 0x38
 800c166:	4413      	add	r3, r2
 800c168:	6828      	ldr	r0, [r5, #0]
 800c16a:	9117      	str	r1, [sp, #92]	@ 0x5c
 800c16c:	b21b      	sxth	r3, r3
 800c16e:	9311      	str	r3, [sp, #68]	@ 0x44
 800c170:	6803      	ldr	r3, [r0, #0]
 800c172:	f89d b0ac 	ldrb.w	fp, [sp, #172]	@ 0xac
 800c176:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c178:	f89d 40b8 	ldrb.w	r4, [sp, #184]	@ 0xb8
 800c17c:	4798      	blx	r3
 800c17e:	682b      	ldr	r3, [r5, #0]
 800c180:	9013      	str	r0, [sp, #76]	@ 0x4c
 800c182:	7b1a      	ldrb	r2, [r3, #12]
 800c184:	7adb      	ldrb	r3, [r3, #11]
 800c186:	9215      	str	r2, [sp, #84]	@ 0x54
 800c188:	9316      	str	r3, [sp, #88]	@ 0x58
 800c18a:	f9bd 60a0 	ldrsh.w	r6, [sp, #160]	@ 0xa0
 800c18e:	2c00      	cmp	r4, #0
 800c190:	d067      	beq.n	800c262 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
 800c192:	7c2b      	ldrb	r3, [r5, #16]
 800c194:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 800c196:	2b06      	cmp	r3, #6
 800c198:	bf14      	ite	ne
 800c19a:	2301      	movne	r3, #1
 800c19c:	2302      	moveq	r3, #2
 800c19e:	4413      	add	r3, r2
 800c1a0:	f04f 0900 	mov.w	r9, #0
 800c1a4:	9310      	str	r3, [sp, #64]	@ 0x40
 800c1a6:	f8cd 9034 	str.w	r9, [sp, #52]	@ 0x34
 800c1aa:	464c      	mov	r4, r9
 800c1ac:	f8cd 9030 	str.w	r9, [sp, #48]	@ 0x30
 800c1b0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c1b2:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800c1b4:	4293      	cmp	r3, r2
 800c1b6:	f280 808b 	bge.w	800c2d0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 800c1ba:	2300      	movs	r3, #0
 800c1bc:	e9cd 331c 	strd	r3, r3, [sp, #112]	@ 0x70
 800c1c0:	f88d 306f 	strb.w	r3, [sp, #111]	@ 0x6f
 800c1c4:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 800c1c8:	429c      	cmp	r4, r3
 800c1ca:	d006      	beq.n	800c1da <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x8a>
 800c1cc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c1ce:	f242 020b 	movw	r2, #8203	@ 0x200b
 800c1d2:	4294      	cmp	r4, r2
 800c1d4:	bf18      	it	ne
 800c1d6:	4623      	movne	r3, r4
 800c1d8:	930c      	str	r3, [sp, #48]	@ 0x30
 800c1da:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c1dc:	992d      	ldr	r1, [sp, #180]	@ 0xb4
 800c1de:	682a      	ldr	r2, [r5, #0]
 800c1e0:	428b      	cmp	r3, r1
 800c1e2:	db40      	blt.n	800c266 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x116>
 800c1e4:	6813      	ldr	r3, [r2, #0]
 800c1e6:	4610      	mov	r0, r2
 800c1e8:	695b      	ldr	r3, [r3, #20]
 800c1ea:	4798      	blx	r3
 800c1ec:	4604      	mov	r4, r0
 800c1ee:	6828      	ldr	r0, [r5, #0]
 800c1f0:	6803      	ldr	r3, [r0, #0]
 800c1f2:	aa1d      	add	r2, sp, #116	@ 0x74
 800c1f4:	689f      	ldr	r7, [r3, #8]
 800c1f6:	4621      	mov	r1, r4
 800c1f8:	f10d 036f 	add.w	r3, sp, #111	@ 0x6f
 800c1fc:	47b8      	blx	r7
 800c1fe:	901c      	str	r0, [sp, #112]	@ 0x70
 800c200:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 800c204:	429c      	cmp	r4, r3
 800c206:	f000 80ea 	beq.w	800c3de <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 800c20a:	f242 030b 	movw	r3, #8203	@ 0x200b
 800c20e:	429c      	cmp	r4, r3
 800c210:	f000 80e5 	beq.w	800c3de <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 800c214:	2c00      	cmp	r4, #0
 800c216:	f000 810c 	beq.w	800c432 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2e2>
 800c21a:	2c0a      	cmp	r4, #10
 800c21c:	d05e      	beq.n	800c2dc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 800c21e:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800c220:	b36a      	cbz	r2, 800c27e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12e>
 800c222:	8894      	ldrh	r4, [r2, #4]
 800c224:	f1bb 0f00 	cmp.w	fp, #0
 800c228:	d03a      	beq.n	800c2a0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x150>
 800c22a:	f892 900d 	ldrb.w	r9, [r2, #13]
 800c22e:	ea4f 0949 	mov.w	r9, r9, lsl #1
 800c232:	f409 7380 	and.w	r3, r9, #256	@ 0x100
 800c236:	f892 900a 	ldrb.w	r9, [r2, #10]
 800c23a:	f1bb 0f01 	cmp.w	fp, #1
 800c23e:	ea49 0903 	orr.w	r9, r9, r3
 800c242:	d133      	bne.n	800c2ac <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15c>
 800c244:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c246:	eba6 0609 	sub.w	r6, r6, r9
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d14d      	bne.n	800c2ea <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 800c24e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800c250:	eb09 0306 	add.w	r3, r9, r6
 800c254:	4413      	add	r3, r2
 800c256:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 800c258:	f9b2 2000 	ldrsh.w	r2, [r2]
 800c25c:	4293      	cmp	r3, r2
 800c25e:	da4e      	bge.n	800c2fe <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1ae>
 800c260:	e036      	b.n	800c2d0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 800c262:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 800c264:	e79c      	b.n	800c1a0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x50>
 800c266:	f10d 036f 	add.w	r3, sp, #111	@ 0x6f
 800c26a:	9301      	str	r3, [sp, #4]
 800c26c:	ab1d      	add	r3, sp, #116	@ 0x74
 800c26e:	9300      	str	r3, [sp, #0]
 800c270:	4659      	mov	r1, fp
 800c272:	ab1c      	add	r3, sp, #112	@ 0x70
 800c274:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 800c276:	f003 ff2a 	bl	80100ce <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 800c27a:	4604      	mov	r4, r0
 800c27c:	e7c0      	b.n	800c200 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xb0>
 800c27e:	6828      	ldr	r0, [r5, #0]
 800c280:	6803      	ldr	r3, [r0, #0]
 800c282:	691b      	ldr	r3, [r3, #16]
 800c284:	4798      	blx	r3
 800c286:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 800c28a:	4298      	cmp	r0, r3
 800c28c:	f000 80a7 	beq.w	800c3de <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 800c290:	f242 030b 	movw	r3, #8203	@ 0x200b
 800c294:	4298      	cmp	r0, r3
 800c296:	f000 80a2 	beq.w	800c3de <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 800c29a:	f1bb 0f00 	cmp.w	fp, #0
 800c29e:	d100      	bne.n	800c2a2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x152>
 800c2a0:	444e      	add	r6, r9
 800c2a2:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800c2a4:	2a00      	cmp	r2, #0
 800c2a6:	d1c0      	bne.n	800c22a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xda>
 800c2a8:	4691      	mov	r9, r2
 800c2aa:	e098      	b.n	800c3de <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 800c2ac:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	f000 80c1 	beq.w	800c436 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2e6>
 800c2b4:	f1bb 0f00 	cmp.w	fp, #0
 800c2b8:	d117      	bne.n	800c2ea <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 800c2ba:	6828      	ldr	r0, [r5, #0]
 800c2bc:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800c2be:	6803      	ldr	r3, [r0, #0]
 800c2c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c2c2:	4798      	blx	r3
 800c2c4:	4406      	add	r6, r0
 800c2c6:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800c2c8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800c2ca:	1af3      	subs	r3, r6, r3
 800c2cc:	4293      	cmp	r3, r2
 800c2ce:	dd16      	ble.n	800c2fe <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1ae>
 800c2d0:	2c00      	cmp	r4, #0
 800c2d2:	f000 80ae 	beq.w	800c432 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2e2>
 800c2d6:	2c0a      	cmp	r4, #10
 800c2d8:	f040 809c 	bne.w	800c414 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2c4>
 800c2dc:	240a      	movs	r4, #10
 800c2de:	fab4 f084 	clz	r0, r4
 800c2e2:	0940      	lsrs	r0, r0, #5
 800c2e4:	b01f      	add	sp, #124	@ 0x7c
 800c2e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2ea:	6828      	ldr	r0, [r5, #0]
 800c2ec:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800c2ee:	6803      	ldr	r3, [r0, #0]
 800c2f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c2f2:	4798      	blx	r3
 800c2f4:	f1bb 0f01 	cmp.w	fp, #1
 800c2f8:	eba6 0600 	sub.w	r6, r6, r0
 800c2fc:	d0a7      	beq.n	800c24e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfe>
 800c2fe:	981c      	ldr	r0, [sp, #112]	@ 0x70
 800c300:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 800c302:	f990 1009 	ldrsb.w	r1, [r0, #9]
 800c306:	f9b3 8000 	ldrsh.w	r8, [r3]
 800c30a:	7b43      	ldrb	r3, [r0, #13]
 800c30c:	015b      	lsls	r3, r3, #5
 800c30e:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 800c312:	7983      	ldrb	r3, [r0, #6]
 800c314:	4431      	add	r1, r6
 800c316:	4313      	orrs	r3, r2
 800c318:	440b      	add	r3, r1
 800c31a:	4543      	cmp	r3, r8
 800c31c:	db5f      	blt.n	800c3de <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 800c31e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c320:	4299      	cmp	r1, r3
 800c322:	da5c      	bge.n	800c3de <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 800c324:	6828      	ldr	r0, [r5, #0]
 800c326:	6803      	ldr	r3, [r0, #0]
 800c328:	45b0      	cmp	r8, r6
 800c32a:	bfc8      	it	gt
 800c32c:	eba8 0806 	subgt.w	r8, r8, r6
 800c330:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c332:	bfcc      	ite	gt
 800c334:	fa1f f888 	uxthgt.w	r8, r8
 800c338:	f04f 0800 	movle.w	r8, #0
 800c33c:	4798      	blx	r3
 800c33e:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800c340:	7b53      	ldrb	r3, [r2, #13]
 800c342:	00d9      	lsls	r1, r3, #3
 800c344:	f401 7780 	and.w	r7, r1, #256	@ 0x100
 800c348:	7a11      	ldrb	r1, [r2, #8]
 800c34a:	4339      	orrs	r1, r7
 800c34c:	065f      	lsls	r7, r3, #25
 800c34e:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 800c350:	bf44      	itt	mi
 800c352:	f5a1 7100 	submi.w	r1, r1, #512	@ 0x200
 800c356:	b209      	sxthmi	r1, r1
 800c358:	19c7      	adds	r7, r0, r7
 800c35a:	1a7f      	subs	r7, r7, r1
 800c35c:	9929      	ldr	r1, [sp, #164]	@ 0xa4
 800c35e:	b2bf      	uxth	r7, r7
 800c360:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 800c364:	fa0f fa87 	sxth.w	sl, r7
 800c368:	4551      	cmp	r1, sl
 800c36a:	dd3c      	ble.n	800c3e6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x296>
 800c36c:	011b      	lsls	r3, r3, #4
 800c36e:	79d0      	ldrb	r0, [r2, #7]
 800c370:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c374:	4303      	orrs	r3, r0
 800c376:	449a      	add	sl, r3
 800c378:	4551      	cmp	r1, sl
 800c37a:	dc30      	bgt.n	800c3de <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 800c37c:	1bcf      	subs	r7, r1, r7
 800c37e:	b23f      	sxth	r7, r7
 800c380:	468a      	mov	sl, r1
 800c382:	9219      	str	r2, [sp, #100]	@ 0x64
 800c384:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800c386:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800c388:	6828      	ldr	r0, [r5, #0]
 800c38a:	2a00      	cmp	r2, #0
 800c38c:	d12d      	bne.n	800c3ea <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29a>
 800c38e:	9318      	str	r3, [sp, #96]	@ 0x60
 800c390:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c392:	6819      	ldr	r1, [r3, #0]
 800c394:	6ccb      	ldr	r3, [r1, #76]	@ 0x4c
 800c396:	6801      	ldr	r1, [r0, #0]
 800c398:	9314      	str	r3, [sp, #80]	@ 0x50
 800c39a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800c39c:	4788      	blx	r1
 800c39e:	79a9      	ldrb	r1, [r5, #6]
 800c3a0:	910b      	str	r1, [sp, #44]	@ 0x2c
 800c3a2:	7ba9      	ldrb	r1, [r5, #14]
 800c3a4:	910a      	str	r1, [sp, #40]	@ 0x28
 800c3a6:	f89d 106f 	ldrb.w	r1, [sp, #111]	@ 0x6f
 800c3aa:	9109      	str	r1, [sp, #36]	@ 0x24
 800c3ac:	68a9      	ldr	r1, [r5, #8]
 800c3ae:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 800c3b0:	9306      	str	r3, [sp, #24]
 800c3b2:	b2bf      	uxth	r7, r7
 800c3b4:	e9cd 8702 	strd	r8, r7, [sp, #8]
 800c3b8:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 800c3ba:	9304      	str	r3, [sp, #16]
 800c3bc:	44b0      	add	r8, r6
 800c3be:	e9cd 0107 	strd	r0, r1, [sp, #28]
 800c3c2:	fa0f f388 	sxth.w	r3, r8
 800c3c6:	9300      	str	r3, [sp, #0]
 800c3c8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c3ca:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c3cc:	9205      	str	r2, [sp, #20]
 800c3ce:	f8cd a004 	str.w	sl, [sp, #4]
 800c3d2:	681a      	ldr	r2, [r3, #0]
 800c3d4:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 800c3d6:	685b      	ldr	r3, [r3, #4]
 800c3d8:	980e      	ldr	r0, [sp, #56]	@ 0x38
 800c3da:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 800c3dc:	47b8      	blx	r7
 800c3de:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c3e0:	3301      	adds	r3, #1
 800c3e2:	930d      	str	r3, [sp, #52]	@ 0x34
 800c3e4:	e6e4      	b.n	800c1b0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x60>
 800c3e6:	2700      	movs	r7, #0
 800c3e8:	e7cb      	b.n	800c382 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x232>
 800c3ea:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c3ec:	f8d2 c008 	ldr.w	ip, [r2, #8]
 800c3f0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800c3f2:	f8dc 1000 	ldr.w	r1, [ip]
 800c3f6:	e9cd 6204 	strd	r6, r2, [sp, #16]
 800c3fa:	79aa      	ldrb	r2, [r5, #6]
 800c3fc:	9203      	str	r2, [sp, #12]
 800c3fe:	7baa      	ldrb	r2, [r5, #14]
 800c400:	9202      	str	r2, [sp, #8]
 800c402:	68aa      	ldr	r2, [r5, #8]
 800c404:	e9cd 0200 	strd	r0, r2, [sp]
 800c408:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 800c40a:	688f      	ldr	r7, [r1, #8]
 800c40c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800c40e:	4660      	mov	r0, ip
 800c410:	47b8      	blx	r7
 800c412:	e7e4      	b.n	800c3de <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 800c414:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800c416:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 800c418:	3501      	adds	r5, #1
 800c41a:	429d      	cmp	r5, r3
 800c41c:	f6bf af5f 	bge.w	800c2de <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 800c420:	4659      	mov	r1, fp
 800c422:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 800c424:	f7f7 ff10 	bl	8004248 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 800c428:	4604      	mov	r4, r0
 800c42a:	b110      	cbz	r0, 800c432 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2e2>
 800c42c:	280a      	cmp	r0, #10
 800c42e:	d1f2      	bne.n	800c416 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2c6>
 800c430:	e754      	b.n	800c2dc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 800c432:	2400      	movs	r4, #0
 800c434:	e753      	b.n	800c2de <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 800c436:	f1bb 0f00 	cmp.w	fp, #0
 800c43a:	f43f af44 	beq.w	800c2c6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 800c43e:	e75e      	b.n	800c2fe <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1ae>

0800c440 <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEitPKNS0_24DrawStringInternalStructE>:
 800c440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c444:	b089      	sub	sp, #36	@ 0x24
 800c446:	4699      	mov	r9, r3
 800c448:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c44a:	f8bd 4050 	ldrh.w	r4, [sp, #80]	@ 0x50
 800c44e:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800c450:	4683      	mov	fp, r0
 800c452:	460d      	mov	r5, r1
 800c454:	4690      	mov	r8, r2
 800c456:	bb1b      	cbnz	r3, 800c4a0 <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEitPKNS0_24DrawStringInternalStructE+0x60>
 800c458:	6813      	ldr	r3, [r2, #0]
 800c45a:	4610      	mov	r0, r2
 800c45c:	695b      	ldr	r3, [r3, #20]
 800c45e:	4798      	blx	r3
 800c460:	4682      	mov	sl, r0
 800c462:	b1e8      	cbz	r0, 800c4a0 <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEitPKNS0_24DrawStringInternalStructE+0x60>
 800c464:	f8d8 3000 	ldr.w	r3, [r8]
 800c468:	4601      	mov	r1, r0
 800c46a:	68db      	ldr	r3, [r3, #12]
 800c46c:	4640      	mov	r0, r8
 800c46e:	4798      	blx	r3
 800c470:	4602      	mov	r2, r0
 800c472:	2800      	cmp	r0, #0
 800c474:	d03f      	beq.n	800c4f6 <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEitPKNS0_24DrawStringInternalStructE+0xb6>
 800c476:	7b47      	ldrb	r7, [r0, #13]
 800c478:	007f      	lsls	r7, r7, #1
 800c47a:	f407 7380 	and.w	r3, r7, #256	@ 0x100
 800c47e:	7a87      	ldrb	r7, [r0, #10]
 800c480:	431f      	orrs	r7, r3
 800c482:	6933      	ldr	r3, [r6, #16]
 800c484:	7c1b      	ldrb	r3, [r3, #16]
 800c486:	443c      	add	r4, r7
 800c488:	2b06      	cmp	r3, #6
 800c48a:	b2a4      	uxth	r4, r4
 800c48c:	d108      	bne.n	800c4a0 <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEitPKNS0_24DrawStringInternalStructE+0x60>
 800c48e:	f8d8 3000 	ldr.w	r3, [r8]
 800c492:	4651      	mov	r1, sl
 800c494:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c496:	4640      	mov	r0, r8
 800c498:	4798      	blx	r3
 800c49a:	4438      	add	r0, r7
 800c49c:	4404      	add	r4, r0
 800c49e:	b2a4      	uxth	r4, r4
 800c4a0:	6933      	ldr	r3, [r6, #16]
 800c4a2:	795a      	ldrb	r2, [r3, #5]
 800c4a4:	f9b5 3000 	ldrsh.w	r3, [r5]
 800c4a8:	bb42      	cbnz	r2, 800c4fc <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEitPKNS0_24DrawStringInternalStructE+0xbc>
 800c4aa:	f1b9 0f01 	cmp.w	r9, #1
 800c4ae:	d101      	bne.n	800c4b4 <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEitPKNS0_24DrawStringInternalStructE+0x74>
 800c4b0:	4423      	add	r3, r4
 800c4b2:	802b      	strh	r3, [r5, #0]
 800c4b4:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800c4b6:	f9b6 3008 	ldrsh.w	r3, [r6, #8]
 800c4ba:	fab2 f282 	clz	r2, r2
 800c4be:	0952      	lsrs	r2, r2, #5
 800c4c0:	9206      	str	r2, [sp, #24]
 800c4c2:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800c4c4:	9205      	str	r2, [sp, #20]
 800c4c6:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800c4c8:	e9cd 9203 	strd	r9, r2, [sp, #12]
 800c4cc:	6932      	ldr	r2, [r6, #16]
 800c4ce:	9202      	str	r2, [sp, #8]
 800c4d0:	68f2      	ldr	r2, [r6, #12]
 800c4d2:	9201      	str	r2, [sp, #4]
 800c4d4:	f9b5 2000 	ldrsh.w	r2, [r5]
 800c4d8:	9200      	str	r2, [sp, #0]
 800c4da:	e9d6 1200 	ldrd	r1, r2, [r6]
 800c4de:	4658      	mov	r0, fp
 800c4e0:	f7ff fe36 	bl	800c150 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 800c4e4:	6933      	ldr	r3, [r6, #16]
 800c4e6:	795b      	ldrb	r3, [r3, #5]
 800c4e8:	b97b      	cbnz	r3, 800c50a <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEitPKNS0_24DrawStringInternalStructE+0xca>
 800c4ea:	f1b9 0f00 	cmp.w	r9, #0
 800c4ee:	d102      	bne.n	800c4f6 <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEitPKNS0_24DrawStringInternalStructE+0xb6>
 800c4f0:	8828      	ldrh	r0, [r5, #0]
 800c4f2:	4404      	add	r4, r0
 800c4f4:	802c      	strh	r4, [r5, #0]
 800c4f6:	b009      	add	sp, #36	@ 0x24
 800c4f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4fc:	2a01      	cmp	r2, #1
 800c4fe:	d1d9      	bne.n	800c4b4 <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEitPKNS0_24DrawStringInternalStructE+0x74>
 800c500:	f1b9 0f00 	cmp.w	r9, #0
 800c504:	d1d6      	bne.n	800c4b4 <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEitPKNS0_24DrawStringInternalStructE+0x74>
 800c506:	1b1b      	subs	r3, r3, r4
 800c508:	e7d3      	b.n	800c4b2 <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEitPKNS0_24DrawStringInternalStructE+0x72>
 800c50a:	2b01      	cmp	r3, #1
 800c50c:	d1f3      	bne.n	800c4f6 <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEitPKNS0_24DrawStringInternalStructE+0xb6>
 800c50e:	f1b9 0f01 	cmp.w	r9, #1
 800c512:	d1f0      	bne.n	800c4f6 <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEitPKNS0_24DrawStringInternalStructE+0xb6>
 800c514:	8828      	ldrh	r0, [r5, #0]
 800c516:	1b04      	subs	r4, r0, r4
 800c518:	e7ec      	b.n	800c4f4 <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEitPKNS0_24DrawStringInternalStructE+0xb4>
	...

0800c51c <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE>:
 800c51c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c520:	b0a9      	sub	sp, #164	@ 0xa4
 800c522:	4683      	mov	fp, r0
 800c524:	9105      	str	r1, [sp, #20]
 800c526:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c528:	4615      	mov	r5, r2
 800c52a:	f89d 30d0 	ldrb.w	r3, [sp, #208]	@ 0xd0
 800c52e:	9932      	ldr	r1, [sp, #200]	@ 0xc8
 800c530:	930d      	str	r3, [sp, #52]	@ 0x34
 800c532:	2264      	movs	r2, #100	@ 0x64
 800c534:	a80f      	add	r0, sp, #60	@ 0x3c
 800c536:	f008 faf1 	bl	8014b1c <memcpy>
 800c53a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800c53c:	2300      	movs	r3, #0
 800c53e:	930e      	str	r3, [sp, #56]	@ 0x38
 800c540:	2a00      	cmp	r2, #0
 800c542:	f040 815c 	bne.w	800c7fe <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x2e2>
 800c546:	9207      	str	r2, [sp, #28]
 800c548:	9209      	str	r2, [sp, #36]	@ 0x24
 800c54a:	4690      	mov	r8, r2
 800c54c:	4616      	mov	r6, r2
 800c54e:	9208      	str	r2, [sp, #32]
 800c550:	4614      	mov	r4, r2
 800c552:	920a      	str	r2, [sp, #40]	@ 0x28
 800c554:	4691      	mov	r9, r2
 800c556:	9b07      	ldr	r3, [sp, #28]
 800c558:	9a33      	ldr	r2, [sp, #204]	@ 0xcc
 800c55a:	4293      	cmp	r3, r2
 800c55c:	f280 8101 	bge.w	800c762 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x246>
 800c560:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 800c564:	4599      	cmp	r9, r3
 800c566:	d006      	beq.n	800c576 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x5a>
 800c568:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c56a:	f242 030b 	movw	r3, #8203	@ 0x200b
 800c56e:	4599      	cmp	r9, r3
 800c570:	bf18      	it	ne
 800c572:	464a      	movne	r2, r9
 800c574:	920a      	str	r2, [sp, #40]	@ 0x28
 800c576:	462a      	mov	r2, r5
 800c578:	ab0e      	add	r3, sp, #56	@ 0x38
 800c57a:	2100      	movs	r1, #0
 800c57c:	9832      	ldr	r0, [sp, #200]	@ 0xc8
 800c57e:	f003 fd5d 	bl	801003c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800c582:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c584:	4681      	mov	r9, r0
 800c586:	2a00      	cmp	r2, #0
 800c588:	d06c      	beq.n	800c664 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x148>
 800c58a:	f892 a00d 	ldrb.w	sl, [r2, #13]
 800c58e:	682b      	ldr	r3, [r5, #0]
 800c590:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c592:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c594:	f8b2 9004 	ldrh.w	r9, [r2, #4]
 800c598:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
 800c59c:	f40a 7080 	and.w	r0, sl, #256	@ 0x100
 800c5a0:	f892 a00a 	ldrb.w	sl, [r2, #10]
 800c5a4:	ea4a 0a00 	orr.w	sl, sl, r0
 800c5a8:	4628      	mov	r0, r5
 800c5aa:	4798      	blx	r3
 800c5ac:	4450      	add	r0, sl
 800c5ae:	b287      	uxth	r7, r0
 800c5b0:	f1b9 0f00 	cmp.w	r9, #0
 800c5b4:	f000 80d5 	beq.w	800c762 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x246>
 800c5b8:	f1b9 0f0a 	cmp.w	r9, #10
 800c5bc:	f000 80d1 	beq.w	800c762 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x246>
 800c5c0:	f1a9 0328 	sub.w	r3, r9, #40	@ 0x28
 800c5c4:	b29b      	uxth	r3, r3
 800c5c6:	f029 0120 	bic.w	r1, r9, #32
 800c5ca:	2b01      	cmp	r3, #1
 800c5cc:	b289      	uxth	r1, r1
 800c5ce:	d94b      	bls.n	800c668 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x14c>
 800c5d0:	295b      	cmp	r1, #91	@ 0x5b
 800c5d2:	d049      	beq.n	800c668 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x14c>
 800c5d4:	295d      	cmp	r1, #93	@ 0x5d
 800c5d6:	d047      	beq.n	800c668 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x14c>
 800c5d8:	f029 0202 	bic.w	r2, r9, #2
 800c5dc:	b292      	uxth	r2, r2
 800c5de:	f1a2 033c 	sub.w	r3, r2, #60	@ 0x3c
 800c5e2:	425a      	negs	r2, r3
 800c5e4:	415a      	adcs	r2, r3
 800c5e6:	f1a9 0330 	sub.w	r3, r9, #48	@ 0x30
 800c5ea:	b29b      	uxth	r3, r3
 800c5ec:	2b09      	cmp	r3, #9
 800c5ee:	d93d      	bls.n	800c66c <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x150>
 800c5f0:	f5a9 6acc 	sub.w	sl, r9, #1632	@ 0x660
 800c5f4:	fa1f fa8a 	uxth.w	sl, sl
 800c5f8:	f1ba 0f09 	cmp.w	sl, #9
 800c5fc:	bf8c      	ite	hi
 800c5fe:	2300      	movhi	r3, #0
 800c600:	2301      	movls	r3, #1
 800c602:	9306      	str	r3, [sp, #24]
 800c604:	f5a9 63b2 	sub.w	r3, r9, #1424	@ 0x590
 800c608:	b29b      	uxth	r3, r3
 800c60a:	f5b3 7fb8 	cmp.w	r3, #368	@ 0x170
 800c60e:	d305      	bcc.n	800c61c <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x100>
 800c610:	f509 6396 	add.w	r3, r9, #1200	@ 0x4b0
 800c614:	b29b      	uxth	r3, r3
 800c616:	f5b3 7f6c 	cmp.w	r3, #944	@ 0x3b0
 800c61a:	d229      	bcs.n	800c670 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x154>
 800c61c:	9b06      	ldr	r3, [sp, #24]
 800c61e:	f083 0301 	eor.w	r3, r3, #1
 800c622:	b2db      	uxtb	r3, r3
 800c624:	f64f 60ff 	movw	r0, #65279	@ 0xfeff
 800c628:	4581      	cmp	r9, r0
 800c62a:	d023      	beq.n	800c674 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x158>
 800c62c:	f242 000b 	movw	r0, #8203	@ 0x200b
 800c630:	eba9 0a00 	sub.w	sl, r9, r0
 800c634:	f1da 0000 	rsbs	r0, sl, #0
 800c638:	eb40 000a 	adc.w	r0, r0, sl
 800c63c:	3941      	subs	r1, #65	@ 0x41
 800c63e:	2919      	cmp	r1, #25
 800c640:	f240 82a2 	bls.w	800cb88 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x66c>
 800c644:	f1b9 0f7f 	cmp.w	r9, #127	@ 0x7f
 800c648:	f240 828b 	bls.w	800cb62 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x646>
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	f040 8288 	bne.w	800cb62 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x646>
 800c652:	2800      	cmp	r0, #0
 800c654:	f040 8285 	bne.w	800cb62 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x646>
 800c658:	2e03      	cmp	r6, #3
 800c65a:	d850      	bhi.n	800c6fe <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x1e2>
 800c65c:	e8df f006 	tbb	[pc, r6]
 800c660:	62392b13 	.word	0x62392b13
 800c664:	4617      	mov	r7, r2
 800c666:	e7a3      	b.n	800c5b0 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x94>
 800c668:	2201      	movs	r2, #1
 800c66a:	e7bc      	b.n	800c5e6 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0xca>
 800c66c:	2301      	movs	r3, #1
 800c66e:	e7c8      	b.n	800c602 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0xe6>
 800c670:	2300      	movs	r3, #0
 800c672:	e7d7      	b.n	800c624 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x108>
 800c674:	2001      	movs	r0, #1
 800c676:	e7e1      	b.n	800c63c <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x120>
 800c678:	2e03      	cmp	r6, #3
 800c67a:	d840      	bhi.n	800c6fe <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x1e2>
 800c67c:	e8df f006 	tbb	[pc, r6]
 800c680:	46290902 	.word	0x46290902
 800c684:	b99b      	cbnz	r3, 800c6ae <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x192>
 800c686:	f04f 0a01 	mov.w	sl, #1
 800c68a:	4656      	mov	r6, sl
 800c68c:	f8cd a018 	str.w	sl, [sp, #24]
 800c690:	e017      	b.n	800c6c2 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x1a6>
 800c692:	b183      	cbz	r3, 800c6b6 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x19a>
 800c694:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 800c696:	f8cd 8004 	str.w	r8, [sp, #4]
 800c69a:	e9cd 4302 	strd	r4, r3, [sp, #8]
 800c69e:	ab0f      	add	r3, sp, #60	@ 0x3c
 800c6a0:	9300      	str	r3, [sp, #0]
 800c6a2:	462a      	mov	r2, r5
 800c6a4:	2300      	movs	r3, #0
 800c6a6:	9905      	ldr	r1, [sp, #20]
 800c6a8:	4658      	mov	r0, fp
 800c6aa:	f7ff fec9 	bl	800c440 <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEitPKNS0_24DrawStringInternalStructE>
 800c6ae:	463c      	mov	r4, r7
 800c6b0:	f04f 0801 	mov.w	r8, #1
 800c6b4:	e034      	b.n	800c720 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x204>
 800c6b6:	443c      	add	r4, r7
 800c6b8:	2601      	movs	r6, #1
 800c6ba:	f108 0a01 	add.w	sl, r8, #1
 800c6be:	b2a7      	uxth	r7, r4
 800c6c0:	9606      	str	r6, [sp, #24]
 800c6c2:	9b07      	ldr	r3, [sp, #28]
 800c6c4:	3301      	adds	r3, #1
 800c6c6:	9307      	str	r3, [sp, #28]
 800c6c8:	9b06      	ldr	r3, [sp, #24]
 800c6ca:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c6cc:	46d0      	mov	r8, sl
 800c6ce:	463c      	mov	r4, r7
 800c6d0:	e741      	b.n	800c556 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x3a>
 800c6d2:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 800c6d4:	f8cd 8004 	str.w	r8, [sp, #4]
 800c6d8:	e9cd 4302 	strd	r4, r3, [sp, #8]
 800c6dc:	ab0f      	add	r3, sp, #60	@ 0x3c
 800c6de:	9300      	str	r3, [sp, #0]
 800c6e0:	462a      	mov	r2, r5
 800c6e2:	2301      	movs	r3, #1
 800c6e4:	9905      	ldr	r1, [sp, #20]
 800c6e6:	4658      	mov	r0, fp
 800c6e8:	f7ff feaa 	bl	800c440 <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEitPKNS0_24DrawStringInternalStructE>
 800c6ec:	e7cb      	b.n	800c686 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x16a>
 800c6ee:	b913      	cbnz	r3, 800c6f6 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x1da>
 800c6f0:	2800      	cmp	r0, #0
 800c6f2:	f000 8257 	beq.w	800cba4 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x688>
 800c6f6:	443c      	add	r4, r7
 800c6f8:	f108 0801 	add.w	r8, r8, #1
 800c6fc:	b2a4      	uxth	r4, r4
 800c6fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c700:	9306      	str	r3, [sp, #24]
 800c702:	46c2      	mov	sl, r8
 800c704:	4627      	mov	r7, r4
 800c706:	e7dc      	b.n	800c6c2 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x1a6>
 800c708:	2200      	movs	r2, #0
 800c70a:	9206      	str	r2, [sp, #24]
 800c70c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c70e:	f102 0a01 	add.w	sl, r2, #1
 800c712:	b14b      	cbz	r3, 800c728 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x20c>
 800c714:	9b08      	ldr	r3, [sp, #32]
 800c716:	441c      	add	r4, r3
 800c718:	fa17 f484 	uxtah	r4, r7, r4
 800c71c:	44d0      	add	r8, sl
 800c71e:	b2a4      	uxth	r4, r4
 800c720:	2602      	movs	r6, #2
 800c722:	e7ec      	b.n	800c6fe <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x1e2>
 800c724:	2201      	movs	r2, #1
 800c726:	e7f0      	b.n	800c70a <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x1ee>
 800c728:	9b06      	ldr	r3, [sp, #24]
 800c72a:	b19b      	cbz	r3, 800c754 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x238>
 800c72c:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 800c72e:	f8cd 8004 	str.w	r8, [sp, #4]
 800c732:	e9cd 4302 	strd	r4, r3, [sp, #8]
 800c736:	ab0f      	add	r3, sp, #60	@ 0x3c
 800c738:	9300      	str	r3, [sp, #0]
 800c73a:	462a      	mov	r2, r5
 800c73c:	2301      	movs	r3, #1
 800c73e:	9905      	ldr	r1, [sp, #20]
 800c740:	4658      	mov	r0, fp
 800c742:	f7ff fe7d 	bl	800c440 <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEitPKNS0_24DrawStringInternalStructE>
 800c746:	9b08      	ldr	r3, [sp, #32]
 800c748:	441c      	add	r4, r3
 800c74a:	fa17 f484 	uxtah	r4, r7, r4
 800c74e:	b2a7      	uxth	r7, r4
 800c750:	2601      	movs	r6, #1
 800c752:	e7b6      	b.n	800c6c2 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x1a6>
 800c754:	9b08      	ldr	r3, [sp, #32]
 800c756:	443b      	add	r3, r7
 800c758:	b29b      	uxth	r3, r3
 800c75a:	e9cd 3a08 	strd	r3, sl, [sp, #32]
 800c75e:	2603      	movs	r6, #3
 800c760:	e7cd      	b.n	800c6fe <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x1e2>
 800c762:	2e01      	cmp	r6, #1
 800c764:	d107      	bne.n	800c776 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x25a>
 800c766:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 800c768:	f8cd 8004 	str.w	r8, [sp, #4]
 800c76c:	e9cd 4302 	strd	r4, r3, [sp, #8]
 800c770:	ab0f      	add	r3, sp, #60	@ 0x3c
 800c772:	9300      	str	r3, [sp, #0]
 800c774:	e021      	b.n	800c7ba <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x29e>
 800c776:	2e02      	cmp	r6, #2
 800c778:	d108      	bne.n	800c78c <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x270>
 800c77a:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 800c77c:	f8cd 8004 	str.w	r8, [sp, #4]
 800c780:	e9cd 4302 	strd	r4, r3, [sp, #8]
 800c784:	ab0f      	add	r3, sp, #60	@ 0x3c
 800c786:	9300      	str	r3, [sp, #0]
 800c788:	2301      	movs	r3, #1
 800c78a:	e017      	b.n	800c7bc <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x2a0>
 800c78c:	2e03      	cmp	r6, #3
 800c78e:	d11a      	bne.n	800c7c6 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x2aa>
 800c790:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c792:	ae0f      	add	r6, sp, #60	@ 0x3c
 800c794:	b343      	cbz	r3, 800c7e8 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x2cc>
 800c796:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 800c798:	9905      	ldr	r1, [sp, #20]
 800c79a:	e9cd 4302 	strd	r4, r3, [sp, #8]
 800c79e:	e9cd 6800 	strd	r6, r8, [sp]
 800c7a2:	2301      	movs	r3, #1
 800c7a4:	462a      	mov	r2, r5
 800c7a6:	4658      	mov	r0, fp
 800c7a8:	f7ff fe4a 	bl	800c440 <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEitPKNS0_24DrawStringInternalStructE>
 800c7ac:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 800c7ae:	9303      	str	r3, [sp, #12]
 800c7b0:	9b08      	ldr	r3, [sp, #32]
 800c7b2:	9302      	str	r3, [sp, #8]
 800c7b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c7b6:	e9cd 6300 	strd	r6, r3, [sp]
 800c7ba:	2300      	movs	r3, #0
 800c7bc:	462a      	mov	r2, r5
 800c7be:	9905      	ldr	r1, [sp, #20]
 800c7c0:	4658      	mov	r0, fp
 800c7c2:	f7ff fe3d 	bl	800c440 <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEitPKNS0_24DrawStringInternalStructE>
 800c7c6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c7c8:	b15b      	cbz	r3, 800c7e2 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x2c6>
 800c7ca:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 800c7cc:	9303      	str	r3, [sp, #12]
 800c7ce:	aa0f      	add	r2, sp, #60	@ 0x3c
 800c7d0:	2300      	movs	r3, #0
 800c7d2:	9200      	str	r2, [sp, #0]
 800c7d4:	e9cd 3301 	strd	r3, r3, [sp, #4]
 800c7d8:	462a      	mov	r2, r5
 800c7da:	9905      	ldr	r1, [sp, #20]
 800c7dc:	4658      	mov	r0, fp
 800c7de:	f7ff fe2f 	bl	800c440 <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEitPKNS0_24DrawStringInternalStructE>
 800c7e2:	b029      	add	sp, #164	@ 0xa4
 800c7e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7e8:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 800c7ea:	9303      	str	r3, [sp, #12]
 800c7ec:	9b08      	ldr	r3, [sp, #32]
 800c7ee:	441c      	add	r4, r3
 800c7f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c7f2:	b2a4      	uxth	r4, r4
 800c7f4:	9402      	str	r4, [sp, #8]
 800c7f6:	4443      	add	r3, r8
 800c7f8:	e9cd 6300 	strd	r6, r3, [sp]
 800c7fc:	e7c4      	b.n	800c788 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x26c>
 800c7fe:	e9cd 3308 	strd	r3, r3, [sp, #32]
 800c802:	9307      	str	r3, [sp, #28]
 800c804:	461f      	mov	r7, r3
 800c806:	4698      	mov	r8, r3
 800c808:	9306      	str	r3, [sp, #24]
 800c80a:	461c      	mov	r4, r3
 800c80c:	930a      	str	r3, [sp, #40]	@ 0x28
 800c80e:	4699      	mov	r9, r3
 800c810:	9b08      	ldr	r3, [sp, #32]
 800c812:	9a33      	ldr	r2, [sp, #204]	@ 0xcc
 800c814:	4293      	cmp	r3, r2
 800c816:	f280 816e 	bge.w	800caf6 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x5da>
 800c81a:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 800c81e:	4599      	cmp	r9, r3
 800c820:	d006      	beq.n	800c830 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x314>
 800c822:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c824:	f242 020b 	movw	r2, #8203	@ 0x200b
 800c828:	4591      	cmp	r9, r2
 800c82a:	bf18      	it	ne
 800c82c:	464b      	movne	r3, r9
 800c82e:	930a      	str	r3, [sp, #40]	@ 0x28
 800c830:	462a      	mov	r2, r5
 800c832:	ab0e      	add	r3, sp, #56	@ 0x38
 800c834:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c836:	9832      	ldr	r0, [sp, #200]	@ 0xc8
 800c838:	f003 fc00 	bl	801003c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800c83c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c83e:	4681      	mov	r9, r0
 800c840:	2a00      	cmp	r2, #0
 800c842:	d073      	beq.n	800c92c <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x410>
 800c844:	f892 a00d 	ldrb.w	sl, [r2, #13]
 800c848:	682b      	ldr	r3, [r5, #0]
 800c84a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c84c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c84e:	f8b2 9004 	ldrh.w	r9, [r2, #4]
 800c852:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
 800c856:	f40a 7080 	and.w	r0, sl, #256	@ 0x100
 800c85a:	f892 a00a 	ldrb.w	sl, [r2, #10]
 800c85e:	ea4a 0a00 	orr.w	sl, sl, r0
 800c862:	4628      	mov	r0, r5
 800c864:	4798      	blx	r3
 800c866:	4450      	add	r0, sl
 800c868:	b286      	uxth	r6, r0
 800c86a:	f1b9 0f00 	cmp.w	r9, #0
 800c86e:	f000 8142 	beq.w	800caf6 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x5da>
 800c872:	f1b9 0f0a 	cmp.w	r9, #10
 800c876:	f000 813e 	beq.w	800caf6 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x5da>
 800c87a:	f1a9 0328 	sub.w	r3, r9, #40	@ 0x28
 800c87e:	b29b      	uxth	r3, r3
 800c880:	f029 0220 	bic.w	r2, r9, #32
 800c884:	2b01      	cmp	r3, #1
 800c886:	b292      	uxth	r2, r2
 800c888:	d952      	bls.n	800c930 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x414>
 800c88a:	2a5b      	cmp	r2, #91	@ 0x5b
 800c88c:	d050      	beq.n	800c930 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x414>
 800c88e:	2a5d      	cmp	r2, #93	@ 0x5d
 800c890:	d04e      	beq.n	800c930 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x414>
 800c892:	f029 0a02 	bic.w	sl, r9, #2
 800c896:	fa1f fa8a 	uxth.w	sl, sl
 800c89a:	f1aa 0c3c 	sub.w	ip, sl, #60	@ 0x3c
 800c89e:	f1dc 0a00 	rsbs	sl, ip, #0
 800c8a2:	eb4a 0a0c 	adc.w	sl, sl, ip
 800c8a6:	f1a9 0330 	sub.w	r3, r9, #48	@ 0x30
 800c8aa:	b29b      	uxth	r3, r3
 800c8ac:	2b09      	cmp	r3, #9
 800c8ae:	d942      	bls.n	800c936 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x41a>
 800c8b0:	f5a9 63cc 	sub.w	r3, r9, #1632	@ 0x660
 800c8b4:	b29b      	uxth	r3, r3
 800c8b6:	2b09      	cmp	r3, #9
 800c8b8:	bf8c      	ite	hi
 800c8ba:	2300      	movhi	r3, #0
 800c8bc:	2301      	movls	r3, #1
 800c8be:	f5a9 61b2 	sub.w	r1, r9, #1424	@ 0x590
 800c8c2:	b289      	uxth	r1, r1
 800c8c4:	f5b1 7fb8 	cmp.w	r1, #368	@ 0x170
 800c8c8:	d308      	bcc.n	800c8dc <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x3c0>
 800c8ca:	f509 6196 	add.w	r1, r9, #1200	@ 0x4b0
 800c8ce:	b289      	uxth	r1, r1
 800c8d0:	f5b1 7f6c 	cmp.w	r1, #944	@ 0x3b0
 800c8d4:	d302      	bcc.n	800c8dc <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x3c0>
 800c8d6:	f1ba 0f00 	cmp.w	sl, #0
 800c8da:	d001      	beq.n	800c8e0 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x3c4>
 800c8dc:	f083 0a01 	eor.w	sl, r3, #1
 800c8e0:	f64f 61ff 	movw	r1, #65279	@ 0xfeff
 800c8e4:	4589      	cmp	r9, r1
 800c8e6:	d028      	beq.n	800c93a <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x41e>
 800c8e8:	f242 010b 	movw	r1, #8203	@ 0x200b
 800c8ec:	eba9 0001 	sub.w	r0, r9, r1
 800c8f0:	4241      	negs	r1, r0
 800c8f2:	4141      	adcs	r1, r0
 800c8f4:	3a41      	subs	r2, #65	@ 0x41
 800c8f6:	2a19      	cmp	r2, #25
 800c8f8:	d90a      	bls.n	800c910 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x3f4>
 800c8fa:	f1b9 0f7f 	cmp.w	r9, #127	@ 0x7f
 800c8fe:	f240 8155 	bls.w	800cbac <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x690>
 800c902:	f1ba 0f00 	cmp.w	sl, #0
 800c906:	f040 8151 	bne.w	800cbac <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x690>
 800c90a:	2900      	cmp	r1, #0
 800c90c:	f040 814e 	bne.w	800cbac <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x690>
 800c910:	f1b8 0f07 	cmp.w	r8, #7
 800c914:	f200 80e5 	bhi.w	800cae2 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x5c6>
 800c918:	e8df f018 	tbh	[pc, r8, lsl #1]
 800c91c:	00e3001d 	.word	0x00e3001d
 800c920:	00e30030 	.word	0x00e30030
 800c924:	00830055 	.word	0x00830055
 800c928:	00c20068 	.word	0x00c20068
 800c92c:	4616      	mov	r6, r2
 800c92e:	e79c      	b.n	800c86a <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x34e>
 800c930:	f04f 0a01 	mov.w	sl, #1
 800c934:	e7b7      	b.n	800c8a6 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x38a>
 800c936:	2301      	movs	r3, #1
 800c938:	e7c1      	b.n	800c8be <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x3a2>
 800c93a:	2101      	movs	r1, #1
 800c93c:	e7da      	b.n	800c8f4 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x3d8>
 800c93e:	2200      	movs	r2, #0
 800c940:	b9cb      	cbnz	r3, 800c976 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x45a>
 800c942:	bb52      	cbnz	r2, 800c99a <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x47e>
 800c944:	2701      	movs	r7, #1
 800c946:	f04f 0802 	mov.w	r8, #2
 800c94a:	9709      	str	r7, [sp, #36]	@ 0x24
 800c94c:	9b08      	ldr	r3, [sp, #32]
 800c94e:	3301      	adds	r3, #1
 800c950:	9308      	str	r3, [sp, #32]
 800c952:	4634      	mov	r4, r6
 800c954:	e75c      	b.n	800c810 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x2f4>
 800c956:	2201      	movs	r2, #1
 800c958:	e7f2      	b.n	800c940 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x424>
 800c95a:	2200      	movs	r2, #0
 800c95c:	b183      	cbz	r3, 800c980 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x464>
 800c95e:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 800c960:	9701      	str	r7, [sp, #4]
 800c962:	e9cd 4302 	strd	r4, r3, [sp, #8]
 800c966:	ab0f      	add	r3, sp, #60	@ 0x3c
 800c968:	9300      	str	r3, [sp, #0]
 800c96a:	462a      	mov	r2, r5
 800c96c:	2301      	movs	r3, #1
 800c96e:	9905      	ldr	r1, [sp, #20]
 800c970:	4658      	mov	r0, fp
 800c972:	f7ff fd65 	bl	800c440 <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEitPKNS0_24DrawStringInternalStructE>
 800c976:	4634      	mov	r4, r6
 800c978:	2701      	movs	r7, #1
 800c97a:	e020      	b.n	800c9be <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x4a2>
 800c97c:	2201      	movs	r2, #1
 800c97e:	e7ed      	b.n	800c95c <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x440>
 800c980:	b182      	cbz	r2, 800c9a4 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x488>
 800c982:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 800c984:	9701      	str	r7, [sp, #4]
 800c986:	e9cd 4302 	strd	r4, r3, [sp, #8]
 800c98a:	ab0f      	add	r3, sp, #60	@ 0x3c
 800c98c:	9300      	str	r3, [sp, #0]
 800c98e:	2301      	movs	r3, #1
 800c990:	462a      	mov	r2, r5
 800c992:	9905      	ldr	r1, [sp, #20]
 800c994:	4658      	mov	r0, fp
 800c996:	f7ff fd53 	bl	800c440 <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEitPKNS0_24DrawStringInternalStructE>
 800c99a:	4634      	mov	r4, r6
 800c99c:	2701      	movs	r7, #1
 800c99e:	f04f 0806 	mov.w	r8, #6
 800c9a2:	e00e      	b.n	800c9c2 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x4a6>
 800c9a4:	3701      	adds	r7, #1
 800c9a6:	4434      	add	r4, r6
 800c9a8:	2301      	movs	r3, #1
 800c9aa:	b2a6      	uxth	r6, r4
 800c9ac:	f04f 0802 	mov.w	r8, #2
 800c9b0:	9309      	str	r3, [sp, #36]	@ 0x24
 800c9b2:	e7cb      	b.n	800c94c <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x430>
 800c9b4:	2200      	movs	r2, #0
 800c9b6:	b143      	cbz	r3, 800c9ca <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x4ae>
 800c9b8:	3701      	adds	r7, #1
 800c9ba:	4434      	add	r4, r6
 800c9bc:	b2a4      	uxth	r4, r4
 800c9be:	f04f 0804 	mov.w	r8, #4
 800c9c2:	4626      	mov	r6, r4
 800c9c4:	e7c2      	b.n	800c94c <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x430>
 800c9c6:	2201      	movs	r2, #1
 800c9c8:	e7f5      	b.n	800c9b6 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x49a>
 800c9ca:	f029 0302 	bic.w	r3, r9, #2
 800c9ce:	b29b      	uxth	r3, r3
 800c9d0:	2b2c      	cmp	r3, #44	@ 0x2c
 800c9d2:	f000 8101 	beq.w	800cbd8 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x6bc>
 800c9d6:	f1b9 0f3a 	cmp.w	r9, #58	@ 0x3a
 800c9da:	f000 80fd 	beq.w	800cbd8 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x6bc>
 800c9de:	f2a9 636b 	subw	r3, r9, #1643	@ 0x66b
 800c9e2:	b29b      	uxth	r3, r3
 800c9e4:	2b01      	cmp	r3, #1
 800c9e6:	f240 80f7 	bls.w	800cbd8 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x6bc>
 800c9ea:	b11a      	cbz	r2, 800c9f4 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x4d8>
 800c9ec:	3701      	adds	r7, #1
 800c9ee:	4434      	add	r4, r6
 800c9f0:	b2a4      	uxth	r4, r4
 800c9f2:	e7d4      	b.n	800c99e <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x482>
 800c9f4:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 800c9f6:	9701      	str	r7, [sp, #4]
 800c9f8:	e9cd 4302 	strd	r4, r3, [sp, #8]
 800c9fc:	ab0f      	add	r3, sp, #60	@ 0x3c
 800c9fe:	9300      	str	r3, [sp, #0]
 800ca00:	9905      	ldr	r1, [sp, #20]
 800ca02:	4613      	mov	r3, r2
 800ca04:	4658      	mov	r0, fp
 800ca06:	462a      	mov	r2, r5
 800ca08:	f7ff fd1a 	bl	800c440 <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEitPKNS0_24DrawStringInternalStructE>
 800ca0c:	e79a      	b.n	800c944 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x428>
 800ca0e:	2200      	movs	r2, #0
 800ca10:	b14b      	cbz	r3, 800ca26 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x50a>
 800ca12:	9b07      	ldr	r3, [sp, #28]
 800ca14:	3301      	adds	r3, #1
 800ca16:	441f      	add	r7, r3
 800ca18:	9b06      	ldr	r3, [sp, #24]
 800ca1a:	441c      	add	r4, r3
 800ca1c:	fa16 f484 	uxtah	r4, r6, r4
 800ca20:	e7cc      	b.n	800c9bc <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x4a0>
 800ca22:	2201      	movs	r2, #1
 800ca24:	e7f4      	b.n	800ca10 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x4f4>
 800ca26:	f10d 083c 	add.w	r8, sp, #60	@ 0x3c
 800ca2a:	b18a      	cbz	r2, 800ca50 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x534>
 800ca2c:	9a35      	ldr	r2, [sp, #212]	@ 0xd4
 800ca2e:	9905      	ldr	r1, [sp, #20]
 800ca30:	e9cd 4202 	strd	r4, r2, [sp, #8]
 800ca34:	e9cd 8700 	strd	r8, r7, [sp]
 800ca38:	462a      	mov	r2, r5
 800ca3a:	4658      	mov	r0, fp
 800ca3c:	f7ff fd00 	bl	800c440 <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEitPKNS0_24DrawStringInternalStructE>
 800ca40:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 800ca42:	9303      	str	r3, [sp, #12]
 800ca44:	9b06      	ldr	r3, [sp, #24]
 800ca46:	9302      	str	r3, [sp, #8]
 800ca48:	9b07      	ldr	r3, [sp, #28]
 800ca4a:	e9cd 8300 	strd	r8, r3, [sp]
 800ca4e:	e79e      	b.n	800c98e <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x472>
 800ca50:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 800ca52:	9905      	ldr	r1, [sp, #20]
 800ca54:	e9cd 4302 	strd	r4, r3, [sp, #8]
 800ca58:	e9cd 8700 	strd	r8, r7, [sp]
 800ca5c:	4613      	mov	r3, r2
 800ca5e:	4658      	mov	r0, fp
 800ca60:	462a      	mov	r2, r5
 800ca62:	f7ff fced 	bl	800c440 <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEitPKNS0_24DrawStringInternalStructE>
 800ca66:	9b07      	ldr	r3, [sp, #28]
 800ca68:	1c5f      	adds	r7, r3, #1
 800ca6a:	9b06      	ldr	r3, [sp, #24]
 800ca6c:	199c      	adds	r4, r3, r6
 800ca6e:	e79b      	b.n	800c9a8 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x48c>
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d1bb      	bne.n	800c9ec <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x4d0>
 800ca74:	f1ba 0f00 	cmp.w	sl, #0
 800ca78:	f000 80b4 	beq.w	800cbe4 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x6c8>
 800ca7c:	9a35      	ldr	r2, [sp, #212]	@ 0xd4
 800ca7e:	9701      	str	r7, [sp, #4]
 800ca80:	e9cd 4202 	strd	r4, r2, [sp, #8]
 800ca84:	aa0f      	add	r2, sp, #60	@ 0x3c
 800ca86:	9200      	str	r2, [sp, #0]
 800ca88:	9905      	ldr	r1, [sp, #20]
 800ca8a:	462a      	mov	r2, r5
 800ca8c:	4658      	mov	r0, fp
 800ca8e:	f7ff fcd7 	bl	800c440 <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEitPKNS0_24DrawStringInternalStructE>
 800ca92:	2701      	movs	r7, #1
 800ca94:	f8cd a024 	str.w	sl, [sp, #36]	@ 0x24
 800ca98:	f04f 0802 	mov.w	r8, #2
 800ca9c:	e756      	b.n	800c94c <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x430>
 800ca9e:	b13b      	cbz	r3, 800cab0 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x594>
 800caa0:	9b07      	ldr	r3, [sp, #28]
 800caa2:	3301      	adds	r3, #1
 800caa4:	441f      	add	r7, r3
 800caa6:	9b06      	ldr	r3, [sp, #24]
 800caa8:	441c      	add	r4, r3
 800caaa:	fa16 f484 	uxtah	r4, r6, r4
 800caae:	e79f      	b.n	800c9f0 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x4d4>
 800cab0:	9a07      	ldr	r2, [sp, #28]
 800cab2:	3201      	adds	r2, #1
 800cab4:	920c      	str	r2, [sp, #48]	@ 0x30
 800cab6:	9a06      	ldr	r2, [sp, #24]
 800cab8:	4416      	add	r6, r2
 800caba:	b2b6      	uxth	r6, r6
 800cabc:	f1ba 0f00 	cmp.w	sl, #0
 800cac0:	f000 8096 	beq.w	800cbf0 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x6d4>
 800cac4:	9a35      	ldr	r2, [sp, #212]	@ 0xd4
 800cac6:	9701      	str	r7, [sp, #4]
 800cac8:	e9cd 4202 	strd	r4, r2, [sp, #8]
 800cacc:	aa0f      	add	r2, sp, #60	@ 0x3c
 800cace:	9200      	str	r2, [sp, #0]
 800cad0:	9905      	ldr	r1, [sp, #20]
 800cad2:	462a      	mov	r2, r5
 800cad4:	4658      	mov	r0, fp
 800cad6:	f7ff fcb3 	bl	800c440 <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEitPKNS0_24DrawStringInternalStructE>
 800cada:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 800cadc:	f8cd a024 	str.w	sl, [sp, #36]	@ 0x24
 800cae0:	e7da      	b.n	800ca98 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x57c>
 800cae2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	f47f af6c 	bne.w	800c9c2 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x4a6>
 800caea:	f1a8 0202 	sub.w	r2, r8, #2
 800caee:	4253      	negs	r3, r2
 800caf0:	4153      	adcs	r3, r2
 800caf2:	9309      	str	r3, [sp, #36]	@ 0x24
 800caf4:	e765      	b.n	800c9c2 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x4a6>
 800caf6:	f1b8 0f02 	cmp.w	r8, #2
 800cafa:	d104      	bne.n	800cb06 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x5ea>
 800cafc:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 800cafe:	9701      	str	r7, [sp, #4]
 800cb00:	e9cd 4302 	strd	r4, r3, [sp, #8]
 800cb04:	e63e      	b.n	800c784 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x268>
 800cb06:	f008 0805 	and.w	r8, r8, #5
 800cb0a:	f1b8 0f04 	cmp.w	r8, #4
 800cb0e:	d104      	bne.n	800cb1a <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x5fe>
 800cb10:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 800cb12:	9701      	str	r7, [sp, #4]
 800cb14:	e9cd 4302 	strd	r4, r3, [sp, #8]
 800cb18:	e62a      	b.n	800c770 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x254>
 800cb1a:	f1b8 0f05 	cmp.w	r8, #5
 800cb1e:	f47f ae52 	bne.w	800c7c6 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x2aa>
 800cb22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cb24:	ae0f      	add	r6, sp, #60	@ 0x3c
 800cb26:	b183      	cbz	r3, 800cb4a <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x62e>
 800cb28:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 800cb2a:	9905      	ldr	r1, [sp, #20]
 800cb2c:	e9cd 4302 	strd	r4, r3, [sp, #8]
 800cb30:	e9cd 6700 	strd	r6, r7, [sp]
 800cb34:	2300      	movs	r3, #0
 800cb36:	462a      	mov	r2, r5
 800cb38:	4658      	mov	r0, fp
 800cb3a:	f7ff fc81 	bl	800c440 <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEitPKNS0_24DrawStringInternalStructE>
 800cb3e:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 800cb40:	9303      	str	r3, [sp, #12]
 800cb42:	9b06      	ldr	r3, [sp, #24]
 800cb44:	9302      	str	r3, [sp, #8]
 800cb46:	9b07      	ldr	r3, [sp, #28]
 800cb48:	e656      	b.n	800c7f8 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x2dc>
 800cb4a:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 800cb4c:	9303      	str	r3, [sp, #12]
 800cb4e:	9b06      	ldr	r3, [sp, #24]
 800cb50:	441c      	add	r4, r3
 800cb52:	9b07      	ldr	r3, [sp, #28]
 800cb54:	b2a4      	uxth	r4, r4
 800cb56:	441f      	add	r7, r3
 800cb58:	9402      	str	r4, [sp, #8]
 800cb5a:	e9cd 6700 	strd	r6, r7, [sp]
 800cb5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cb60:	e62c      	b.n	800c7bc <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x2a0>
 800cb62:	9906      	ldr	r1, [sp, #24]
 800cb64:	2900      	cmp	r1, #0
 800cb66:	f47f ad87 	bne.w	800c678 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x15c>
 800cb6a:	b96a      	cbnz	r2, 800cb88 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x66c>
 800cb6c:	2e03      	cmp	r6, #3
 800cb6e:	f63f adc6 	bhi.w	800c6fe <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x1e2>
 800cb72:	a201      	add	r2, pc, #4	@ (adr r2, 800cb78 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x65c>)
 800cb74:	f852 f026 	ldr.w	pc, [r2, r6, lsl #2]
 800cb78:	0800c685 	.word	0x0800c685
 800cb7c:	0800c693 	.word	0x0800c693
 800cb80:	0800c6ef 	.word	0x0800c6ef
 800cb84:	0800c709 	.word	0x0800c709
 800cb88:	2e03      	cmp	r6, #3
 800cb8a:	f63f adb8 	bhi.w	800c6fe <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x1e2>
 800cb8e:	a201      	add	r2, pc, #4	@ (adr r2, 800cb94 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x678>)
 800cb90:	f852 f026 	ldr.w	pc, [r2, r6, lsl #2]
 800cb94:	0800c685 	.word	0x0800c685
 800cb98:	0800c693 	.word	0x0800c693
 800cb9c:	0800c6d3 	.word	0x0800c6d3
 800cba0:	0800c725 	.word	0x0800c725
 800cba4:	2301      	movs	r3, #1
 800cba6:	9708      	str	r7, [sp, #32]
 800cba8:	9309      	str	r3, [sp, #36]	@ 0x24
 800cbaa:	e5d8      	b.n	800c75e <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x242>
 800cbac:	f1b8 0f07 	cmp.w	r8, #7
 800cbb0:	d897      	bhi.n	800cae2 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x5c6>
 800cbb2:	a201      	add	r2, pc, #4	@ (adr r2, 800cbb8 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x69c>)
 800cbb4:	f852 f028 	ldr.w	pc, [r2, r8, lsl #2]
 800cbb8:	0800c93f 	.word	0x0800c93f
 800cbbc:	0800cae3 	.word	0x0800cae3
 800cbc0:	0800c95b 	.word	0x0800c95b
 800cbc4:	0800cae3 	.word	0x0800cae3
 800cbc8:	0800c9b5 	.word	0x0800c9b5
 800cbcc:	0800ca0f 	.word	0x0800ca0f
 800cbd0:	0800ca71 	.word	0x0800ca71
 800cbd4:	0800ca9f 	.word	0x0800ca9f
 800cbd8:	2301      	movs	r3, #1
 800cbda:	9606      	str	r6, [sp, #24]
 800cbdc:	9307      	str	r3, [sp, #28]
 800cbde:	f04f 0805 	mov.w	r8, #5
 800cbe2:	e6ee      	b.n	800c9c2 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x4a6>
 800cbe4:	2301      	movs	r3, #1
 800cbe6:	9606      	str	r6, [sp, #24]
 800cbe8:	9307      	str	r3, [sp, #28]
 800cbea:	f04f 0807 	mov.w	r8, #7
 800cbee:	e6e8      	b.n	800c9c2 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x4a6>
 800cbf0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800cbf2:	e9cd 6306 	strd	r6, r3, [sp, #24]
 800cbf6:	e6e4      	b.n	800c9c2 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x4a6>

0800cbf8 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 800cbf8:	b530      	push	{r4, r5, lr}
 800cbfa:	8ac4      	ldrh	r4, [r0, #22]
 800cbfc:	8b45      	ldrh	r5, [r0, #26]
 800cbfe:	8343      	strh	r3, [r0, #26]
 800cc00:	442c      	add	r4, r5
 800cc02:	1ae4      	subs	r4, r4, r3
 800cc04:	82c4      	strh	r4, [r0, #22]
 800cc06:	8b83      	ldrh	r3, [r0, #28]
 800cc08:	8b04      	ldrh	r4, [r0, #24]
 800cc0a:	4422      	add	r2, r4
 800cc0c:	440c      	add	r4, r1
 800cc0e:	1a59      	subs	r1, r3, r1
 800cc10:	83c2      	strh	r2, [r0, #30]
 800cc12:	8304      	strh	r4, [r0, #24]
 800cc14:	8381      	strh	r1, [r0, #28]
 800cc16:	bd30      	pop	{r4, r5, pc}

0800cc18 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>:
 800cc18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc1c:	4604      	mov	r4, r0
 800cc1e:	8a47      	ldrh	r7, [r0, #18]
 800cc20:	68c0      	ldr	r0, [r0, #12]
 800cc22:	6803      	ldr	r3, [r0, #0]
 800cc24:	b085      	sub	sp, #20
 800cc26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cc28:	4798      	blx	r3
 800cc2a:	f9b4 6014 	ldrsh.w	r6, [r4, #20]
 800cc2e:	7a63      	ldrb	r3, [r4, #9]
 800cc30:	eb06 0640 	add.w	r6, r6, r0, lsl #1
 800cc34:	42b7      	cmp	r7, r6
 800cc36:	f103 33ff 	add.w	r3, r3, #4294967295
 800cc3a:	bfac      	ite	ge
 800cc3c:	f04f 0900 	movge.w	r9, #0
 800cc40:	f04f 0901 	movlt.w	r9, #1
 800cc44:	2b05      	cmp	r3, #5
 800cc46:	d804      	bhi.n	800cc52 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x3a>
 800cc48:	e8df f003 	tbb	[pc, r3]
 800cc4c:	470e0854 	.word	0x470e0854
 800cc50:	4c4c      	.short	0x4c4c
 800cc52:	2500      	movs	r5, #0
 800cc54:	46a9      	mov	r9, r5
 800cc56:	462e      	mov	r6, r5
 800cc58:	462f      	mov	r7, r5
 800cc5a:	e00d      	b.n	800cc78 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 800cc5c:	42b7      	cmp	r7, r6
 800cc5e:	bfb4      	ite	lt
 800cc60:	2600      	movlt	r6, #0
 800cc62:	2601      	movge	r6, #1
 800cc64:	2500      	movs	r5, #0
 800cc66:	e7f7      	b.n	800cc58 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x40>
 800cc68:	42b7      	cmp	r7, r6
 800cc6a:	464d      	mov	r5, r9
 800cc6c:	f04f 0900 	mov.w	r9, #0
 800cc70:	bfb4      	ite	lt
 800cc72:	2600      	movlt	r6, #0
 800cc74:	2601      	movge	r6, #1
 800cc76:	464f      	mov	r7, r9
 800cc78:	f04f 0800 	mov.w	r8, #0
 800cc7c:	f8a4 8016 	strh.w	r8, [r4, #22]
 800cc80:	f8a4 8018 	strh.w	r8, [r4, #24]
 800cc84:	f8cd 8004 	str.w	r8, [sp, #4]
 800cc88:	2300      	movs	r3, #0
 800cc8a:	9303      	str	r3, [sp, #12]
 800cc8c:	8823      	ldrh	r3, [r4, #0]
 800cc8e:	2b20      	cmp	r3, #32
 800cc90:	d034      	beq.n	800ccfc <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xe4>
 800cc92:	f242 010b 	movw	r1, #8203	@ 0x200b
 800cc96:	1a5a      	subs	r2, r3, r1
 800cc98:	f1d2 0a00 	rsbs	sl, r2, #0
 800cc9c:	eb4a 0a02 	adc.w	sl, sl, r2
 800cca0:	f64f 62ff 	movw	r2, #65279	@ 0xfeff
 800cca4:	4293      	cmp	r3, r2
 800cca6:	d009      	beq.n	800ccbc <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa4>
 800cca8:	428b      	cmp	r3, r1
 800ccaa:	9a01      	ldr	r2, [sp, #4]
 800ccac:	bf18      	it	ne
 800ccae:	461a      	movne	r2, r3
 800ccb0:	9201      	str	r2, [sp, #4]
 800ccb2:	bf0c      	ite	eq
 800ccb4:	f04f 0a01 	moveq.w	sl, #1
 800ccb8:	f04f 0a00 	movne.w	sl, #0
 800ccbc:	ab03      	add	r3, sp, #12
 800ccbe:	68e2      	ldr	r2, [r4, #12]
 800ccc0:	7a21      	ldrb	r1, [r4, #8]
 800ccc2:	6860      	ldr	r0, [r4, #4]
 800ccc4:	f003 f9ba 	bl	801003c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800ccc8:	8020      	strh	r0, [r4, #0]
 800ccca:	b9d8      	cbnz	r0, 800cd04 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xec>
 800cccc:	8ba2      	ldrh	r2, [r4, #28]
 800ccce:	2300      	movs	r3, #0
 800ccd0:	4611      	mov	r1, r2
 800ccd2:	4620      	mov	r0, r4
 800ccd4:	f7ff ff90 	bl	800cbf8 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 800ccd8:	e06e      	b.n	800cdb8 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1a0>
 800ccda:	2500      	movs	r5, #0
 800ccdc:	46a9      	mov	r9, r5
 800ccde:	462e      	mov	r6, r5
 800cce0:	2701      	movs	r7, #1
 800cce2:	e7c9      	b.n	800cc78 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 800cce4:	42b7      	cmp	r7, r6
 800cce6:	f04f 0500 	mov.w	r5, #0
 800ccea:	bfb4      	ite	lt
 800ccec:	2700      	movlt	r7, #0
 800ccee:	2701      	movge	r7, #1
 800ccf0:	462e      	mov	r6, r5
 800ccf2:	e7c1      	b.n	800cc78 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 800ccf4:	2500      	movs	r5, #0
 800ccf6:	46a9      	mov	r9, r5
 800ccf8:	2601      	movs	r6, #1
 800ccfa:	e7ad      	b.n	800cc58 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x40>
 800ccfc:	9301      	str	r3, [sp, #4]
 800ccfe:	f04f 0a01 	mov.w	sl, #1
 800cd02:	e7db      	b.n	800ccbc <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa4>
 800cd04:	8b63      	ldrh	r3, [r4, #26]
 800cd06:	280a      	cmp	r0, #10
 800cd08:	f103 0301 	add.w	r3, r3, #1
 800cd0c:	8363      	strh	r3, [r4, #26]
 800cd0e:	d0dd      	beq.n	800cccc <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb4>
 800cd10:	9a03      	ldr	r2, [sp, #12]
 800cd12:	bb62      	cbnz	r2, 800cd6e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x156>
 800cd14:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 800cd18:	4298      	cmp	r0, r3
 800cd1a:	d003      	beq.n	800cd24 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10c>
 800cd1c:	f242 030b 	movw	r3, #8203	@ 0x200b
 800cd20:	4298      	cmp	r0, r3
 800cd22:	d1b1      	bne.n	800cc88 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 800cd24:	8823      	ldrh	r3, [r4, #0]
 800cd26:	8ba1      	ldrh	r1, [r4, #28]
 800cd28:	2b20      	cmp	r3, #32
 800cd2a:	d003      	beq.n	800cd34 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x11c>
 800cd2c:	f242 000b 	movw	r0, #8203	@ 0x200b
 800cd30:	4283      	cmp	r3, r0
 800cd32:	d131      	bne.n	800cd98 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x180>
 800cd34:	f1ba 0f00 	cmp.w	sl, #0
 800cd38:	bf0a      	itet	eq
 800cd3a:	4688      	moveq	r8, r1
 800cd3c:	4650      	movne	r0, sl
 800cd3e:	2001      	moveq	r0, #1
 800cd40:	440a      	add	r2, r1
 800cd42:	8b23      	ldrh	r3, [r4, #24]
 800cd44:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 800cd48:	b292      	uxth	r2, r2
 800cd4a:	83a2      	strh	r2, [r4, #28]
 800cd4c:	4413      	add	r3, r2
 800cd4e:	f1b9 0f00 	cmp.w	r9, #0
 800cd52:	d102      	bne.n	800cd5a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x142>
 800cd54:	2d00      	cmp	r5, #0
 800cd56:	d042      	beq.n	800cdde <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1c6>
 800cd58:	b300      	cbz	r0, 800cd9c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x184>
 800cd5a:	8c21      	ldrh	r1, [r4, #32]
 800cd5c:	4419      	add	r1, r3
 800cd5e:	458c      	cmp	ip, r1
 800cd60:	da37      	bge.n	800cdd2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1ba>
 800cd62:	8ae1      	ldrh	r1, [r4, #22]
 800cd64:	2900      	cmp	r1, #0
 800cd66:	d034      	beq.n	800cdd2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1ba>
 800cd68:	4563      	cmp	r3, ip
 800cd6a:	dd8d      	ble.n	800cc88 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 800cd6c:	e01d      	b.n	800cdaa <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x192>
 800cd6e:	8893      	ldrh	r3, [r2, #4]
 800cd70:	8023      	strh	r3, [r4, #0]
 800cd72:	f892 b00d 	ldrb.w	fp, [r2, #13]
 800cd76:	9901      	ldr	r1, [sp, #4]
 800cd78:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
 800cd7c:	f40b 7080 	and.w	r0, fp, #256	@ 0x100
 800cd80:	f892 b00a 	ldrb.w	fp, [r2, #10]
 800cd84:	ea4b 0b00 	orr.w	fp, fp, r0
 800cd88:	68e0      	ldr	r0, [r4, #12]
 800cd8a:	6803      	ldr	r3, [r0, #0]
 800cd8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cd8e:	4798      	blx	r3
 800cd90:	eb0b 0200 	add.w	r2, fp, r0
 800cd94:	b292      	uxth	r2, r2
 800cd96:	e7c5      	b.n	800cd24 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10c>
 800cd98:	2000      	movs	r0, #0
 800cd9a:	e7d1      	b.n	800cd40 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x128>
 800cd9c:	4563      	cmp	r3, ip
 800cd9e:	f77f af73 	ble.w	800cc88 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 800cda2:	8ae3      	ldrh	r3, [r4, #22]
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	f43f af6f 	beq.w	800cc88 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 800cdaa:	2301      	movs	r3, #1
 800cdac:	f884 3022 	strb.w	r3, [r4, #34]	@ 0x22
 800cdb0:	8c22      	ldrh	r2, [r4, #32]
 800cdb2:	8be3      	ldrh	r3, [r4, #30]
 800cdb4:	4413      	add	r3, r2
 800cdb6:	83e3      	strh	r3, [r4, #30]
 800cdb8:	68e0      	ldr	r0, [r4, #12]
 800cdba:	6803      	ldr	r3, [r0, #0]
 800cdbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cdbe:	4798      	blx	r3
 800cdc0:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 800cdc4:	4418      	add	r0, r3
 800cdc6:	8a63      	ldrh	r3, [r4, #18]
 800cdc8:	1a18      	subs	r0, r3, r0
 800cdca:	8260      	strh	r0, [r4, #18]
 800cdcc:	b005      	add	sp, #20
 800cdce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cdd2:	2300      	movs	r3, #0
 800cdd4:	4611      	mov	r1, r2
 800cdd6:	4620      	mov	r0, r4
 800cdd8:	f7ff ff0e 	bl	800cbf8 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 800cddc:	e754      	b.n	800cc88 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 800cdde:	4563      	cmp	r3, ip
 800cde0:	dd14      	ble.n	800ce0c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1f4>
 800cde2:	b117      	cbz	r7, 800cdea <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1d2>
 800cde4:	2301      	movs	r3, #1
 800cde6:	460a      	mov	r2, r1
 800cde8:	e772      	b.n	800ccd0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb8>
 800cdea:	2e00      	cmp	r6, #0
 800cdec:	f43f af4c 	beq.w	800cc88 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 800cdf0:	2800      	cmp	r0, #0
 800cdf2:	f47f af49 	bne.w	800cc88 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 800cdf6:	f1ba 0f00 	cmp.w	sl, #0
 800cdfa:	d002      	beq.n	800ce02 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1ea>
 800cdfc:	2301      	movs	r3, #1
 800cdfe:	4642      	mov	r2, r8
 800ce00:	e767      	b.n	800ccd2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xba>
 800ce02:	8ae3      	ldrh	r3, [r4, #22]
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	f43f af3f 	beq.w	800cc88 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 800ce0a:	e7d5      	b.n	800cdb8 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1a0>
 800ce0c:	2800      	cmp	r0, #0
 800ce0e:	f47f af3b 	bne.w	800cc88 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 800ce12:	f1ba 0f00 	cmp.w	sl, #0
 800ce16:	f43f af37 	beq.w	800cc88 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 800ce1a:	2301      	movs	r3, #1
 800ce1c:	4642      	mov	r2, r8
 800ce1e:	e7da      	b.n	800cdd6 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1be>

0800ce20 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 800ce20:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ce22:	4605      	mov	r5, r0
 800ce24:	b08f      	sub	sp, #60	@ 0x3c
 800ce26:	4617      	mov	r7, r2
 800ce28:	461c      	mov	r4, r3
 800ce2a:	460e      	mov	r6, r1
 800ce2c:	b1d1      	cbz	r1, 800ce64 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x44>
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	4620      	mov	r0, r4
 800ce32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ce34:	4798      	blx	r3
 800ce36:	4240      	negs	r0, r0
 800ce38:	b200      	sxth	r0, r0
 800ce3a:	e9cd 4001 	strd	r4, r0, [sp, #4]
 800ce3e:	9603      	str	r6, [sp, #12]
 800ce40:	9700      	str	r7, [sp, #0]
 800ce42:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800ce46:	f8bd 2050 	ldrh.w	r2, [sp, #80]	@ 0x50
 800ce4a:	4629      	mov	r1, r5
 800ce4c:	a805      	add	r0, sp, #20
 800ce4e:	f7ff f8cf 	bl	800bff0 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
 800ce52:	2401      	movs	r4, #1
 800ce54:	a805      	add	r0, sp, #20
 800ce56:	f7ff fedf 	bl	800cc18 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 800ce5a:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 800ce5e:	b163      	cbz	r3, 800ce7a <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x5a>
 800ce60:	3401      	adds	r4, #1
 800ce62:	e7f7      	b.n	800ce54 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x34>
 800ce64:	f003 f9b8 	bl	80101d8 <_ZN8touchgfx12TextProvider11getNextCharEv>
 800ce68:	2401      	movs	r4, #1
 800ce6a:	280a      	cmp	r0, #10
 800ce6c:	4628      	mov	r0, r5
 800ce6e:	bf08      	it	eq
 800ce70:	3401      	addeq	r4, #1
 800ce72:	f003 f9b1 	bl	80101d8 <_ZN8touchgfx12TextProvider11getNextCharEv>
 800ce76:	2800      	cmp	r0, #0
 800ce78:	d1f7      	bne.n	800ce6a <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x4a>
 800ce7a:	b2a0      	uxth	r0, r4
 800ce7c:	b00f      	add	sp, #60	@ 0x3c
 800ce7e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ce80 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 800ce80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce84:	b0e7      	sub	sp, #412	@ 0x19c
 800ce86:	468a      	mov	sl, r1
 800ce88:	f8dd 91c0 	ldr.w	r9, [sp, #448]	@ 0x1c0
 800ce8c:	9006      	str	r0, [sp, #24]
 800ce8e:	461c      	mov	r4, r3
 800ce90:	f1b9 0f00 	cmp.w	r9, #0
 800ce94:	f000 80c6 	beq.w	800d024 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a4>
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	f000 80c2 	beq.w	800d024 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a4>
 800cea0:	7ba3      	ldrb	r3, [r4, #14]
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	f000 80be 	beq.w	800d024 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a4>
 800cea8:	6810      	ldr	r0, [r2, #0]
 800ceaa:	6851      	ldr	r1, [r2, #4]
 800ceac:	f9ba 2004 	ldrsh.w	r2, [sl, #4]
 800ceb0:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 800ceb4:	af09      	add	r7, sp, #36	@ 0x24
 800ceb6:	463b      	mov	r3, r7
 800ceb8:	c303      	stmia	r3!, {r0, r1}
 800ceba:	79a2      	ldrb	r2, [r4, #6]
 800cebc:	f9ba 3006 	ldrsh.w	r3, [sl, #6]
 800cec0:	7966      	ldrb	r6, [r4, #5]
 800cec2:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 800cec6:	a90b      	add	r1, sp, #44	@ 0x2c
 800cec8:	4638      	mov	r0, r7
 800ceca:	2500      	movs	r5, #0
 800cecc:	950b      	str	r5, [sp, #44]	@ 0x2c
 800cece:	f7ff f90e 	bl	800c0ee <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 800ced2:	a90b      	add	r1, sp, #44	@ 0x2c
 800ced4:	79a2      	ldrb	r2, [r4, #6]
 800ced6:	4608      	mov	r0, r1
 800ced8:	f7ff f909 	bl	800c0ee <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 800cedc:	2e00      	cmp	r6, #0
 800cede:	d16a      	bne.n	800cfb6 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x136>
 800cee0:	f894 8004 	ldrb.w	r8, [r4, #4]
 800cee4:	ebb8 0805 	subs.w	r8, r8, r5
 800cee8:	bf18      	it	ne
 800ceea:	f04f 0801 	movne.w	r8, #1
 800ceee:	4645      	mov	r5, r8
 800cef0:	a81b      	add	r0, sp, #108	@ 0x6c
 800cef2:	f002 f8eb 	bl	800f0cc <_ZN8touchgfx12TextProviderC1Ev>
 800cef6:	6820      	ldr	r0, [r4, #0]
 800cef8:	6803      	ldr	r3, [r0, #0]
 800cefa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cefc:	4798      	blx	r3
 800cefe:	4683      	mov	fp, r0
 800cf00:	6820      	ldr	r0, [r4, #0]
 800cf02:	6803      	ldr	r3, [r0, #0]
 800cf04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cf06:	4798      	blx	r3
 800cf08:	465b      	mov	r3, fp
 800cf0a:	9a71      	ldr	r2, [sp, #452]	@ 0x1c4
 800cf0c:	9000      	str	r0, [sp, #0]
 800cf0e:	4649      	mov	r1, r9
 800cf10:	a81b      	add	r0, sp, #108	@ 0x6c
 800cf12:	f002 f936 	bl	800f182 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800cf16:	6820      	ldr	r0, [r4, #0]
 800cf18:	6803      	ldr	r3, [r0, #0]
 800cf1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cf1c:	4798      	blx	r3
 800cf1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cf22:	4403      	add	r3, r0
 800cf24:	9305      	str	r3, [sp, #20]
 800cf26:	6823      	ldr	r3, [r4, #0]
 800cf28:	f893 b009 	ldrb.w	fp, [r3, #9]
 800cf2c:	4483      	add	fp, r0
 800cf2e:	a834      	add	r0, sp, #208	@ 0xd0
 800cf30:	f002 f8cc 	bl	800f0cc <_ZN8touchgfx12TextProviderC1Ev>
 800cf34:	7c23      	ldrb	r3, [r4, #16]
 800cf36:	b17b      	cbz	r3, 800cf58 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xd8>
 800cf38:	6820      	ldr	r0, [r4, #0]
 800cf3a:	6803      	ldr	r3, [r0, #0]
 800cf3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cf3e:	4798      	blx	r3
 800cf40:	9007      	str	r0, [sp, #28]
 800cf42:	6820      	ldr	r0, [r4, #0]
 800cf44:	6802      	ldr	r2, [r0, #0]
 800cf46:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800cf48:	4790      	blx	r2
 800cf4a:	9b07      	ldr	r3, [sp, #28]
 800cf4c:	9000      	str	r0, [sp, #0]
 800cf4e:	9a71      	ldr	r2, [sp, #452]	@ 0x1c4
 800cf50:	4649      	mov	r1, r9
 800cf52:	a834      	add	r0, sp, #208	@ 0xd0
 800cf54:	f002 f915 	bl	800f182 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800cf58:	f8bd 1030 	ldrh.w	r1, [sp, #48]	@ 0x30
 800cf5c:	7be2      	ldrb	r2, [r4, #15]
 800cf5e:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 800cf62:	1a8a      	subs	r2, r1, r2
 800cf64:	7c21      	ldrb	r1, [r4, #16]
 800cf66:	9103      	str	r1, [sp, #12]
 800cf68:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 800cf6c:	9102      	str	r1, [sp, #8]
 800cf6e:	6821      	ldr	r1, [r4, #0]
 800cf70:	9101      	str	r1, [sp, #4]
 800cf72:	7961      	ldrb	r1, [r4, #5]
 800cf74:	9100      	str	r1, [sp, #0]
 800cf76:	b292      	uxth	r2, r2
 800cf78:	a934      	add	r1, sp, #208	@ 0xd0
 800cf7a:	a812      	add	r0, sp, #72	@ 0x48
 800cf7c:	f7ff f838 	bl	800bff0 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
 800cf80:	7c23      	ldrb	r3, [r4, #16]
 800cf82:	b30b      	cbz	r3, 800cfc8 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x148>
 800cf84:	f64f 79ff 	movw	r9, #65535	@ 0xffff
 800cf88:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	@ 0x2e
 800cf8c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800cf90:	445b      	add	r3, fp
 800cf92:	4293      	cmp	r3, r2
 800cf94:	da49      	bge.n	800d02a <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1aa>
 800cf96:	a812      	add	r0, sp, #72	@ 0x48
 800cf98:	f7ff fe3e 	bl	800cc18 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 800cf9c:	f8bd 305e 	ldrh.w	r3, [sp, #94]	@ 0x5e
 800cfa0:	3b01      	subs	r3, #1
 800cfa2:	b29b      	uxth	r3, r3
 800cfa4:	454b      	cmp	r3, r9
 800cfa6:	9307      	str	r3, [sp, #28]
 800cfa8:	d029      	beq.n	800cffe <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x17e>
 800cfaa:	4631      	mov	r1, r6
 800cfac:	a81b      	add	r0, sp, #108	@ 0x6c
 800cfae:	f7f7 f94b 	bl	8004248 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 800cfb2:	9b07      	ldr	r3, [sp, #28]
 800cfb4:	e7f4      	b.n	800cfa0 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x120>
 800cfb6:	2e01      	cmp	r6, #1
 800cfb8:	d103      	bne.n	800cfc2 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x142>
 800cfba:	7925      	ldrb	r5, [r4, #4]
 800cfbc:	3d02      	subs	r5, #2
 800cfbe:	bf18      	it	ne
 800cfc0:	2501      	movne	r5, #1
 800cfc2:	f04f 0801 	mov.w	r8, #1
 800cfc6:	e793      	b.n	800cef0 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x70>
 800cfc8:	f8bd 9014 	ldrh.w	r9, [sp, #20]
 800cfcc:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	@ 0x2e
 800cfd0:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800cfd4:	445b      	add	r3, fp
 800cfd6:	4293      	cmp	r3, r2
 800cfd8:	da27      	bge.n	800d02a <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1aa>
 800cfda:	a81b      	add	r0, sp, #108	@ 0x6c
 800cfdc:	f003 f8fc 	bl	80101d8 <_ZN8touchgfx12TextProvider11getNextCharEv>
 800cfe0:	b300      	cbz	r0, 800d024 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a4>
 800cfe2:	280a      	cmp	r0, #10
 800cfe4:	d1f2      	bne.n	800cfcc <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x14c>
 800cfe6:	f8bd 302e 	ldrh.w	r3, [sp, #46]	@ 0x2e
 800cfea:	444b      	add	r3, r9
 800cfec:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 800cff0:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 800cff4:	eba3 0309 	sub.w	r3, r3, r9
 800cff8:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 800cffc:	e7e6      	b.n	800cfcc <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x14c>
 800cffe:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 800d002:	f8bd 202e 	ldrh.w	r2, [sp, #46]	@ 0x2e
 800d006:	441a      	add	r2, r3
 800d008:	f8ad 202e 	strh.w	r2, [sp, #46]	@ 0x2e
 800d00c:	f8bd 2032 	ldrh.w	r2, [sp, #50]	@ 0x32
 800d010:	1ad3      	subs	r3, r2, r3
 800d012:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 800d016:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 800d01a:	b11b      	cbz	r3, 800d024 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a4>
 800d01c:	f89d 306a 	ldrb.w	r3, [sp, #106]	@ 0x6a
 800d020:	2b00      	cmp	r3, #0
 800d022:	d0b1      	beq.n	800cf88 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x108>
 800d024:	b067      	add	sp, #412	@ 0x19c
 800d026:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d02a:	2300      	movs	r3, #0
 800d02c:	e9cd 3a0d 	strd	r3, sl, [sp, #52]	@ 0x34
 800d030:	e9cd 7410 	strd	r7, r4, [sp, #64]	@ 0x40
 800d034:	f8bd 202e 	ldrh.w	r2, [sp, #46]	@ 0x2e
 800d038:	f8ad 203c 	strh.w	r2, [sp, #60]	@ 0x3c
 800d03c:	4699      	mov	r9, r3
 800d03e:	7c23      	ldrb	r3, [r4, #16]
 800d040:	f8ad 9022 	strh.w	r9, [sp, #34]	@ 0x22
 800d044:	b113      	cbz	r3, 800d04c <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1cc>
 800d046:	a812      	add	r0, sp, #72	@ 0x48
 800d048:	f7ff fde6 	bl	800cc18 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 800d04c:	f1b8 0f00 	cmp.w	r8, #0
 800d050:	d068      	beq.n	800d124 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x2a4>
 800d052:	2d00      	cmp	r5, #0
 800d054:	d061      	beq.n	800d11a <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x29a>
 800d056:	7c23      	ldrb	r3, [r4, #16]
 800d058:	b9c3      	cbnz	r3, 800d08c <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x20c>
 800d05a:	2264      	movs	r2, #100	@ 0x64
 800d05c:	a91b      	add	r1, sp, #108	@ 0x6c
 800d05e:	a84d      	add	r0, sp, #308	@ 0x134
 800d060:	f007 fd5c 	bl	8014b1c <memcpy>
 800d064:	4633      	mov	r3, r6
 800d066:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800d06a:	6821      	ldr	r1, [r4, #0]
 800d06c:	a84d      	add	r0, sp, #308	@ 0x134
 800d06e:	f7ff f802 	bl	800c076 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 800d072:	b200      	sxth	r0, r0
 800d074:	7922      	ldrb	r2, [r4, #4]
 800d076:	2e00      	cmp	r6, #0
 800d078:	d144      	bne.n	800d104 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x284>
 800d07a:	2a01      	cmp	r2, #1
 800d07c:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 800d080:	d107      	bne.n	800d092 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x212>
 800d082:	1a1b      	subs	r3, r3, r0
 800d084:	2002      	movs	r0, #2
 800d086:	fb93 f3f0 	sdiv	r3, r3, r0
 800d08a:	e005      	b.n	800d098 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x218>
 800d08c:	f9bd 0066 	ldrsh.w	r0, [sp, #102]	@ 0x66
 800d090:	e7f0      	b.n	800d074 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1f4>
 800d092:	7be2      	ldrb	r2, [r4, #15]
 800d094:	1a9b      	subs	r3, r3, r2
 800d096:	1a1b      	subs	r3, r3, r0
 800d098:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 800d09c:	7c23      	ldrb	r3, [r4, #16]
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d042      	beq.n	800d128 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x2a8>
 800d0a2:	f8bd 205e 	ldrh.w	r2, [sp, #94]	@ 0x5e
 800d0a6:	f89d 306a 	ldrb.w	r3, [sp, #106]	@ 0x6a
 800d0aa:	9201      	str	r2, [sp, #4]
 800d0ac:	f10d 0a34 	add.w	sl, sp, #52	@ 0x34
 800d0b0:	f10d 0b6c 	add.w	fp, sp, #108	@ 0x6c
 800d0b4:	e9cd 3a02 	strd	r3, sl, [sp, #8]
 800d0b8:	6822      	ldr	r2, [r4, #0]
 800d0ba:	f8cd b000 	str.w	fp, [sp]
 800d0be:	4633      	mov	r3, r6
 800d0c0:	f10d 0122 	add.w	r1, sp, #34	@ 0x22
 800d0c4:	9806      	ldr	r0, [sp, #24]
 800d0c6:	f7ff fa29 	bl	800c51c <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE>
 800d0ca:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 800d0ce:	f8ba 3008 	ldrh.w	r3, [sl, #8]
 800d0d2:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 800d0d6:	4413      	add	r3, r2
 800d0d8:	1a8a      	subs	r2, r1, r2
 800d0da:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 800d0de:	f89d 206a 	ldrb.w	r2, [sp, #106]	@ 0x6a
 800d0e2:	b21b      	sxth	r3, r3
 800d0e4:	f8aa 3008 	strh.w	r3, [sl, #8]
 800d0e8:	2a00      	cmp	r2, #0
 800d0ea:	d19b      	bne.n	800d024 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a4>
 800d0ec:	88fa      	ldrh	r2, [r7, #6]
 800d0ee:	8879      	ldrh	r1, [r7, #2]
 800d0f0:	440a      	add	r2, r1
 800d0f2:	b212      	sxth	r2, r2
 800d0f4:	4293      	cmp	r3, r2
 800d0f6:	dc95      	bgt.n	800d024 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a4>
 800d0f8:	4658      	mov	r0, fp
 800d0fa:	f002 f80e 	bl	800f11a <_ZN8touchgfx12TextProvider11endOfStringEv>
 800d0fe:	2800      	cmp	r0, #0
 800d100:	d09d      	beq.n	800d03e <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1be>
 800d102:	e78f      	b.n	800d024 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a4>
 800d104:	2a01      	cmp	r2, #1
 800d106:	d103      	bne.n	800d110 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x290>
 800d108:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 800d10c:	4403      	add	r3, r0
 800d10e:	e7b9      	b.n	800d084 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x204>
 800d110:	2a00      	cmp	r2, #0
 800d112:	d1c3      	bne.n	800d09c <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x21c>
 800d114:	7be3      	ldrb	r3, [r4, #15]
 800d116:	4403      	add	r3, r0
 800d118:	e7be      	b.n	800d098 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x218>
 800d11a:	7be2      	ldrb	r2, [r4, #15]
 800d11c:	f8bd 3030 	ldrh.w	r3, [sp, #48]	@ 0x30
 800d120:	1a9b      	subs	r3, r3, r2
 800d122:	e7b9      	b.n	800d098 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x218>
 800d124:	7be3      	ldrb	r3, [r4, #15]
 800d126:	e7b7      	b.n	800d098 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x218>
 800d128:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800d12c:	e7bd      	b.n	800d0aa <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x22a>

0800d12e <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 800d12e:	2b03      	cmp	r3, #3
 800d130:	d818      	bhi.n	800d164 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
 800d132:	e8df f003 	tbb	[pc, r3]
 800d136:	0602      	.short	0x0602
 800d138:	130d      	.short	0x130d
 800d13a:	f9b0 2000 	ldrsh.w	r2, [r0]
 800d13e:	1850      	adds	r0, r2, r1
 800d140:	4770      	bx	lr
 800d142:	8803      	ldrh	r3, [r0, #0]
 800d144:	8880      	ldrh	r0, [r0, #4]
 800d146:	4418      	add	r0, r3
 800d148:	b200      	sxth	r0, r0
 800d14a:	1a80      	subs	r0, r0, r2
 800d14c:	3801      	subs	r0, #1
 800d14e:	4770      	bx	lr
 800d150:	8803      	ldrh	r3, [r0, #0]
 800d152:	8880      	ldrh	r0, [r0, #4]
 800d154:	4418      	add	r0, r3
 800d156:	b200      	sxth	r0, r0
 800d158:	1a40      	subs	r0, r0, r1
 800d15a:	e7f7      	b.n	800d14c <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 800d15c:	f9b0 0000 	ldrsh.w	r0, [r0]
 800d160:	4410      	add	r0, r2
 800d162:	4770      	bx	lr
 800d164:	2000      	movs	r0, #0
 800d166:	4770      	bx	lr

0800d168 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 800d168:	2b03      	cmp	r3, #3
 800d16a:	d817      	bhi.n	800d19c <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
 800d16c:	e8df f003 	tbb	[pc, r3]
 800d170:	10090602 	.word	0x10090602
 800d174:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 800d178:	1850      	adds	r0, r2, r1
 800d17a:	4770      	bx	lr
 800d17c:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800d180:	e7fa      	b.n	800d178 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
 800d182:	8843      	ldrh	r3, [r0, #2]
 800d184:	88c0      	ldrh	r0, [r0, #6]
 800d186:	4418      	add	r0, r3
 800d188:	b200      	sxth	r0, r0
 800d18a:	1a80      	subs	r0, r0, r2
 800d18c:	3801      	subs	r0, #1
 800d18e:	4770      	bx	lr
 800d190:	8843      	ldrh	r3, [r0, #2]
 800d192:	88c0      	ldrh	r0, [r0, #6]
 800d194:	4418      	add	r0, r3
 800d196:	b200      	sxth	r0, r0
 800d198:	1a40      	subs	r0, r0, r1
 800d19a:	e7f7      	b.n	800d18c <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 800d19c:	2000      	movs	r0, #0
 800d19e:	4770      	bx	lr

0800d1a0 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 800d1a0:	4b01      	ldr	r3, [pc, #4]	@ (800d1a8 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 800d1a2:	2200      	movs	r2, #0
 800d1a4:	601a      	str	r2, [r3, #0]
 800d1a6:	4770      	bx	lr
 800d1a8:	20014f5c 	.word	0x20014f5c

0800d1ac <_ZN8touchgfx16TouchCalibration4clzuEm>:
 800d1ac:	4603      	mov	r3, r0
 800d1ae:	b1c8      	cbz	r0, 800d1e4 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 800d1b0:	0c02      	lsrs	r2, r0, #16
 800d1b2:	0412      	lsls	r2, r2, #16
 800d1b4:	b9a2      	cbnz	r2, 800d1e0 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 800d1b6:	0403      	lsls	r3, r0, #16
 800d1b8:	2010      	movs	r0, #16
 800d1ba:	f013 4f7f 	tst.w	r3, #4278190080	@ 0xff000000
 800d1be:	bf04      	itt	eq
 800d1c0:	021b      	lsleq	r3, r3, #8
 800d1c2:	3008      	addeq	r0, #8
 800d1c4:	f013 4f70 	tst.w	r3, #4026531840	@ 0xf0000000
 800d1c8:	bf04      	itt	eq
 800d1ca:	011b      	lsleq	r3, r3, #4
 800d1cc:	3004      	addeq	r0, #4
 800d1ce:	f013 4f40 	tst.w	r3, #3221225472	@ 0xc0000000
 800d1d2:	bf04      	itt	eq
 800d1d4:	009b      	lsleq	r3, r3, #2
 800d1d6:	3002      	addeq	r0, #2
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	db04      	blt.n	800d1e6 <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 800d1dc:	3001      	adds	r0, #1
 800d1de:	4770      	bx	lr
 800d1e0:	2000      	movs	r0, #0
 800d1e2:	e7ea      	b.n	800d1ba <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 800d1e4:	2020      	movs	r0, #32
 800d1e6:	4770      	bx	lr

0800d1e8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 800d1e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1ec:	b087      	sub	sp, #28
 800d1ee:	460d      	mov	r5, r1
 800d1f0:	4616      	mov	r6, r2
 800d1f2:	4698      	mov	r8, r3
 800d1f4:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	@ 0x40
 800d1f8:	4601      	mov	r1, r0
 800d1fa:	b120      	cbz	r0, 800d206 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 800d1fc:	b11a      	cbz	r2, 800d206 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 800d1fe:	2d1f      	cmp	r5, #31
 800d200:	d801      	bhi.n	800d206 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 800d202:	2b1f      	cmp	r3, #31
 800d204:	d904      	bls.n	800d210 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x28>
 800d206:	2000      	movs	r0, #0
 800d208:	6038      	str	r0, [r7, #0]
 800d20a:	b007      	add	sp, #28
 800d20c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d210:	b97d      	cbnz	r5, 800d232 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4a>
 800d212:	b143      	cbz	r3, 800d226 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x3e>
 800d214:	4602      	mov	r2, r0
 800d216:	e9cd 4700 	strd	r4, r7, [sp]
 800d21a:	462b      	mov	r3, r5
 800d21c:	4641      	mov	r1, r8
 800d21e:	4630      	mov	r0, r6
 800d220:	f7ff ffe2 	bl	800d1e8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 800d224:	e7f1      	b.n	800d20a <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 800d226:	f04f 33ff 	mov.w	r3, #4294967295
 800d22a:	603b      	str	r3, [r7, #0]
 800d22c:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 800d230:	e7eb      	b.n	800d20a <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 800d232:	fa32 fa05 	lsrs.w	sl, r2, r5
 800d236:	d106      	bne.n	800d246 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x5e>
 800d238:	4346      	muls	r6, r0
 800d23a:	fbb6 f0f4 	udiv	r0, r6, r4
 800d23e:	fb04 6610 	mls	r6, r4, r0, r6
 800d242:	603e      	str	r6, [r7, #0]
 800d244:	e7e1      	b.n	800d20a <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 800d246:	2201      	movs	r2, #1
 800d248:	40aa      	lsls	r2, r5
 800d24a:	3a01      	subs	r2, #1
 800d24c:	4016      	ands	r6, r2
 800d24e:	fa00 fb05 	lsl.w	fp, r0, r5
 800d252:	4630      	mov	r0, r6
 800d254:	fbbb f9f4 	udiv	r9, fp, r4
 800d258:	fb0a f309 	mul.w	r3, sl, r9
 800d25c:	9303      	str	r3, [sp, #12]
 800d25e:	f7ff ffa5 	bl	800d1ac <_ZN8touchgfx16TouchCalibration4clzuEm>
 800d262:	462b      	mov	r3, r5
 800d264:	460a      	mov	r2, r1
 800d266:	e9cd 4700 	strd	r4, r7, [sp]
 800d26a:	4601      	mov	r1, r0
 800d26c:	4630      	mov	r0, r6
 800d26e:	f7ff ffbb 	bl	800d1e8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 800d272:	fb04 b919 	mls	r9, r4, r9, fp
 800d276:	4606      	mov	r6, r0
 800d278:	4648      	mov	r0, r9
 800d27a:	eb05 0108 	add.w	r1, r5, r8
 800d27e:	f7ff ff95 	bl	800d1ac <_ZN8touchgfx16TouchCalibration4clzuEm>
 800d282:	ab05      	add	r3, sp, #20
 800d284:	e9cd 4300 	strd	r4, r3, [sp]
 800d288:	464a      	mov	r2, r9
 800d28a:	4603      	mov	r3, r0
 800d28c:	4650      	mov	r0, sl
 800d28e:	f7ff ffab 	bl	800d1e8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 800d292:	6839      	ldr	r1, [r7, #0]
 800d294:	9a05      	ldr	r2, [sp, #20]
 800d296:	9b03      	ldr	r3, [sp, #12]
 800d298:	4411      	add	r1, r2
 800d29a:	fbb1 f2f4 	udiv	r2, r1, r4
 800d29e:	18d3      	adds	r3, r2, r3
 800d2a0:	441e      	add	r6, r3
 800d2a2:	fb04 1412 	mls	r4, r4, r2, r1
 800d2a6:	4430      	add	r0, r6
 800d2a8:	603c      	str	r4, [r7, #0]
 800d2aa:	e7ae      	b.n	800d20a <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>

0800d2ac <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 800d2ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d2b0:	b085      	sub	sp, #20
 800d2b2:	f1b0 0900 	subs.w	r9, r0, #0
 800d2b6:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 800d2b8:	461d      	mov	r5, r3
 800d2ba:	bfbf      	itttt	lt
 800d2bc:	6823      	ldrlt	r3, [r4, #0]
 800d2be:	425b      	neglt	r3, r3
 800d2c0:	f1c9 0900 	rsblt	r9, r9, #0
 800d2c4:	6023      	strlt	r3, [r4, #0]
 800d2c6:	bfb4      	ite	lt
 800d2c8:	f04f 36ff 	movlt.w	r6, #4294967295
 800d2cc:	2601      	movge	r6, #1
 800d2ce:	2a00      	cmp	r2, #0
 800d2d0:	4617      	mov	r7, r2
 800d2d2:	da04      	bge.n	800d2de <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 800d2d4:	6823      	ldr	r3, [r4, #0]
 800d2d6:	425b      	negs	r3, r3
 800d2d8:	4257      	negs	r7, r2
 800d2da:	4276      	negs	r6, r6
 800d2dc:	6023      	str	r3, [r4, #0]
 800d2de:	2d00      	cmp	r5, #0
 800d2e0:	4638      	mov	r0, r7
 800d2e2:	bfba      	itte	lt
 800d2e4:	426d      	neglt	r5, r5
 800d2e6:	f04f 38ff 	movlt.w	r8, #4294967295
 800d2ea:	f04f 0801 	movge.w	r8, #1
 800d2ee:	f7ff ff5d 	bl	800d1ac <_ZN8touchgfx16TouchCalibration4clzuEm>
 800d2f2:	ab03      	add	r3, sp, #12
 800d2f4:	e9cd 5300 	strd	r5, r3, [sp]
 800d2f8:	463a      	mov	r2, r7
 800d2fa:	4603      	mov	r3, r0
 800d2fc:	4648      	mov	r0, r9
 800d2fe:	f7ff ff73 	bl	800d1e8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 800d302:	6823      	ldr	r3, [r4, #0]
 800d304:	9a03      	ldr	r2, [sp, #12]
 800d306:	4546      	cmp	r6, r8
 800d308:	441a      	add	r2, r3
 800d30a:	fb92 f3f5 	sdiv	r3, r2, r5
 800d30e:	4418      	add	r0, r3
 800d310:	bf18      	it	ne
 800d312:	4240      	negne	r0, r0
 800d314:	fb05 2313 	mls	r3, r5, r3, r2
 800d318:	1c72      	adds	r2, r6, #1
 800d31a:	6023      	str	r3, [r4, #0]
 800d31c:	d105      	bne.n	800d32a <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 800d31e:	2b00      	cmp	r3, #0
 800d320:	f1c3 0200 	rsb	r2, r3, #0
 800d324:	db0b      	blt.n	800d33e <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 800d326:	6022      	str	r2, [r4, #0]
 800d328:	e006      	b.n	800d338 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 800d32a:	2e01      	cmp	r6, #1
 800d32c:	d104      	bne.n	800d338 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 800d32e:	2b00      	cmp	r3, #0
 800d330:	da02      	bge.n	800d338 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 800d332:	442b      	add	r3, r5
 800d334:	3801      	subs	r0, #1
 800d336:	6023      	str	r3, [r4, #0]
 800d338:	b005      	add	sp, #20
 800d33a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d33e:	3801      	subs	r0, #1
 800d340:	1b52      	subs	r2, r2, r5
 800d342:	e7f0      	b.n	800d326 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>

0800d344 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 800d344:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800d348:	4c1c      	ldr	r4, [pc, #112]	@ (800d3bc <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 800d34a:	6807      	ldr	r7, [r0, #0]
 800d34c:	69a3      	ldr	r3, [r4, #24]
 800d34e:	4605      	mov	r5, r0
 800d350:	b92b      	cbnz	r3, 800d35e <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 800d352:	6840      	ldr	r0, [r0, #4]
 800d354:	e9c5 7000 	strd	r7, r0, [r5]
 800d358:	b004      	add	sp, #16
 800d35a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d35e:	68a2      	ldr	r2, [r4, #8]
 800d360:	6820      	ldr	r0, [r4, #0]
 800d362:	ae04      	add	r6, sp, #16
 800d364:	f04f 0802 	mov.w	r8, #2
 800d368:	fb93 f1f8 	sdiv	r1, r3, r8
 800d36c:	440a      	add	r2, r1
 800d36e:	f846 2d04 	str.w	r2, [r6, #-4]!
 800d372:	69e1      	ldr	r1, [r4, #28]
 800d374:	9600      	str	r6, [sp, #0]
 800d376:	463a      	mov	r2, r7
 800d378:	f7ff ff98 	bl	800d2ac <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 800d37c:	69a3      	ldr	r3, [r4, #24]
 800d37e:	686a      	ldr	r2, [r5, #4]
 800d380:	6a21      	ldr	r1, [r4, #32]
 800d382:	9600      	str	r6, [sp, #0]
 800d384:	4607      	mov	r7, r0
 800d386:	6860      	ldr	r0, [r4, #4]
 800d388:	f7ff ff90 	bl	800d2ac <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 800d38c:	6962      	ldr	r2, [r4, #20]
 800d38e:	69a3      	ldr	r3, [r4, #24]
 800d390:	fb93 f8f8 	sdiv	r8, r3, r8
 800d394:	4442      	add	r2, r8
 800d396:	9203      	str	r2, [sp, #12]
 800d398:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800d39a:	682a      	ldr	r2, [r5, #0]
 800d39c:	9600      	str	r6, [sp, #0]
 800d39e:	4407      	add	r7, r0
 800d3a0:	68e0      	ldr	r0, [r4, #12]
 800d3a2:	f7ff ff83 	bl	800d2ac <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 800d3a6:	9600      	str	r6, [sp, #0]
 800d3a8:	4680      	mov	r8, r0
 800d3aa:	69a3      	ldr	r3, [r4, #24]
 800d3ac:	686a      	ldr	r2, [r5, #4]
 800d3ae:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800d3b0:	6920      	ldr	r0, [r4, #16]
 800d3b2:	f7ff ff7b 	bl	800d2ac <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 800d3b6:	4440      	add	r0, r8
 800d3b8:	e7cc      	b.n	800d354 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 800d3ba:	bf00      	nop
 800d3bc:	20014f60 	.word	0x20014f60

0800d3c0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 800d3c0:	4b07      	ldr	r3, [pc, #28]	@ (800d3e0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 800d3c2:	781b      	ldrb	r3, [r3, #0]
 800d3c4:	2b01      	cmp	r3, #1
 800d3c6:	d109      	bne.n	800d3dc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 800d3c8:	f9b1 3000 	ldrsh.w	r3, [r1]
 800d3cc:	f9b0 2000 	ldrsh.w	r2, [r0]
 800d3d0:	8003      	strh	r3, [r0, #0]
 800d3d2:	4b04      	ldr	r3, [pc, #16]	@ (800d3e4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 800d3d4:	881b      	ldrh	r3, [r3, #0]
 800d3d6:	3b01      	subs	r3, #1
 800d3d8:	1a9b      	subs	r3, r3, r2
 800d3da:	800b      	strh	r3, [r1, #0]
 800d3dc:	4770      	bx	lr
 800d3de:	bf00      	nop
 800d3e0:	20014f4c 	.word	0x20014f4c
 800d3e4:	20014f48 	.word	0x20014f48

0800d3e8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 800d3e8:	b510      	push	{r4, lr}
 800d3ea:	4b07      	ldr	r3, [pc, #28]	@ (800d408 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 800d3ec:	781b      	ldrb	r3, [r3, #0]
 800d3ee:	2b01      	cmp	r3, #1
 800d3f0:	d108      	bne.n	800d404 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 800d3f2:	4b06      	ldr	r3, [pc, #24]	@ (800d40c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 800d3f4:	880c      	ldrh	r4, [r1, #0]
 800d3f6:	881b      	ldrh	r3, [r3, #0]
 800d3f8:	f9b0 2000 	ldrsh.w	r2, [r0]
 800d3fc:	3b01      	subs	r3, #1
 800d3fe:	1b1b      	subs	r3, r3, r4
 800d400:	8003      	strh	r3, [r0, #0]
 800d402:	800a      	strh	r2, [r1, #0]
 800d404:	bd10      	pop	{r4, pc}
 800d406:	bf00      	nop
 800d408:	20014f4c 	.word	0x20014f4c
 800d40c:	20014f48 	.word	0x20014f48

0800d410 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 800d410:	b510      	push	{r4, lr}
 800d412:	4b0a      	ldr	r3, [pc, #40]	@ (800d43c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 800d414:	781b      	ldrb	r3, [r3, #0]
 800d416:	2b01      	cmp	r3, #1
 800d418:	d10e      	bne.n	800d438 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 800d41a:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 800d41e:	8843      	ldrh	r3, [r0, #2]
 800d420:	f9b0 4000 	ldrsh.w	r4, [r0]
 800d424:	8044      	strh	r4, [r0, #2]
 800d426:	18ca      	adds	r2, r1, r3
 800d428:	4b05      	ldr	r3, [pc, #20]	@ (800d440 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 800d42a:	881b      	ldrh	r3, [r3, #0]
 800d42c:	1a9b      	subs	r3, r3, r2
 800d42e:	8003      	strh	r3, [r0, #0]
 800d430:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800d434:	80c3      	strh	r3, [r0, #6]
 800d436:	8081      	strh	r1, [r0, #4]
 800d438:	bd10      	pop	{r4, pc}
 800d43a:	bf00      	nop
 800d43c:	20014f4c 	.word	0x20014f4c
 800d440:	20014f48 	.word	0x20014f48

0800d444 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 800d444:	4b08      	ldr	r3, [pc, #32]	@ (800d468 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 800d446:	781b      	ldrb	r3, [r3, #0]
 800d448:	2b01      	cmp	r3, #1
 800d44a:	d10c      	bne.n	800d466 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 800d44c:	8803      	ldrh	r3, [r0, #0]
 800d44e:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 800d452:	8842      	ldrh	r2, [r0, #2]
 800d454:	8002      	strh	r2, [r0, #0]
 800d456:	185a      	adds	r2, r3, r1
 800d458:	4b04      	ldr	r3, [pc, #16]	@ (800d46c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 800d45a:	881b      	ldrh	r3, [r3, #0]
 800d45c:	1a9b      	subs	r3, r3, r2
 800d45e:	8043      	strh	r3, [r0, #2]
 800d460:	88c3      	ldrh	r3, [r0, #6]
 800d462:	8083      	strh	r3, [r0, #4]
 800d464:	80c1      	strh	r1, [r0, #6]
 800d466:	4770      	bx	lr
 800d468:	20014f4c 	.word	0x20014f4c
 800d46c:	20014f48 	.word	0x20014f48

0800d470 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 800d470:	b510      	push	{r4, lr}
 800d472:	4b07      	ldr	r3, [pc, #28]	@ (800d490 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 800d474:	781b      	ldrb	r3, [r3, #0]
 800d476:	2b01      	cmp	r3, #1
 800d478:	d108      	bne.n	800d48c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 800d47a:	f9b1 3000 	ldrsh.w	r3, [r1]
 800d47e:	f9b0 4000 	ldrsh.w	r4, [r0]
 800d482:	8003      	strh	r3, [r0, #0]
 800d484:	8893      	ldrh	r3, [r2, #4]
 800d486:	3b01      	subs	r3, #1
 800d488:	1b1b      	subs	r3, r3, r4
 800d48a:	800b      	strh	r3, [r1, #0]
 800d48c:	bd10      	pop	{r4, pc}
 800d48e:	bf00      	nop
 800d490:	20014f4c 	.word	0x20014f4c

0800d494 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 800d494:	b510      	push	{r4, lr}
 800d496:	4b0a      	ldr	r3, [pc, #40]	@ (800d4c0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 800d498:	781b      	ldrb	r3, [r3, #0]
 800d49a:	2b01      	cmp	r3, #1
 800d49c:	460a      	mov	r2, r1
 800d49e:	d10d      	bne.n	800d4bc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 800d4a0:	8881      	ldrh	r1, [r0, #4]
 800d4a2:	8803      	ldrh	r3, [r0, #0]
 800d4a4:	440b      	add	r3, r1
 800d4a6:	4601      	mov	r1, r0
 800d4a8:	3b01      	subs	r3, #1
 800d4aa:	f821 3b02 	strh.w	r3, [r1], #2
 800d4ae:	f7ff ffdf 	bl	800d470 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 800d4b2:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800d4b6:	88c2      	ldrh	r2, [r0, #6]
 800d4b8:	8082      	strh	r2, [r0, #4]
 800d4ba:	80c3      	strh	r3, [r0, #6]
 800d4bc:	bd10      	pop	{r4, pc}
 800d4be:	bf00      	nop
 800d4c0:	20014f4c 	.word	0x20014f4c

0800d4c4 <_ZN8touchgfx11Application13requestRedrawEv>:
 800d4c4:	4b06      	ldr	r3, [pc, #24]	@ (800d4e0 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 800d4c6:	f9b3 2000 	ldrsh.w	r2, [r3]
 800d4ca:	4b06      	ldr	r3, [pc, #24]	@ (800d4e4 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 800d4cc:	f8a0 2134 	strh.w	r2, [r0, #308]	@ 0x134
 800d4d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d4d4:	f8a0 3136 	strh.w	r3, [r0, #310]	@ 0x136
 800d4d8:	2100      	movs	r1, #0
 800d4da:	f8c0 1130 	str.w	r1, [r0, #304]	@ 0x130
 800d4de:	4770      	bx	lr
 800d4e0:	20014f48 	.word	0x20014f48
 800d4e4:	20014f4a 	.word	0x20014f4a

0800d4e8 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 800d4e8:	4b03      	ldr	r3, [pc, #12]	@ (800d4f8 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 800d4ea:	6818      	ldr	r0, [r3, #0]
 800d4ec:	b110      	cbz	r0, 800d4f4 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 800d4ee:	6803      	ldr	r3, [r0, #0]
 800d4f0:	699b      	ldr	r3, [r3, #24]
 800d4f2:	4718      	bx	r3
 800d4f4:	4770      	bx	lr
 800d4f6:	bf00      	nop
 800d4f8:	20014f90 	.word	0x20014f90

0800d4fc <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 800d4fc:	4770      	bx	lr
	...

0800d500 <_ZN8touchgfx11Application4drawEv>:
 800d500:	b507      	push	{r0, r1, r2, lr}
 800d502:	4b09      	ldr	r3, [pc, #36]	@ (800d528 <_ZN8touchgfx11Application4drawEv+0x28>)
 800d504:	f9b3 2000 	ldrsh.w	r2, [r3]
 800d508:	4b08      	ldr	r3, [pc, #32]	@ (800d52c <_ZN8touchgfx11Application4drawEv+0x2c>)
 800d50a:	f8ad 2004 	strh.w	r2, [sp, #4]
 800d50e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d512:	f8ad 3006 	strh.w	r3, [sp, #6]
 800d516:	6803      	ldr	r3, [r0, #0]
 800d518:	2100      	movs	r1, #0
 800d51a:	9100      	str	r1, [sp, #0]
 800d51c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d51e:	4669      	mov	r1, sp
 800d520:	4798      	blx	r3
 800d522:	b003      	add	sp, #12
 800d524:	f85d fb04 	ldr.w	pc, [sp], #4
 800d528:	20014f48 	.word	0x20014f48
 800d52c:	20014f4a 	.word	0x20014f4a

0800d530 <_ZN8touchgfx11Application10invalidateEv>:
 800d530:	4b09      	ldr	r3, [pc, #36]	@ (800d558 <_ZN8touchgfx11Application10invalidateEv+0x28>)
 800d532:	f9b3 2000 	ldrsh.w	r2, [r3]
 800d536:	4b09      	ldr	r3, [pc, #36]	@ (800d55c <_ZN8touchgfx11Application10invalidateEv+0x2c>)
 800d538:	b082      	sub	sp, #8
 800d53a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d53e:	f8ad 2004 	strh.w	r2, [sp, #4]
 800d542:	2100      	movs	r1, #0
 800d544:	f8ad 3006 	strh.w	r3, [sp, #6]
 800d548:	9100      	str	r1, [sp, #0]
 800d54a:	6803      	ldr	r3, [r0, #0]
 800d54c:	aa02      	add	r2, sp, #8
 800d54e:	e912 0006 	ldmdb	r2, {r1, r2}
 800d552:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d554:	b002      	add	sp, #8
 800d556:	4718      	bx	r3
 800d558:	20014f48 	.word	0x20014f48
 800d55c:	20014f4a 	.word	0x20014f4a

0800d560 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 800d560:	4b03      	ldr	r3, [pc, #12]	@ (800d570 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 800d562:	6818      	ldr	r0, [r3, #0]
 800d564:	b110      	cbz	r0, 800d56c <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 800d566:	6803      	ldr	r3, [r0, #0]
 800d568:	69db      	ldr	r3, [r3, #28]
 800d56a:	4718      	bx	r3
 800d56c:	4770      	bx	lr
 800d56e:	bf00      	nop
 800d570:	20014f90 	.word	0x20014f90

0800d574 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 800d574:	4b03      	ldr	r3, [pc, #12]	@ (800d584 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 800d576:	6818      	ldr	r0, [r3, #0]
 800d578:	b110      	cbz	r0, 800d580 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 800d57a:	6803      	ldr	r3, [r0, #0]
 800d57c:	6a1b      	ldr	r3, [r3, #32]
 800d57e:	4718      	bx	r3
 800d580:	4770      	bx	lr
 800d582:	bf00      	nop
 800d584:	20014f90 	.word	0x20014f90

0800d588 <_ZN8touchgfx11Application16clearCachedAreasEv>:
 800d588:	2300      	movs	r3, #0
 800d58a:	f8a0 30ec 	strh.w	r3, [r0, #236]	@ 0xec
 800d58e:	4770      	bx	lr

0800d590 <_ZN8touchgfx11Application14handleKeyEventEh>:
 800d590:	4b03      	ldr	r3, [pc, #12]	@ (800d5a0 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 800d592:	6818      	ldr	r0, [r3, #0]
 800d594:	b110      	cbz	r0, 800d59c <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 800d596:	6803      	ldr	r3, [r0, #0]
 800d598:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d59a:	4718      	bx	r3
 800d59c:	4770      	bx	lr
 800d59e:	bf00      	nop
 800d5a0:	20014f90 	.word	0x20014f90

0800d5a4 <_ZN8touchgfx11ApplicationD1Ev>:
 800d5a4:	4770      	bx	lr

0800d5a6 <_ZN8touchgfx11ApplicationD0Ev>:
 800d5a6:	b510      	push	{r4, lr}
 800d5a8:	f44f 719e 	mov.w	r1, #316	@ 0x13c
 800d5ac:	4604      	mov	r4, r0
 800d5ae:	f006 fbd2 	bl	8013d56 <_ZdlPvj>
 800d5b2:	4620      	mov	r0, r4
 800d5b4:	bd10      	pop	{r4, pc}

0800d5b6 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 800d5b6:	b510      	push	{r4, lr}
 800d5b8:	f9b1 4000 	ldrsh.w	r4, [r1]
 800d5bc:	888a      	ldrh	r2, [r1, #4]
 800d5be:	f9b0 3000 	ldrsh.w	r3, [r0]
 800d5c2:	4422      	add	r2, r4
 800d5c4:	b212      	sxth	r2, r2
 800d5c6:	4293      	cmp	r3, r2
 800d5c8:	da15      	bge.n	800d5f6 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 800d5ca:	8882      	ldrh	r2, [r0, #4]
 800d5cc:	4413      	add	r3, r2
 800d5ce:	b21b      	sxth	r3, r3
 800d5d0:	429c      	cmp	r4, r3
 800d5d2:	da10      	bge.n	800d5f6 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 800d5d4:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 800d5d8:	88c9      	ldrh	r1, [r1, #6]
 800d5da:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800d5de:	4419      	add	r1, r3
 800d5e0:	b209      	sxth	r1, r1
 800d5e2:	428a      	cmp	r2, r1
 800d5e4:	da07      	bge.n	800d5f6 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 800d5e6:	88c0      	ldrh	r0, [r0, #6]
 800d5e8:	4410      	add	r0, r2
 800d5ea:	b200      	sxth	r0, r0
 800d5ec:	4283      	cmp	r3, r0
 800d5ee:	bfac      	ite	ge
 800d5f0:	2000      	movge	r0, #0
 800d5f2:	2001      	movlt	r0, #1
 800d5f4:	bd10      	pop	{r4, pc}
 800d5f6:	2000      	movs	r0, #0
 800d5f8:	e7fc      	b.n	800d5f4 <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

0800d5fa <_ZN8touchgfx4Rect10restrictToEss>:
 800d5fa:	f9b0 3000 	ldrsh.w	r3, [r0]
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	b510      	push	{r4, lr}
 800d602:	da04      	bge.n	800d60e <_ZN8touchgfx4Rect10restrictToEss+0x14>
 800d604:	8884      	ldrh	r4, [r0, #4]
 800d606:	4423      	add	r3, r4
 800d608:	8083      	strh	r3, [r0, #4]
 800d60a:	2300      	movs	r3, #0
 800d60c:	8003      	strh	r3, [r0, #0]
 800d60e:	f9b0 4000 	ldrsh.w	r4, [r0]
 800d612:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800d616:	1b09      	subs	r1, r1, r4
 800d618:	428b      	cmp	r3, r1
 800d61a:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 800d61e:	bfc8      	it	gt
 800d620:	8081      	strhgt	r1, [r0, #4]
 800d622:	2b00      	cmp	r3, #0
 800d624:	da04      	bge.n	800d630 <_ZN8touchgfx4Rect10restrictToEss+0x36>
 800d626:	88c1      	ldrh	r1, [r0, #6]
 800d628:	440b      	add	r3, r1
 800d62a:	80c3      	strh	r3, [r0, #6]
 800d62c:	2300      	movs	r3, #0
 800d62e:	8043      	strh	r3, [r0, #2]
 800d630:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 800d634:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 800d638:	1a52      	subs	r2, r2, r1
 800d63a:	4293      	cmp	r3, r2
 800d63c:	bfc8      	it	gt
 800d63e:	80c2      	strhgt	r2, [r0, #6]
 800d640:	bd10      	pop	{r4, pc}
	...

0800d644 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 800d644:	b510      	push	{r4, lr}
 800d646:	4b10      	ldr	r3, [pc, #64]	@ (800d688 <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
 800d648:	f9b3 2000 	ldrsh.w	r2, [r3]
 800d64c:	4b0f      	ldr	r3, [pc, #60]	@ (800d68c <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
 800d64e:	460c      	mov	r4, r1
 800d650:	4620      	mov	r0, r4
 800d652:	f9b3 1000 	ldrsh.w	r1, [r3]
 800d656:	f7ff ffd0 	bl	800d5fa <_ZN8touchgfx4Rect10restrictToEss>
 800d65a:	4b0d      	ldr	r3, [pc, #52]	@ (800d690 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
 800d65c:	6818      	ldr	r0, [r3, #0]
 800d65e:	b190      	cbz	r0, 800d686 <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
 800d660:	6803      	ldr	r3, [r0, #0]
 800d662:	4621      	mov	r1, r4
 800d664:	689b      	ldr	r3, [r3, #8]
 800d666:	4798      	blx	r3
 800d668:	4b0a      	ldr	r3, [pc, #40]	@ (800d694 <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
 800d66a:	6818      	ldr	r0, [r3, #0]
 800d66c:	b118      	cbz	r0, 800d676 <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
 800d66e:	6803      	ldr	r3, [r0, #0]
 800d670:	4621      	mov	r1, r4
 800d672:	689b      	ldr	r3, [r3, #8]
 800d674:	4798      	blx	r3
 800d676:	4b08      	ldr	r3, [pc, #32]	@ (800d698 <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
 800d678:	6818      	ldr	r0, [r3, #0]
 800d67a:	6803      	ldr	r3, [r0, #0]
 800d67c:	4621      	mov	r1, r4
 800d67e:	69db      	ldr	r3, [r3, #28]
 800d680:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d684:	4718      	bx	r3
 800d686:	bd10      	pop	{r4, pc}
 800d688:	20014f4a 	.word	0x20014f4a
 800d68c:	20014f48 	.word	0x20014f48
 800d690:	20014f90 	.word	0x20014f90
 800d694:	20014f8c 	.word	0x20014f8c
 800d698:	20014f54 	.word	0x20014f54

0800d69c <_ZNK8touchgfx4Rect8includesERKS0_>:
 800d69c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d69e:	4606      	mov	r6, r0
 800d6a0:	4608      	mov	r0, r1
 800d6a2:	460f      	mov	r7, r1
 800d6a4:	f7fc fb0f 	bl	8009cc6 <_ZNK8touchgfx4Rect7isEmptyEv>
 800d6a8:	b9e8      	cbnz	r0, 800d6e6 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 800d6aa:	f9b7 5000 	ldrsh.w	r5, [r7]
 800d6ae:	f9b6 4000 	ldrsh.w	r4, [r6]
 800d6b2:	42a5      	cmp	r5, r4
 800d6b4:	db17      	blt.n	800d6e6 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 800d6b6:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800d6ba:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 800d6be:	429a      	cmp	r2, r3
 800d6c0:	db11      	blt.n	800d6e6 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 800d6c2:	88b9      	ldrh	r1, [r7, #4]
 800d6c4:	440d      	add	r5, r1
 800d6c6:	88b1      	ldrh	r1, [r6, #4]
 800d6c8:	440c      	add	r4, r1
 800d6ca:	b22d      	sxth	r5, r5
 800d6cc:	b224      	sxth	r4, r4
 800d6ce:	42a5      	cmp	r5, r4
 800d6d0:	dc09      	bgt.n	800d6e6 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 800d6d2:	88f8      	ldrh	r0, [r7, #6]
 800d6d4:	4410      	add	r0, r2
 800d6d6:	88f2      	ldrh	r2, [r6, #6]
 800d6d8:	4413      	add	r3, r2
 800d6da:	b200      	sxth	r0, r0
 800d6dc:	b21b      	sxth	r3, r3
 800d6de:	4298      	cmp	r0, r3
 800d6e0:	bfcc      	ite	gt
 800d6e2:	2000      	movgt	r0, #0
 800d6e4:	2001      	movle	r0, #1
 800d6e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d6e8 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 800d6e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d6ea:	4604      	mov	r4, r0
 800d6ec:	4608      	mov	r0, r1
 800d6ee:	460d      	mov	r5, r1
 800d6f0:	f7fc fae9 	bl	8009cc6 <_ZNK8touchgfx4Rect7isEmptyEv>
 800d6f4:	b978      	cbnz	r0, 800d716 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 800d6f6:	4620      	mov	r0, r4
 800d6f8:	f7fc fae5 	bl	8009cc6 <_ZNK8touchgfx4Rect7isEmptyEv>
 800d6fc:	f9b5 6000 	ldrsh.w	r6, [r5]
 800d700:	b150      	cbz	r0, 800d718 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 800d702:	8026      	strh	r6, [r4, #0]
 800d704:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 800d708:	8063      	strh	r3, [r4, #2]
 800d70a:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 800d70e:	80a3      	strh	r3, [r4, #4]
 800d710:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 800d714:	80e3      	strh	r3, [r4, #6]
 800d716:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d718:	f9b4 1000 	ldrsh.w	r1, [r4]
 800d71c:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 800d720:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 800d724:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 800d728:	88ed      	ldrh	r5, [r5, #6]
 800d72a:	42b1      	cmp	r1, r6
 800d72c:	460f      	mov	r7, r1
 800d72e:	bfa8      	it	ge
 800d730:	4637      	movge	r7, r6
 800d732:	4293      	cmp	r3, r2
 800d734:	4618      	mov	r0, r3
 800d736:	4466      	add	r6, ip
 800d738:	bfa8      	it	ge
 800d73a:	4610      	movge	r0, r2
 800d73c:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 800d740:	8027      	strh	r7, [r4, #0]
 800d742:	442a      	add	r2, r5
 800d744:	88e5      	ldrh	r5, [r4, #6]
 800d746:	8060      	strh	r0, [r4, #2]
 800d748:	4461      	add	r1, ip
 800d74a:	442b      	add	r3, r5
 800d74c:	b236      	sxth	r6, r6
 800d74e:	b209      	sxth	r1, r1
 800d750:	b212      	sxth	r2, r2
 800d752:	b21b      	sxth	r3, r3
 800d754:	428e      	cmp	r6, r1
 800d756:	bfac      	ite	ge
 800d758:	ebc7 0106 	rsbge	r1, r7, r6
 800d75c:	ebc7 0101 	rsblt	r1, r7, r1
 800d760:	429a      	cmp	r2, r3
 800d762:	bfac      	ite	ge
 800d764:	ebc0 0202 	rsbge	r2, r0, r2
 800d768:	ebc0 0203 	rsblt	r2, r0, r3
 800d76c:	80a1      	strh	r1, [r4, #4]
 800d76e:	80e2      	strh	r2, [r4, #6]
 800d770:	e7d1      	b.n	800d716 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

0800d774 <_ZN8touchgfx11Application11getInstanceEv>:
 800d774:	4b01      	ldr	r3, [pc, #4]	@ (800d77c <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 800d776:	6818      	ldr	r0, [r3, #0]
 800d778:	4770      	bx	lr
 800d77a:	bf00      	nop
 800d77c:	20014fa0 	.word	0x20014fa0

0800d780 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>:
 800d780:	b510      	push	{r4, lr}
 800d782:	2300      	movs	r3, #0
 800d784:	f8a0 30a4 	strh.w	r3, [r0, #164]	@ 0xa4
 800d788:	f8b0 3080 	ldrh.w	r3, [r0, #128]	@ 0x80
 800d78c:	f8a0 30a6 	strh.w	r3, [r0, #166]	@ 0xa6
 800d790:	4604      	mov	r4, r0
 800d792:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	@ 0xa4
 800d796:	f8b4 20a6 	ldrh.w	r2, [r4, #166]	@ 0xa6
 800d79a:	429a      	cmp	r2, r3
 800d79c:	d90e      	bls.n	800d7bc <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x3c>
 800d79e:	18e2      	adds	r2, r4, r3
 800d7a0:	f892 2084 	ldrb.w	r2, [r2, #132]	@ 0x84
 800d7a4:	b122      	cbz	r2, 800d7b0 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x30>
 800d7a6:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 800d7aa:	6803      	ldr	r3, [r0, #0]
 800d7ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d7ae:	4798      	blx	r3
 800d7b0:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	@ 0xa4
 800d7b4:	3301      	adds	r3, #1
 800d7b6:	f8a4 30a4 	strh.w	r3, [r4, #164]	@ 0xa4
 800d7ba:	e7ea      	b.n	800d792 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x12>
 800d7bc:	bd10      	pop	{r4, pc}

0800d7be <_ZN8touchgfx11Application12TimerWidgets5clearEv>:
 800d7be:	2300      	movs	r3, #0
 800d7c0:	f8a0 3080 	strh.w	r3, [r0, #128]	@ 0x80
 800d7c4:	f100 0284 	add.w	r2, r0, #132	@ 0x84
 800d7c8:	30a4      	adds	r0, #164	@ 0xa4
 800d7ca:	f802 3b01 	strb.w	r3, [r2], #1
 800d7ce:	4282      	cmp	r2, r0
 800d7d0:	d1fb      	bne.n	800d7ca <_ZN8touchgfx11Application12TimerWidgets5clearEv+0xc>
 800d7d2:	4770      	bx	lr

0800d7d4 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 800d7d4:	b570      	push	{r4, r5, r6, lr}
 800d7d6:	4c0b      	ldr	r4, [pc, #44]	@ (800d804 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x30>)
 800d7d8:	4605      	mov	r5, r0
 800d7da:	6820      	ldr	r0, [r4, #0]
 800d7dc:	460e      	mov	r6, r1
 800d7de:	b110      	cbz	r0, 800d7e6 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x12>
 800d7e0:	6803      	ldr	r3, [r0, #0]
 800d7e2:	695b      	ldr	r3, [r3, #20]
 800d7e4:	4798      	blx	r3
 800d7e6:	1d28      	adds	r0, r5, #4
 800d7e8:	f7ff ffe9 	bl	800d7be <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 800d7ec:	6026      	str	r6, [r4, #0]
 800d7ee:	6833      	ldr	r3, [r6, #0]
 800d7f0:	4630      	mov	r0, r6
 800d7f2:	68db      	ldr	r3, [r3, #12]
 800d7f4:	4798      	blx	r3
 800d7f6:	682b      	ldr	r3, [r5, #0]
 800d7f8:	4628      	mov	r0, r5
 800d7fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d7fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d800:	4718      	bx	r3
 800d802:	bf00      	nop
 800d804:	20014f90 	.word	0x20014f90

0800d808 <_ZN8touchgfx11Application12TimerWidgets7compactEv>:
 800d808:	2300      	movs	r3, #0
 800d80a:	f8b0 c080 	ldrh.w	ip, [r0, #128]	@ 0x80
 800d80e:	f8b0 10a4 	ldrh.w	r1, [r0, #164]	@ 0xa4
 800d812:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d814:	461a      	mov	r2, r3
 800d816:	461c      	mov	r4, r3
 800d818:	461d      	mov	r5, r3
 800d81a:	459c      	cmp	ip, r3
 800d81c:	dd1a      	ble.n	800d854 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x4c>
 800d81e:	18c6      	adds	r6, r0, r3
 800d820:	f896 6084 	ldrb.w	r6, [r6, #132]	@ 0x84
 800d824:	b16e      	cbz	r6, 800d842 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x3a>
 800d826:	429a      	cmp	r2, r3
 800d828:	d008      	beq.n	800d83c <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x34>
 800d82a:	fa1f fe82 	uxth.w	lr, r2
 800d82e:	f850 7023 	ldr.w	r7, [r0, r3, lsl #2]
 800d832:	f840 702e 	str.w	r7, [r0, lr, lsl #2]
 800d836:	1887      	adds	r7, r0, r2
 800d838:	f887 6084 	strb.w	r6, [r7, #132]	@ 0x84
 800d83c:	3201      	adds	r2, #1
 800d83e:	3301      	adds	r3, #1
 800d840:	e7eb      	b.n	800d81a <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x12>
 800d842:	f8b0 60a6 	ldrh.w	r6, [r0, #166]	@ 0xa6
 800d846:	4299      	cmp	r1, r3
 800d848:	bfa8      	it	ge
 800d84a:	3501      	addge	r5, #1
 800d84c:	429e      	cmp	r6, r3
 800d84e:	bfc8      	it	gt
 800d850:	3401      	addgt	r4, #1
 800d852:	e7f4      	b.n	800d83e <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x36>
 800d854:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	@ 0xa6
 800d858:	1b49      	subs	r1, r1, r5
 800d85a:	1b1b      	subs	r3, r3, r4
 800d85c:	f8a0 10a4 	strh.w	r1, [r0, #164]	@ 0xa4
 800d860:	f8a0 30a6 	strh.w	r3, [r0, #166]	@ 0xa6
 800d864:	f8b0 3080 	ldrh.w	r3, [r0, #128]	@ 0x80
 800d868:	4293      	cmp	r3, r2
 800d86a:	dd03      	ble.n	800d874 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x6c>
 800d86c:	3b01      	subs	r3, #1
 800d86e:	f8a0 3080 	strh.w	r3, [r0, #128]	@ 0x80
 800d872:	e7f7      	b.n	800d864 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x5c>
 800d874:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800d878 <_ZN8touchgfx11Application15handleTickEventEv>:
 800d878:	b570      	push	{r4, r5, r6, lr}
 800d87a:	4d16      	ldr	r5, [pc, #88]	@ (800d8d4 <_ZN8touchgfx11Application15handleTickEventEv+0x5c>)
 800d87c:	4604      	mov	r4, r0
 800d87e:	6828      	ldr	r0, [r5, #0]
 800d880:	b140      	cbz	r0, 800d894 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 800d882:	7a03      	ldrb	r3, [r0, #8]
 800d884:	b933      	cbnz	r3, 800d894 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 800d886:	f884 3138 	strb.w	r3, [r4, #312]	@ 0x138
 800d88a:	6803      	ldr	r3, [r0, #0]
 800d88c:	689b      	ldr	r3, [r3, #8]
 800d88e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d892:	4718      	bx	r3
 800d894:	f894 3138 	ldrb.w	r3, [r4, #312]	@ 0x138
 800d898:	4e0f      	ldr	r6, [pc, #60]	@ (800d8d8 <_ZN8touchgfx11Application15handleTickEventEv+0x60>)
 800d89a:	b973      	cbnz	r3, 800d8ba <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 800d89c:	b168      	cbz	r0, 800d8ba <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 800d89e:	7a03      	ldrb	r3, [r0, #8]
 800d8a0:	b15b      	cbz	r3, 800d8ba <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 800d8a2:	6830      	ldr	r0, [r6, #0]
 800d8a4:	b110      	cbz	r0, 800d8ac <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 800d8a6:	6803      	ldr	r3, [r0, #0]
 800d8a8:	691b      	ldr	r3, [r3, #16]
 800d8aa:	4798      	blx	r3
 800d8ac:	6828      	ldr	r0, [r5, #0]
 800d8ae:	6803      	ldr	r3, [r0, #0]
 800d8b0:	68db      	ldr	r3, [r3, #12]
 800d8b2:	4798      	blx	r3
 800d8b4:	2301      	movs	r3, #1
 800d8b6:	f884 3138 	strb.w	r3, [r4, #312]	@ 0x138
 800d8ba:	3404      	adds	r4, #4
 800d8bc:	4620      	mov	r0, r4
 800d8be:	f7ff ff5f 	bl	800d780 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>
 800d8c2:	4620      	mov	r0, r4
 800d8c4:	f7ff ffa0 	bl	800d808 <_ZN8touchgfx11Application12TimerWidgets7compactEv>
 800d8c8:	6830      	ldr	r0, [r6, #0]
 800d8ca:	b110      	cbz	r0, 800d8d2 <_ZN8touchgfx11Application15handleTickEventEv+0x5a>
 800d8cc:	6803      	ldr	r3, [r0, #0]
 800d8ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d8d0:	e7dd      	b.n	800d88e <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 800d8d2:	bd70      	pop	{r4, r5, r6, pc}
 800d8d4:	20014f94 	.word	0x20014f94
 800d8d8:	20014f90 	.word	0x20014f90

0800d8dc <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 800d8dc:	4603      	mov	r3, r0
 800d8de:	f100 0140 	add.w	r1, r0, #64	@ 0x40
 800d8e2:	2200      	movs	r2, #0
 800d8e4:	801a      	strh	r2, [r3, #0]
 800d8e6:	805a      	strh	r2, [r3, #2]
 800d8e8:	809a      	strh	r2, [r3, #4]
 800d8ea:	80da      	strh	r2, [r3, #6]
 800d8ec:	3308      	adds	r3, #8
 800d8ee:	428b      	cmp	r3, r1
 800d8f0:	d1f8      	bne.n	800d8e4 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 800d8f2:	f8a0 2040 	strh.w	r2, [r0, #64]	@ 0x40
 800d8f6:	4770      	bx	lr

0800d8f8 <_ZN8touchgfx11ApplicationC1Ev>:
 800d8f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d8fa:	4606      	mov	r6, r0
 800d8fc:	4b1c      	ldr	r3, [pc, #112]	@ (800d970 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 800d8fe:	f846 3b04 	str.w	r3, [r6], #4
 800d902:	4604      	mov	r4, r0
 800d904:	2500      	movs	r5, #0
 800d906:	22a8      	movs	r2, #168	@ 0xa8
 800d908:	2100      	movs	r1, #0
 800d90a:	4630      	mov	r0, r6
 800d90c:	f007 f821 	bl	8014952 <memset>
 800d910:	f8a4 5084 	strh.w	r5, [r4, #132]	@ 0x84
 800d914:	f104 00ac 	add.w	r0, r4, #172	@ 0xac
 800d918:	f7ff ffe0 	bl	800d8dc <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 800d91c:	f104 00ee 	add.w	r0, r4, #238	@ 0xee
 800d920:	f7ff ffdc 	bl	800d8dc <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 800d924:	f8a4 5130 	strh.w	r5, [r4, #304]	@ 0x130
 800d928:	f8a4 5132 	strh.w	r5, [r4, #306]	@ 0x132
 800d92c:	f8a4 5134 	strh.w	r5, [r4, #308]	@ 0x134
 800d930:	f8a4 5136 	strh.w	r5, [r4, #310]	@ 0x136
 800d934:	f884 5138 	strb.w	r5, [r4, #312]	@ 0x138
 800d938:	490e      	ldr	r1, [pc, #56]	@ (800d974 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 800d93a:	480f      	ldr	r0, [pc, #60]	@ (800d978 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 800d93c:	4f0f      	ldr	r7, [pc, #60]	@ (800d97c <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 800d93e:	f006 f8e1 	bl	8013b04 <CRC_Lock>
 800d942:	4b0f      	ldr	r3, [pc, #60]	@ (800d980 <_ZN8touchgfx11ApplicationC1Ev+0x88>)
 800d944:	b158      	cbz	r0, 800d95e <_ZN8touchgfx11ApplicationC1Ev+0x66>
 800d946:	801d      	strh	r5, [r3, #0]
 800d948:	4a0e      	ldr	r2, [pc, #56]	@ (800d984 <_ZN8touchgfx11ApplicationC1Ev+0x8c>)
 800d94a:	2300      	movs	r3, #0
 800d94c:	6013      	str	r3, [r2, #0]
 800d94e:	4a0e      	ldr	r2, [pc, #56]	@ (800d988 <_ZN8touchgfx11ApplicationC1Ev+0x90>)
 800d950:	603b      	str	r3, [r7, #0]
 800d952:	4630      	mov	r0, r6
 800d954:	6013      	str	r3, [r2, #0]
 800d956:	f7ff ff32 	bl	800d7be <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 800d95a:	4620      	mov	r0, r4
 800d95c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d95e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800d962:	2002      	movs	r0, #2
 800d964:	801a      	strh	r2, [r3, #0]
 800d966:	6038      	str	r0, [r7, #0]
 800d968:	f001 fa36 	bl	800edd8 <_ZN8touchgfx6Screen4drawEv>
 800d96c:	e7ec      	b.n	800d948 <_ZN8touchgfx11ApplicationC1Ev+0x50>
 800d96e:	bf00      	nop
 800d970:	08016a94 	.word	0x08016a94
 800d974:	b5e8b5cd 	.word	0xb5e8b5cd
 800d978:	f407a5c2 	.word	0xf407a5c2
 800d97c:	20014f90 	.word	0x20014f90
 800d980:	20000084 	.word	0x20000084
 800d984:	20014fa0 	.word	0x20014fa0
 800d988:	20014f94 	.word	0x20014f94

0800d98c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 800d98c:	f8b0 3040 	ldrh.w	r3, [r0, #64]	@ 0x40
 800d990:	3b01      	subs	r3, #1
 800d992:	b29b      	uxth	r3, r3
 800d994:	428b      	cmp	r3, r1
 800d996:	b510      	push	{r4, lr}
 800d998:	f8a0 3040 	strh.w	r3, [r0, #64]	@ 0x40
 800d99c:	d908      	bls.n	800d9b0 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x24>
 800d99e:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800d9a2:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 800d9a6:	681a      	ldr	r2, [r3, #0]
 800d9a8:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 800d9ac:	685a      	ldr	r2, [r3, #4]
 800d9ae:	6062      	str	r2, [r4, #4]
 800d9b0:	bd10      	pop	{r4, pc}
	...

0800d9b4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 800d9b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9b8:	4b8f      	ldr	r3, [pc, #572]	@ (800dbf8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x244>)
 800d9ba:	b08f      	sub	sp, #60	@ 0x3c
 800d9bc:	ac0a      	add	r4, sp, #40	@ 0x28
 800d9be:	e884 0006 	stmia.w	r4, {r1, r2}
 800d9c2:	f9b3 2000 	ldrsh.w	r2, [r3]
 800d9c6:	4b8d      	ldr	r3, [pc, #564]	@ (800dbfc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x248>)
 800d9c8:	4683      	mov	fp, r0
 800d9ca:	f9b3 1000 	ldrsh.w	r1, [r3]
 800d9ce:	4620      	mov	r0, r4
 800d9d0:	f7ff fe13 	bl	800d5fa <_ZN8touchgfx4Rect10restrictToEss>
 800d9d4:	4620      	mov	r0, r4
 800d9d6:	f7fc f976 	bl	8009cc6 <_ZNK8touchgfx4Rect7isEmptyEv>
 800d9da:	2800      	cmp	r0, #0
 800d9dc:	d16a      	bne.n	800dab4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 800d9de:	9403      	str	r4, [sp, #12]
 800d9e0:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	@ 0xec
 800d9e4:	f10b 03ac 	add.w	r3, fp, #172	@ 0xac
 800d9e8:	eb0b 05c4 	add.w	r5, fp, r4, lsl #3
 800d9ec:	35a4      	adds	r5, #164	@ 0xa4
 800d9ee:	9301      	str	r3, [sp, #4]
 800d9f0:	b15c      	cbz	r4, 800da0a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 800d9f2:	4629      	mov	r1, r5
 800d9f4:	9803      	ldr	r0, [sp, #12]
 800d9f6:	f7ff fe51 	bl	800d69c <_ZNK8touchgfx4Rect8includesERKS0_>
 800d9fa:	3c01      	subs	r4, #1
 800d9fc:	b118      	cbz	r0, 800da06 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52>
 800d9fe:	b2a1      	uxth	r1, r4
 800da00:	9801      	ldr	r0, [sp, #4]
 800da02:	f7ff ffc3 	bl	800d98c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 800da06:	3d08      	subs	r5, #8
 800da08:	e7f2      	b.n	800d9f0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c>
 800da0a:	f8bb a0ec 	ldrh.w	sl, [fp, #236]	@ 0xec
 800da0e:	f8cd a010 	str.w	sl, [sp, #16]
 800da12:	f10a 33ff 	add.w	r3, sl, #4294967295
 800da16:	9302      	str	r3, [sp, #8]
 800da18:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800da1c:	f103 04a4 	add.w	r4, r3, #164	@ 0xa4
 800da20:	9306      	str	r3, [sp, #24]
 800da22:	445c      	add	r4, fp
 800da24:	2500      	movs	r5, #0
 800da26:	4626      	mov	r6, r4
 800da28:	f8cd a014 	str.w	sl, [sp, #20]
 800da2c:	462f      	mov	r7, r5
 800da2e:	9b05      	ldr	r3, [sp, #20]
 800da30:	2b00      	cmp	r3, #0
 800da32:	d073      	beq.n	800db1c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 800da34:	9903      	ldr	r1, [sp, #12]
 800da36:	4630      	mov	r0, r6
 800da38:	f7ff fdbd 	bl	800d5b6 <_ZNK8touchgfx4Rect9intersectERKS0_>
 800da3c:	b350      	cbz	r0, 800da94 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 800da3e:	f9bd e028 	ldrsh.w	lr, [sp, #40]	@ 0x28
 800da42:	f9b6 c000 	ldrsh.w	ip, [r6]
 800da46:	f9bd 802a 	ldrsh.w	r8, [sp, #42]	@ 0x2a
 800da4a:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
 800da4e:	45e6      	cmp	lr, ip
 800da50:	db33      	blt.n	800daba <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 800da52:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 800da56:	88b3      	ldrh	r3, [r6, #4]
 800da58:	4472      	add	r2, lr
 800da5a:	4463      	add	r3, ip
 800da5c:	b212      	sxth	r2, r2
 800da5e:	b21b      	sxth	r3, r3
 800da60:	429a      	cmp	r2, r3
 800da62:	dc2a      	bgt.n	800daba <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 800da64:	88f3      	ldrh	r3, [r6, #6]
 800da66:	f8bd 102e 	ldrh.w	r1, [sp, #46]	@ 0x2e
 800da6a:	fa1f f289 	uxth.w	r2, r9
 800da6e:	4413      	add	r3, r2
 800da70:	b29b      	uxth	r3, r3
 800da72:	45c8      	cmp	r8, r9
 800da74:	fa1f fc88 	uxth.w	ip, r8
 800da78:	fa0f fe83 	sxth.w	lr, r3
 800da7c:	db0f      	blt.n	800da9e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 800da7e:	eba3 030c 	sub.w	r3, r3, ip
 800da82:	1ac9      	subs	r1, r1, r3
 800da84:	b209      	sxth	r1, r1
 800da86:	2900      	cmp	r1, #0
 800da88:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 800da8c:	dd12      	ble.n	800dab4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 800da8e:	f8ad e02a 	strh.w	lr, [sp, #42]	@ 0x2a
 800da92:	4605      	mov	r5, r0
 800da94:	9b05      	ldr	r3, [sp, #20]
 800da96:	3b01      	subs	r3, #1
 800da98:	9305      	str	r3, [sp, #20]
 800da9a:	3e08      	subs	r6, #8
 800da9c:	e7c7      	b.n	800da2e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
 800da9e:	4461      	add	r1, ip
 800daa0:	b209      	sxth	r1, r1
 800daa2:	4571      	cmp	r1, lr
 800daa4:	dc38      	bgt.n	800db18 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 800daa6:	eba2 020c 	sub.w	r2, r2, ip
 800daaa:	b212      	sxth	r2, r2
 800daac:	f8ad 202e 	strh.w	r2, [sp, #46]	@ 0x2e
 800dab0:	2a00      	cmp	r2, #0
 800dab2:	dcee      	bgt.n	800da92 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 800dab4:	b00f      	add	sp, #60	@ 0x3c
 800dab6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800daba:	45c8      	cmp	r8, r9
 800dabc:	db2c      	blt.n	800db18 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 800dabe:	88f3      	ldrh	r3, [r6, #6]
 800dac0:	4499      	add	r9, r3
 800dac2:	f8bd 302e 	ldrh.w	r3, [sp, #46]	@ 0x2e
 800dac6:	4498      	add	r8, r3
 800dac8:	fa0f f989 	sxth.w	r9, r9
 800dacc:	fa0f f888 	sxth.w	r8, r8
 800dad0:	45c1      	cmp	r9, r8
 800dad2:	db21      	blt.n	800db18 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 800dad4:	88b3      	ldrh	r3, [r6, #4]
 800dad6:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 800dada:	fa1f f28c 	uxth.w	r2, ip
 800dade:	4413      	add	r3, r2
 800dae0:	b29b      	uxth	r3, r3
 800dae2:	45e6      	cmp	lr, ip
 800dae4:	fa1f f88e 	uxth.w	r8, lr
 800dae8:	fa0f f983 	sxth.w	r9, r3
 800daec:	db0a      	blt.n	800db04 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x150>
 800daee:	eba3 0308 	sub.w	r3, r3, r8
 800daf2:	1ac9      	subs	r1, r1, r3
 800daf4:	b209      	sxth	r1, r1
 800daf6:	2900      	cmp	r1, #0
 800daf8:	f8ad 102c 	strh.w	r1, [sp, #44]	@ 0x2c
 800dafc:	ddda      	ble.n	800dab4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 800dafe:	f8ad 9028 	strh.w	r9, [sp, #40]	@ 0x28
 800db02:	e7c6      	b.n	800da92 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 800db04:	4441      	add	r1, r8
 800db06:	b209      	sxth	r1, r1
 800db08:	4549      	cmp	r1, r9
 800db0a:	dc05      	bgt.n	800db18 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 800db0c:	eba2 0208 	sub.w	r2, r2, r8
 800db10:	b212      	sxth	r2, r2
 800db12:	f8ad 202c 	strh.w	r2, [sp, #44]	@ 0x2c
 800db16:	e7cb      	b.n	800dab0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xfc>
 800db18:	4607      	mov	r7, r0
 800db1a:	e7bb      	b.n	800da94 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 800db1c:	2d00      	cmp	r5, #0
 800db1e:	d181      	bne.n	800da24 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x70>
 800db20:	2f00      	cmp	r7, #0
 800db22:	f000 81dd 	beq.w	800dee0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 800db26:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	@ 0x28
 800db2a:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	@ 0x2a
 800db2e:	f8bd a02e 	ldrh.w	sl, [sp, #46]	@ 0x2e
 800db32:	b2b3      	uxth	r3, r6
 800db34:	9305      	str	r3, [sp, #20]
 800db36:	9a05      	ldr	r2, [sp, #20]
 800db38:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 800db3c:	4413      	add	r3, r2
 800db3e:	b2ba      	uxth	r2, r7
 800db40:	4492      	add	sl, r2
 800db42:	b29b      	uxth	r3, r3
 800db44:	fa1f fa8a 	uxth.w	sl, sl
 800db48:	fa0f f883 	sxth.w	r8, r3
 800db4c:	fa0f f98a 	sxth.w	r9, sl
 800db50:	e9cd 2307 	strd	r2, r3, [sp, #28]
 800db54:	9b04      	ldr	r3, [sp, #16]
 800db56:	2b00      	cmp	r3, #0
 800db58:	d052      	beq.n	800dc00 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24c>
 800db5a:	9903      	ldr	r1, [sp, #12]
 800db5c:	4620      	mov	r0, r4
 800db5e:	f7ff fd2a 	bl	800d5b6 <_ZNK8touchgfx4Rect9intersectERKS0_>
 800db62:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800db66:	b1c0      	cbz	r0, 800db9a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 800db68:	f9b4 e000 	ldrsh.w	lr, [r4]
 800db6c:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 800db70:	4576      	cmp	r6, lr
 800db72:	dc22      	bgt.n	800dbba <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 800db74:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 800db78:	44f4      	add	ip, lr
 800db7a:	fa0f fc8c 	sxth.w	ip, ip
 800db7e:	45e0      	cmp	r8, ip
 800db80:	db1b      	blt.n	800dbba <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 800db82:	428f      	cmp	r7, r1
 800db84:	fa1f fc81 	uxth.w	ip, r1
 800db88:	88e1      	ldrh	r1, [r4, #6]
 800db8a:	dc0d      	bgt.n	800dba8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f4>
 800db8c:	ebaa 0c0c 	sub.w	ip, sl, ip
 800db90:	eba1 010c 	sub.w	r1, r1, ip
 800db94:	f8a4 9002 	strh.w	r9, [r4, #2]
 800db98:	80e1      	strh	r1, [r4, #6]
 800db9a:	4628      	mov	r0, r5
 800db9c:	9904      	ldr	r1, [sp, #16]
 800db9e:	3901      	subs	r1, #1
 800dba0:	9104      	str	r1, [sp, #16]
 800dba2:	3c08      	subs	r4, #8
 800dba4:	4605      	mov	r5, r0
 800dba6:	e7d3      	b.n	800db50 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x19c>
 800dba8:	4461      	add	r1, ip
 800dbaa:	b209      	sxth	r1, r1
 800dbac:	4549      	cmp	r1, r9
 800dbae:	dcf5      	bgt.n	800db9c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 800dbb0:	eba2 0c0c 	sub.w	ip, r2, ip
 800dbb4:	f8a4 c006 	strh.w	ip, [r4, #6]
 800dbb8:	e7ef      	b.n	800db9a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 800dbba:	428f      	cmp	r7, r1
 800dbbc:	dcee      	bgt.n	800db9c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 800dbbe:	f8b4 c006 	ldrh.w	ip, [r4, #6]
 800dbc2:	4461      	add	r1, ip
 800dbc4:	b209      	sxth	r1, r1
 800dbc6:	4589      	cmp	r9, r1
 800dbc8:	dbe8      	blt.n	800db9c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 800dbca:	4576      	cmp	r6, lr
 800dbcc:	fa1f fc8e 	uxth.w	ip, lr
 800dbd0:	88a1      	ldrh	r1, [r4, #4]
 800dbd2:	dc07      	bgt.n	800dbe4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x230>
 800dbd4:	eba3 0c0c 	sub.w	ip, r3, ip
 800dbd8:	eba1 010c 	sub.w	r1, r1, ip
 800dbdc:	f8a4 8000 	strh.w	r8, [r4]
 800dbe0:	80a1      	strh	r1, [r4, #4]
 800dbe2:	e7da      	b.n	800db9a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 800dbe4:	4461      	add	r1, ip
 800dbe6:	b209      	sxth	r1, r1
 800dbe8:	4588      	cmp	r8, r1
 800dbea:	dbd7      	blt.n	800db9c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 800dbec:	9905      	ldr	r1, [sp, #20]
 800dbee:	eba1 0c0c 	sub.w	ip, r1, ip
 800dbf2:	f8a4 c004 	strh.w	ip, [r4, #4]
 800dbf6:	e7d0      	b.n	800db9a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 800dbf8:	20014f4a 	.word	0x20014f4a
 800dbfc:	20014f48 	.word	0x20014f48
 800dc00:	2d00      	cmp	r5, #0
 800dc02:	f000 816d 	beq.w	800dee0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 800dc06:	9b06      	ldr	r3, [sp, #24]
 800dc08:	445b      	add	r3, fp
 800dc0a:	461c      	mov	r4, r3
 800dc0c:	9b02      	ldr	r3, [sp, #8]
 800dc0e:	3301      	adds	r3, #1
 800dc10:	f000 8166 	beq.w	800dee0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 800dc14:	f104 05a4 	add.w	r5, r4, #164	@ 0xa4
 800dc18:	4629      	mov	r1, r5
 800dc1a:	9803      	ldr	r0, [sp, #12]
 800dc1c:	f7ff fd3e 	bl	800d69c <_ZNK8touchgfx4Rect8includesERKS0_>
 800dc20:	b120      	cbz	r0, 800dc2c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x278>
 800dc22:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 800dc26:	9801      	ldr	r0, [sp, #4]
 800dc28:	f7ff feb0 	bl	800d98c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 800dc2c:	9903      	ldr	r1, [sp, #12]
 800dc2e:	4628      	mov	r0, r5
 800dc30:	f7ff fcc1 	bl	800d5b6 <_ZNK8touchgfx4Rect9intersectERKS0_>
 800dc34:	2800      	cmp	r0, #0
 800dc36:	f000 809c 	beq.w	800dd72 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 800dc3a:	f9b4 90a4 	ldrsh.w	r9, [r4, #164]	@ 0xa4
 800dc3e:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 800dc42:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	@ 0x28
 800dc46:	9309      	str	r3, [sp, #36]	@ 0x24
 800dc48:	fa1f f189 	uxth.w	r1, r9
 800dc4c:	eb01 0c03 	add.w	ip, r1, r3
 800dc50:	fa1f fa8c 	uxth.w	sl, ip
 800dc54:	f8bd c02c 	ldrh.w	ip, [sp, #44]	@ 0x2c
 800dc58:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	@ 0x2a
 800dc5c:	f9b4 20a6 	ldrsh.w	r2, [r4, #166]	@ 0xa6
 800dc60:	b283      	uxth	r3, r0
 800dc62:	eb03 050c 	add.w	r5, r3, ip
 800dc66:	b2ad      	uxth	r5, r5
 800dc68:	9505      	str	r5, [sp, #20]
 800dc6a:	f9bd 5014 	ldrsh.w	r5, [sp, #20]
 800dc6e:	9504      	str	r5, [sp, #16]
 800dc70:	4548      	cmp	r0, r9
 800dc72:	f8bb 50ec 	ldrh.w	r5, [fp, #236]	@ 0xec
 800dc76:	f340 8099 	ble.w	800ddac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3f8>
 800dc7a:	1a5b      	subs	r3, r3, r1
 800dc7c:	b29b      	uxth	r3, r3
 800dc7e:	4596      	cmp	lr, r2
 800dc80:	fa0f f08a 	sxth.w	r0, sl
 800dc84:	b21e      	sxth	r6, r3
 800dc86:	dd2e      	ble.n	800dce6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x332>
 800dc88:	9f02      	ldr	r7, [sp, #8]
 800dc8a:	f8bd 402e 	ldrh.w	r4, [sp, #46]	@ 0x2e
 800dc8e:	eb0b 08c7 	add.w	r8, fp, r7, lsl #3
 800dc92:	9f04      	ldr	r7, [sp, #16]
 800dc94:	1a3f      	subs	r7, r7, r0
 800dc96:	f8b8 00b2 	ldrh.w	r0, [r8, #178]	@ 0xb2
 800dc9a:	fa1f fe8e 	uxth.w	lr, lr
 800dc9e:	b292      	uxth	r2, r2
 800dca0:	ebae 0102 	sub.w	r1, lr, r2
 800dca4:	44a6      	add	lr, r4
 800dca6:	4402      	add	r2, r0
 800dca8:	b289      	uxth	r1, r1
 800dcaa:	fa0f fe8e 	sxth.w	lr, lr
 800dcae:	b212      	sxth	r2, r2
 800dcb0:	b20d      	sxth	r5, r1
 800dcb2:	ebae 0202 	sub.w	r2, lr, r2
 800dcb6:	436f      	muls	r7, r5
 800dcb8:	4372      	muls	r2, r6
 800dcba:	4297      	cmp	r7, r2
 800dcbc:	db09      	blt.n	800dcd2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x31e>
 800dcbe:	f8b8 20ac 	ldrh.w	r2, [r8, #172]	@ 0xac
 800dcc2:	f8a8 50b2 	strh.w	r5, [r8, #178]	@ 0xb2
 800dcc6:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 800dcca:	449c      	add	ip, r3
 800dccc:	f8ad c02c 	strh.w	ip, [sp, #44]	@ 0x2c
 800dcd0:	e686      	b.n	800d9e0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 800dcd2:	4421      	add	r1, r4
 800dcd4:	f8b8 30ae 	ldrh.w	r3, [r8, #174]	@ 0xae
 800dcd8:	f8a8 60b0 	strh.w	r6, [r8, #176]	@ 0xb0
 800dcdc:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 800dce0:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 800dce4:	e67c      	b.n	800d9e0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 800dce6:	9f04      	ldr	r7, [sp, #16]
 800dce8:	42b8      	cmp	r0, r7
 800dcea:	da27      	bge.n	800dd3c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x388>
 800dcec:	9902      	ldr	r1, [sp, #8]
 800dcee:	f8bd 502e 	ldrh.w	r5, [sp, #46]	@ 0x2e
 800dcf2:	eb0b 04c1 	add.w	r4, fp, r1, lsl #3
 800dcf6:	eb05 010e 	add.w	r1, r5, lr
 800dcfa:	fa1f f881 	uxth.w	r8, r1
 800dcfe:	f8b4 10b2 	ldrh.w	r1, [r4, #178]	@ 0xb2
 800dd02:	4411      	add	r1, r2
 800dd04:	eba1 0108 	sub.w	r1, r1, r8
 800dd08:	b289      	uxth	r1, r1
 800dd0a:	fa0f f988 	sxth.w	r9, r8
 800dd0e:	eba2 020e 	sub.w	r2, r2, lr
 800dd12:	fa0f f881 	sxth.w	r8, r1
 800dd16:	1a3f      	subs	r7, r7, r0
 800dd18:	4372      	muls	r2, r6
 800dd1a:	fb08 f707 	mul.w	r7, r8, r7
 800dd1e:	42ba      	cmp	r2, r7
 800dd20:	dc06      	bgt.n	800dd30 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x37c>
 800dd22:	f8a4 90ae 	strh.w	r9, [r4, #174]	@ 0xae
 800dd26:	f8a4 80b2 	strh.w	r8, [r4, #178]	@ 0xb2
 800dd2a:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	@ 0xac
 800dd2e:	e7ca      	b.n	800dcc6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x312>
 800dd30:	f8a4 60b0 	strh.w	r6, [r4, #176]	@ 0xb0
 800dd34:	4429      	add	r1, r5
 800dd36:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 800dd3a:	e651      	b.n	800d9e0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 800dd3c:	9805      	ldr	r0, [sp, #20]
 800dd3e:	ebaa 0000 	sub.w	r0, sl, r0
 800dd42:	b280      	uxth	r0, r0
 800dd44:	2d06      	cmp	r5, #6
 800dd46:	fa0f fe80 	sxth.w	lr, r0
 800dd4a:	d817      	bhi.n	800dd7c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c8>
 800dd4c:	9b04      	ldr	r3, [sp, #16]
 800dd4e:	f8a4 30a4 	strh.w	r3, [r4, #164]	@ 0xa4
 800dd52:	1c6b      	adds	r3, r5, #1
 800dd54:	f9b4 10aa 	ldrsh.w	r1, [r4, #170]	@ 0xaa
 800dd58:	f8a4 e0a8 	strh.w	lr, [r4, #168]	@ 0xa8
 800dd5c:	f8ab 30ec 	strh.w	r3, [fp, #236]	@ 0xec
 800dd60:	9b01      	ldr	r3, [sp, #4]
 800dd62:	9801      	ldr	r0, [sp, #4]
 800dd64:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800dd68:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 800dd6c:	805a      	strh	r2, [r3, #2]
 800dd6e:	809e      	strh	r6, [r3, #4]
 800dd70:	80d9      	strh	r1, [r3, #6]
 800dd72:	9b02      	ldr	r3, [sp, #8]
 800dd74:	3b01      	subs	r3, #1
 800dd76:	9302      	str	r3, [sp, #8]
 800dd78:	3c08      	subs	r4, #8
 800dd7a:	e747      	b.n	800dc0c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>
 800dd7c:	9a02      	ldr	r2, [sp, #8]
 800dd7e:	45b6      	cmp	lr, r6
 800dd80:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800dd84:	db0d      	blt.n	800dda2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ee>
 800dd86:	449c      	add	ip, r3
 800dd88:	fa1f fc8c 	uxth.w	ip, ip
 800dd8c:	445a      	add	r2, fp
 800dd8e:	f8ad c02c 	strh.w	ip, [sp, #44]	@ 0x2c
 800dd92:	448c      	add	ip, r1
 800dd94:	f8ad 9028 	strh.w	r9, [sp, #40]	@ 0x28
 800dd98:	f8a2 c0ac 	strh.w	ip, [r2, #172]	@ 0xac
 800dd9c:	f8a2 e0b0 	strh.w	lr, [r2, #176]	@ 0xb0
 800dda0:	e61e      	b.n	800d9e0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 800dda2:	445a      	add	r2, fp
 800dda4:	4484      	add	ip, r0
 800dda6:	f8a2 60b0 	strh.w	r6, [r2, #176]	@ 0xb0
 800ddaa:	e78f      	b.n	800dccc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 800ddac:	f8bd 602e 	ldrh.w	r6, [sp, #46]	@ 0x2e
 800ddb0:	fa1f f18e 	uxth.w	r1, lr
 800ddb4:	eb01 0806 	add.w	r8, r1, r6
 800ddb8:	b293      	uxth	r3, r2
 800ddba:	fa1f f888 	uxth.w	r8, r8
 800ddbe:	9306      	str	r3, [sp, #24]
 800ddc0:	fa0f f388 	sxth.w	r3, r8
 800ddc4:	9307      	str	r3, [sp, #28]
 800ddc6:	9f06      	ldr	r7, [sp, #24]
 800ddc8:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	@ 0xaa
 800ddcc:	443b      	add	r3, r7
 800ddce:	b29b      	uxth	r3, r3
 800ddd0:	4596      	cmp	lr, r2
 800ddd2:	9308      	str	r3, [sp, #32]
 800ddd4:	da24      	bge.n	800de20 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46c>
 800ddd6:	9905      	ldr	r1, [sp, #20]
 800ddd8:	eba3 0308 	sub.w	r3, r3, r8
 800dddc:	ebaa 0401 	sub.w	r4, sl, r1
 800dde0:	b2a4      	uxth	r4, r4
 800dde2:	b29b      	uxth	r3, r3
 800dde4:	b225      	sxth	r5, r4
 800dde6:	b219      	sxth	r1, r3
 800dde8:	eba2 020e 	sub.w	r2, r2, lr
 800ddec:	eba9 0000 	sub.w	r0, r9, r0
 800ddf0:	436a      	muls	r2, r5
 800ddf2:	4348      	muls	r0, r1
 800ddf4:	4282      	cmp	r2, r0
 800ddf6:	9a02      	ldr	r2, [sp, #8]
 800ddf8:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800ddfc:	445a      	add	r2, fp
 800ddfe:	dc06      	bgt.n	800de0e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45a>
 800de00:	9b07      	ldr	r3, [sp, #28]
 800de02:	f8a2 10b2 	strh.w	r1, [r2, #178]	@ 0xb2
 800de06:	f8a2 30ae 	strh.w	r3, [r2, #174]	@ 0xae
 800de0a:	44a4      	add	ip, r4
 800de0c:	e75e      	b.n	800dccc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 800de0e:	9904      	ldr	r1, [sp, #16]
 800de10:	f8a2 50b0 	strh.w	r5, [r2, #176]	@ 0xb0
 800de14:	f8a2 10ac 	strh.w	r1, [r2, #172]	@ 0xac
 800de18:	4433      	add	r3, r6
 800de1a:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 800de1e:	e5df      	b.n	800d9e0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 800de20:	9f06      	ldr	r7, [sp, #24]
 800de22:	9b04      	ldr	r3, [sp, #16]
 800de24:	1bc9      	subs	r1, r1, r7
 800de26:	fa0f f78a 	sxth.w	r7, sl
 800de2a:	b289      	uxth	r1, r1
 800de2c:	429f      	cmp	r7, r3
 800de2e:	fa0f fe81 	sxth.w	lr, r1
 800de32:	dd23      	ble.n	800de7c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c8>
 800de34:	9a05      	ldr	r2, [sp, #20]
 800de36:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 800de3a:	9d07      	ldr	r5, [sp, #28]
 800de3c:	ebaa 0202 	sub.w	r2, sl, r2
 800de40:	b292      	uxth	r2, r2
 800de42:	eba5 0a03 	sub.w	sl, r5, r3
 800de46:	b214      	sxth	r4, r2
 800de48:	eba9 0000 	sub.w	r0, r9, r0
 800de4c:	9b02      	ldr	r3, [sp, #8]
 800de4e:	fb0e f000 	mul.w	r0, lr, r0
 800de52:	fb04 fa0a 	mul.w	sl, r4, sl
 800de56:	00db      	lsls	r3, r3, #3
 800de58:	4550      	cmp	r0, sl
 800de5a:	445b      	add	r3, fp
 800de5c:	db03      	blt.n	800de66 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4b2>
 800de5e:	f8a3 e0b2 	strh.w	lr, [r3, #178]	@ 0xb2
 800de62:	4494      	add	ip, r2
 800de64:	e732      	b.n	800dccc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 800de66:	9a04      	ldr	r2, [sp, #16]
 800de68:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
 800de6c:	f8a3 40b0 	strh.w	r4, [r3, #176]	@ 0xb0
 800de70:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	@ 0xae
 800de74:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 800de78:	4431      	add	r1, r6
 800de7a:	e75c      	b.n	800dd36 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x382>
 800de7c:	9b08      	ldr	r3, [sp, #32]
 800de7e:	eba3 0308 	sub.w	r3, r3, r8
 800de82:	b29b      	uxth	r3, r3
 800de84:	2d06      	cmp	r5, #6
 800de86:	b218      	sxth	r0, r3
 800de88:	d813      	bhi.n	800deb2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4fe>
 800de8a:	9b07      	ldr	r3, [sp, #28]
 800de8c:	f8a4 30a6 	strh.w	r3, [r4, #166]	@ 0xa6
 800de90:	1c6b      	adds	r3, r5, #1
 800de92:	f8a4 00aa 	strh.w	r0, [r4, #170]	@ 0xaa
 800de96:	f8ab 30ec 	strh.w	r3, [fp, #236]	@ 0xec
 800de9a:	9b01      	ldr	r3, [sp, #4]
 800de9c:	9901      	ldr	r1, [sp, #4]
 800de9e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800dea2:	f821 9035 	strh.w	r9, [r1, r5, lsl #3]
 800dea6:	805a      	strh	r2, [r3, #2]
 800dea8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800deaa:	809a      	strh	r2, [r3, #4]
 800deac:	f8a3 e006 	strh.w	lr, [r3, #6]
 800deb0:	e75f      	b.n	800dd72 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 800deb2:	9c02      	ldr	r4, [sp, #8]
 800deb4:	4570      	cmp	r0, lr
 800deb6:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 800deba:	db0d      	blt.n	800ded8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x524>
 800debc:	4431      	add	r1, r6
 800debe:	9b06      	ldr	r3, [sp, #24]
 800dec0:	f8ad 202a 	strh.w	r2, [sp, #42]	@ 0x2a
 800dec4:	b289      	uxth	r1, r1
 800dec6:	445c      	add	r4, fp
 800dec8:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 800decc:	4419      	add	r1, r3
 800dece:	f8a4 10ae 	strh.w	r1, [r4, #174]	@ 0xae
 800ded2:	f8a4 00b2 	strh.w	r0, [r4, #178]	@ 0xb2
 800ded6:	e583      	b.n	800d9e0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 800ded8:	445c      	add	r4, fp
 800deda:	f8a4 e0b2 	strh.w	lr, [r4, #178]	@ 0xb2
 800dede:	e79b      	b.n	800de18 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x464>
 800dee0:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	@ 0xec
 800dee4:	1e65      	subs	r5, r4, #1
 800dee6:	b2ad      	uxth	r5, r5
 800dee8:	eb0b 04c4 	add.w	r4, fp, r4, lsl #3
 800deec:	f64f 76ff 	movw	r6, #65535	@ 0xffff
 800def0:	42b5      	cmp	r5, r6
 800def2:	d044      	beq.n	800df7e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5ca>
 800def4:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
 800def8:	f9b4 00a6 	ldrsh.w	r0, [r4, #166]	@ 0xa6
 800defc:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	@ 0x28
 800df00:	f9b4 70a4 	ldrsh.w	r7, [r4, #164]	@ 0xa4
 800df04:	4282      	cmp	r2, r0
 800df06:	d11f      	bne.n	800df48 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x594>
 800df08:	f9bd c02e 	ldrsh.w	ip, [sp, #46]	@ 0x2e
 800df0c:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	@ 0xaa
 800df10:	459c      	cmp	ip, r3
 800df12:	d119      	bne.n	800df48 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x594>
 800df14:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	@ 0xa8
 800df18:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 800df1c:	19d8      	adds	r0, r3, r7
 800df1e:	b200      	sxth	r0, r0
 800df20:	4288      	cmp	r0, r1
 800df22:	d109      	bne.n	800df38 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x584>
 800df24:	f8ad 7028 	strh.w	r7, [sp, #40]	@ 0x28
 800df28:	4413      	add	r3, r2
 800df2a:	f8ad 302c 	strh.w	r3, [sp, #44]	@ 0x2c
 800df2e:	4629      	mov	r1, r5
 800df30:	9801      	ldr	r0, [sp, #4]
 800df32:	f7ff fd2b 	bl	800d98c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 800df36:	e003      	b.n	800df40 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 800df38:	4411      	add	r1, r2
 800df3a:	b209      	sxth	r1, r1
 800df3c:	42b9      	cmp	r1, r7
 800df3e:	d0f3      	beq.n	800df28 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x574>
 800df40:	3d01      	subs	r5, #1
 800df42:	b2ad      	uxth	r5, r5
 800df44:	3c08      	subs	r4, #8
 800df46:	e7d3      	b.n	800def0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53c>
 800df48:	42b9      	cmp	r1, r7
 800df4a:	d1f9      	bne.n	800df40 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 800df4c:	f9bd 102c 	ldrsh.w	r1, [sp, #44]	@ 0x2c
 800df50:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 800df54:	4299      	cmp	r1, r3
 800df56:	d1f3      	bne.n	800df40 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 800df58:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	@ 0xaa
 800df5c:	f8bd 102e 	ldrh.w	r1, [sp, #46]	@ 0x2e
 800df60:	181f      	adds	r7, r3, r0
 800df62:	b23f      	sxth	r7, r7
 800df64:	42ba      	cmp	r2, r7
 800df66:	d105      	bne.n	800df74 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c0>
 800df68:	f8ad 002a 	strh.w	r0, [sp, #42]	@ 0x2a
 800df6c:	440b      	add	r3, r1
 800df6e:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 800df72:	e7dc      	b.n	800df2e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x57a>
 800df74:	440a      	add	r2, r1
 800df76:	b212      	sxth	r2, r2
 800df78:	4290      	cmp	r0, r2
 800df7a:	d1e1      	bne.n	800df40 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 800df7c:	e7f6      	b.n	800df6c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5b8>
 800df7e:	f8bb 60ec 	ldrh.w	r6, [fp, #236]	@ 0xec
 800df82:	2e07      	cmp	r6, #7
 800df84:	ea4f 04c6 	mov.w	r4, r6, lsl #3
 800df88:	d812      	bhi.n	800dfb0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fc>
 800df8a:	1c75      	adds	r5, r6, #1
 800df8c:	f8ab 50ec 	strh.w	r5, [fp, #236]	@ 0xec
 800df90:	9d01      	ldr	r5, [sp, #4]
 800df92:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	@ 0x28
 800df96:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	@ 0x2a
 800df9a:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 800df9e:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	@ 0x2e
 800dfa2:	f825 0036 	strh.w	r0, [r5, r6, lsl #3]
 800dfa6:	442c      	add	r4, r5
 800dfa8:	8061      	strh	r1, [r4, #2]
 800dfaa:	80a2      	strh	r2, [r4, #4]
 800dfac:	80e3      	strh	r3, [r4, #6]
 800dfae:	e581      	b.n	800dab4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 800dfb0:	f10b 03ac 	add.w	r3, fp, #172	@ 0xac
 800dfb4:	3e01      	subs	r6, #1
 800dfb6:	445c      	add	r4, fp
 800dfb8:	f06f 4a00 	mvn.w	sl, #2147483648	@ 0x80000000
 800dfbc:	f04f 37ff 	mov.w	r7, #4294967295
 800dfc0:	2500      	movs	r5, #0
 800dfc2:	9305      	str	r3, [sp, #20]
 800dfc4:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 800dfc8:	9302      	str	r3, [sp, #8]
 800dfca:	1e72      	subs	r2, r6, #1
 800dfcc:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	@ 0xaa
 800dfd0:	9304      	str	r3, [sp, #16]
 800dfd2:	4691      	mov	r9, r2
 800dfd4:	f104 03a4 	add.w	r3, r4, #164	@ 0xa4
 800dfd8:	f1b9 3fff 	cmp.w	r9, #4294967295
 800dfdc:	bf14      	ite	ne
 800dfde:	9905      	ldrne	r1, [sp, #20]
 800dfe0:	f8dd e00c 	ldreq.w	lr, [sp, #12]
 800dfe4:	6818      	ldr	r0, [r3, #0]
 800dfe6:	9207      	str	r2, [sp, #28]
 800dfe8:	bf18      	it	ne
 800dfea:	eb01 0ec9 	addne.w	lr, r1, r9, lsl #3
 800dfee:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 800dff2:	f8be 1006 	ldrh.w	r1, [lr, #6]
 800dff6:	f8be 8004 	ldrh.w	r8, [lr, #4]
 800dffa:	9306      	str	r3, [sp, #24]
 800dffc:	fb18 f801 	smulbb	r8, r8, r1
 800e000:	6859      	ldr	r1, [r3, #4]
 800e002:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 800e006:	4671      	mov	r1, lr
 800e008:	a80c      	add	r0, sp, #48	@ 0x30
 800e00a:	f7ff fb6d 	bl	800d6e8 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 800e00e:	f8bd 1036 	ldrh.w	r1, [sp, #54]	@ 0x36
 800e012:	f8bd 0034 	ldrh.w	r0, [sp, #52]	@ 0x34
 800e016:	9b04      	ldr	r3, [sp, #16]
 800e018:	9a02      	ldr	r2, [sp, #8]
 800e01a:	fb10 f001 	smulbb	r0, r0, r1
 800e01e:	fb02 8803 	mla	r8, r2, r3, r8
 800e022:	eba0 0108 	sub.w	r1, r0, r8
 800e026:	f04f 0c08 	mov.w	ip, #8
 800e02a:	fb90 f0fc 	sdiv	r0, r0, ip
 800e02e:	4288      	cmp	r0, r1
 800e030:	dc20      	bgt.n	800e074 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c0>
 800e032:	4551      	cmp	r1, sl
 800e034:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800e038:	da03      	bge.n	800e042 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x68e>
 800e03a:	b1d9      	cbz	r1, 800e074 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c0>
 800e03c:	468a      	mov	sl, r1
 800e03e:	464f      	mov	r7, r9
 800e040:	4635      	mov	r5, r6
 800e042:	f109 39ff 	add.w	r9, r9, #4294967295
 800e046:	f119 0f02 	cmn.w	r9, #2
 800e04a:	d1c5      	bne.n	800dfd8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x624>
 800e04c:	4616      	mov	r6, r2
 800e04e:	3201      	adds	r2, #1
 800e050:	f1a4 0408 	sub.w	r4, r4, #8
 800e054:	d1b6      	bne.n	800dfc4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x610>
 800e056:	9b01      	ldr	r3, [sp, #4]
 800e058:	b2ac      	uxth	r4, r5
 800e05a:	00ed      	lsls	r5, r5, #3
 800e05c:	1958      	adds	r0, r3, r5
 800e05e:	1c7b      	adds	r3, r7, #1
 800e060:	d10b      	bne.n	800e07a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c6>
 800e062:	4601      	mov	r1, r0
 800e064:	9803      	ldr	r0, [sp, #12]
 800e066:	f7ff fb3f 	bl	800d6e8 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 800e06a:	4621      	mov	r1, r4
 800e06c:	9801      	ldr	r0, [sp, #4]
 800e06e:	f7ff fc8d 	bl	800d98c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 800e072:	e4b5      	b.n	800d9e0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 800e074:	464f      	mov	r7, r9
 800e076:	4635      	mov	r5, r6
 800e078:	e7ed      	b.n	800e056 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6a2>
 800e07a:	9b01      	ldr	r3, [sp, #4]
 800e07c:	00ff      	lsls	r7, r7, #3
 800e07e:	19d9      	adds	r1, r3, r7
 800e080:	f7ff fb32 	bl	800d6e8 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 800e084:	9b03      	ldr	r3, [sp, #12]
 800e086:	cb03      	ldmia	r3!, {r0, r1}
 800e088:	445f      	add	r7, fp
 800e08a:	445d      	add	r5, fp
 800e08c:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
 800e090:	f8c7 10b0 	str.w	r1, [r7, #176]	@ 0xb0
 800e094:	f855 0fac 	ldr.w	r0, [r5, #172]!
 800e098:	9b03      	ldr	r3, [sp, #12]
 800e09a:	6869      	ldr	r1, [r5, #4]
 800e09c:	c303      	stmia	r3!, {r0, r1}
 800e09e:	e7e4      	b.n	800e06a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6b6>

0800e0a0 <_ZN8touchgfx11Application15drawCachedAreasEv>:
 800e0a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0a4:	f500 7698 	add.w	r6, r0, #304	@ 0x130
 800e0a8:	b09b      	sub	sp, #108	@ 0x6c
 800e0aa:	4604      	mov	r4, r0
 800e0ac:	4630      	mov	r0, r6
 800e0ae:	f7fb fe0a 	bl	8009cc6 <_ZNK8touchgfx4Rect7isEmptyEv>
 800e0b2:	4605      	mov	r5, r0
 800e0b4:	b948      	cbnz	r0, 800e0ca <_ZN8touchgfx11Application15drawCachedAreasEv+0x2a>
 800e0b6:	6823      	ldr	r3, [r4, #0]
 800e0b8:	e896 0006 	ldmia.w	r6, {r1, r2}
 800e0bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e0be:	4620      	mov	r0, r4
 800e0c0:	4798      	blx	r3
 800e0c2:	f8c4 5130 	str.w	r5, [r4, #304]	@ 0x130
 800e0c6:	f8c4 5134 	str.w	r5, [r4, #308]	@ 0x134
 800e0ca:	4bc6      	ldr	r3, [pc, #792]	@ (800e3e4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x344>)
 800e0cc:	681b      	ldr	r3, [r3, #0]
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	d03f      	beq.n	800e152 <_ZN8touchgfx11Application15drawCachedAreasEv+0xb2>
 800e0d2:	4dc5      	ldr	r5, [pc, #788]	@ (800e3e8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x348>)
 800e0d4:	4628      	mov	r0, r5
 800e0d6:	f7fb fdf6 	bl	8009cc6 <_ZNK8touchgfx4Rect7isEmptyEv>
 800e0da:	4606      	mov	r6, r0
 800e0dc:	2800      	cmp	r0, #0
 800e0de:	d138      	bne.n	800e152 <_ZN8touchgfx11Application15drawCachedAreasEv+0xb2>
 800e0e0:	4628      	mov	r0, r5
 800e0e2:	f7ff f995 	bl	800d410 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 800e0e6:	6823      	ldr	r3, [r4, #0]
 800e0e8:	6829      	ldr	r1, [r5, #0]
 800e0ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e0ec:	686a      	ldr	r2, [r5, #4]
 800e0ee:	4620      	mov	r0, r4
 800e0f0:	4798      	blx	r3
 800e0f2:	802e      	strh	r6, [r5, #0]
 800e0f4:	806e      	strh	r6, [r5, #2]
 800e0f6:	80ae      	strh	r6, [r5, #4]
 800e0f8:	80ee      	strh	r6, [r5, #6]
 800e0fa:	f10d 0824 	add.w	r8, sp, #36	@ 0x24
 800e0fe:	4dbb      	ldr	r5, [pc, #748]	@ (800e3ec <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
 800e100:	4640      	mov	r0, r8
 800e102:	f7ff fbeb 	bl	800d8dc <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 800e106:	882e      	ldrh	r6, [r5, #0]
 800e108:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	@ 0xec
 800e10c:	4633      	mov	r3, r6
 800e10e:	f104 00ac 	add.w	r0, r4, #172	@ 0xac
 800e112:	42bb      	cmp	r3, r7
 800e114:	d224      	bcs.n	800e160 <_ZN8touchgfx11Application15drawCachedAreasEv+0xc0>
 800e116:	f8bd 1064 	ldrh.w	r1, [sp, #100]	@ 0x64
 800e11a:	2907      	cmp	r1, #7
 800e11c:	d816      	bhi.n	800e14c <_ZN8touchgfx11Application15drawCachedAreasEv+0xac>
 800e11e:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 800e122:	f930 9033 	ldrsh.w	r9, [r0, r3, lsl #3]
 800e126:	f9b2 a002 	ldrsh.w	sl, [r2, #2]
 800e12a:	f9b2 e004 	ldrsh.w	lr, [r2, #4]
 800e12e:	f9b2 c006 	ldrsh.w	ip, [r2, #6]
 800e132:	1c4a      	adds	r2, r1, #1
 800e134:	f8ad 2064 	strh.w	r2, [sp, #100]	@ 0x64
 800e138:	eb08 02c1 	add.w	r2, r8, r1, lsl #3
 800e13c:	f828 9031 	strh.w	r9, [r8, r1, lsl #3]
 800e140:	f8a2 a002 	strh.w	sl, [r2, #2]
 800e144:	f8a2 e004 	strh.w	lr, [r2, #4]
 800e148:	f8a2 c006 	strh.w	ip, [r2, #6]
 800e14c:	3301      	adds	r3, #1
 800e14e:	b29b      	uxth	r3, r3
 800e150:	e7df      	b.n	800e112 <_ZN8touchgfx11Application15drawCachedAreasEv+0x72>
 800e152:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 800e156:	2b00      	cmp	r3, #0
 800e158:	d1cf      	bne.n	800e0fa <_ZN8touchgfx11Application15drawCachedAreasEv+0x5a>
 800e15a:	b01b      	add	sp, #108	@ 0x6c
 800e15c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e160:	f8b4 312e 	ldrh.w	r3, [r4, #302]	@ 0x12e
 800e164:	42b3      	cmp	r3, r6
 800e166:	d90c      	bls.n	800e182 <_ZN8touchgfx11Application15drawCachedAreasEv+0xe2>
 800e168:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 800e16c:	6822      	ldr	r2, [r4, #0]
 800e16e:	f8d3 10ee 	ldr.w	r1, [r3, #238]	@ 0xee
 800e172:	6c17      	ldr	r7, [r2, #64]	@ 0x40
 800e174:	f8d3 20f2 	ldr.w	r2, [r3, #242]	@ 0xf2
 800e178:	4620      	mov	r0, r4
 800e17a:	3601      	adds	r6, #1
 800e17c:	47b8      	blx	r7
 800e17e:	b2b6      	uxth	r6, r6
 800e180:	e7ee      	b.n	800e160 <_ZN8touchgfx11Application15drawCachedAreasEv+0xc0>
 800e182:	4a9b      	ldr	r2, [pc, #620]	@ (800e3f0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
 800e184:	6813      	ldr	r3, [r2, #0]
 800e186:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800e18a:	2b01      	cmp	r3, #1
 800e18c:	4691      	mov	r9, r2
 800e18e:	f040 80e2 	bne.w	800e356 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b6>
 800e192:	8829      	ldrh	r1, [r5, #0]
 800e194:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	@ 0xec
 800e198:	eb04 03c1 	add.w	r3, r4, r1, lsl #3
 800e19c:	33ae      	adds	r3, #174	@ 0xae
 800e19e:	2600      	movs	r6, #0
 800e1a0:	428f      	cmp	r7, r1
 800e1a2:	f103 0308 	add.w	r3, r3, #8
 800e1a6:	dd0a      	ble.n	800e1be <_ZN8touchgfx11Application15drawCachedAreasEv+0x11e>
 800e1a8:	f833 2c04 	ldrh.w	r2, [r3, #-4]
 800e1ac:	f833 0c08 	ldrh.w	r0, [r3, #-8]
 800e1b0:	4402      	add	r2, r0
 800e1b2:	b212      	sxth	r2, r2
 800e1b4:	4296      	cmp	r6, r2
 800e1b6:	bfb8      	it	lt
 800e1b8:	4616      	movlt	r6, r2
 800e1ba:	3101      	adds	r1, #1
 800e1bc:	e7f0      	b.n	800e1a0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x100>
 800e1be:	4b8d      	ldr	r3, [pc, #564]	@ (800e3f4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x354>)
 800e1c0:	f8df 922c 	ldr.w	r9, [pc, #556]	@ 800e3f0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>
 800e1c4:	881b      	ldrh	r3, [r3, #0]
 800e1c6:	2b0f      	cmp	r3, #15
 800e1c8:	bf88      	it	hi
 800e1ca:	ea4f 0bd3 	movhi.w	fp, r3, lsr #3
 800e1ce:	f04f 0300 	mov.w	r3, #0
 800e1d2:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800e1d6:	bf98      	it	ls
 800e1d8:	f04f 0b01 	movls.w	fp, #1
 800e1dc:	f8bd 7016 	ldrh.w	r7, [sp, #22]
 800e1e0:	f8bd 001a 	ldrh.w	r0, [sp, #26]
 800e1e4:	4b82      	ldr	r3, [pc, #520]	@ (800e3f0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
 800e1e6:	4438      	add	r0, r7
 800e1e8:	b207      	sxth	r7, r0
 800e1ea:	6818      	ldr	r0, [r3, #0]
 800e1ec:	42b7      	cmp	r7, r6
 800e1ee:	6803      	ldr	r3, [r0, #0]
 800e1f0:	f280 8083 	bge.w	800e2fa <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 800e1f4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800e1f8:	4798      	blx	r3
 800e1fa:	eb07 030b 	add.w	r3, r7, fp
 800e1fe:	4298      	cmp	r0, r3
 800e200:	da07      	bge.n	800e212 <_ZN8touchgfx11Application15drawCachedAreasEv+0x172>
 800e202:	42b0      	cmp	r0, r6
 800e204:	da05      	bge.n	800e212 <_ZN8touchgfx11Application15drawCachedAreasEv+0x172>
 800e206:	4287      	cmp	r7, r0
 800e208:	dd6c      	ble.n	800e2e4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x244>
 800e20a:	2f00      	cmp	r7, #0
 800e20c:	dd6a      	ble.n	800e2e4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x244>
 800e20e:	4630      	mov	r0, r6
 800e210:	e004      	b.n	800e21c <_ZN8touchgfx11Application15drawCachedAreasEv+0x17c>
 800e212:	4287      	cmp	r7, r0
 800e214:	dcfb      	bgt.n	800e20e <_ZN8touchgfx11Application15drawCachedAreasEv+0x16e>
 800e216:	42b0      	cmp	r0, r6
 800e218:	bfa8      	it	ge
 800e21a:	4630      	movge	r0, r6
 800e21c:	4b76      	ldr	r3, [pc, #472]	@ (800e3f8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>)
 800e21e:	f8ad 7016 	strh.w	r7, [sp, #22]
 800e222:	1bc0      	subs	r0, r0, r7
 800e224:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e228:	882f      	ldrh	r7, [r5, #0]
 800e22a:	f8ad 3018 	strh.w	r3, [sp, #24]
 800e22e:	2200      	movs	r2, #0
 800e230:	f8ad 2014 	strh.w	r2, [sp, #20]
 800e234:	f8ad 001a 	strh.w	r0, [sp, #26]
 800e238:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 800e23c:	42bb      	cmp	r3, r7
 800e23e:	d9cd      	bls.n	800e1dc <_ZN8touchgfx11Application15drawCachedAreasEv+0x13c>
 800e240:	eb04 02c7 	add.w	r2, r4, r7, lsl #3
 800e244:	ab07      	add	r3, sp, #28
 800e246:	f852 0fac 	ldr.w	r0, [r2, #172]!
 800e24a:	6851      	ldr	r1, [r2, #4]
 800e24c:	c303      	stmia	r3!, {r0, r1}
 800e24e:	a905      	add	r1, sp, #20
 800e250:	a807      	add	r0, sp, #28
 800e252:	f7ff f9b0 	bl	800d5b6 <_ZNK8touchgfx4Rect9intersectERKS0_>
 800e256:	2800      	cmp	r0, #0
 800e258:	d04c      	beq.n	800e2f4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x254>
 800e25a:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 800e25e:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 800e262:	f8bd a020 	ldrh.w	sl, [sp, #32]
 800e266:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 800e26a:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 800e26e:	9302      	str	r3, [sp, #8]
 800e270:	4686      	mov	lr, r0
 800e272:	4290      	cmp	r0, r2
 800e274:	4450      	add	r0, sl
 800e276:	f8bd a018 	ldrh.w	sl, [sp, #24]
 800e27a:	bfb8      	it	lt
 800e27c:	4696      	movlt	lr, r2
 800e27e:	4452      	add	r2, sl
 800e280:	4299      	cmp	r1, r3
 800e282:	b280      	uxth	r0, r0
 800e284:	b292      	uxth	r2, r2
 800e286:	468c      	mov	ip, r1
 800e288:	fa0f fa82 	sxth.w	sl, r2
 800e28c:	bfb8      	it	lt
 800e28e:	469c      	movlt	ip, r3
 800e290:	b203      	sxth	r3, r0
 800e292:	4553      	cmp	r3, sl
 800e294:	bfb8      	it	lt
 800e296:	4602      	movlt	r2, r0
 800e298:	eba2 020e 	sub.w	r2, r2, lr
 800e29c:	f8ad 2020 	strh.w	r2, [sp, #32]
 800e2a0:	f8bd 2022 	ldrh.w	r2, [sp, #34]	@ 0x22
 800e2a4:	9b02      	ldr	r3, [sp, #8]
 800e2a6:	f8ad e01c 	strh.w	lr, [sp, #28]
 800e2aa:	4411      	add	r1, r2
 800e2ac:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 800e2b0:	f8ad c01e 	strh.w	ip, [sp, #30]
 800e2b4:	4413      	add	r3, r2
 800e2b6:	b289      	uxth	r1, r1
 800e2b8:	b29b      	uxth	r3, r3
 800e2ba:	b208      	sxth	r0, r1
 800e2bc:	b21a      	sxth	r2, r3
 800e2be:	4290      	cmp	r0, r2
 800e2c0:	bfb8      	it	lt
 800e2c2:	460b      	movlt	r3, r1
 800e2c4:	eba3 030c 	sub.w	r3, r3, ip
 800e2c8:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 800e2cc:	a807      	add	r0, sp, #28
 800e2ce:	f7fb fcfa 	bl	8009cc6 <_ZNK8touchgfx4Rect7isEmptyEv>
 800e2d2:	b920      	cbnz	r0, 800e2de <_ZN8touchgfx11Application15drawCachedAreasEv+0x23e>
 800e2d4:	6823      	ldr	r3, [r4, #0]
 800e2d6:	a907      	add	r1, sp, #28
 800e2d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e2da:	4620      	mov	r0, r4
 800e2dc:	4798      	blx	r3
 800e2de:	3701      	adds	r7, #1
 800e2e0:	b2bf      	uxth	r7, r7
 800e2e2:	e7a9      	b.n	800e238 <_ZN8touchgfx11Application15drawCachedAreasEv+0x198>
 800e2e4:	f8d9 0000 	ldr.w	r0, [r9]
 800e2e8:	6803      	ldr	r3, [r0, #0]
 800e2ea:	2101      	movs	r1, #1
 800e2ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800e2f0:	4798      	blx	r3
 800e2f2:	e773      	b.n	800e1dc <_ZN8touchgfx11Application15drawCachedAreasEv+0x13c>
 800e2f4:	e9cd 0007 	strd	r0, r0, [sp, #28]
 800e2f8:	e7e8      	b.n	800e2cc <_ZN8touchgfx11Application15drawCachedAreasEv+0x22c>
 800e2fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e2fc:	4798      	blx	r3
 800e2fe:	4b3f      	ldr	r3, [pc, #252]	@ (800e3fc <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>)
 800e300:	781b      	ldrb	r3, [r3, #0]
 800e302:	2b00      	cmp	r3, #0
 800e304:	f43f af29 	beq.w	800e15a <_ZN8touchgfx11Application15drawCachedAreasEv+0xba>
 800e308:	2300      	movs	r3, #0
 800e30a:	f8a4 312e 	strh.w	r3, [r4, #302]	@ 0x12e
 800e30e:	882b      	ldrh	r3, [r5, #0]
 800e310:	f8bd 5064 	ldrh.w	r5, [sp, #100]	@ 0x64
 800e314:	f104 00ee 	add.w	r0, r4, #238	@ 0xee
 800e318:	42ab      	cmp	r3, r5
 800e31a:	f4bf af1e 	bcs.w	800e15a <_ZN8touchgfx11Application15drawCachedAreasEv+0xba>
 800e31e:	f8b4 112e 	ldrh.w	r1, [r4, #302]	@ 0x12e
 800e322:	2907      	cmp	r1, #7
 800e324:	d814      	bhi.n	800e350 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b0>
 800e326:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
 800e32a:	f938 e033 	ldrsh.w	lr, [r8, r3, lsl #3]
 800e32e:	f9b2 c002 	ldrsh.w	ip, [r2, #2]
 800e332:	f9b2 7004 	ldrsh.w	r7, [r2, #4]
 800e336:	f9b2 6006 	ldrsh.w	r6, [r2, #6]
 800e33a:	1c4a      	adds	r2, r1, #1
 800e33c:	f8a4 212e 	strh.w	r2, [r4, #302]	@ 0x12e
 800e340:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
 800e344:	f820 e031 	strh.w	lr, [r0, r1, lsl #3]
 800e348:	f8a2 c002 	strh.w	ip, [r2, #2]
 800e34c:	8097      	strh	r7, [r2, #4]
 800e34e:	80d6      	strh	r6, [r2, #6]
 800e350:	3301      	adds	r3, #1
 800e352:	b29b      	uxth	r3, r3
 800e354:	e7e0      	b.n	800e318 <_ZN8touchgfx11Application15drawCachedAreasEv+0x278>
 800e356:	2b02      	cmp	r3, #2
 800e358:	f040 8133 	bne.w	800e5c2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x522>
 800e35c:	4b28      	ldr	r3, [pc, #160]	@ (800e400 <_ZN8touchgfx11Application15drawCachedAreasEv+0x360>)
 800e35e:	781b      	ldrb	r3, [r3, #0]
 800e360:	2b01      	cmp	r3, #1
 800e362:	f104 0aac 	add.w	sl, r4, #172	@ 0xac
 800e366:	f000 8098 	beq.w	800e49a <_ZN8touchgfx11Application15drawCachedAreasEv+0x3fa>
 800e36a:	882a      	ldrh	r2, [r5, #0]
 800e36c:	f8b4 10ec 	ldrh.w	r1, [r4, #236]	@ 0xec
 800e370:	3201      	adds	r2, #1
 800e372:	b292      	uxth	r2, r2
 800e374:	2900      	cmp	r1, #0
 800e376:	d0c2      	beq.n	800e2fe <_ZN8touchgfx11Application15drawCachedAreasEv+0x25e>
 800e378:	f8b4 60ae 	ldrh.w	r6, [r4, #174]	@ 0xae
 800e37c:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	@ 0xb2
 800e380:	441e      	add	r6, r3
 800e382:	b236      	sxth	r6, r6
 800e384:	4694      	mov	ip, r2
 800e386:	f04f 0900 	mov.w	r9, #0
 800e38a:	fa1f f38c 	uxth.w	r3, ip
 800e38e:	4299      	cmp	r1, r3
 800e390:	ea4f 07c9 	mov.w	r7, r9, lsl #3
 800e394:	f240 80bf 	bls.w	800e516 <_ZN8touchgfx11Application15drawCachedAreasEv+0x476>
 800e398:	4427      	add	r7, r4
 800e39a:	eb04 0ecc 	add.w	lr, r4, ip, lsl #3
 800e39e:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 800e3a2:	f9be 00ae 	ldrsh.w	r0, [lr, #174]	@ 0xae
 800e3a6:	4283      	cmp	r3, r0
 800e3a8:	f340 80a1 	ble.w	800e4ee <_ZN8touchgfx11Application15drawCachedAreasEv+0x44e>
 800e3ac:	f8be 60b2 	ldrh.w	r6, [lr, #178]	@ 0xb2
 800e3b0:	4406      	add	r6, r0
 800e3b2:	b236      	sxth	r6, r6
 800e3b4:	429e      	cmp	r6, r3
 800e3b6:	bfa8      	it	ge
 800e3b8:	461e      	movge	r6, r3
 800e3ba:	46e1      	mov	r9, ip
 800e3bc:	f10c 0c01 	add.w	ip, ip, #1
 800e3c0:	e7e3      	b.n	800e38a <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ea>
 800e3c2:	d10a      	bne.n	800e3da <_ZN8touchgfx11Application15drawCachedAreasEv+0x33a>
 800e3c4:	f9b6 00b2 	ldrsh.w	r0, [r6, #178]	@ 0xb2
 800e3c8:	f9be 10b2 	ldrsh.w	r1, [lr, #178]	@ 0xb2
 800e3cc:	4562      	cmp	r2, ip
 800e3ce:	bfb8      	it	lt
 800e3d0:	4662      	movlt	r2, ip
 800e3d2:	4288      	cmp	r0, r1
 800e3d4:	bfb8      	it	lt
 800e3d6:	461f      	movlt	r7, r3
 800e3d8:	e087      	b.n	800e4ea <_ZN8touchgfx11Application15drawCachedAreasEv+0x44a>
 800e3da:	428a      	cmp	r2, r1
 800e3dc:	bfb8      	it	lt
 800e3de:	460a      	movlt	r2, r1
 800e3e0:	e083      	b.n	800e4ea <_ZN8touchgfx11Application15drawCachedAreasEv+0x44a>
 800e3e2:	bf00      	nop
 800e3e4:	20014f8c 	.word	0x20014f8c
 800e3e8:	20014f98 	.word	0x20014f98
 800e3ec:	20000084 	.word	0x20000084
 800e3f0:	20014f54 	.word	0x20014f54
 800e3f4:	20014f4a 	.word	0x20014f4a
 800e3f8:	20014f48 	.word	0x20014f48
 800e3fc:	20014f52 	.word	0x20014f52
 800e400:	20014f4c 	.word	0x20014f4c
 800e404:	19a1      	adds	r1, r4, r6
 800e406:	ab07      	add	r3, sp, #28
 800e408:	f851 0fac 	ldr.w	r0, [r1, #172]!
 800e40c:	6849      	ldr	r1, [r1, #4]
 800e40e:	c303      	stmia	r3!, {r0, r1}
 800e410:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 800e414:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 800e418:	2b13      	cmp	r3, #19
 800e41a:	bfd8      	it	le
 800e41c:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 800e420:	f8ad 201c 	strh.w	r2, [sp, #28]
 800e424:	440b      	add	r3, r1
 800e426:	1a9b      	subs	r3, r3, r2
 800e428:	a807      	add	r0, sp, #28
 800e42a:	f8ad 3020 	strh.w	r3, [sp, #32]
 800e42e:	f7ff f809 	bl	800d444 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 800e432:	a807      	add	r0, sp, #28
 800e434:	f7fb fc47 	bl	8009cc6 <_ZNK8touchgfx4Rect7isEmptyEv>
 800e438:	bb78      	cbnz	r0, 800e49a <_ZN8touchgfx11Application15drawCachedAreasEv+0x3fa>
 800e43a:	f9bd c022 	ldrsh.w	ip, [sp, #34]	@ 0x22
 800e43e:	f8d9 0000 	ldr.w	r0, [r9]
 800e442:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800e446:	f8d0 e000 	ldr.w	lr, [r0]
 800e44a:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800e44e:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 800e452:	f1bc 0f14 	cmp.w	ip, #20
 800e456:	bfa8      	it	ge
 800e458:	f04f 0c14 	movge.w	ip, #20
 800e45c:	fa1f fc8c 	uxth.w	ip, ip
 800e460:	f8cd c000 	str.w	ip, [sp]
 800e464:	f8de b090 	ldr.w	fp, [lr, #144]	@ 0x90
 800e468:	47d8      	blx	fp
 800e46a:	4683      	mov	fp, r0
 800e46c:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 800e470:	a807      	add	r0, sp, #28
 800e472:	f7fe ffcd 	bl	800d410 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 800e476:	6823      	ldr	r3, [r4, #0]
 800e478:	4426      	add	r6, r4
 800e47a:	4620      	mov	r0, r4
 800e47c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e47e:	a907      	add	r1, sp, #28
 800e480:	4798      	blx	r3
 800e482:	f8b6 00b0 	ldrh.w	r0, [r6, #176]	@ 0xb0
 800e486:	eba0 000b 	sub.w	r0, r0, fp
 800e48a:	b200      	sxth	r0, r0
 800e48c:	f8a6 00b0 	strh.w	r0, [r6, #176]	@ 0xb0
 800e490:	b918      	cbnz	r0, 800e49a <_ZN8touchgfx11Application15drawCachedAreasEv+0x3fa>
 800e492:	b2b9      	uxth	r1, r7
 800e494:	4650      	mov	r0, sl
 800e496:	f7ff fa79 	bl	800d98c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 800e49a:	f8b4 b0ec 	ldrh.w	fp, [r4, #236]	@ 0xec
 800e49e:	f1bb 0f00 	cmp.w	fp, #0
 800e4a2:	f43f af2c 	beq.w	800e2fe <_ZN8touchgfx11Application15drawCachedAreasEv+0x25e>
 800e4a6:	882b      	ldrh	r3, [r5, #0]
 800e4a8:	f9b4 20ac 	ldrsh.w	r2, [r4, #172]	@ 0xac
 800e4ac:	3301      	adds	r3, #1
 800e4ae:	b29b      	uxth	r3, r3
 800e4b0:	2700      	movs	r7, #0
 800e4b2:	b299      	uxth	r1, r3
 800e4b4:	458b      	cmp	fp, r1
 800e4b6:	ea4f 06c7 	mov.w	r6, r7, lsl #3
 800e4ba:	d9a3      	bls.n	800e404 <_ZN8touchgfx11Application15drawCachedAreasEv+0x364>
 800e4bc:	4426      	add	r6, r4
 800e4be:	eb04 0ec3 	add.w	lr, r4, r3, lsl #3
 800e4c2:	f8b6 10ac 	ldrh.w	r1, [r6, #172]	@ 0xac
 800e4c6:	f8b6 00b0 	ldrh.w	r0, [r6, #176]	@ 0xb0
 800e4ca:	f9be c0ac 	ldrsh.w	ip, [lr, #172]	@ 0xac
 800e4ce:	4408      	add	r0, r1
 800e4d0:	f8be 10b0 	ldrh.w	r1, [lr, #176]	@ 0xb0
 800e4d4:	4461      	add	r1, ip
 800e4d6:	b200      	sxth	r0, r0
 800e4d8:	b209      	sxth	r1, r1
 800e4da:	4288      	cmp	r0, r1
 800e4dc:	f6bf af71 	bge.w	800e3c2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x322>
 800e4e0:	4584      	cmp	ip, r0
 800e4e2:	4662      	mov	r2, ip
 800e4e4:	461f      	mov	r7, r3
 800e4e6:	bfb8      	it	lt
 800e4e8:	4602      	movlt	r2, r0
 800e4ea:	3301      	adds	r3, #1
 800e4ec:	e7e1      	b.n	800e4b2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x412>
 800e4ee:	d10e      	bne.n	800e50e <_ZN8touchgfx11Application15drawCachedAreasEv+0x46e>
 800e4f0:	f9be 00b0 	ldrsh.w	r0, [lr, #176]	@ 0xb0
 800e4f4:	f8be e0b2 	ldrh.w	lr, [lr, #178]	@ 0xb2
 800e4f8:	f9b7 70b0 	ldrsh.w	r7, [r7, #176]	@ 0xb0
 800e4fc:	4473      	add	r3, lr
 800e4fe:	b21b      	sxth	r3, r3
 800e500:	429e      	cmp	r6, r3
 800e502:	bfa8      	it	ge
 800e504:	461e      	movge	r6, r3
 800e506:	4287      	cmp	r7, r0
 800e508:	bfb8      	it	lt
 800e50a:	46e1      	movlt	r9, ip
 800e50c:	e756      	b.n	800e3bc <_ZN8touchgfx11Application15drawCachedAreasEv+0x31c>
 800e50e:	4286      	cmp	r6, r0
 800e510:	bfa8      	it	ge
 800e512:	4606      	movge	r6, r0
 800e514:	e752      	b.n	800e3bc <_ZN8touchgfx11Application15drawCachedAreasEv+0x31c>
 800e516:	eb0a 0007 	add.w	r0, sl, r7
 800e51a:	4427      	add	r7, r4
 800e51c:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800e520:	f9b7 b0b2 	ldrsh.w	fp, [r7, #178]	@ 0xb2
 800e524:	f1bb 0f13 	cmp.w	fp, #19
 800e528:	bfde      	ittt	le
 800e52a:	f8b7 60ae 	ldrhle.w	r6, [r7, #174]	@ 0xae
 800e52e:	445e      	addle	r6, fp
 800e530:	b236      	sxthle	r6, r6
 800e532:	f7fb fbc8 	bl	8009cc6 <_ZNK8touchgfx4Rect7isEmptyEv>
 800e536:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800e53a:	2800      	cmp	r0, #0
 800e53c:	f47f af1a 	bne.w	800e374 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2d4>
 800e540:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	@ 0xae
 800e544:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 800e548:	482a      	ldr	r0, [pc, #168]	@ (800e5f4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x554>)
 800e54a:	f9b7 10ac 	ldrsh.w	r1, [r7, #172]	@ 0xac
 800e54e:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	@ 0xb0
 800e552:	6800      	ldr	r0, [r0, #0]
 800e554:	f8ad 101c 	strh.w	r1, [sp, #28]
 800e558:	1ab6      	subs	r6, r6, r2
 800e55a:	2e14      	cmp	r6, #20
 800e55c:	f8ad 201e 	strh.w	r2, [sp, #30]
 800e560:	f8ad 3020 	strh.w	r3, [sp, #32]
 800e564:	bfa8      	it	ge
 800e566:	2614      	movge	r6, #20
 800e568:	f8d0 c000 	ldr.w	ip, [r0]
 800e56c:	b2b6      	uxth	r6, r6
 800e56e:	fa1f fb8b 	uxth.w	fp, fp
 800e572:	455e      	cmp	r6, fp
 800e574:	bf94      	ite	ls
 800e576:	9600      	strls	r6, [sp, #0]
 800e578:	f8cd b000 	strhi.w	fp, [sp]
 800e57c:	b292      	uxth	r2, r2
 800e57e:	f8dc 6090 	ldr.w	r6, [ip, #144]	@ 0x90
 800e582:	b29b      	uxth	r3, r3
 800e584:	b289      	uxth	r1, r1
 800e586:	47b0      	blx	r6
 800e588:	6823      	ldr	r3, [r4, #0]
 800e58a:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 800e58e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e590:	a907      	add	r1, sp, #28
 800e592:	4620      	mov	r0, r4
 800e594:	4798      	blx	r3
 800e596:	f8bd 1022 	ldrh.w	r1, [sp, #34]	@ 0x22
 800e59a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800e59e:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	@ 0xae
 800e5a2:	1a5b      	subs	r3, r3, r1
 800e5a4:	440a      	add	r2, r1
 800e5a6:	b21b      	sxth	r3, r3
 800e5a8:	f8a7 20ae 	strh.w	r2, [r7, #174]	@ 0xae
 800e5ac:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
 800e5b0:	2b00      	cmp	r3, #0
 800e5b2:	f47f aeda 	bne.w	800e36a <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ca>
 800e5b6:	fa1f f189 	uxth.w	r1, r9
 800e5ba:	4650      	mov	r0, sl
 800e5bc:	f7ff f9e6 	bl	800d98c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 800e5c0:	e6d3      	b.n	800e36a <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ca>
 800e5c2:	882e      	ldrh	r6, [r5, #0]
 800e5c4:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 800e5c8:	42b3      	cmp	r3, r6
 800e5ca:	f67f ae98 	bls.w	800e2fe <_ZN8touchgfx11Application15drawCachedAreasEv+0x25e>
 800e5ce:	eb04 02c6 	add.w	r2, r4, r6, lsl #3
 800e5d2:	ab07      	add	r3, sp, #28
 800e5d4:	f852 0fac 	ldr.w	r0, [r2, #172]!
 800e5d8:	6851      	ldr	r1, [r2, #4]
 800e5da:	c303      	stmia	r3!, {r0, r1}
 800e5dc:	a807      	add	r0, sp, #28
 800e5de:	f7fb fb72 	bl	8009cc6 <_ZNK8touchgfx4Rect7isEmptyEv>
 800e5e2:	b920      	cbnz	r0, 800e5ee <_ZN8touchgfx11Application15drawCachedAreasEv+0x54e>
 800e5e4:	6823      	ldr	r3, [r4, #0]
 800e5e6:	a907      	add	r1, sp, #28
 800e5e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e5ea:	4620      	mov	r0, r4
 800e5ec:	4798      	blx	r3
 800e5ee:	3601      	adds	r6, #1
 800e5f0:	b2b6      	uxth	r6, r6
 800e5f2:	e7e7      	b.n	800e5c4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x524>
 800e5f4:	20014f54 	.word	0x20014f54

0800e5f8 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 800e5f8:	4b03      	ldr	r3, [pc, #12]	@ (800e608 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 800e5fa:	2200      	movs	r2, #0
 800e5fc:	801a      	strh	r2, [r3, #0]
 800e5fe:	805a      	strh	r2, [r3, #2]
 800e600:	809a      	strh	r2, [r3, #4]
 800e602:	80da      	strh	r2, [r3, #6]
 800e604:	4770      	bx	lr
 800e606:	bf00      	nop
 800e608:	20014f98 	.word	0x20014f98

0800e60c <_ZNK8touchgfx4Font17getStringWidthRTLEhPKtSt9__va_list>:
 800e60c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e610:	4604      	mov	r4, r0
 800e612:	b09c      	sub	sp, #112	@ 0x70
 800e614:	a803      	add	r0, sp, #12
 800e616:	4615      	mov	r5, r2
 800e618:	460e      	mov	r6, r1
 800e61a:	461f      	mov	r7, r3
 800e61c:	f000 fd56 	bl	800f0cc <_ZN8touchgfx12TextProviderC1Ev>
 800e620:	6823      	ldr	r3, [r4, #0]
 800e622:	4620      	mov	r0, r4
 800e624:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e626:	4798      	blx	r3
 800e628:	6823      	ldr	r3, [r4, #0]
 800e62a:	4680      	mov	r8, r0
 800e62c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e62e:	4620      	mov	r0, r4
 800e630:	4798      	blx	r3
 800e632:	4629      	mov	r1, r5
 800e634:	9000      	str	r0, [sp, #0]
 800e636:	4643      	mov	r3, r8
 800e638:	463a      	mov	r2, r7
 800e63a:	a803      	add	r0, sp, #12
 800e63c:	f000 fda1 	bl	800f182 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800e640:	2500      	movs	r5, #0
 800e642:	a803      	add	r0, sp, #12
 800e644:	f000 fd69 	bl	800f11a <_ZN8touchgfx12TextProvider11endOfStringEv>
 800e648:	b958      	cbnz	r0, 800e662 <_ZNK8touchgfx4Font17getStringWidthRTLEhPKtSt9__va_list+0x56>
 800e64a:	4633      	mov	r3, r6
 800e64c:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800e650:	4621      	mov	r1, r4
 800e652:	a803      	add	r0, sp, #12
 800e654:	f7fd fd0f 	bl	800c076 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 800e658:	b203      	sxth	r3, r0
 800e65a:	42ab      	cmp	r3, r5
 800e65c:	bfc8      	it	gt
 800e65e:	4605      	movgt	r5, r0
 800e660:	e7ef      	b.n	800e642 <_ZNK8touchgfx4Font17getStringWidthRTLEhPKtSt9__va_list+0x36>
 800e662:	4628      	mov	r0, r5
 800e664:	b01c      	add	sp, #112	@ 0x70
 800e666:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e66a <_ZNK8touchgfx4Font12getCharWidthEt>:
 800e66a:	b508      	push	{r3, lr}
 800e66c:	6803      	ldr	r3, [r0, #0]
 800e66e:	68db      	ldr	r3, [r3, #12]
 800e670:	4798      	blx	r3
 800e672:	b128      	cbz	r0, 800e680 <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 800e674:	7b43      	ldrb	r3, [r0, #13]
 800e676:	7a80      	ldrb	r0, [r0, #10]
 800e678:	005b      	lsls	r3, r3, #1
 800e67a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e67e:	4318      	orrs	r0, r3
 800e680:	bd08      	pop	{r3, pc}

0800e682 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 800e682:	b40e      	push	{r1, r2, r3}
 800e684:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e686:	b09e      	sub	sp, #120	@ 0x78
 800e688:	ab23      	add	r3, sp, #140	@ 0x8c
 800e68a:	4605      	mov	r5, r0
 800e68c:	f853 4b04 	ldr.w	r4, [r3], #4
 800e690:	9303      	str	r3, [sp, #12]
 800e692:	a805      	add	r0, sp, #20
 800e694:	f000 fd1a 	bl	800f0cc <_ZN8touchgfx12TextProviderC1Ev>
 800e698:	682b      	ldr	r3, [r5, #0]
 800e69a:	4628      	mov	r0, r5
 800e69c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e69e:	4798      	blx	r3
 800e6a0:	682b      	ldr	r3, [r5, #0]
 800e6a2:	4606      	mov	r6, r0
 800e6a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e6a6:	4628      	mov	r0, r5
 800e6a8:	4798      	blx	r3
 800e6aa:	4633      	mov	r3, r6
 800e6ac:	ae1e      	add	r6, sp, #120	@ 0x78
 800e6ae:	4621      	mov	r1, r4
 800e6b0:	9000      	str	r0, [sp, #0]
 800e6b2:	9a03      	ldr	r2, [sp, #12]
 800e6b4:	2400      	movs	r4, #0
 800e6b6:	a805      	add	r0, sp, #20
 800e6b8:	f000 fd63 	bl	800f182 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800e6bc:	f846 4d68 	str.w	r4, [r6, #-104]!
 800e6c0:	462a      	mov	r2, r5
 800e6c2:	4633      	mov	r3, r6
 800e6c4:	4621      	mov	r1, r4
 800e6c6:	a805      	add	r0, sp, #20
 800e6c8:	f001 fcb8 	bl	801003c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800e6cc:	b1f0      	cbz	r0, 800e70c <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8a>
 800e6ce:	280a      	cmp	r0, #10
 800e6d0:	d018      	beq.n	800e704 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x82>
 800e6d2:	9f04      	ldr	r7, [sp, #16]
 800e6d4:	b1b7      	cbz	r7, 800e704 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x82>
 800e6d6:	7b78      	ldrb	r0, [r7, #13]
 800e6d8:	7a3b      	ldrb	r3, [r7, #8]
 800e6da:	88ea      	ldrh	r2, [r5, #6]
 800e6dc:	00c1      	lsls	r1, r0, #3
 800e6de:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 800e6e2:	4319      	orrs	r1, r3
 800e6e4:	0643      	lsls	r3, r0, #25
 800e6e6:	bf44      	itt	mi
 800e6e8:	f5a1 7300 	submi.w	r3, r1, #512	@ 0x200
 800e6ec:	b219      	sxthmi	r1, r3
 800e6ee:	0100      	lsls	r0, r0, #4
 800e6f0:	79fb      	ldrb	r3, [r7, #7]
 800e6f2:	f400 7080 	and.w	r0, r0, #256	@ 0x100
 800e6f6:	4303      	orrs	r3, r0
 800e6f8:	4413      	add	r3, r2
 800e6fa:	1a5b      	subs	r3, r3, r1
 800e6fc:	b21b      	sxth	r3, r3
 800e6fe:	429c      	cmp	r4, r3
 800e700:	bfb8      	it	lt
 800e702:	461c      	movlt	r4, r3
 800e704:	4633      	mov	r3, r6
 800e706:	462a      	mov	r2, r5
 800e708:	2100      	movs	r1, #0
 800e70a:	e7dc      	b.n	800e6c6 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 800e70c:	b2a0      	uxth	r0, r4
 800e70e:	b01e      	add	sp, #120	@ 0x78
 800e710:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800e714:	b003      	add	sp, #12
 800e716:	4770      	bx	lr

0800e718 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
 800e718:	7a43      	ldrb	r3, [r0, #9]
 800e71a:	8880      	ldrh	r0, [r0, #4]
 800e71c:	4418      	add	r0, r3
 800e71e:	b280      	uxth	r0, r0
 800e720:	4770      	bx	lr

0800e722 <_ZNK8touchgfx4Font13getFontHeightEv>:
 800e722:	6803      	ldr	r3, [r0, #0]
 800e724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e726:	4718      	bx	r3

0800e728 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 800e728:	b40e      	push	{r1, r2, r3}
 800e72a:	b570      	push	{r4, r5, r6, lr}
 800e72c:	b09d      	sub	sp, #116	@ 0x74
 800e72e:	ab21      	add	r3, sp, #132	@ 0x84
 800e730:	4604      	mov	r4, r0
 800e732:	f853 5b04 	ldr.w	r5, [r3], #4
 800e736:	9302      	str	r3, [sp, #8]
 800e738:	a803      	add	r0, sp, #12
 800e73a:	f000 fcc7 	bl	800f0cc <_ZN8touchgfx12TextProviderC1Ev>
 800e73e:	6823      	ldr	r3, [r4, #0]
 800e740:	4620      	mov	r0, r4
 800e742:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e744:	4798      	blx	r3
 800e746:	6823      	ldr	r3, [r4, #0]
 800e748:	4606      	mov	r6, r0
 800e74a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e74c:	4620      	mov	r0, r4
 800e74e:	4798      	blx	r3
 800e750:	4633      	mov	r3, r6
 800e752:	9000      	str	r0, [sp, #0]
 800e754:	9a02      	ldr	r2, [sp, #8]
 800e756:	4629      	mov	r1, r5
 800e758:	a803      	add	r0, sp, #12
 800e75a:	f000 fd12 	bl	800f182 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800e75e:	a803      	add	r0, sp, #12
 800e760:	f001 fd3a 	bl	80101d8 <_ZN8touchgfx12TextProvider11getNextCharEv>
 800e764:	2401      	movs	r4, #1
 800e766:	b2a3      	uxth	r3, r4
 800e768:	b140      	cbz	r0, 800e77c <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x54>
 800e76a:	280a      	cmp	r0, #10
 800e76c:	bf08      	it	eq
 800e76e:	3301      	addeq	r3, #1
 800e770:	a803      	add	r0, sp, #12
 800e772:	bf08      	it	eq
 800e774:	b21c      	sxtheq	r4, r3
 800e776:	f001 fd2f 	bl	80101d8 <_ZN8touchgfx12TextProvider11getNextCharEv>
 800e77a:	e7f4      	b.n	800e766 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 800e77c:	4618      	mov	r0, r3
 800e77e:	b01d      	add	sp, #116	@ 0x74
 800e780:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e784:	b003      	add	sp, #12
 800e786:	4770      	bx	lr

0800e788 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 800e788:	b40e      	push	{r1, r2, r3}
 800e78a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e78c:	b09e      	sub	sp, #120	@ 0x78
 800e78e:	ab23      	add	r3, sp, #140	@ 0x8c
 800e790:	4604      	mov	r4, r0
 800e792:	f853 5b04 	ldr.w	r5, [r3], #4
 800e796:	9303      	str	r3, [sp, #12]
 800e798:	a805      	add	r0, sp, #20
 800e79a:	f000 fc97 	bl	800f0cc <_ZN8touchgfx12TextProviderC1Ev>
 800e79e:	6823      	ldr	r3, [r4, #0]
 800e7a0:	4620      	mov	r0, r4
 800e7a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e7a4:	4798      	blx	r3
 800e7a6:	6823      	ldr	r3, [r4, #0]
 800e7a8:	4606      	mov	r6, r0
 800e7aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e7ac:	4620      	mov	r0, r4
 800e7ae:	4798      	blx	r3
 800e7b0:	4633      	mov	r3, r6
 800e7b2:	4629      	mov	r1, r5
 800e7b4:	9000      	str	r0, [sp, #0]
 800e7b6:	9a03      	ldr	r2, [sp, #12]
 800e7b8:	a805      	add	r0, sp, #20
 800e7ba:	ad1e      	add	r5, sp, #120	@ 0x78
 800e7bc:	f000 fce1 	bl	800f182 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800e7c0:	2100      	movs	r1, #0
 800e7c2:	f845 1d68 	str.w	r1, [r5, #-104]!
 800e7c6:	4622      	mov	r2, r4
 800e7c8:	462b      	mov	r3, r5
 800e7ca:	a805      	add	r0, sp, #20
 800e7cc:	f001 fc36 	bl	801003c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800e7d0:	f647 76ff 	movw	r6, #32767	@ 0x7fff
 800e7d4:	b1d8      	cbz	r0, 800e80e <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x86>
 800e7d6:	280a      	cmp	r0, #10
 800e7d8:	d012      	beq.n	800e800 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 800e7da:	9804      	ldr	r0, [sp, #16]
 800e7dc:	b180      	cbz	r0, 800e800 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 800e7de:	7b47      	ldrb	r7, [r0, #13]
 800e7e0:	88e2      	ldrh	r2, [r4, #6]
 800e7e2:	00fb      	lsls	r3, r7, #3
 800e7e4:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 800e7e8:	7a03      	ldrb	r3, [r0, #8]
 800e7ea:	430b      	orrs	r3, r1
 800e7ec:	0679      	lsls	r1, r7, #25
 800e7ee:	bf44      	itt	mi
 800e7f0:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 800e7f4:	b21b      	sxthmi	r3, r3
 800e7f6:	1ad3      	subs	r3, r2, r3
 800e7f8:	b21b      	sxth	r3, r3
 800e7fa:	429e      	cmp	r6, r3
 800e7fc:	bfa8      	it	ge
 800e7fe:	461e      	movge	r6, r3
 800e800:	462b      	mov	r3, r5
 800e802:	4622      	mov	r2, r4
 800e804:	2100      	movs	r1, #0
 800e806:	a805      	add	r0, sp, #20
 800e808:	f001 fc18 	bl	801003c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800e80c:	e7e2      	b.n	800e7d4 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4c>
 800e80e:	4630      	mov	r0, r6
 800e810:	b01e      	add	sp, #120	@ 0x78
 800e812:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800e816:	b003      	add	sp, #12
 800e818:	4770      	bx	lr

0800e81a <_ZNK8touchgfx8Drawable10invalidateEv>:
 800e81a:	b513      	push	{r0, r1, r4, lr}
 800e81c:	6803      	ldr	r3, [r0, #0]
 800e81e:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 800e822:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 800e826:	f8ad 1004 	strh.w	r1, [sp, #4]
 800e82a:	2400      	movs	r4, #0
 800e82c:	9400      	str	r4, [sp, #0]
 800e82e:	f8ad 2006 	strh.w	r2, [sp, #6]
 800e832:	691b      	ldr	r3, [r3, #16]
 800e834:	4669      	mov	r1, sp
 800e836:	4798      	blx	r3
 800e838:	b002      	add	sp, #8
 800e83a:	bd10      	pop	{r4, pc}

0800e83c <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 800e83c:	b538      	push	{r3, r4, r5, lr}
 800e83e:	680b      	ldr	r3, [r1, #0]
 800e840:	460c      	mov	r4, r1
 800e842:	68db      	ldr	r3, [r3, #12]
 800e844:	4605      	mov	r5, r0
 800e846:	4798      	blx	r3
 800e848:	6823      	ldr	r3, [r4, #0]
 800e84a:	4620      	mov	r0, r4
 800e84c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e84e:	4629      	mov	r1, r5
 800e850:	4798      	blx	r3
 800e852:	4628      	mov	r0, r5
 800e854:	bd38      	pop	{r3, r4, r5, pc}

0800e856 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 800e856:	b410      	push	{r4}
 800e858:	880a      	ldrh	r2, [r1, #0]
 800e85a:	8884      	ldrh	r4, [r0, #4]
 800e85c:	4422      	add	r2, r4
 800e85e:	800a      	strh	r2, [r1, #0]
 800e860:	88c4      	ldrh	r4, [r0, #6]
 800e862:	884a      	ldrh	r2, [r1, #2]
 800e864:	4422      	add	r2, r4
 800e866:	804a      	strh	r2, [r1, #2]
 800e868:	6940      	ldr	r0, [r0, #20]
 800e86a:	b120      	cbz	r0, 800e876 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 800e86c:	6803      	ldr	r3, [r0, #0]
 800e86e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e872:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e874:	4718      	bx	r3
 800e876:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e87a:	4770      	bx	lr

0800e87c <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 800e87c:	b570      	push	{r4, r5, r6, lr}
 800e87e:	8882      	ldrh	r2, [r0, #4]
 800e880:	880b      	ldrh	r3, [r1, #0]
 800e882:	4413      	add	r3, r2
 800e884:	800b      	strh	r3, [r1, #0]
 800e886:	88c2      	ldrh	r2, [r0, #6]
 800e888:	884b      	ldrh	r3, [r1, #2]
 800e88a:	460c      	mov	r4, r1
 800e88c:	4413      	add	r3, r2
 800e88e:	804b      	strh	r3, [r1, #2]
 800e890:	4605      	mov	r5, r0
 800e892:	1d01      	adds	r1, r0, #4
 800e894:	4620      	mov	r0, r4
 800e896:	f7fb f9d3 	bl	8009c40 <_ZN8touchgfx4RectaNERKS0_>
 800e89a:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 800e89e:	2b00      	cmp	r3, #0
 800e8a0:	dd0b      	ble.n	800e8ba <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 800e8a2:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 800e8a6:	2b00      	cmp	r3, #0
 800e8a8:	dd07      	ble.n	800e8ba <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 800e8aa:	6968      	ldr	r0, [r5, #20]
 800e8ac:	b128      	cbz	r0, 800e8ba <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 800e8ae:	6803      	ldr	r3, [r0, #0]
 800e8b0:	4621      	mov	r1, r4
 800e8b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e8b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e8b8:	4718      	bx	r3
 800e8ba:	bd70      	pop	{r4, r5, r6, pc}

0800e8bc <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 800e8bc:	b570      	push	{r4, r5, r6, lr}
 800e8be:	8882      	ldrh	r2, [r0, #4]
 800e8c0:	880b      	ldrh	r3, [r1, #0]
 800e8c2:	4413      	add	r3, r2
 800e8c4:	800b      	strh	r3, [r1, #0]
 800e8c6:	88c2      	ldrh	r2, [r0, #6]
 800e8c8:	884b      	ldrh	r3, [r1, #2]
 800e8ca:	460c      	mov	r4, r1
 800e8cc:	4413      	add	r3, r2
 800e8ce:	804b      	strh	r3, [r1, #2]
 800e8d0:	4605      	mov	r5, r0
 800e8d2:	1d01      	adds	r1, r0, #4
 800e8d4:	4620      	mov	r0, r4
 800e8d6:	f7fb f9b3 	bl	8009c40 <_ZN8touchgfx4RectaNERKS0_>
 800e8da:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 800e8de:	2b00      	cmp	r3, #0
 800e8e0:	dd19      	ble.n	800e916 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 800e8e2:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 800e8e6:	2b00      	cmp	r3, #0
 800e8e8:	dd15      	ble.n	800e916 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 800e8ea:	6968      	ldr	r0, [r5, #20]
 800e8ec:	b128      	cbz	r0, 800e8fa <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 800e8ee:	6803      	ldr	r3, [r0, #0]
 800e8f0:	4621      	mov	r1, r4
 800e8f2:	691b      	ldr	r3, [r3, #16]
 800e8f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e8f8:	4718      	bx	r3
 800e8fa:	4b07      	ldr	r3, [pc, #28]	@ (800e918 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
 800e8fc:	681b      	ldr	r3, [r3, #0]
 800e8fe:	3304      	adds	r3, #4
 800e900:	429d      	cmp	r5, r3
 800e902:	d108      	bne.n	800e916 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 800e904:	f7fe ff36 	bl	800d774 <_ZN8touchgfx11Application11getInstanceEv>
 800e908:	6803      	ldr	r3, [r0, #0]
 800e90a:	6821      	ldr	r1, [r4, #0]
 800e90c:	6862      	ldr	r2, [r4, #4]
 800e90e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e910:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e914:	4718      	bx	r3
 800e916:	bd70      	pop	{r4, r5, r6, pc}
 800e918:	20014f90 	.word	0x20014f90

0800e91c <_ZN8touchgfx8Drawable12moveRelativeEss>:
 800e91c:	b570      	push	{r4, r5, r6, lr}
 800e91e:	4604      	mov	r4, r0
 800e920:	4616      	mov	r6, r2
 800e922:	460d      	mov	r5, r1
 800e924:	b901      	cbnz	r1, 800e928 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 800e926:	b192      	cbz	r2, 800e94e <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 800e928:	6823      	ldr	r3, [r4, #0]
 800e92a:	4620      	mov	r0, r4
 800e92c:	699b      	ldr	r3, [r3, #24]
 800e92e:	4798      	blx	r3
 800e930:	88e2      	ldrh	r2, [r4, #6]
 800e932:	88a1      	ldrh	r1, [r4, #4]
 800e934:	4432      	add	r2, r6
 800e936:	4429      	add	r1, r5
 800e938:	4620      	mov	r0, r4
 800e93a:	b212      	sxth	r2, r2
 800e93c:	b209      	sxth	r1, r1
 800e93e:	f7f2 fb39 	bl	8000fb4 <_ZN8touchgfx8Drawable5setXYEss>
 800e942:	6823      	ldr	r3, [r4, #0]
 800e944:	4620      	mov	r0, r4
 800e946:	699b      	ldr	r3, [r3, #24]
 800e948:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e94c:	4718      	bx	r3
 800e94e:	bd70      	pop	{r4, r5, r6, pc}

0800e950 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 800e950:	b510      	push	{r4, lr}
 800e952:	4604      	mov	r4, r0
 800e954:	4608      	mov	r0, r1
 800e956:	2300      	movs	r3, #0
 800e958:	8023      	strh	r3, [r4, #0]
 800e95a:	8063      	strh	r3, [r4, #2]
 800e95c:	6803      	ldr	r3, [r0, #0]
 800e95e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 800e962:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 800e966:	80a1      	strh	r1, [r4, #4]
 800e968:	80e2      	strh	r2, [r4, #6]
 800e96a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e96c:	4621      	mov	r1, r4
 800e96e:	4798      	blx	r3
 800e970:	4620      	mov	r0, r4
 800e972:	bd10      	pop	{r4, pc}

0800e974 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>:
 800e974:	b530      	push	{r4, r5, lr}
 800e976:	8083      	strh	r3, [r0, #4]
 800e978:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800e97c:	80c3      	strh	r3, [r0, #6]
 800e97e:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800e982:	7203      	strb	r3, [r0, #8]
 800e984:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800e988:	f89d 5018 	ldrb.w	r5, [sp, #24]
 800e98c:	7243      	strb	r3, [r0, #9]
 800e98e:	7a83      	ldrb	r3, [r0, #10]
 800e990:	6141      	str	r1, [r0, #20]
 800e992:	f365 0306 	bfi	r3, r5, #0, #7
 800e996:	f89d 501c 	ldrb.w	r5, [sp, #28]
 800e99a:	8302      	strh	r2, [r0, #24]
 800e99c:	f365 13c7 	bfi	r3, r5, #7, #1
 800e9a0:	7283      	strb	r3, [r0, #10]
 800e9a2:	f89d 3020 	ldrb.w	r3, [sp, #32]
 800e9a6:	72c3      	strb	r3, [r0, #11]
 800e9a8:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800e9ac:	7303      	strb	r3, [r0, #12]
 800e9ae:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 800e9b2:	81c3      	strh	r3, [r0, #14]
 800e9b4:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 800e9b8:	8203      	strh	r3, [r0, #16]
 800e9ba:	4b01      	ldr	r3, [pc, #4]	@ (800e9c0 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt+0x4c>)
 800e9bc:	6003      	str	r3, [r0, #0]
 800e9be:	bd30      	pop	{r4, r5, pc}
 800e9c0:	08016ae8 	.word	0x08016ae8

0800e9c4 <_ZNK8touchgfx9ConstFont4findEt>:
 800e9c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e9c6:	6944      	ldr	r4, [r0, #20]
 800e9c8:	b3bc      	cbz	r4, 800ea3a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800e9ca:	88a3      	ldrh	r3, [r4, #4]
 800e9cc:	8b02      	ldrh	r2, [r0, #24]
 800e9ce:	1acb      	subs	r3, r1, r3
 800e9d0:	f102 32ff 	add.w	r2, r2, #4294967295
 800e9d4:	d431      	bmi.n	800ea3a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800e9d6:	4293      	cmp	r3, r2
 800e9d8:	dd0c      	ble.n	800e9f4 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 800e9da:	230e      	movs	r3, #14
 800e9dc:	fb03 4302 	mla	r3, r3, r2, r4
 800e9e0:	889b      	ldrh	r3, [r3, #4]
 800e9e2:	1a5b      	subs	r3, r3, r1
 800e9e4:	1ad3      	subs	r3, r2, r3
 800e9e6:	429a      	cmp	r2, r3
 800e9e8:	db27      	blt.n	800ea3a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800e9ea:	2b00      	cmp	r3, #0
 800e9ec:	bfbc      	itt	lt
 800e9ee:	2302      	movlt	r3, #2
 800e9f0:	fb92 f3f3 	sdivlt	r3, r2, r3
 800e9f4:	2500      	movs	r5, #0
 800e9f6:	260e      	movs	r6, #14
 800e9f8:	4295      	cmp	r5, r2
 800e9fa:	dc1e      	bgt.n	800ea3a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800e9fc:	fb06 4003 	mla	r0, r6, r3, r4
 800ea00:	8887      	ldrh	r7, [r0, #4]
 800ea02:	42b9      	cmp	r1, r7
 800ea04:	d01a      	beq.n	800ea3c <_ZNK8touchgfx9ConstFont4findEt+0x78>
 800ea06:	d20d      	bcs.n	800ea24 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 800ea08:	1e5a      	subs	r2, r3, #1
 800ea0a:	4295      	cmp	r5, r2
 800ea0c:	dc15      	bgt.n	800ea3a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800ea0e:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 800ea12:	1a5b      	subs	r3, r3, r1
 800ea14:	1ad3      	subs	r3, r2, r3
 800ea16:	429a      	cmp	r2, r3
 800ea18:	db0f      	blt.n	800ea3a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800ea1a:	429d      	cmp	r5, r3
 800ea1c:	ddec      	ble.n	800e9f8 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 800ea1e:	1953      	adds	r3, r2, r5
 800ea20:	105b      	asrs	r3, r3, #1
 800ea22:	e7e9      	b.n	800e9f8 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 800ea24:	1c5d      	adds	r5, r3, #1
 800ea26:	42aa      	cmp	r2, r5
 800ea28:	db07      	blt.n	800ea3a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800ea2a:	8a43      	ldrh	r3, [r0, #18]
 800ea2c:	1acb      	subs	r3, r1, r3
 800ea2e:	442b      	add	r3, r5
 800ea30:	429d      	cmp	r5, r3
 800ea32:	dc02      	bgt.n	800ea3a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800ea34:	429a      	cmp	r2, r3
 800ea36:	dadf      	bge.n	800e9f8 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 800ea38:	e7f1      	b.n	800ea1e <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 800ea3a:	2000      	movs	r0, #0
 800ea3c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ea3e <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 800ea3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea40:	4604      	mov	r4, r0
 800ea42:	4617      	mov	r7, r2
 800ea44:	461e      	mov	r6, r3
 800ea46:	b911      	cbnz	r1, 800ea4e <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 800ea48:	2500      	movs	r5, #0
 800ea4a:	4628      	mov	r0, r5
 800ea4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ea4e:	290a      	cmp	r1, #10
 800ea50:	d0fa      	beq.n	800ea48 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 800ea52:	f64f 62ff 	movw	r2, #65279	@ 0xfeff
 800ea56:	4291      	cmp	r1, r2
 800ea58:	d0f6      	beq.n	800ea48 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 800ea5a:	f242 020b 	movw	r2, #8203	@ 0x200b
 800ea5e:	4291      	cmp	r1, r2
 800ea60:	d0f2      	beq.n	800ea48 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 800ea62:	f7ff ffaf 	bl	800e9c4 <_ZNK8touchgfx9ConstFont4findEt>
 800ea66:	4605      	mov	r5, r0
 800ea68:	b950      	cbnz	r0, 800ea80 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 800ea6a:	6823      	ldr	r3, [r4, #0]
 800ea6c:	4620      	mov	r0, r4
 800ea6e:	691b      	ldr	r3, [r3, #16]
 800ea70:	4798      	blx	r3
 800ea72:	4601      	mov	r1, r0
 800ea74:	4620      	mov	r0, r4
 800ea76:	f7ff ffa5 	bl	800e9c4 <_ZNK8touchgfx9ConstFont4findEt>
 800ea7a:	4605      	mov	r5, r0
 800ea7c:	2800      	cmp	r0, #0
 800ea7e:	d0e3      	beq.n	800ea48 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 800ea80:	6823      	ldr	r3, [r4, #0]
 800ea82:	4629      	mov	r1, r5
 800ea84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ea86:	4620      	mov	r0, r4
 800ea88:	4798      	blx	r3
 800ea8a:	6038      	str	r0, [r7, #0]
 800ea8c:	6823      	ldr	r3, [r4, #0]
 800ea8e:	4620      	mov	r0, r4
 800ea90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ea92:	4798      	blx	r3
 800ea94:	7030      	strb	r0, [r6, #0]
 800ea96:	e7d8      	b.n	800ea4a <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

0800ea98 <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
 800ea98:	2000      	movs	r0, #0
 800ea9a:	4770      	bx	lr

0800ea9c <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
 800ea9c:	2001      	movs	r0, #1
 800ea9e:	4770      	bx	lr

0800eaa0 <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
 800eaa0:	2002      	movs	r0, #2
 800eaa2:	4770      	bx	lr

0800eaa4 <_ZN8touchgfx6ScreenD1Ev>:
 800eaa4:	4770      	bx	lr

0800eaa6 <_ZN8touchgfx12GestureEventD1Ev>:
 800eaa6:	4770      	bx	lr

0800eaa8 <_ZN8touchgfx9DragEventD1Ev>:
 800eaa8:	4770      	bx	lr

0800eaaa <_ZN8touchgfx10ClickEventD1Ev>:
 800eaaa:	4770      	bx	lr

0800eaac <_ZN8touchgfx10ClickEventD0Ev>:
 800eaac:	b510      	push	{r4, lr}
 800eaae:	210c      	movs	r1, #12
 800eab0:	4604      	mov	r4, r0
 800eab2:	f005 f950 	bl	8013d56 <_ZdlPvj>
 800eab6:	4620      	mov	r0, r4
 800eab8:	bd10      	pop	{r4, pc}

0800eaba <_ZN8touchgfx9DragEventD0Ev>:
 800eaba:	b510      	push	{r4, lr}
 800eabc:	2110      	movs	r1, #16
 800eabe:	4604      	mov	r4, r0
 800eac0:	f005 f949 	bl	8013d56 <_ZdlPvj>
 800eac4:	4620      	mov	r0, r4
 800eac6:	bd10      	pop	{r4, pc}

0800eac8 <_ZN8touchgfx12GestureEventD0Ev>:
 800eac8:	b510      	push	{r4, lr}
 800eaca:	210c      	movs	r1, #12
 800eacc:	4604      	mov	r4, r0
 800eace:	f005 f942 	bl	8013d56 <_ZdlPvj>
 800ead2:	4620      	mov	r0, r4
 800ead4:	bd10      	pop	{r4, pc}

0800ead6 <_ZN8touchgfx6ScreenD0Ev>:
 800ead6:	b510      	push	{r4, lr}
 800ead8:	213c      	movs	r1, #60	@ 0x3c
 800eada:	4604      	mov	r4, r0
 800eadc:	f005 f93b 	bl	8013d56 <_ZdlPvj>
 800eae0:	4620      	mov	r0, r4
 800eae2:	bd10      	pop	{r4, pc}

0800eae4 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 800eae4:	b530      	push	{r4, r5, lr}
 800eae6:	460d      	mov	r5, r1
 800eae8:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 800eaea:	b087      	sub	sp, #28
 800eaec:	4604      	mov	r4, r0
 800eaee:	b301      	cbz	r1, 800eb32 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 800eaf0:	a801      	add	r0, sp, #4
 800eaf2:	f7ff ff2d 	bl	800e950 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800eaf6:	892a      	ldrh	r2, [r5, #8]
 800eaf8:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800eafc:	7928      	ldrb	r0, [r5, #4]
 800eafe:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 800eb02:	f88d 0010 	strb.w	r0, [sp, #16]
 800eb06:	1ad2      	subs	r2, r2, r3
 800eb08:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 800eb0a:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800eb0c:	f8ad 1012 	strh.w	r1, [sp, #18]
 800eb10:	441a      	add	r2, r3
 800eb12:	896b      	ldrh	r3, [r5, #10]
 800eb14:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 800eb18:	f8ad 2014 	strh.w	r2, [sp, #20]
 800eb1c:	1b5b      	subs	r3, r3, r5
 800eb1e:	8ee5      	ldrh	r5, [r4, #54]	@ 0x36
 800eb20:	442b      	add	r3, r5
 800eb22:	4d05      	ldr	r5, [pc, #20]	@ (800eb38 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 800eb24:	9503      	str	r5, [sp, #12]
 800eb26:	f8ad 3016 	strh.w	r3, [sp, #22]
 800eb2a:	6803      	ldr	r3, [r0, #0]
 800eb2c:	a903      	add	r1, sp, #12
 800eb2e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800eb30:	4798      	blx	r3
 800eb32:	b007      	add	sp, #28
 800eb34:	bd30      	pop	{r4, r5, pc}
 800eb36:	bf00      	nop
 800eb38:	08016b78 	.word	0x08016b78

0800eb3c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 800eb3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb40:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800eb42:	b08a      	sub	sp, #40	@ 0x28
 800eb44:	4604      	mov	r4, r0
 800eb46:	460d      	mov	r5, r1
 800eb48:	b113      	cbz	r3, 800eb50 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 800eb4a:	790b      	ldrb	r3, [r1, #4]
 800eb4c:	2b00      	cmp	r3, #0
 800eb4e:	d044      	beq.n	800ebda <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 800eb50:	f104 0804 	add.w	r8, r4, #4
 800eb54:	4641      	mov	r1, r8
 800eb56:	a803      	add	r0, sp, #12
 800eb58:	f7ff fefa 	bl	800e950 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800eb5c:	792b      	ldrb	r3, [r5, #4]
 800eb5e:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 800eb62:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 800eb66:	b983      	cbnz	r3, 800eb8a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 800eb68:	892a      	ldrh	r2, [r5, #8]
 800eb6a:	88e9      	ldrh	r1, [r5, #6]
 800eb6c:	f104 0336 	add.w	r3, r4, #54	@ 0x36
 800eb70:	1b92      	subs	r2, r2, r6
 800eb72:	1bc9      	subs	r1, r1, r7
 800eb74:	9301      	str	r3, [sp, #4]
 800eb76:	f104 0334 	add.w	r3, r4, #52	@ 0x34
 800eb7a:	9300      	str	r3, [sp, #0]
 800eb7c:	b212      	sxth	r2, r2
 800eb7e:	f104 0330 	add.w	r3, r4, #48	@ 0x30
 800eb82:	b209      	sxth	r1, r1
 800eb84:	4640      	mov	r0, r8
 800eb86:	f7fa ff77 	bl	8009a78 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 800eb8a:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800eb8c:	b329      	cbz	r1, 800ebda <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 800eb8e:	a805      	add	r0, sp, #20
 800eb90:	f7ff fede 	bl	800e950 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800eb94:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 800eb98:	792b      	ldrb	r3, [r5, #4]
 800eb9a:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800eb9c:	f88d 3020 	strb.w	r3, [sp, #32]
 800eba0:	1abf      	subs	r7, r7, r2
 800eba2:	88ea      	ldrh	r2, [r5, #6]
 800eba4:	4417      	add	r7, r2
 800eba6:	8ea2      	ldrh	r2, [r4, #52]	@ 0x34
 800eba8:	4417      	add	r7, r2
 800ebaa:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 800ebae:	f8ad 7022 	strh.w	r7, [sp, #34]	@ 0x22
 800ebb2:	1ab6      	subs	r6, r6, r2
 800ebb4:	892a      	ldrh	r2, [r5, #8]
 800ebb6:	4416      	add	r6, r2
 800ebb8:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 800ebba:	4416      	add	r6, r2
 800ebbc:	f8ad 6024 	strh.w	r6, [sp, #36]	@ 0x24
 800ebc0:	4a07      	ldr	r2, [pc, #28]	@ (800ebe0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 800ebc2:	9207      	str	r2, [sp, #28]
 800ebc4:	2600      	movs	r6, #0
 800ebc6:	f8ad 6026 	strh.w	r6, [sp, #38]	@ 0x26
 800ebca:	6803      	ldr	r3, [r0, #0]
 800ebcc:	a907      	add	r1, sp, #28
 800ebce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ebd0:	4798      	blx	r3
 800ebd2:	792b      	ldrb	r3, [r5, #4]
 800ebd4:	b10b      	cbz	r3, 800ebda <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 800ebd6:	e9c4 660c 	strd	r6, r6, [r4, #48]	@ 0x30
 800ebda:	b00a      	add	sp, #40	@ 0x28
 800ebdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ebe0:	08016b50 	.word	0x08016b50

0800ebe4 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 800ebe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ebe8:	460c      	mov	r4, r1
 800ebea:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 800ebec:	b088      	sub	sp, #32
 800ebee:	4605      	mov	r5, r0
 800ebf0:	2900      	cmp	r1, #0
 800ebf2:	d06d      	beq.n	800ecd0 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 800ebf4:	4668      	mov	r0, sp
 800ebf6:	f7ff feab 	bl	800e950 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800ebfa:	8ea9      	ldrh	r1, [r5, #52]	@ 0x34
 800ebfc:	88e3      	ldrh	r3, [r4, #6]
 800ebfe:	f9bd 8000 	ldrsh.w	r8, [sp]
 800ec02:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 800ec06:	440b      	add	r3, r1
 800ec08:	b21b      	sxth	r3, r3
 800ec0a:	4543      	cmp	r3, r8
 800ec0c:	db31      	blt.n	800ec72 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 800ec0e:	f8bd c004 	ldrh.w	ip, [sp, #4]
 800ec12:	44c4      	add	ip, r8
 800ec14:	fa0f fc8c 	sxth.w	ip, ip
 800ec18:	4563      	cmp	r3, ip
 800ec1a:	da2a      	bge.n	800ec72 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 800ec1c:	8eea      	ldrh	r2, [r5, #54]	@ 0x36
 800ec1e:	8926      	ldrh	r6, [r4, #8]
 800ec20:	4416      	add	r6, r2
 800ec22:	b236      	sxth	r6, r6
 800ec24:	42be      	cmp	r6, r7
 800ec26:	db24      	blt.n	800ec72 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 800ec28:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 800ec2c:	4438      	add	r0, r7
 800ec2e:	b200      	sxth	r0, r0
 800ec30:	4286      	cmp	r6, r0
 800ec32:	da1e      	bge.n	800ec72 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 800ec34:	8963      	ldrh	r3, [r4, #10]
 800ec36:	4419      	add	r1, r3
 800ec38:	b209      	sxth	r1, r1
 800ec3a:	4541      	cmp	r1, r8
 800ec3c:	db08      	blt.n	800ec50 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 800ec3e:	4561      	cmp	r1, ip
 800ec40:	da06      	bge.n	800ec50 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 800ec42:	89a3      	ldrh	r3, [r4, #12]
 800ec44:	441a      	add	r2, r3
 800ec46:	b212      	sxth	r2, r2
 800ec48:	42ba      	cmp	r2, r7
 800ec4a:	db01      	blt.n	800ec50 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 800ec4c:	4282      	cmp	r2, r0
 800ec4e:	db10      	blt.n	800ec72 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 800ec50:	4b21      	ldr	r3, [pc, #132]	@ (800ecd8 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 800ec52:	9304      	str	r3, [sp, #16]
 800ec54:	2302      	movs	r3, #2
 800ec56:	f88d 3014 	strb.w	r3, [sp, #20]
 800ec5a:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 800ec5c:	2300      	movs	r3, #0
 800ec5e:	f8ad 3016 	strh.w	r3, [sp, #22]
 800ec62:	f8ad 3018 	strh.w	r3, [sp, #24]
 800ec66:	f8ad 301a 	strh.w	r3, [sp, #26]
 800ec6a:	6803      	ldr	r3, [r0, #0]
 800ec6c:	a904      	add	r1, sp, #16
 800ec6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ec70:	4798      	blx	r3
 800ec72:	1d29      	adds	r1, r5, #4
 800ec74:	a802      	add	r0, sp, #8
 800ec76:	f7ff fe6b 	bl	800e950 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800ec7a:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 800ec7e:	88e0      	ldrh	r0, [r4, #6]
 800ec80:	7921      	ldrb	r1, [r4, #4]
 800ec82:	f8b5 c034 	ldrh.w	ip, [r5, #52]	@ 0x34
 800ec86:	8922      	ldrh	r2, [r4, #8]
 800ec88:	8eee      	ldrh	r6, [r5, #54]	@ 0x36
 800ec8a:	f88d 1014 	strb.w	r1, [sp, #20]
 800ec8e:	eba3 0808 	sub.w	r8, r3, r8
 800ec92:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 800ec96:	1bdf      	subs	r7, r3, r7
 800ec98:	b2bb      	uxth	r3, r7
 800ec9a:	fa1f f888 	uxth.w	r8, r8
 800ec9e:	8967      	ldrh	r7, [r4, #10]
 800eca0:	89a4      	ldrh	r4, [r4, #12]
 800eca2:	4440      	add	r0, r8
 800eca4:	4460      	add	r0, ip
 800eca6:	441a      	add	r2, r3
 800eca8:	44b8      	add	r8, r7
 800ecaa:	4423      	add	r3, r4
 800ecac:	f8ad 0016 	strh.w	r0, [sp, #22]
 800ecb0:	4433      	add	r3, r6
 800ecb2:	4432      	add	r2, r6
 800ecb4:	44e0      	add	r8, ip
 800ecb6:	4c09      	ldr	r4, [pc, #36]	@ (800ecdc <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 800ecb8:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 800ecba:	9404      	str	r4, [sp, #16]
 800ecbc:	f8ad 2018 	strh.w	r2, [sp, #24]
 800ecc0:	f8ad 801a 	strh.w	r8, [sp, #26]
 800ecc4:	f8ad 301c 	strh.w	r3, [sp, #28]
 800ecc8:	6803      	ldr	r3, [r0, #0]
 800ecca:	a904      	add	r1, sp, #16
 800eccc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ecce:	4798      	blx	r3
 800ecd0:	b008      	add	sp, #32
 800ecd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ecd6:	bf00      	nop
 800ecd8:	08016b50 	.word	0x08016b50
 800ecdc:	08016b64 	.word	0x08016b64

0800ece0 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 800ece0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ece2:	4604      	mov	r4, r0
 800ece4:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 800ece8:	3201      	adds	r2, #1
 800ecea:	d112      	bne.n	800ed12 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 800ecec:	6803      	ldr	r3, [r0, #0]
 800ecee:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 800ecf2:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 800ecf6:	f8ad 1004 	strh.w	r1, [sp, #4]
 800ecfa:	2500      	movs	r5, #0
 800ecfc:	9500      	str	r5, [sp, #0]
 800ecfe:	466d      	mov	r5, sp
 800ed00:	4629      	mov	r1, r5
 800ed02:	f8ad 2006 	strh.w	r2, [sp, #6]
 800ed06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ed08:	4798      	blx	r3
 800ed0a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800ed0e:	e884 0003 	stmia.w	r4, {r0, r1}
 800ed12:	4620      	mov	r0, r4
 800ed14:	b003      	add	sp, #12
 800ed16:	bd30      	pop	{r4, r5, pc}

0800ed18 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 800ed18:	b513      	push	{r0, r1, r4, lr}
 800ed1a:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 800ed1e:	3301      	adds	r3, #1
 800ed20:	4604      	mov	r4, r0
 800ed22:	d109      	bne.n	800ed38 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 800ed24:	4601      	mov	r1, r0
 800ed26:	4668      	mov	r0, sp
 800ed28:	f7ff fe12 	bl	800e950 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800ed2c:	f8bd 3000 	ldrh.w	r3, [sp]
 800ed30:	8423      	strh	r3, [r4, #32]
 800ed32:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800ed36:	8463      	strh	r3, [r4, #34]	@ 0x22
 800ed38:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 800ed3c:	b002      	add	sp, #8
 800ed3e:	bd10      	pop	{r4, pc}

0800ed40 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 800ed40:	b513      	push	{r0, r1, r4, lr}
 800ed42:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	@ 0x22
 800ed46:	3301      	adds	r3, #1
 800ed48:	4604      	mov	r4, r0
 800ed4a:	d109      	bne.n	800ed60 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 800ed4c:	4601      	mov	r1, r0
 800ed4e:	4668      	mov	r0, sp
 800ed50:	f7ff fdfe 	bl	800e950 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800ed54:	f8bd 3000 	ldrh.w	r3, [sp]
 800ed58:	8423      	strh	r3, [r4, #32]
 800ed5a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800ed5e:	8463      	strh	r3, [r4, #34]	@ 0x22
 800ed60:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	@ 0x22
 800ed64:	b002      	add	sp, #8
 800ed66:	bd10      	pop	{r4, pc}

0800ed68 <_ZN8touchgfx6ScreenC1Ev>:
 800ed68:	b570      	push	{r4, r5, r6, lr}
 800ed6a:	4605      	mov	r5, r0
 800ed6c:	4b16      	ldr	r3, [pc, #88]	@ (800edc8 <_ZN8touchgfx6ScreenC1Ev+0x60>)
 800ed6e:	f845 3b04 	str.w	r3, [r5], #4
 800ed72:	2300      	movs	r3, #0
 800ed74:	8103      	strh	r3, [r0, #8]
 800ed76:	8143      	strh	r3, [r0, #10]
 800ed78:	8183      	strh	r3, [r0, #12]
 800ed7a:	81c3      	strh	r3, [r0, #14]
 800ed7c:	8203      	strh	r3, [r0, #16]
 800ed7e:	8243      	strh	r3, [r0, #18]
 800ed80:	8283      	strh	r3, [r0, #20]
 800ed82:	82c3      	strh	r3, [r0, #22]
 800ed84:	e9c0 3306 	strd	r3, r3, [r0, #24]
 800ed88:	6203      	str	r3, [r0, #32]
 800ed8a:	8483      	strh	r3, [r0, #36]	@ 0x24
 800ed8c:	84c3      	strh	r3, [r0, #38]	@ 0x26
 800ed8e:	f880 3028 	strb.w	r3, [r0, #40]	@ 0x28
 800ed92:	4a0e      	ldr	r2, [pc, #56]	@ (800edcc <_ZN8touchgfx6ScreenC1Ev+0x64>)
 800ed94:	6343      	str	r3, [r0, #52]	@ 0x34
 800ed96:	e9c0 330b 	strd	r3, r3, [r0, #44]	@ 0x2c
 800ed9a:	4b0d      	ldr	r3, [pc, #52]	@ (800edd0 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 800ed9c:	6042      	str	r2, [r0, #4]
 800ed9e:	f9b3 6000 	ldrsh.w	r6, [r3]
 800eda2:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 800eda4:	4a0b      	ldr	r2, [pc, #44]	@ (800edd4 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 800eda6:	4604      	mov	r4, r0
 800eda8:	2101      	movs	r1, #1
 800edaa:	f880 1029 	strb.w	r1, [r0, #41]	@ 0x29
 800edae:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 800edb2:	f9b2 1000 	ldrsh.w	r1, [r2]
 800edb6:	4628      	mov	r0, r5
 800edb8:	4798      	blx	r3
 800edba:	6863      	ldr	r3, [r4, #4]
 800edbc:	4628      	mov	r0, r5
 800edbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800edc0:	4631      	mov	r1, r6
 800edc2:	4798      	blx	r3
 800edc4:	4620      	mov	r0, r4
 800edc6:	bd70      	pop	{r4, r5, r6, pc}
 800edc8:	08016b8c 	.word	0x08016b8c
 800edcc:	08016870 	.word	0x08016870
 800edd0:	20014f4a 	.word	0x20014f4a
 800edd4:	20014f48 	.word	0x20014f48

0800edd8 <_ZN8touchgfx6Screen4drawEv>:
 800edd8:	b507      	push	{r0, r1, r2, lr}
 800edda:	4b09      	ldr	r3, [pc, #36]	@ (800ee00 <_ZN8touchgfx6Screen4drawEv+0x28>)
 800eddc:	f9b3 2000 	ldrsh.w	r2, [r3]
 800ede0:	4b08      	ldr	r3, [pc, #32]	@ (800ee04 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 800ede2:	f8ad 2004 	strh.w	r2, [sp, #4]
 800ede6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800edea:	f8ad 3006 	strh.w	r3, [sp, #6]
 800edee:	6803      	ldr	r3, [r0, #0]
 800edf0:	2100      	movs	r1, #0
 800edf2:	9100      	str	r1, [sp, #0]
 800edf4:	689b      	ldr	r3, [r3, #8]
 800edf6:	4669      	mov	r1, sp
 800edf8:	4798      	blx	r3
 800edfa:	b003      	add	sp, #12
 800edfc:	f85d fb04 	ldr.w	pc, [sp], #4
 800ee00:	20014f48 	.word	0x20014f48
 800ee04:	20014f4a 	.word	0x20014f4a

0800ee08 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 800ee08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee0c:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 800ee10:	2b00      	cmp	r3, #0
 800ee12:	b089      	sub	sp, #36	@ 0x24
 800ee14:	4680      	mov	r8, r0
 800ee16:	460c      	mov	r4, r1
 800ee18:	4615      	mov	r5, r2
 800ee1a:	dd0e      	ble.n	800ee3a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 800ee1c:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 800ee20:	2b00      	cmp	r3, #0
 800ee22:	dd0a      	ble.n	800ee3a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 800ee24:	4628      	mov	r0, r5
 800ee26:	f7ff ff5b 	bl	800ece0 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 800ee2a:	4621      	mov	r1, r4
 800ee2c:	f7fe fbc3 	bl	800d5b6 <_ZNK8touchgfx4Rect9intersectERKS0_>
 800ee30:	69eb      	ldr	r3, [r5, #28]
 800ee32:	b928      	cbnz	r0, 800ee40 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 800ee34:	461d      	mov	r5, r3
 800ee36:	2b00      	cmp	r3, #0
 800ee38:	d1f4      	bne.n	800ee24 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 800ee3a:	b009      	add	sp, #36	@ 0x24
 800ee3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee40:	ae04      	add	r6, sp, #16
 800ee42:	2b00      	cmp	r3, #0
 800ee44:	f000 80b5 	beq.w	800efb2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 800ee48:	682b      	ldr	r3, [r5, #0]
 800ee4a:	4629      	mov	r1, r5
 800ee4c:	68db      	ldr	r3, [r3, #12]
 800ee4e:	a802      	add	r0, sp, #8
 800ee50:	4798      	blx	r3
 800ee52:	4628      	mov	r0, r5
 800ee54:	f7ff ff60 	bl	800ed18 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 800ee58:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 800ee5c:	4407      	add	r7, r0
 800ee5e:	4628      	mov	r0, r5
 800ee60:	f7ff ff6e 	bl	800ed40 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 800ee64:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 800ee68:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 800ee6c:	f8ad 2014 	strh.w	r2, [sp, #20]
 800ee70:	4418      	add	r0, r3
 800ee72:	4621      	mov	r1, r4
 800ee74:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 800ee78:	f8ad 0012 	strh.w	r0, [sp, #18]
 800ee7c:	b23f      	sxth	r7, r7
 800ee7e:	4630      	mov	r0, r6
 800ee80:	f8ad 3016 	strh.w	r3, [sp, #22]
 800ee84:	f8ad 7010 	strh.w	r7, [sp, #16]
 800ee88:	f7fa feda 	bl	8009c40 <_ZN8touchgfx4RectaNERKS0_>
 800ee8c:	4628      	mov	r0, r5
 800ee8e:	f7ff ff27 	bl	800ece0 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 800ee92:	4602      	mov	r2, r0
 800ee94:	e896 0003 	ldmia.w	r6, {r0, r1}
 800ee98:	ab06      	add	r3, sp, #24
 800ee9a:	e883 0003 	stmia.w	r3, {r0, r1}
 800ee9e:	4611      	mov	r1, r2
 800eea0:	4618      	mov	r0, r3
 800eea2:	f7fa fecd 	bl	8009c40 <_ZN8touchgfx4RectaNERKS0_>
 800eea6:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 800eeaa:	f9b4 1000 	ldrsh.w	r1, [r4]
 800eeae:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 800eeb2:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 800eeb6:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 800eeba:	4299      	cmp	r1, r3
 800eebc:	d10b      	bne.n	800eed6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 800eebe:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 800eec2:	4552      	cmp	r2, sl
 800eec4:	d107      	bne.n	800eed6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 800eec6:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 800eeca:	455a      	cmp	r2, fp
 800eecc:	d103      	bne.n	800eed6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 800eece:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 800eed2:	454a      	cmp	r2, r9
 800eed4:	d06d      	beq.n	800efb2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 800eed6:	f1bb 0f00 	cmp.w	fp, #0
 800eeda:	dd65      	ble.n	800efa8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 800eedc:	f1b9 0f00 	cmp.w	r9, #0
 800eee0:	dd62      	ble.n	800efa8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 800eee2:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 800eee6:	fa1f f08a 	uxth.w	r0, sl
 800eeea:	4552      	cmp	r2, sl
 800eeec:	9000      	str	r0, [sp, #0]
 800eeee:	da12      	bge.n	800ef16 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 800eef0:	9301      	str	r3, [sp, #4]
 800eef2:	9b00      	ldr	r3, [sp, #0]
 800eef4:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 800eef8:	f8ad 2012 	strh.w	r2, [sp, #18]
 800eefc:	1a9a      	subs	r2, r3, r2
 800eefe:	f8ad 1010 	strh.w	r1, [sp, #16]
 800ef02:	f8ad 0014 	strh.w	r0, [sp, #20]
 800ef06:	f8ad 2016 	strh.w	r2, [sp, #22]
 800ef0a:	69ea      	ldr	r2, [r5, #28]
 800ef0c:	4631      	mov	r1, r6
 800ef0e:	4640      	mov	r0, r8
 800ef10:	f7ff ff7a 	bl	800ee08 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 800ef14:	9b01      	ldr	r3, [sp, #4]
 800ef16:	f9b4 2000 	ldrsh.w	r2, [r4]
 800ef1a:	429a      	cmp	r2, r3
 800ef1c:	b29f      	uxth	r7, r3
 800ef1e:	da0d      	bge.n	800ef3c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 800ef20:	f8ad 2010 	strh.w	r2, [sp, #16]
 800ef24:	1aba      	subs	r2, r7, r2
 800ef26:	f8ad a012 	strh.w	sl, [sp, #18]
 800ef2a:	f8ad 2014 	strh.w	r2, [sp, #20]
 800ef2e:	f8ad 9016 	strh.w	r9, [sp, #22]
 800ef32:	69ea      	ldr	r2, [r5, #28]
 800ef34:	4631      	mov	r1, r6
 800ef36:	4640      	mov	r0, r8
 800ef38:	f7ff ff66 	bl	800ee08 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 800ef3c:	8822      	ldrh	r2, [r4, #0]
 800ef3e:	88a3      	ldrh	r3, [r4, #4]
 800ef40:	445f      	add	r7, fp
 800ef42:	4413      	add	r3, r2
 800ef44:	b29b      	uxth	r3, r3
 800ef46:	b2bf      	uxth	r7, r7
 800ef48:	b23a      	sxth	r2, r7
 800ef4a:	b219      	sxth	r1, r3
 800ef4c:	4291      	cmp	r1, r2
 800ef4e:	dd0d      	ble.n	800ef6c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 800ef50:	1bdb      	subs	r3, r3, r7
 800ef52:	f8ad 2010 	strh.w	r2, [sp, #16]
 800ef56:	f8ad a012 	strh.w	sl, [sp, #18]
 800ef5a:	f8ad 3014 	strh.w	r3, [sp, #20]
 800ef5e:	f8ad 9016 	strh.w	r9, [sp, #22]
 800ef62:	69ea      	ldr	r2, [r5, #28]
 800ef64:	4631      	mov	r1, r6
 800ef66:	4640      	mov	r0, r8
 800ef68:	f7ff ff4e 	bl	800ee08 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 800ef6c:	88e2      	ldrh	r2, [r4, #6]
 800ef6e:	8863      	ldrh	r3, [r4, #2]
 800ef70:	4413      	add	r3, r2
 800ef72:	9a00      	ldr	r2, [sp, #0]
 800ef74:	444a      	add	r2, r9
 800ef76:	b29b      	uxth	r3, r3
 800ef78:	fa1f f982 	uxth.w	r9, r2
 800ef7c:	fa0f f289 	sxth.w	r2, r9
 800ef80:	b219      	sxth	r1, r3
 800ef82:	428a      	cmp	r2, r1
 800ef84:	da15      	bge.n	800efb2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 800ef86:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 800ef8a:	f9b4 0000 	ldrsh.w	r0, [r4]
 800ef8e:	f8ad 1014 	strh.w	r1, [sp, #20]
 800ef92:	eba3 0309 	sub.w	r3, r3, r9
 800ef96:	f8ad 0010 	strh.w	r0, [sp, #16]
 800ef9a:	f8ad 2012 	strh.w	r2, [sp, #18]
 800ef9e:	f8ad 3016 	strh.w	r3, [sp, #22]
 800efa2:	69ea      	ldr	r2, [r5, #28]
 800efa4:	4631      	mov	r1, r6
 800efa6:	e001      	b.n	800efac <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 800efa8:	69ea      	ldr	r2, [r5, #28]
 800efaa:	4621      	mov	r1, r4
 800efac:	4640      	mov	r0, r8
 800efae:	f7ff ff2b 	bl	800ee08 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 800efb2:	4628      	mov	r0, r5
 800efb4:	f7ff fe94 	bl	800ece0 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 800efb8:	6861      	ldr	r1, [r4, #4]
 800efba:	4602      	mov	r2, r0
 800efbc:	6820      	ldr	r0, [r4, #0]
 800efbe:	4633      	mov	r3, r6
 800efc0:	c303      	stmia	r3!, {r0, r1}
 800efc2:	4611      	mov	r1, r2
 800efc4:	4630      	mov	r0, r6
 800efc6:	f7fa fe3b 	bl	8009c40 <_ZN8touchgfx4RectaNERKS0_>
 800efca:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 800efce:	2b00      	cmp	r3, #0
 800efd0:	f77f af33 	ble.w	800ee3a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 800efd4:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 800efd8:	2b00      	cmp	r3, #0
 800efda:	f77f af2e 	ble.w	800ee3a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 800efde:	4628      	mov	r0, r5
 800efe0:	f7ff fe9a 	bl	800ed18 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 800efe4:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 800efe8:	1a18      	subs	r0, r3, r0
 800efea:	f8ad 0010 	strh.w	r0, [sp, #16]
 800efee:	4628      	mov	r0, r5
 800eff0:	f7ff fea6 	bl	800ed40 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 800eff4:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800eff8:	1a18      	subs	r0, r3, r0
 800effa:	f8ad 0012 	strh.w	r0, [sp, #18]
 800effe:	682b      	ldr	r3, [r5, #0]
 800f000:	4631      	mov	r1, r6
 800f002:	689b      	ldr	r3, [r3, #8]
 800f004:	4628      	mov	r0, r5
 800f006:	4798      	blx	r3
 800f008:	e717      	b.n	800ee3a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

0800f00a <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 800f00a:	b570      	push	{r4, r5, r6, lr}
 800f00c:	460c      	mov	r4, r1
 800f00e:	b086      	sub	sp, #24
 800f010:	1d06      	adds	r6, r0, #4
 800f012:	2300      	movs	r3, #0
 800f014:	4631      	mov	r1, r6
 800f016:	4605      	mov	r5, r0
 800f018:	a802      	add	r0, sp, #8
 800f01a:	9301      	str	r3, [sp, #4]
 800f01c:	f7ff fc98 	bl	800e950 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800f020:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 800f024:	8822      	ldrh	r2, [r4, #0]
 800f026:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 800f02a:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 800f02e:	f8ad 0014 	strh.w	r0, [sp, #20]
 800f032:	1ad2      	subs	r2, r2, r3
 800f034:	8863      	ldrh	r3, [r4, #2]
 800f036:	f8ad 2010 	strh.w	r2, [sp, #16]
 800f03a:	1a5b      	subs	r3, r3, r1
 800f03c:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 800f040:	f8ad 1016 	strh.w	r1, [sp, #22]
 800f044:	aa01      	add	r2, sp, #4
 800f046:	a904      	add	r1, sp, #16
 800f048:	4630      	mov	r0, r6
 800f04a:	f8ad 3012 	strh.w	r3, [sp, #18]
 800f04e:	f7fa fecf 	bl	8009df0 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 800f052:	9a01      	ldr	r2, [sp, #4]
 800f054:	b11a      	cbz	r2, 800f05e <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 800f056:	4621      	mov	r1, r4
 800f058:	4628      	mov	r0, r5
 800f05a:	f7ff fed5 	bl	800ee08 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 800f05e:	b006      	add	sp, #24
 800f060:	bd70      	pop	{r4, r5, r6, pc}

0800f062 <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 800f062:	b530      	push	{r4, r5, lr}
 800f064:	4602      	mov	r2, r0
 800f066:	4604      	mov	r4, r0
 800f068:	f852 0f08 	ldr.w	r0, [r2, #8]!
 800f06c:	b085      	sub	sp, #20
 800f06e:	460d      	mov	r5, r1
 800f070:	6851      	ldr	r1, [r2, #4]
 800f072:	466b      	mov	r3, sp
 800f074:	c303      	stmia	r3!, {r0, r1}
 800f076:	4629      	mov	r1, r5
 800f078:	4668      	mov	r0, sp
 800f07a:	f7fa fde1 	bl	8009c40 <_ZN8touchgfx4RectaNERKS0_>
 800f07e:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 800f082:	b12b      	cbz	r3, 800f090 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 800f084:	4669      	mov	r1, sp
 800f086:	4620      	mov	r0, r4
 800f088:	f7ff ffbf 	bl	800f00a <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 800f08c:	b005      	add	sp, #20
 800f08e:	bd30      	pop	{r4, r5, pc}
 800f090:	3404      	adds	r4, #4
 800f092:	4621      	mov	r1, r4
 800f094:	a802      	add	r0, sp, #8
 800f096:	f7ff fc5b 	bl	800e950 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800f09a:	f8bd 3000 	ldrh.w	r3, [sp]
 800f09e:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 800f0a2:	1a9b      	subs	r3, r3, r2
 800f0a4:	f8ad 3000 	strh.w	r3, [sp]
 800f0a8:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 800f0ac:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800f0b0:	4669      	mov	r1, sp
 800f0b2:	1a9b      	subs	r3, r3, r2
 800f0b4:	4620      	mov	r0, r4
 800f0b6:	f8ad 3002 	strh.w	r3, [sp, #2]
 800f0ba:	f7fa fe60 	bl	8009d7e <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 800f0be:	e7e5      	b.n	800f08c <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

0800f0c0 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 800f0c0:	680a      	ldr	r2, [r1, #0]
 800f0c2:	460b      	mov	r3, r1
 800f0c4:	6992      	ldr	r2, [r2, #24]
 800f0c6:	1d01      	adds	r1, r0, #4
 800f0c8:	4618      	mov	r0, r3
 800f0ca:	4710      	bx	r2

0800f0cc <_ZN8touchgfx12TextProviderC1Ev>:
 800f0cc:	b538      	push	{r3, r4, r5, lr}
 800f0ce:	2500      	movs	r5, #0
 800f0d0:	2302      	movs	r3, #2
 800f0d2:	4604      	mov	r4, r0
 800f0d4:	e9c0 5500 	strd	r5, r5, [r0]
 800f0d8:	7403      	strb	r3, [r0, #16]
 800f0da:	6145      	str	r5, [r0, #20]
 800f0dc:	7605      	strb	r5, [r0, #24]
 800f0de:	83c5      	strh	r5, [r0, #30]
 800f0e0:	8405      	strh	r5, [r0, #32]
 800f0e2:	86c5      	strh	r5, [r0, #54]	@ 0x36
 800f0e4:	8705      	strh	r5, [r0, #56]	@ 0x38
 800f0e6:	87c5      	strh	r5, [r0, #62]	@ 0x3e
 800f0e8:	f8a0 5040 	strh.w	r5, [r0, #64]	@ 0x40
 800f0ec:	e9c0 5511 	strd	r5, r5, [r0, #68]	@ 0x44
 800f0f0:	220e      	movs	r2, #14
 800f0f2:	4629      	mov	r1, r5
 800f0f4:	304c      	adds	r0, #76	@ 0x4c
 800f0f6:	f005 fc2c 	bl	8014952 <memset>
 800f0fa:	2301      	movs	r3, #1
 800f0fc:	4620      	mov	r0, r4
 800f0fe:	f8a4 505a 	strh.w	r5, [r4, #90]	@ 0x5a
 800f102:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 800f106:	f8a4 505e 	strh.w	r5, [r4, #94]	@ 0x5e
 800f10a:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
 800f10e:	f884 5061 	strb.w	r5, [r4, #97]	@ 0x61
 800f112:	f7f5 f8df 	bl	80042d4 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 800f116:	4620      	mov	r0, r4
 800f118:	bd38      	pop	{r3, r4, r5, pc}

0800f11a <_ZN8touchgfx12TextProvider11endOfStringEv>:
 800f11a:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 800f11c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 800f120:	8c40      	ldrh	r0, [r0, #34]	@ 0x22
 800f122:	fab0 f080 	clz	r0, r0
 800f126:	0940      	lsrs	r0, r0, #5
 800f128:	4770      	bx	lr

0800f12a <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 800f12a:	b530      	push	{r4, r5, lr}
 800f12c:	2500      	movs	r5, #0
 800f12e:	2401      	movs	r4, #1
 800f130:	6843      	ldr	r3, [r0, #4]
 800f132:	b913      	cbnz	r3, 800f13a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 800f134:	6803      	ldr	r3, [r0, #0]
 800f136:	b313      	cbz	r3, 800f17e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 800f138:	6043      	str	r3, [r0, #4]
 800f13a:	7e03      	ldrb	r3, [r0, #24]
 800f13c:	b143      	cbz	r3, 800f150 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 800f13e:	6943      	ldr	r3, [r0, #20]
 800f140:	b12b      	cbz	r3, 800f14e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 800f142:	881a      	ldrh	r2, [r3, #0]
 800f144:	b11a      	cbz	r2, 800f14e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 800f146:	1c9a      	adds	r2, r3, #2
 800f148:	6142      	str	r2, [r0, #20]
 800f14a:	8818      	ldrh	r0, [r3, #0]
 800f14c:	bd30      	pop	{r4, r5, pc}
 800f14e:	7605      	strb	r5, [r0, #24]
 800f150:	6843      	ldr	r3, [r0, #4]
 800f152:	8819      	ldrh	r1, [r3, #0]
 800f154:	b199      	cbz	r1, 800f17e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 800f156:	1c9a      	adds	r2, r3, #2
 800f158:	2902      	cmp	r1, #2
 800f15a:	6042      	str	r2, [r0, #4]
 800f15c:	d1f5      	bne.n	800f14a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 800f15e:	7c03      	ldrb	r3, [r0, #16]
 800f160:	2b01      	cmp	r3, #1
 800f162:	d8e5      	bhi.n	800f130 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 800f164:	1c5a      	adds	r2, r3, #1
 800f166:	3302      	adds	r3, #2
 800f168:	7402      	strb	r2, [r0, #16]
 800f16a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800f16e:	6143      	str	r3, [r0, #20]
 800f170:	2b00      	cmp	r3, #0
 800f172:	d0dd      	beq.n	800f130 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 800f174:	881b      	ldrh	r3, [r3, #0]
 800f176:	2b00      	cmp	r3, #0
 800f178:	d0da      	beq.n	800f130 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 800f17a:	7604      	strb	r4, [r0, #24]
 800f17c:	e7d8      	b.n	800f130 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 800f17e:	2000      	movs	r0, #0
 800f180:	e7e4      	b.n	800f14c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

0800f182 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 800f182:	b430      	push	{r4, r5}
 800f184:	6001      	str	r1, [r0, #0]
 800f186:	2100      	movs	r1, #0
 800f188:	6041      	str	r1, [r0, #4]
 800f18a:	6815      	ldr	r5, [r2, #0]
 800f18c:	6085      	str	r5, [r0, #8]
 800f18e:	6852      	ldr	r2, [r2, #4]
 800f190:	6443      	str	r3, [r0, #68]	@ 0x44
 800f192:	9b02      	ldr	r3, [sp, #8]
 800f194:	60c2      	str	r2, [r0, #12]
 800f196:	7401      	strb	r1, [r0, #16]
 800f198:	6141      	str	r1, [r0, #20]
 800f19a:	7601      	strb	r1, [r0, #24]
 800f19c:	8701      	strh	r1, [r0, #56]	@ 0x38
 800f19e:	8401      	strh	r1, [r0, #32]
 800f1a0:	f8a0 1040 	strh.w	r1, [r0, #64]	@ 0x40
 800f1a4:	6483      	str	r3, [r0, #72]	@ 0x48
 800f1a6:	bc30      	pop	{r4, r5}
 800f1a8:	f7f5 b894 	b.w	80042d4 <_ZN8touchgfx12TextProvider18initializeInternalEv>

0800f1ac <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>:
 800f1ac:	b408      	push	{r3}
 800f1ae:	b510      	push	{r4, lr}
 800f1b0:	b085      	sub	sp, #20
 800f1b2:	ac07      	add	r4, sp, #28
 800f1b4:	f854 3b04 	ldr.w	r3, [r4], #4
 800f1b8:	9300      	str	r3, [sp, #0]
 800f1ba:	4613      	mov	r3, r2
 800f1bc:	4622      	mov	r2, r4
 800f1be:	9403      	str	r4, [sp, #12]
 800f1c0:	f7ff ffdf 	bl	800f182 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800f1c4:	b005      	add	sp, #20
 800f1c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f1ca:	b001      	add	sp, #4
 800f1cc:	4770      	bx	lr

0800f1ce <_ZN8touchgfx12TextProvider20unicodeConverterInitEv>:
 800f1ce:	2301      	movs	r3, #1
 800f1d0:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 800f1d4:	4770      	bx	lr
	...

0800f1d8 <_ZN8touchgfx12TextProvider16unicodeConverterEh>:
 800f1d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1dc:	f8b0 b036 	ldrh.w	fp, [r0, #54]	@ 0x36
 800f1e0:	eb00 064b 	add.w	r6, r0, fp, lsl #1
 800f1e4:	b087      	sub	sp, #28
 800f1e6:	8c73      	ldrh	r3, [r6, #34]	@ 0x22
 800f1e8:	2b00      	cmp	r3, #0
 800f1ea:	f000 813e 	beq.w	800f46a <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x292>
 800f1ee:	2b7f      	cmp	r3, #127	@ 0x7f
 800f1f0:	d819      	bhi.n	800f226 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x4e>
 800f1f2:	2901      	cmp	r1, #1
 800f1f4:	d117      	bne.n	800f226 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x4e>
 800f1f6:	2b3c      	cmp	r3, #60	@ 0x3c
 800f1f8:	f000 83d2 	beq.w	800f9a0 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x7c8>
 800f1fc:	2b3e      	cmp	r3, #62	@ 0x3e
 800f1fe:	f000 83d1 	beq.w	800f9a4 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x7cc>
 800f202:	2b28      	cmp	r3, #40	@ 0x28
 800f204:	f000 83d0 	beq.w	800f9a8 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x7d0>
 800f208:	2b29      	cmp	r3, #41	@ 0x29
 800f20a:	f000 83cf 	beq.w	800f9ac <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x7d4>
 800f20e:	2b5b      	cmp	r3, #91	@ 0x5b
 800f210:	f000 83ce 	beq.w	800f9b0 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x7d8>
 800f214:	2b5d      	cmp	r3, #93	@ 0x5d
 800f216:	f000 83cd 	beq.w	800f9b4 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x7dc>
 800f21a:	2b7b      	cmp	r3, #123	@ 0x7b
 800f21c:	f000 83cc 	beq.w	800f9b8 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x7e0>
 800f220:	2b7d      	cmp	r3, #125	@ 0x7d
 800f222:	f000 83cb 	beq.w	800f9bc <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x7e4>
 800f226:	f10b 0201 	add.w	r2, fp, #1
 800f22a:	b292      	uxth	r2, r2
 800f22c:	2a09      	cmp	r2, #9
 800f22e:	4611      	mov	r1, r2
 800f230:	bf88      	it	hi
 800f232:	f1a2 010a 	subhi.w	r1, r2, #10
 800f236:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 800f23a:	9102      	str	r1, [sp, #8]
 800f23c:	8c4d      	ldrh	r5, [r1, #34]	@ 0x22
 800f23e:	f10b 0102 	add.w	r1, fp, #2
 800f242:	b289      	uxth	r1, r1
 800f244:	2909      	cmp	r1, #9
 800f246:	bf88      	it	hi
 800f248:	390a      	subhi	r1, #10
 800f24a:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 800f24e:	8c4c      	ldrh	r4, [r1, #34]	@ 0x22
 800f250:	f240 6151 	movw	r1, #1617	@ 0x651
 800f254:	428d      	cmp	r5, r1
 800f256:	d125      	bne.n	800f2a4 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0xcc>
 800f258:	f2a3 614b 	subw	r1, r3, #1611	@ 0x64b
 800f25c:	b289      	uxth	r1, r1
 800f25e:	2914      	cmp	r1, #20
 800f260:	d914      	bls.n	800f28c <_ZN8touchgfx12TextProvider16unicodeConverterEh+0xb4>
 800f262:	f023 0104 	bic.w	r1, r3, #4
 800f266:	b289      	uxth	r1, r1
 800f268:	f5b1 6fce 	cmp.w	r1, #1648	@ 0x670
 800f26c:	d00e      	beq.n	800f28c <_ZN8touchgfx12TextProvider16unicodeConverterEh+0xb4>
 800f26e:	f2a3 61d6 	subw	r1, r3, #1750	@ 0x6d6
 800f272:	b289      	uxth	r1, r1
 800f274:	2917      	cmp	r1, #23
 800f276:	d804      	bhi.n	800f282 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0xaa>
 800f278:	4fad      	ldr	r7, [pc, #692]	@ (800f530 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x358>)
 800f27a:	fa27 f101 	lsr.w	r1, r7, r1
 800f27e:	07c9      	lsls	r1, r1, #31
 800f280:	d404      	bmi.n	800f28c <_ZN8touchgfx12TextProvider16unicodeConverterEh+0xb4>
 800f282:	f6a3 01e4 	subw	r1, r3, #2276	@ 0x8e4
 800f286:	b289      	uxth	r1, r1
 800f288:	291a      	cmp	r1, #26
 800f28a:	d80b      	bhi.n	800f2a4 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0xcc>
 800f28c:	2a0a      	cmp	r2, #10
 800f28e:	bf28      	it	cs
 800f290:	2200      	movcs	r2, #0
 800f292:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 800f296:	f240 6151 	movw	r1, #1617	@ 0x651
 800f29a:	8471      	strh	r1, [r6, #34]	@ 0x22
 800f29c:	8453      	strh	r3, [r2, #34]	@ 0x22
 800f29e:	461a      	mov	r2, r3
 800f2a0:	462b      	mov	r3, r5
 800f2a2:	4615      	mov	r5, r2
 800f2a4:	f2a3 6222 	subw	r2, r3, #1570	@ 0x622
 800f2a8:	b292      	uxth	r2, r2
 800f2aa:	2a18      	cmp	r2, #24
 800f2ac:	d90d      	bls.n	800f2ca <_ZN8touchgfx12TextProvider16unicodeConverterEh+0xf2>
 800f2ae:	f5a3 62c8 	sub.w	r2, r3, #1600	@ 0x640
 800f2b2:	b292      	uxth	r2, r2
 800f2b4:	2a0a      	cmp	r2, #10
 800f2b6:	d908      	bls.n	800f2ca <_ZN8touchgfx12TextProvider16unicodeConverterEh+0xf2>
 800f2b8:	f46f 67ce 	mvn.w	r7, #1648	@ 0x670
 800f2bc:	19da      	adds	r2, r3, r7
 800f2be:	b292      	uxth	r2, r2
 800f2c0:	2a62      	cmp	r2, #98	@ 0x62
 800f2c2:	d902      	bls.n	800f2ca <_ZN8touchgfx12TextProvider16unicodeConverterEh+0xf2>
 800f2c4:	2b20      	cmp	r3, #32
 800f2c6:	f040 80d0 	bne.w	800f46a <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x292>
 800f2ca:	f10b 0103 	add.w	r1, fp, #3
 800f2ce:	b289      	uxth	r1, r1
 800f2d0:	2909      	cmp	r1, #9
 800f2d2:	460a      	mov	r2, r1
 800f2d4:	bf88      	it	hi
 800f2d6:	f1a1 020a 	subhi.w	r2, r1, #10
 800f2da:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 800f2de:	f8b2 c022 	ldrh.w	ip, [r2, #34]	@ 0x22
 800f2e2:	f10b 0204 	add.w	r2, fp, #4
 800f2e6:	b292      	uxth	r2, r2
 800f2e8:	2a09      	cmp	r2, #9
 800f2ea:	bf88      	it	hi
 800f2ec:	3a0a      	subhi	r2, #10
 800f2ee:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 800f2f2:	8c52      	ldrh	r2, [r2, #34]	@ 0x22
 800f2f4:	f2a2 6622 	subw	r6, r2, #1570	@ 0x622
 800f2f8:	2e18      	cmp	r6, #24
 800f2fa:	f240 80ba 	bls.w	800f472 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x29a>
 800f2fe:	f5a2 66c8 	sub.w	r6, r2, #1600	@ 0x640
 800f302:	2e0a      	cmp	r6, #10
 800f304:	f240 80b5 	bls.w	800f472 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x29a>
 800f308:	f46f 66ce 	mvn.w	r6, #1648	@ 0x670
 800f30c:	4432      	add	r2, r6
 800f30e:	2a62      	cmp	r2, #98	@ 0x62
 800f310:	f240 80af 	bls.w	800f472 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x29a>
 800f314:	f2a3 6227 	subw	r2, r3, #1575	@ 0x627
 800f318:	b292      	uxth	r2, r2
 800f31a:	2a21      	cmp	r2, #33	@ 0x21
 800f31c:	f200 80a9 	bhi.w	800f472 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x29a>
 800f320:	f2a4 6227 	subw	r2, r4, #1575	@ 0x627
 800f324:	b292      	uxth	r2, r2
 800f326:	2a23      	cmp	r2, #35	@ 0x23
 800f328:	d82e      	bhi.n	800f388 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x1b0>
 800f32a:	f2ac 622f 	subw	r2, ip, #1583	@ 0x62f
 800f32e:	b292      	uxth	r2, r2
 800f330:	2a18      	cmp	r2, #24
 800f332:	d829      	bhi.n	800f388 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x1b0>
 800f334:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 800f338:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800f33c:	f5a2 4282 	sub.w	r2, r2, #16640	@ 0x4100
 800f340:	ebc3 1603 	rsb	r6, r3, r3, lsl #4
 800f344:	3a1a      	subs	r2, #26
 800f346:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
 800f34a:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 800f34e:	6c87      	ldr	r7, [r0, #72]	@ 0x48
 800f350:	4462      	add	r2, ip
 800f352:	b292      	uxth	r2, r2
 800f354:	b1c7      	cbz	r7, 800f388 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x1b0>
 800f356:	8b3e      	ldrh	r6, [r7, #24]
 800f358:	b1b6      	cbz	r6, 800f388 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x1b0>
 800f35a:	f8d7 9000 	ldr.w	r9, [r7]
 800f35e:	f04f 0e00 	mov.w	lr, #0
 800f362:	eb06 070e 	add.w	r7, r6, lr
 800f366:	f04f 080a 	mov.w	r8, #10
 800f36a:	107f      	asrs	r7, r7, #1
 800f36c:	fb08 fa07 	mul.w	sl, r8, r7
 800f370:	eb09 080a 	add.w	r8, r9, sl
 800f374:	f839 a00a 	ldrh.w	sl, [r9, sl]
 800f378:	4552      	cmp	r2, sl
 800f37a:	d961      	bls.n	800f440 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x268>
 800f37c:	f107 0e01 	add.w	lr, r7, #1
 800f380:	e000      	b.n	800f384 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x1ac>
 800f382:	463e      	mov	r6, r7
 800f384:	45b6      	cmp	lr, r6
 800f386:	dbec      	blt.n	800f362 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x18a>
 800f388:	f5a3 62c5 	sub.w	r2, r3, #1576	@ 0x628
 800f38c:	b292      	uxth	r2, r2
 800f38e:	2a22      	cmp	r2, #34	@ 0x22
 800f390:	d971      	bls.n	800f476 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x29e>
 800f392:	f2a5 624b 	subw	r2, r5, #1611	@ 0x64b
 800f396:	b292      	uxth	r2, r2
 800f398:	2a14      	cmp	r2, #20
 800f39a:	d918      	bls.n	800f3ce <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x1f6>
 800f39c:	f5b5 6fce 	cmp.w	r5, #1648	@ 0x670
 800f3a0:	d015      	beq.n	800f3ce <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x1f6>
 800f3a2:	f240 6274 	movw	r2, #1652	@ 0x674
 800f3a6:	4295      	cmp	r5, r2
 800f3a8:	d011      	beq.n	800f3ce <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x1f6>
 800f3aa:	f2a5 62d6 	subw	r2, r5, #1750	@ 0x6d6
 800f3ae:	b292      	uxth	r2, r2
 800f3b0:	2a17      	cmp	r2, #23
 800f3b2:	d804      	bhi.n	800f3be <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x1e6>
 800f3b4:	495e      	ldr	r1, [pc, #376]	@ (800f530 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x358>)
 800f3b6:	fa21 f202 	lsr.w	r2, r1, r2
 800f3ba:	07d2      	lsls	r2, r2, #31
 800f3bc:	d407      	bmi.n	800f3ce <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x1f6>
 800f3be:	f6a5 02e4 	subw	r2, r5, #2276	@ 0x8e4
 800f3c2:	b292      	uxth	r2, r2
 800f3c4:	2a1a      	cmp	r2, #26
 800f3c6:	d902      	bls.n	800f3ce <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x1f6>
 800f3c8:	46a4      	mov	ip, r4
 800f3ca:	462c      	mov	r4, r5
 800f3cc:	2500      	movs	r5, #0
 800f3ce:	2b20      	cmp	r3, #32
 800f3d0:	d005      	beq.n	800f3de <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x206>
 800f3d2:	f2a3 6226 	subw	r2, r3, #1574	@ 0x626
 800f3d6:	b292      	uxth	r2, r2
 800f3d8:	2a24      	cmp	r2, #36	@ 0x24
 800f3da:	f200 8136 	bhi.w	800f64a <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x472>
 800f3de:	f2a4 6222 	subw	r2, r4, #1570	@ 0x622
 800f3e2:	b292      	uxth	r2, r2
 800f3e4:	2ab3      	cmp	r2, #179	@ 0xb3
 800f3e6:	f200 8130 	bhi.w	800f64a <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x472>
 800f3ea:	f240 6244 	movw	r2, #1604	@ 0x644
 800f3ee:	4294      	cmp	r4, r2
 800f3f0:	d104      	bne.n	800f3fc <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x224>
 800f3f2:	f240 6227 	movw	r2, #1575	@ 0x627
 800f3f6:	4594      	cmp	ip, r2
 800f3f8:	f000 8127 	beq.w	800f64a <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x472>
 800f3fc:	f240 624f 	movw	r2, #1615	@ 0x64f
 800f400:	4295      	cmp	r5, r2
 800f402:	f000 8122 	beq.w	800f64a <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x472>
 800f406:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 800f408:	2900      	cmp	r1, #0
 800f40a:	f000 811e 	beq.w	800f64a <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x472>
 800f40e:	8b8a      	ldrh	r2, [r1, #28]
 800f410:	2a00      	cmp	r2, #0
 800f412:	f000 811b 	beq.w	800f64c <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x474>
 800f416:	b2e4      	uxtb	r4, r4
 800f418:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 800f41c:	6889      	ldr	r1, [r1, #8]
 800f41e:	b2a4      	uxth	r4, r4
 800f420:	2700      	movs	r7, #0
 800f422:	f04f 080a 	mov.w	r8, #10
 800f426:	19d6      	adds	r6, r2, r7
 800f428:	1076      	asrs	r6, r6, #1
 800f42a:	fb08 fc06 	mul.w	ip, r8, r6
 800f42e:	eb01 0e0c 	add.w	lr, r1, ip
 800f432:	f831 c00c 	ldrh.w	ip, [r1, ip]
 800f436:	4564      	cmp	r4, ip
 800f438:	f240 810a 	bls.w	800f650 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x478>
 800f43c:	1c77      	adds	r7, r6, #1
 800f43e:	e101      	b.n	800f644 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x46c>
 800f440:	d39f      	bcc.n	800f382 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x1aa>
 800f442:	f8b8 2004 	ldrh.w	r2, [r8, #4]
 800f446:	42aa      	cmp	r2, r5
 800f448:	d19e      	bne.n	800f388 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x1b0>
 800f44a:	8f03      	ldrh	r3, [r0, #56]	@ 0x38
 800f44c:	86c1      	strh	r1, [r0, #54]	@ 0x36
 800f44e:	3b03      	subs	r3, #3
 800f450:	2909      	cmp	r1, #9
 800f452:	8703      	strh	r3, [r0, #56]	@ 0x38
 800f454:	bf88      	it	hi
 800f456:	f1ab 0207 	subhi.w	r2, fp, #7
 800f45a:	f04f 0301 	mov.w	r3, #1
 800f45e:	bf88      	it	hi
 800f460:	86c2      	strhhi	r2, [r0, #54]	@ 0x36
 800f462:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 800f466:	f8b8 3002 	ldrh.w	r3, [r8, #2]
 800f46a:	4618      	mov	r0, r3
 800f46c:	b007      	add	sp, #28
 800f46e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f472:	2b20      	cmp	r3, #32
 800f474:	d188      	bne.n	800f388 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x1b0>
 800f476:	f2a5 622c 	subw	r2, r5, #1580	@ 0x62c
 800f47a:	b292      	uxth	r2, r2
 800f47c:	2a25      	cmp	r2, #37	@ 0x25
 800f47e:	d888      	bhi.n	800f392 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x1ba>
 800f480:	f2a4 622c 	subw	r2, r4, #1580	@ 0x62c
 800f484:	b291      	uxth	r1, r2
 800f486:	2925      	cmp	r1, #37	@ 0x25
 800f488:	d914      	bls.n	800f4b4 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x2dc>
 800f48a:	f5b4 6fce 	cmp.w	r4, #1648	@ 0x670
 800f48e:	f000 82ec 	beq.w	800fa6a <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x892>
 800f492:	f240 62d2 	movw	r2, #1746	@ 0x6d2
 800f496:	4294      	cmp	r4, r2
 800f498:	f47f af7b 	bne.w	800f392 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x1ba>
 800f49c:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 800f4a0:	00d2      	lsls	r2, r2, #3
 800f4a2:	2b20      	cmp	r3, #32
 800f4a4:	b292      	uxth	r2, r2
 800f4a6:	d107      	bne.n	800f4b8 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x2e0>
 800f4a8:	f5a2 5240 	sub.w	r2, r2, #12288	@ 0x3000
 800f4ac:	3a30      	subs	r2, #48	@ 0x30
 800f4ae:	b292      	uxth	r2, r2
 800f4b0:	2127      	movs	r1, #39	@ 0x27
 800f4b2:	e017      	b.n	800f4e4 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x30c>
 800f4b4:	2b20      	cmp	r3, #32
 800f4b6:	d034      	beq.n	800f522 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x34a>
 800f4b8:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800f4bc:	ebc3 1242 	rsb	r2, r3, r2, lsl #5
 800f4c0:	0112      	lsls	r2, r2, #4
 800f4c2:	f502 42e5 	add.w	r2, r2, #29312	@ 0x7280
 800f4c6:	b292      	uxth	r2, r2
 800f4c8:	eb05 0685 	add.w	r6, r5, r5, lsl #2
 800f4cc:	eb02 02c6 	add.w	r2, r2, r6, lsl #3
 800f4d0:	f5b4 6fce 	cmp.w	r4, #1648	@ 0x670
 800f4d4:	b292      	uxth	r2, r2
 800f4d6:	f000 82d2 	beq.w	800fa7e <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x8a6>
 800f4da:	f240 66d2 	movw	r6, #1746	@ 0x6d2
 800f4de:	42b4      	cmp	r4, r6
 800f4e0:	bf08      	it	eq
 800f4e2:	2127      	moveq	r1, #39	@ 0x27
 800f4e4:	6c87      	ldr	r7, [r0, #72]	@ 0x48
 800f4e6:	2f00      	cmp	r7, #0
 800f4e8:	f43f af53 	beq.w	800f392 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x1ba>
 800f4ec:	8b7e      	ldrh	r6, [r7, #26]
 800f4ee:	2e00      	cmp	r6, #0
 800f4f0:	f43f af4f 	beq.w	800f392 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x1ba>
 800f4f4:	440a      	add	r2, r1
 800f4f6:	f502 6212 	add.w	r2, r2, #2336	@ 0x920
 800f4fa:	6879      	ldr	r1, [r7, #4]
 800f4fc:	b292      	uxth	r2, r2
 800f4fe:	f04f 0e00 	mov.w	lr, #0
 800f502:	f04f 0a0a 	mov.w	sl, #10
 800f506:	eb06 070e 	add.w	r7, r6, lr
 800f50a:	107f      	asrs	r7, r7, #1
 800f50c:	fb0a f807 	mul.w	r8, sl, r7
 800f510:	eb01 0908 	add.w	r9, r1, r8
 800f514:	f831 8008 	ldrh.w	r8, [r1, r8]
 800f518:	4542      	cmp	r2, r8
 800f51a:	d90b      	bls.n	800f534 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x35c>
 800f51c:	f107 0e01 	add.w	lr, r7, #1
 800f520:	e003      	b.n	800f52a <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x352>
 800f522:	f64c 72d0 	movw	r2, #53200	@ 0xcfd0
 800f526:	e7cf      	b.n	800f4c8 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x2f0>
 800f528:	463e      	mov	r6, r7
 800f52a:	4576      	cmp	r6, lr
 800f52c:	dceb      	bgt.n	800f506 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x32e>
 800f52e:	e730      	b.n	800f392 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x1ba>
 800f530:	00f67e7f 	.word	0x00f67e7f
 800f534:	d3f8      	bcc.n	800f528 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x350>
 800f536:	f109 0102 	add.w	r1, r9, #2
 800f53a:	2500      	movs	r5, #0
 800f53c:	2202      	movs	r2, #2
 800f53e:	2d00      	cmp	r5, #0
 800f540:	bf0c      	ite	eq
 800f542:	4614      	moveq	r4, r2
 800f544:	1c54      	addne	r4, r2, #1
 800f546:	3401      	adds	r4, #1
 800f548:	445c      	add	r4, fp
 800f54a:	f8df c388 	ldr.w	ip, [pc, #904]	@ 800f8d4 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x6fc>
 800f54e:	b2a4      	uxth	r4, r4
 800f550:	2c09      	cmp	r4, #9
 800f552:	4626      	mov	r6, r4
 800f554:	bf88      	it	hi
 800f556:	f1a4 060a 	subhi.w	r6, r4, #10
 800f55a:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 800f55e:	8c76      	ldrh	r6, [r6, #34]	@ 0x22
 800f560:	f2a6 674b 	subw	r7, r6, #1611	@ 0x64b
 800f564:	2f14      	cmp	r7, #20
 800f566:	d978      	bls.n	800f65a <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x482>
 800f568:	f026 0704 	bic.w	r7, r6, #4
 800f56c:	f5b7 6fce 	cmp.w	r7, #1648	@ 0x670
 800f570:	d073      	beq.n	800f65a <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x482>
 800f572:	f2a6 67d6 	subw	r7, r6, #1750	@ 0x6d6
 800f576:	b2bf      	uxth	r7, r7
 800f578:	2f17      	cmp	r7, #23
 800f57a:	d803      	bhi.n	800f584 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x3ac>
 800f57c:	fa2c f707 	lsr.w	r7, ip, r7
 800f580:	07ff      	lsls	r7, r7, #31
 800f582:	d46a      	bmi.n	800f65a <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x482>
 800f584:	f6a6 07e4 	subw	r7, r6, #2276	@ 0x8e4
 800f588:	2f1a      	cmp	r7, #26
 800f58a:	d966      	bls.n	800f65a <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x482>
 800f58c:	f2a6 6422 	subw	r4, r6, #1570	@ 0x622
 800f590:	2c18      	cmp	r4, #24
 800f592:	d965      	bls.n	800f660 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x488>
 800f594:	f5a6 64c8 	sub.w	r4, r6, #1600	@ 0x640
 800f598:	2c0a      	cmp	r4, #10
 800f59a:	d961      	bls.n	800f660 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x488>
 800f59c:	f46f 6cce 	mvn.w	ip, #1648	@ 0x670
 800f5a0:	4466      	add	r6, ip
 800f5a2:	2e62      	cmp	r6, #98	@ 0x62
 800f5a4:	bf94      	ite	ls
 800f5a6:	2400      	movls	r4, #0
 800f5a8:	2401      	movhi	r4, #1
 800f5aa:	9401      	str	r4, [sp, #4]
 800f5ac:	f890 4060 	ldrb.w	r4, [r0, #96]	@ 0x60
 800f5b0:	f084 0401 	eor.w	r4, r4, #1
 800f5b4:	9404      	str	r4, [sp, #16]
 800f5b6:	9c01      	ldr	r4, [sp, #4]
 800f5b8:	2c00      	cmp	r4, #0
 800f5ba:	9c04      	ldr	r4, [sp, #16]
 800f5bc:	bf0c      	ite	eq
 800f5be:	2702      	moveq	r7, #2
 800f5c0:	2700      	movne	r7, #0
 800f5c2:	193c      	adds	r4, r7, r4
 800f5c4:	9400      	str	r4, [sp, #0]
 800f5c6:	2900      	cmp	r1, #0
 800f5c8:	f000 8186 	beq.w	800f8d8 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x700>
 800f5cc:	f831 4014 	ldrh.w	r4, [r1, r4, lsl #1]
 800f5d0:	2c00      	cmp	r4, #0
 800f5d2:	f040 8221 	bne.w	800fa18 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x840>
 800f5d6:	2a00      	cmp	r2, #0
 800f5d8:	f000 821e 	beq.w	800fa18 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x840>
 800f5dc:	eb0b 0402 	add.w	r4, fp, r2
 800f5e0:	b2a4      	uxth	r4, r4
 800f5e2:	2c09      	cmp	r4, #9
 800f5e4:	bf88      	it	hi
 800f5e6:	3c0a      	subhi	r4, #10
 800f5e8:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 800f5ec:	4eb9      	ldr	r6, [pc, #740]	@ (800f8d4 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x6fc>)
 800f5ee:	8c64      	ldrh	r4, [r4, #34]	@ 0x22
 800f5f0:	f102 0e01 	add.w	lr, r2, #1
 800f5f4:	f2a4 6c4b 	subw	ip, r4, #1611	@ 0x64b
 800f5f8:	f1bc 0f14 	cmp.w	ip, #20
 800f5fc:	d915      	bls.n	800f62a <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x452>
 800f5fe:	f024 0c04 	bic.w	ip, r4, #4
 800f602:	f5bc 6fce 	cmp.w	ip, #1648	@ 0x670
 800f606:	d010      	beq.n	800f62a <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x452>
 800f608:	f2a4 6cd6 	subw	ip, r4, #1750	@ 0x6d6
 800f60c:	fa1f fc8c 	uxth.w	ip, ip
 800f610:	f1bc 0f17 	cmp.w	ip, #23
 800f614:	d804      	bhi.n	800f620 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x448>
 800f616:	fa26 fc0c 	lsr.w	ip, r6, ip
 800f61a:	f01c 0f01 	tst.w	ip, #1
 800f61e:	d104      	bne.n	800f62a <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x452>
 800f620:	f6a4 0ce4 	subw	ip, r4, #2276	@ 0x8e4
 800f624:	f1bc 0f1a 	cmp.w	ip, #26
 800f628:	d81c      	bhi.n	800f664 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x48c>
 800f62a:	eb0b 040e 	add.w	r4, fp, lr
 800f62e:	b2a4      	uxth	r4, r4
 800f630:	2c09      	cmp	r4, #9
 800f632:	bf88      	it	hi
 800f634:	3c0a      	subhi	r4, #10
 800f636:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 800f63a:	f10e 0e01 	add.w	lr, lr, #1
 800f63e:	8c64      	ldrh	r4, [r4, #34]	@ 0x22
 800f640:	e7d8      	b.n	800f5f4 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x41c>
 800f642:	4632      	mov	r2, r6
 800f644:	4297      	cmp	r7, r2
 800f646:	f6ff aeee 	blt.w	800f426 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x24e>
 800f64a:	2200      	movs	r2, #0
 800f64c:	4611      	mov	r1, r2
 800f64e:	e776      	b.n	800f53e <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x366>
 800f650:	d3f7      	bcc.n	800f642 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x46a>
 800f652:	f10e 0102 	add.w	r1, lr, #2
 800f656:	2201      	movs	r2, #1
 800f658:	e771      	b.n	800f53e <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x366>
 800f65a:	3401      	adds	r4, #1
 800f65c:	b2a4      	uxth	r4, r4
 800f65e:	e777      	b.n	800f550 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x378>
 800f660:	2400      	movs	r4, #0
 800f662:	e7a2      	b.n	800f5aa <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x3d2>
 800f664:	6c86      	ldr	r6, [r0, #72]	@ 0x48
 800f666:	2e00      	cmp	r6, #0
 800f668:	d07a      	beq.n	800f760 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x588>
 800f66a:	f46f 6ac4 	mvn.w	sl, #1568	@ 0x620
 800f66e:	eb04 0c0a 	add.w	ip, r4, sl
 800f672:	f1bc 0f19 	cmp.w	ip, #25
 800f676:	d840      	bhi.n	800f6fa <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x522>
 800f678:	f104 5400 	add.w	r4, r4, #536870912	@ 0x20000000
 800f67c:	f46f 69c4 	mvn.w	r9, #1568	@ 0x620
 800f680:	68f7      	ldr	r7, [r6, #12]
 800f682:	444c      	add	r4, r9
 800f684:	eb07 0cc4 	add.w	ip, r7, r4, lsl #3
 800f688:	f10e 0401 	add.w	r4, lr, #1
 800f68c:	44de      	add	lr, fp
 800f68e:	fa1f fe8e 	uxth.w	lr, lr
 800f692:	f1be 0f09 	cmp.w	lr, #9
 800f696:	bf88      	it	hi
 800f698:	f1ae 0e0a 	subhi.w	lr, lr, #10
 800f69c:	eb00 0e4e 	add.w	lr, r0, lr, lsl #1
 800f6a0:	445c      	add	r4, fp
 800f6a2:	f8be e022 	ldrh.w	lr, [lr, #34]	@ 0x22
 800f6a6:	f8df 922c 	ldr.w	r9, [pc, #556]	@ 800f8d4 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x6fc>
 800f6aa:	b2a4      	uxth	r4, r4
 800f6ac:	f2ae 684b 	subw	r8, lr, #1611	@ 0x64b
 800f6b0:	f1b8 0f14 	cmp.w	r8, #20
 800f6b4:	d915      	bls.n	800f6e2 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x50a>
 800f6b6:	f02e 0804 	bic.w	r8, lr, #4
 800f6ba:	f5b8 6fce 	cmp.w	r8, #1648	@ 0x670
 800f6be:	d010      	beq.n	800f6e2 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x50a>
 800f6c0:	f2ae 68d6 	subw	r8, lr, #1750	@ 0x6d6
 800f6c4:	fa1f f888 	uxth.w	r8, r8
 800f6c8:	f1b8 0f17 	cmp.w	r8, #23
 800f6cc:	d804      	bhi.n	800f6d8 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x500>
 800f6ce:	fa29 f808 	lsr.w	r8, r9, r8
 800f6d2:	f018 0f01 	tst.w	r8, #1
 800f6d6:	d104      	bne.n	800f6e2 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x50a>
 800f6d8:	f6ae 08e4 	subw	r8, lr, #2276	@ 0x8e4
 800f6dc:	f1b8 0f1a 	cmp.w	r8, #26
 800f6e0:	d846      	bhi.n	800f770 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x598>
 800f6e2:	2c09      	cmp	r4, #9
 800f6e4:	46a6      	mov	lr, r4
 800f6e6:	bf88      	it	hi
 800f6e8:	f1a4 0e0a 	subhi.w	lr, r4, #10
 800f6ec:	eb00 0e4e 	add.w	lr, r0, lr, lsl #1
 800f6f0:	3401      	adds	r4, #1
 800f6f2:	b2a4      	uxth	r4, r4
 800f6f4:	f8be e022 	ldrh.w	lr, [lr, #34]	@ 0x22
 800f6f8:	e7d8      	b.n	800f6ac <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x4d4>
 800f6fa:	f46f 68c8 	mvn.w	r8, #1600	@ 0x640
 800f6fe:	eb04 0c08 	add.w	ip, r4, r8
 800f702:	f1bc 0f09 	cmp.w	ip, #9
 800f706:	d806      	bhi.n	800f716 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x53e>
 800f708:	f104 5400 	add.w	r4, r4, #536870912	@ 0x20000000
 800f70c:	f46f 6cc8 	mvn.w	ip, #1600	@ 0x640
 800f710:	4464      	add	r4, ip
 800f712:	6937      	ldr	r7, [r6, #16]
 800f714:	e7b6      	b.n	800f684 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x4ac>
 800f716:	f46f 67ce 	mvn.w	r7, #1648	@ 0x670
 800f71a:	eb04 0c07 	add.w	ip, r4, r7
 800f71e:	f1bc 0f62 	cmp.w	ip, #98	@ 0x62
 800f722:	d81d      	bhi.n	800f760 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x588>
 800f724:	f8b6 c01e 	ldrh.w	ip, [r6, #30]
 800f728:	f1bc 0f00 	cmp.w	ip, #0
 800f72c:	d0ac      	beq.n	800f688 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x4b0>
 800f72e:	6977      	ldr	r7, [r6, #20]
 800f730:	9703      	str	r7, [sp, #12]
 800f732:	f04f 0900 	mov.w	r9, #0
 800f736:	eb0c 0809 	add.w	r8, ip, r9
 800f73a:	270a      	movs	r7, #10
 800f73c:	ea4f 0868 	mov.w	r8, r8, asr #1
 800f740:	fb07 fa08 	mul.w	sl, r7, r8
 800f744:	9f03      	ldr	r7, [sp, #12]
 800f746:	4457      	add	r7, sl
 800f748:	9705      	str	r7, [sp, #20]
 800f74a:	9f03      	ldr	r7, [sp, #12]
 800f74c:	f837 a00a 	ldrh.w	sl, [r7, sl]
 800f750:	45a2      	cmp	sl, r4
 800f752:	d208      	bcs.n	800f766 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x58e>
 800f754:	f108 0901 	add.w	r9, r8, #1
 800f758:	e000      	b.n	800f75c <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x584>
 800f75a:	46c4      	mov	ip, r8
 800f75c:	45cc      	cmp	ip, r9
 800f75e:	dcea      	bgt.n	800f736 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x55e>
 800f760:	f04f 0c00 	mov.w	ip, #0
 800f764:	e790      	b.n	800f688 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x4b0>
 800f766:	d8f8      	bhi.n	800f75a <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x582>
 800f768:	9c05      	ldr	r4, [sp, #20]
 800f76a:	f104 0c02 	add.w	ip, r4, #2
 800f76e:	e78b      	b.n	800f688 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x4b0>
 800f770:	2e00      	cmp	r6, #0
 800f772:	d05d      	beq.n	800f830 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x658>
 800f774:	f46f 6ac4 	mvn.w	sl, #1568	@ 0x620
 800f778:	eb0e 040a 	add.w	r4, lr, sl
 800f77c:	2c19      	cmp	r4, #25
 800f77e:	d829      	bhi.n	800f7d4 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x5fc>
 800f780:	f10e 5400 	add.w	r4, lr, #536870912	@ 0x20000000
 800f784:	f46f 69c4 	mvn.w	r9, #1568	@ 0x620
 800f788:	68f7      	ldr	r7, [r6, #12]
 800f78a:	444c      	add	r4, r9
 800f78c:	eb07 04c4 	add.w	r4, r7, r4, lsl #3
 800f790:	f1bc 0f00 	cmp.w	ip, #0
 800f794:	d00f      	beq.n	800f7b6 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x5de>
 800f796:	f8bc c006 	ldrh.w	ip, [ip, #6]
 800f79a:	f1bc 0f00 	cmp.w	ip, #0
 800f79e:	d00a      	beq.n	800f7b6 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x5de>
 800f7a0:	b14c      	cbz	r4, 800f7b6 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x5de>
 800f7a2:	f8b4 c002 	ldrh.w	ip, [r4, #2]
 800f7a6:	f1bc 0f00 	cmp.w	ip, #0
 800f7aa:	f040 8109 	bne.w	800f9c0 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x7e8>
 800f7ae:	88e4      	ldrh	r4, [r4, #6]
 800f7b0:	2c00      	cmp	r4, #0
 800f7b2:	f040 8105 	bne.w	800f9c0 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x7e8>
 800f7b6:	9c00      	ldr	r4, [sp, #0]
 800f7b8:	2c02      	cmp	r4, #2
 800f7ba:	d13f      	bne.n	800f83c <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x664>
 800f7bc:	880c      	ldrh	r4, [r1, #0]
 800f7be:	2c00      	cmp	r4, #0
 800f7c0:	f000 80fe 	beq.w	800f9c0 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x7e8>
 800f7c4:	f240 6444 	movw	r4, #1604	@ 0x644
 800f7c8:	42a3      	cmp	r3, r4
 800f7ca:	f040 80f9 	bne.w	800f9c0 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x7e8>
 800f7ce:	2401      	movs	r4, #1
 800f7d0:	9401      	str	r4, [sp, #4]
 800f7d2:	e0dc      	b.n	800f98e <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x7b6>
 800f7d4:	f46f 68c8 	mvn.w	r8, #1600	@ 0x640
 800f7d8:	eb0e 0408 	add.w	r4, lr, r8
 800f7dc:	2c09      	cmp	r4, #9
 800f7de:	d806      	bhi.n	800f7ee <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x616>
 800f7e0:	f46f 67c8 	mvn.w	r7, #1600	@ 0x640
 800f7e4:	f10e 5400 	add.w	r4, lr, #536870912	@ 0x20000000
 800f7e8:	443c      	add	r4, r7
 800f7ea:	6937      	ldr	r7, [r6, #16]
 800f7ec:	e7ce      	b.n	800f78c <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x5b4>
 800f7ee:	f46f 64ce 	mvn.w	r4, #1648	@ 0x670
 800f7f2:	4474      	add	r4, lr
 800f7f4:	2c62      	cmp	r4, #98	@ 0x62
 800f7f6:	d81b      	bhi.n	800f830 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x658>
 800f7f8:	8bf4      	ldrh	r4, [r6, #30]
 800f7fa:	2c00      	cmp	r4, #0
 800f7fc:	d0c8      	beq.n	800f790 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x5b8>
 800f7fe:	6977      	ldr	r7, [r6, #20]
 800f800:	9703      	str	r7, [sp, #12]
 800f802:	f04f 0900 	mov.w	r9, #0
 800f806:	eb04 0809 	add.w	r8, r4, r9
 800f80a:	270a      	movs	r7, #10
 800f80c:	ea4f 0868 	mov.w	r8, r8, asr #1
 800f810:	fb07 fa08 	mul.w	sl, r7, r8
 800f814:	9f03      	ldr	r7, [sp, #12]
 800f816:	4457      	add	r7, sl
 800f818:	9705      	str	r7, [sp, #20]
 800f81a:	9f03      	ldr	r7, [sp, #12]
 800f81c:	f837 a00a 	ldrh.w	sl, [r7, sl]
 800f820:	45f2      	cmp	sl, lr
 800f822:	d207      	bcs.n	800f834 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x65c>
 800f824:	f108 0901 	add.w	r9, r8, #1
 800f828:	e000      	b.n	800f82c <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x654>
 800f82a:	4644      	mov	r4, r8
 800f82c:	45a1      	cmp	r9, r4
 800f82e:	dbea      	blt.n	800f806 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x62e>
 800f830:	2400      	movs	r4, #0
 800f832:	e7ad      	b.n	800f790 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x5b8>
 800f834:	d8f9      	bhi.n	800f82a <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x652>
 800f836:	9c05      	ldr	r4, [sp, #20]
 800f838:	3402      	adds	r4, #2
 800f83a:	e7a9      	b.n	800f790 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x5b8>
 800f83c:	9c00      	ldr	r4, [sp, #0]
 800f83e:	2c03      	cmp	r4, #3
 800f840:	f040 80be 	bne.w	800f9c0 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x7e8>
 800f844:	884c      	ldrh	r4, [r1, #2]
 800f846:	2c00      	cmp	r4, #0
 800f848:	f000 80ba 	beq.w	800f9c0 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x7e8>
 800f84c:	f240 6444 	movw	r4, #1604	@ 0x644
 800f850:	42a3      	cmp	r3, r4
 800f852:	f040 80b5 	bne.w	800f9c0 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x7e8>
 800f856:	2401      	movs	r4, #1
 800f858:	9401      	str	r4, [sp, #4]
 800f85a:	884c      	ldrh	r4, [r1, #2]
 800f85c:	2c00      	cmp	r4, #0
 800f85e:	f000 8096 	beq.w	800f98e <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x7b6>
 800f862:	2401      	movs	r4, #1
 800f864:	9400      	str	r4, [sp, #0]
 800f866:	e0de      	b.n	800fa26 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x84e>
 800f868:	f46f 68c8 	mvn.w	r8, #1600	@ 0x640
 800f86c:	eb03 0408 	add.w	r4, r3, r8
 800f870:	b2a4      	uxth	r4, r4
 800f872:	2c09      	cmp	r4, #9
 800f874:	d806      	bhi.n	800f884 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x6ac>
 800f876:	f103 5400 	add.w	r4, r3, #536870912	@ 0x20000000
 800f87a:	f46f 67c8 	mvn.w	r7, #1600	@ 0x640
 800f87e:	443c      	add	r4, r7
 800f880:	6936      	ldr	r6, [r6, #16]
 800f882:	e0ac      	b.n	800f9de <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x806>
 800f884:	f46f 6ace 	mvn.w	sl, #1648	@ 0x670
 800f888:	eb03 040a 	add.w	r4, r3, sl
 800f88c:	b2a4      	uxth	r4, r4
 800f88e:	2c62      	cmp	r4, #98	@ 0x62
 800f890:	d819      	bhi.n	800f8c6 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x6ee>
 800f892:	8bf4      	ldrh	r4, [r6, #30]
 800f894:	b1bc      	cbz	r4, 800f8c6 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x6ee>
 800f896:	f8d6 e014 	ldr.w	lr, [r6, #20]
 800f89a:	f04f 0c00 	mov.w	ip, #0
 800f89e:	4626      	mov	r6, r4
 800f8a0:	f04f 0a0a 	mov.w	sl, #10
 800f8a4:	eb06 040c 	add.w	r4, r6, ip
 800f8a8:	1064      	asrs	r4, r4, #1
 800f8aa:	fb0a f804 	mul.w	r8, sl, r4
 800f8ae:	eb0e 0908 	add.w	r9, lr, r8
 800f8b2:	f83e 8008 	ldrh.w	r8, [lr, r8]
 800f8b6:	4598      	cmp	r8, r3
 800f8b8:	d207      	bcs.n	800f8ca <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x6f2>
 800f8ba:	f104 0c01 	add.w	ip, r4, #1
 800f8be:	e000      	b.n	800f8c2 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x6ea>
 800f8c0:	4626      	mov	r6, r4
 800f8c2:	45b4      	cmp	ip, r6
 800f8c4:	dbee      	blt.n	800f8a4 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x6cc>
 800f8c6:	2600      	movs	r6, #0
 800f8c8:	e08b      	b.n	800f9e2 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x80a>
 800f8ca:	d8f9      	bhi.n	800f8c0 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x6e8>
 800f8cc:	f109 0602 	add.w	r6, r9, #2
 800f8d0:	e087      	b.n	800f9e2 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x80a>
 800f8d2:	bf00      	nop
 800f8d4:	00f67e7f 	.word	0x00f67e7f
 800f8d8:	6c84      	ldr	r4, [r0, #72]	@ 0x48
 800f8da:	b18c      	cbz	r4, 800f900 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x728>
 800f8dc:	f46f 69c4 	mvn.w	r9, #1568	@ 0x620
 800f8e0:	eb03 0609 	add.w	r6, r3, r9
 800f8e4:	b2b6      	uxth	r6, r6
 800f8e6:	2e19      	cmp	r6, #25
 800f8e8:	d812      	bhi.n	800f910 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x738>
 800f8ea:	f103 5100 	add.w	r1, r3, #536870912	@ 0x20000000
 800f8ee:	f46f 68c4 	mvn.w	r8, #1568	@ 0x620
 800f8f2:	68e4      	ldr	r4, [r4, #12]
 800f8f4:	4441      	add	r1, r8
 800f8f6:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 800f8fa:	2900      	cmp	r1, #0
 800f8fc:	f040 808c 	bne.w	800fa18 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x840>
 800f900:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800f904:	f47f adb1 	bne.w	800f46a <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x292>
 800f908:	2200      	movs	r2, #0
 800f90a:	f880 2060 	strb.w	r2, [r0, #96]	@ 0x60
 800f90e:	e5ac      	b.n	800f46a <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x292>
 800f910:	f46f 6cc8 	mvn.w	ip, #1600	@ 0x640
 800f914:	eb03 060c 	add.w	r6, r3, ip
 800f918:	b2b6      	uxth	r6, r6
 800f91a:	2e09      	cmp	r6, #9
 800f91c:	d806      	bhi.n	800f92c <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x754>
 800f91e:	f103 5100 	add.w	r1, r3, #536870912	@ 0x20000000
 800f922:	f46f 67c8 	mvn.w	r7, #1600	@ 0x640
 800f926:	4439      	add	r1, r7
 800f928:	6924      	ldr	r4, [r4, #16]
 800f92a:	e7e4      	b.n	800f8f6 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x71e>
 800f92c:	f46f 66ce 	mvn.w	r6, #1648	@ 0x670
 800f930:	199e      	adds	r6, r3, r6
 800f932:	b2b6      	uxth	r6, r6
 800f934:	2e62      	cmp	r6, #98	@ 0x62
 800f936:	d8e3      	bhi.n	800f900 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x728>
 800f938:	8be6      	ldrh	r6, [r4, #30]
 800f93a:	2e00      	cmp	r6, #0
 800f93c:	d0e0      	beq.n	800f900 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x728>
 800f93e:	f8d4 e014 	ldr.w	lr, [r4, #20]
 800f942:	f04f 090a 	mov.w	r9, #10
 800f946:	4634      	mov	r4, r6
 800f948:	1866      	adds	r6, r4, r1
 800f94a:	1076      	asrs	r6, r6, #1
 800f94c:	fb09 fc06 	mul.w	ip, r9, r6
 800f950:	eb0e 080c 	add.w	r8, lr, ip
 800f954:	f83e c00c 	ldrh.w	ip, [lr, ip]
 800f958:	459c      	cmp	ip, r3
 800f95a:	d205      	bcs.n	800f968 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x790>
 800f95c:	1c71      	adds	r1, r6, #1
 800f95e:	e000      	b.n	800f962 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x78a>
 800f960:	4634      	mov	r4, r6
 800f962:	428c      	cmp	r4, r1
 800f964:	dcf0      	bgt.n	800f948 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x770>
 800f966:	e7cb      	b.n	800f900 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x728>
 800f968:	d8fa      	bhi.n	800f960 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x788>
 800f96a:	f108 0102 	add.w	r1, r8, #2
 800f96e:	e053      	b.n	800fa18 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x840>
 800f970:	9c00      	ldr	r4, [sp, #0]
 800f972:	2c03      	cmp	r4, #3
 800f974:	d104      	bne.n	800f980 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x7a8>
 800f976:	88cc      	ldrh	r4, [r1, #6]
 800f978:	2c00      	cmp	r4, #0
 800f97a:	f43f af6c 	beq.w	800f856 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x67e>
 800f97e:	e052      	b.n	800fa26 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x84e>
 800f980:	9c00      	ldr	r4, [sp, #0]
 800f982:	2c01      	cmp	r4, #1
 800f984:	f43f af69 	beq.w	800f85a <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x682>
 800f988:	9c00      	ldr	r4, [sp, #0]
 800f98a:	2c00      	cmp	r4, #0
 800f98c:	d14b      	bne.n	800fa26 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x84e>
 800f98e:	880c      	ldrh	r4, [r1, #0]
 800f990:	b924      	cbnz	r4, 800f99c <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x7c4>
 800f992:	884f      	ldrh	r7, [r1, #2]
 800f994:	1c3c      	adds	r4, r7, #0
 800f996:	bf18      	it	ne
 800f998:	2401      	movne	r4, #1
 800f99a:	e763      	b.n	800f864 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x68c>
 800f99c:	2400      	movs	r4, #0
 800f99e:	e761      	b.n	800f864 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x68c>
 800f9a0:	233e      	movs	r3, #62	@ 0x3e
 800f9a2:	e562      	b.n	800f46a <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x292>
 800f9a4:	233c      	movs	r3, #60	@ 0x3c
 800f9a6:	e560      	b.n	800f46a <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x292>
 800f9a8:	2329      	movs	r3, #41	@ 0x29
 800f9aa:	e55e      	b.n	800f46a <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x292>
 800f9ac:	2328      	movs	r3, #40	@ 0x28
 800f9ae:	e55c      	b.n	800f46a <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x292>
 800f9b0:	235d      	movs	r3, #93	@ 0x5d
 800f9b2:	e55a      	b.n	800f46a <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x292>
 800f9b4:	235b      	movs	r3, #91	@ 0x5b
 800f9b6:	e558      	b.n	800f46a <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x292>
 800f9b8:	237d      	movs	r3, #125	@ 0x7d
 800f9ba:	e556      	b.n	800f46a <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x292>
 800f9bc:	237b      	movs	r3, #123	@ 0x7b
 800f9be:	e554      	b.n	800f46a <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x292>
 800f9c0:	b17e      	cbz	r6, 800f9e2 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x80a>
 800f9c2:	f46f 6ac4 	mvn.w	sl, #1568	@ 0x620
 800f9c6:	eb03 040a 	add.w	r4, r3, sl
 800f9ca:	b2a4      	uxth	r4, r4
 800f9cc:	2c19      	cmp	r4, #25
 800f9ce:	f63f af4b 	bhi.w	800f868 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x690>
 800f9d2:	f103 5400 	add.w	r4, r3, #536870912	@ 0x20000000
 800f9d6:	f46f 69c4 	mvn.w	r9, #1568	@ 0x620
 800f9da:	68f6      	ldr	r6, [r6, #12]
 800f9dc:	444c      	add	r4, r9
 800f9de:	eb06 06c4 	add.w	r6, r6, r4, lsl #3
 800f9e2:	9c02      	ldr	r4, [sp, #8]
 800f9e4:	9f04      	ldr	r7, [sp, #16]
 800f9e6:	8c64      	ldrh	r4, [r4, #34]	@ 0x22
 800f9e8:	f2a4 6422 	subw	r4, r4, #1570	@ 0x622
 800f9ec:	b2a4      	uxth	r4, r4
 800f9ee:	2cb1      	cmp	r4, #177	@ 0xb1
 800f9f0:	bf8c      	ite	hi
 800f9f2:	f04f 0c00 	movhi.w	ip, #0
 800f9f6:	f04f 0c02 	movls.w	ip, #2
 800f9fa:	44bc      	add	ip, r7
 800f9fc:	b166      	cbz	r6, 800fa18 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x840>
 800f9fe:	f836 e01c 	ldrh.w	lr, [r6, ip, lsl #1]
 800fa02:	f1be 0f00 	cmp.w	lr, #0
 800fa06:	d007      	beq.n	800fa18 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x840>
 800fa08:	2cb1      	cmp	r4, #177	@ 0xb1
 800fa0a:	bf94      	ite	ls
 800fa0c:	2200      	movls	r2, #0
 800fa0e:	2201      	movhi	r2, #1
 800fa10:	e9cd c200 	strd	ip, r2, [sp]
 800fa14:	4631      	mov	r1, r6
 800fa16:	2200      	movs	r2, #0
 800fa18:	9c00      	ldr	r4, [sp, #0]
 800fa1a:	2c02      	cmp	r4, #2
 800fa1c:	d1a8      	bne.n	800f970 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x798>
 800fa1e:	888c      	ldrh	r4, [r1, #4]
 800fa20:	2c00      	cmp	r4, #0
 800fa22:	f43f aed4 	beq.w	800f7ce <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x5f6>
 800fa26:	9c00      	ldr	r4, [sp, #0]
 800fa28:	9e00      	ldr	r6, [sp, #0]
 800fa2a:	eb01 0444 	add.w	r4, r1, r4, lsl #1
 800fa2e:	f831 1016 	ldrh.w	r1, [r1, r6, lsl #1]
 800fa32:	2900      	cmp	r1, #0
 800fa34:	f43f ad19 	beq.w	800f46a <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x292>
 800fa38:	9b01      	ldr	r3, [sp, #4]
 800fa3a:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 800fa3e:	8f03      	ldrh	r3, [r0, #56]	@ 0x38
 800fa40:	b292      	uxth	r2, r2
 800fa42:	1a9b      	subs	r3, r3, r2
 800fa44:	445a      	add	r2, fp
 800fa46:	b292      	uxth	r2, r2
 800fa48:	2a09      	cmp	r2, #9
 800fa4a:	bf88      	it	hi
 800fa4c:	3a0a      	subhi	r2, #10
 800fa4e:	8703      	strh	r3, [r0, #56]	@ 0x38
 800fa50:	86c2      	strh	r2, [r0, #54]	@ 0x36
 800fa52:	b145      	cbz	r5, 800fa66 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x88e>
 800fa54:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 800fa56:	3301      	adds	r3, #1
 800fa58:	b29b      	uxth	r3, r3
 800fa5a:	2b0a      	cmp	r3, #10
 800fa5c:	bf28      	it	cs
 800fa5e:	2300      	movcs	r3, #0
 800fa60:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 800fa64:	8445      	strh	r5, [r0, #34]	@ 0x22
 800fa66:	8823      	ldrh	r3, [r4, #0]
 800fa68:	e4ff      	b.n	800f46a <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x292>
 800fa6a:	2b20      	cmp	r3, #32
 800fa6c:	f47f ad24 	bne.w	800f4b8 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x2e0>
 800fa70:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 800fa74:	00d2      	lsls	r2, r2, #3
 800fa76:	f5a2 5240 	sub.w	r2, r2, #12288	@ 0x3000
 800fa7a:	3a30      	subs	r2, #48	@ 0x30
 800fa7c:	b292      	uxth	r2, r2
 800fa7e:	f240 6152 	movw	r1, #1618	@ 0x652
 800fa82:	e52f      	b.n	800f4e4 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x30c>

0800fa84 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 800fa84:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fa86:	4605      	mov	r5, r0
 800fa88:	4608      	mov	r0, r1
 800fa8a:	b1e9      	cbz	r1, 800fac8 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x44>
 800fa8c:	f105 044c 	add.w	r4, r5, #76	@ 0x4c
 800fa90:	460b      	mov	r3, r1
 800fa92:	f101 0708 	add.w	r7, r1, #8
 800fa96:	4622      	mov	r2, r4
 800fa98:	6818      	ldr	r0, [r3, #0]
 800fa9a:	6859      	ldr	r1, [r3, #4]
 800fa9c:	4626      	mov	r6, r4
 800fa9e:	c603      	stmia	r6!, {r0, r1}
 800faa0:	3308      	adds	r3, #8
 800faa2:	42bb      	cmp	r3, r7
 800faa4:	4634      	mov	r4, r6
 800faa6:	d1f7      	bne.n	800fa98 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 800faa8:	6818      	ldr	r0, [r3, #0]
 800faaa:	6030      	str	r0, [r6, #0]
 800faac:	889b      	ldrh	r3, [r3, #4]
 800faae:	80b3      	strh	r3, [r6, #4]
 800fab0:	f895 3059 	ldrb.w	r3, [r5, #89]	@ 0x59
 800fab4:	015b      	lsls	r3, r3, #5
 800fab6:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 800faba:	f895 3052 	ldrb.w	r3, [r5, #82]	@ 0x52
 800fabe:	430b      	orrs	r3, r1
 800fac0:	425b      	negs	r3, r3
 800fac2:	f885 3055 	strb.w	r3, [r5, #85]	@ 0x55
 800fac6:	4610      	mov	r0, r2
 800fac8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800faca <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 800faca:	b538      	push	{r3, r4, r5, lr}
 800facc:	460c      	mov	r4, r1
 800face:	6811      	ldr	r1, [r2, #0]
 800fad0:	4610      	mov	r0, r2
 800fad2:	68cd      	ldr	r5, [r1, #12]
 800fad4:	4619      	mov	r1, r3
 800fad6:	47a8      	blx	r5
 800fad8:	2800      	cmp	r0, #0
 800fada:	bf08      	it	eq
 800fadc:	4620      	moveq	r0, r4
 800fade:	bd38      	pop	{r3, r4, r5, pc}

0800fae0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 800fae0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fae4:	468c      	mov	ip, r1
 800fae6:	4604      	mov	r4, r0
 800fae8:	4615      	mov	r5, r2
 800faea:	b942      	cbnz	r2, 800fafe <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1e>
 800faec:	f8a4 205a 	strh.w	r2, [r4, #90]	@ 0x5a
 800faf0:	f8a4 205c 	strh.w	r2, [r4, #92]	@ 0x5c
 800faf4:	f8a4 205e 	strh.w	r2, [r4, #94]	@ 0x5e
 800faf8:	4628      	mov	r0, r5
 800fafa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fafe:	7b50      	ldrb	r0, [r2, #13]
 800fb00:	8893      	ldrh	r3, [r2, #4]
 800fb02:	0106      	lsls	r6, r0, #4
 800fb04:	f406 7280 	and.w	r2, r6, #256	@ 0x100
 800fb08:	79ee      	ldrb	r6, [r5, #7]
 800fb0a:	f46f 6163 	mvn.w	r1, #3632	@ 0xe30
 800fb0e:	4316      	orrs	r6, r2
 800fb10:	185a      	adds	r2, r3, r1
 800fb12:	b291      	uxth	r1, r2
 800fb14:	291d      	cmp	r1, #29
 800fb16:	b2b7      	uxth	r7, r6
 800fb18:	d87e      	bhi.n	800fc18 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x138>
 800fb1a:	2201      	movs	r2, #1
 800fb1c:	408a      	lsls	r2, r1
 800fb1e:	4975      	ldr	r1, [pc, #468]	@ (800fcf4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x214>)
 800fb20:	420a      	tst	r2, r1
 800fb22:	ea4f 06e6 	mov.w	r6, r6, asr #3
 800fb26:	d12d      	bne.n	800fb84 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa4>
 800fb28:	f412 7f60 	tst.w	r2, #896	@ 0x380
 800fb2c:	d074      	beq.n	800fc18 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x138>
 800fb2e:	f104 024c 	add.w	r2, r4, #76	@ 0x4c
 800fb32:	462b      	mov	r3, r5
 800fb34:	f105 0e08 	add.w	lr, r5, #8
 800fb38:	4615      	mov	r5, r2
 800fb3a:	6818      	ldr	r0, [r3, #0]
 800fb3c:	6859      	ldr	r1, [r3, #4]
 800fb3e:	4694      	mov	ip, r2
 800fb40:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 800fb44:	3308      	adds	r3, #8
 800fb46:	4573      	cmp	r3, lr
 800fb48:	4662      	mov	r2, ip
 800fb4a:	d1f6      	bne.n	800fb3a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x5a>
 800fb4c:	6818      	ldr	r0, [r3, #0]
 800fb4e:	f8cc 0000 	str.w	r0, [ip]
 800fb52:	889b      	ldrh	r3, [r3, #4]
 800fb54:	f8ac 3004 	strh.w	r3, [ip, #4]
 800fb58:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
 800fb5c:	f894 0059 	ldrb.w	r0, [r4, #89]	@ 0x59
 800fb60:	b2b3      	uxth	r3, r6
 800fb62:	1aca      	subs	r2, r1, r3
 800fb64:	b292      	uxth	r2, r2
 800fb66:	f884 2054 	strb.w	r2, [r4, #84]	@ 0x54
 800fb6a:	10d2      	asrs	r2, r2, #3
 800fb6c:	f020 0060 	bic.w	r0, r0, #96	@ 0x60
 800fb70:	f002 0260 	and.w	r2, r2, #96	@ 0x60
 800fb74:	4302      	orrs	r2, r0
 800fb76:	1bcf      	subs	r7, r1, r7
 800fb78:	f884 2059 	strb.w	r2, [r4, #89]	@ 0x59
 800fb7c:	1afb      	subs	r3, r7, r3
 800fb7e:	f8a4 305c 	strh.w	r3, [r4, #92]	@ 0x5c
 800fb82:	e7b9      	b.n	800faf8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x18>
 800fb84:	f104 024c 	add.w	r2, r4, #76	@ 0x4c
 800fb88:	462b      	mov	r3, r5
 800fb8a:	f105 0808 	add.w	r8, r5, #8
 800fb8e:	4615      	mov	r5, r2
 800fb90:	6818      	ldr	r0, [r3, #0]
 800fb92:	6859      	ldr	r1, [r3, #4]
 800fb94:	4696      	mov	lr, r2
 800fb96:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 800fb9a:	3308      	adds	r3, #8
 800fb9c:	4543      	cmp	r3, r8
 800fb9e:	4672      	mov	r2, lr
 800fba0:	d1f6      	bne.n	800fb90 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xb0>
 800fba2:	6818      	ldr	r0, [r3, #0]
 800fba4:	f8ce 0000 	str.w	r0, [lr]
 800fba8:	889b      	ldrh	r3, [r3, #4]
 800fbaa:	f8ae 3004 	strh.w	r3, [lr, #4]
 800fbae:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 800fbb0:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800fbb4:	8c59      	ldrh	r1, [r3, #34]	@ 0x22
 800fbb6:	f640 6333 	movw	r3, #3635	@ 0xe33
 800fbba:	4299      	cmp	r1, r3
 800fbbc:	d111      	bne.n	800fbe2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x102>
 800fbbe:	f8dc 3000 	ldr.w	r3, [ip]
 800fbc2:	4660      	mov	r0, ip
 800fbc4:	68db      	ldr	r3, [r3, #12]
 800fbc6:	4798      	blx	r3
 800fbc8:	7b41      	ldrb	r1, [r0, #13]
 800fbca:	00cb      	lsls	r3, r1, #3
 800fbcc:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 800fbd0:	7a03      	ldrb	r3, [r0, #8]
 800fbd2:	4313      	orrs	r3, r2
 800fbd4:	064a      	lsls	r2, r1, #25
 800fbd6:	bf44      	itt	mi
 800fbd8:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 800fbdc:	b21b      	sxthmi	r3, r3
 800fbde:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 800fbe2:	f8b4 305a 	ldrh.w	r3, [r4, #90]	@ 0x5a
 800fbe6:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 800fbea:	443b      	add	r3, r7
 800fbec:	4433      	add	r3, r6
 800fbee:	b29b      	uxth	r3, r3
 800fbf0:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 800fbf4:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 800fbf8:	10db      	asrs	r3, r3, #3
 800fbfa:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800fbfe:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800fc02:	4313      	orrs	r3, r2
 800fc04:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 800fc08:	f894 205e 	ldrb.w	r2, [r4, #94]	@ 0x5e
 800fc0c:	f894 3055 	ldrb.w	r3, [r4, #85]	@ 0x55
 800fc10:	1a9b      	subs	r3, r3, r2
 800fc12:	f884 3055 	strb.w	r3, [r4, #85]	@ 0x55
 800fc16:	e76f      	b.n	800faf8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x18>
 800fc18:	f023 0204 	bic.w	r2, r3, #4
 800fc1c:	f640 611b 	movw	r1, #3611	@ 0xe1b
 800fc20:	428a      	cmp	r2, r1
 800fc22:	d003      	beq.n	800fc2c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x14c>
 800fc24:	f640 621d 	movw	r2, #3613	@ 0xe1d
 800fc28:	4293      	cmp	r3, r2
 800fc2a:	d120      	bne.n	800fc6e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x18e>
 800fc2c:	3b01      	subs	r3, #1
 800fc2e:	b29b      	uxth	r3, r3
 800fc30:	4662      	mov	r2, ip
 800fc32:	4629      	mov	r1, r5
 800fc34:	4620      	mov	r0, r4
 800fc36:	f7ff ff48 	bl	800faca <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 800fc3a:	7b41      	ldrb	r1, [r0, #13]
 800fc3c:	00cb      	lsls	r3, r1, #3
 800fc3e:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 800fc42:	7a03      	ldrb	r3, [r0, #8]
 800fc44:	0648      	lsls	r0, r1, #25
 800fc46:	ea43 0302 	orr.w	r3, r3, r2
 800fc4a:	bf44      	itt	mi
 800fc4c:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 800fc50:	b21b      	sxthmi	r3, r3
 800fc52:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 800fc56:	7b6b      	ldrb	r3, [r5, #13]
 800fc58:	7aaa      	ldrb	r2, [r5, #10]
 800fc5a:	005b      	lsls	r3, r3, #1
 800fc5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800fc60:	4313      	orrs	r3, r2
 800fc62:	115a      	asrs	r2, r3, #5
 800fc64:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 800fc68:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
 800fc6c:	e032      	b.n	800fcd4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f4>
 800fc6e:	00c2      	lsls	r2, r0, #3
 800fc70:	f402 7180 	and.w	r1, r2, #256	@ 0x100
 800fc74:	7a2a      	ldrb	r2, [r5, #8]
 800fc76:	430a      	orrs	r2, r1
 800fc78:	0641      	lsls	r1, r0, #25
 800fc7a:	bf44      	itt	mi
 800fc7c:	f5a2 7200 	submi.w	r2, r2, #512	@ 0x200
 800fc80:	b212      	sxthmi	r2, r2
 800fc82:	f8a4 205a 	strh.w	r2, [r4, #90]	@ 0x5a
 800fc86:	f640 6109 	movw	r1, #3593	@ 0xe09
 800fc8a:	f023 0210 	bic.w	r2, r3, #16
 800fc8e:	428a      	cmp	r2, r1
 800fc90:	d003      	beq.n	800fc9a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ba>
 800fc92:	f640 6213 	movw	r2, #3603	@ 0xe13
 800fc96:	4293      	cmp	r3, r2
 800fc98:	d129      	bne.n	800fcee <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x20e>
 800fc9a:	7b6e      	ldrb	r6, [r5, #13]
 800fc9c:	0076      	lsls	r6, r6, #1
 800fc9e:	f406 7280 	and.w	r2, r6, #256	@ 0x100
 800fca2:	7aae      	ldrb	r6, [r5, #10]
 800fca4:	4316      	orrs	r6, r2
 800fca6:	f640 6213 	movw	r2, #3603	@ 0xe13
 800fcaa:	4293      	cmp	r3, r2
 800fcac:	bf1a      	itte	ne
 800fcae:	f103 33ff 	addne.w	r3, r3, #4294967295
 800fcb2:	b29b      	uxthne	r3, r3
 800fcb4:	f640 630c 	movweq	r3, #3596	@ 0xe0c
 800fcb8:	4662      	mov	r2, ip
 800fcba:	4629      	mov	r1, r5
 800fcbc:	4620      	mov	r0, r4
 800fcbe:	f7ff ff04 	bl	800faca <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 800fcc2:	7b43      	ldrb	r3, [r0, #13]
 800fcc4:	7a82      	ldrb	r2, [r0, #10]
 800fcc6:	005b      	lsls	r3, r3, #1
 800fcc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800fccc:	4313      	orrs	r3, r2
 800fcce:	1af6      	subs	r6, r6, r3
 800fcd0:	f8a4 605e 	strh.w	r6, [r4, #94]	@ 0x5e
 800fcd4:	7b69      	ldrb	r1, [r5, #13]
 800fcd6:	00cb      	lsls	r3, r1, #3
 800fcd8:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 800fcdc:	7a2b      	ldrb	r3, [r5, #8]
 800fcde:	4313      	orrs	r3, r2
 800fce0:	064a      	lsls	r2, r1, #25
 800fce2:	bf44      	itt	mi
 800fce4:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 800fce8:	b21b      	sxthmi	r3, r3
 800fcea:	1bdb      	subs	r3, r3, r7
 800fcec:	e747      	b.n	800fb7e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9e>
 800fcee:	2300      	movs	r3, #0
 800fcf0:	e7ba      	b.n	800fc68 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x188>
 800fcf2:	bf00      	nop
 800fcf4:	3fc00079 	.word	0x3fc00079

0800fcf8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 800fcf8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fcfc:	4604      	mov	r4, r0
 800fcfe:	b942      	cbnz	r2, 800fd12 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 800fd00:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800fd04:	f8a0 305a 	strh.w	r3, [r0, #90]	@ 0x5a
 800fd08:	f8a0 305c 	strh.w	r3, [r0, #92]	@ 0x5c
 800fd0c:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
 800fd10:	e047      	b.n	800fda2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 800fd12:	7b51      	ldrb	r1, [r2, #13]
 800fd14:	8893      	ldrh	r3, [r2, #4]
 800fd16:	010d      	lsls	r5, r1, #4
 800fd18:	f405 7080 	and.w	r0, r5, #256	@ 0x100
 800fd1c:	79d5      	ldrb	r5, [r2, #7]
 800fd1e:	4305      	orrs	r5, r0
 800fd20:	2d04      	cmp	r5, #4
 800fd22:	bfcc      	ite	gt
 800fd24:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 800fd28:	f04f 0e01 	movle.w	lr, #1
 800fd2c:	f5b3 6fdd 	cmp.w	r3, #1768	@ 0x6e8
 800fd30:	f200 80ab 	bhi.w	800fe8a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 800fd34:	f240 60e7 	movw	r0, #1767	@ 0x6e7
 800fd38:	4283      	cmp	r3, r0
 800fd3a:	d216      	bcs.n	800fd6a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800fd3c:	f240 605b 	movw	r0, #1627	@ 0x65b
 800fd40:	4283      	cmp	r3, r0
 800fd42:	d859      	bhi.n	800fdf8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 800fd44:	f240 6057 	movw	r0, #1623	@ 0x657
 800fd48:	4283      	cmp	r3, r0
 800fd4a:	d20e      	bcs.n	800fd6a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800fd4c:	f5b3 6fca 	cmp.w	r3, #1616	@ 0x650
 800fd50:	d24a      	bcs.n	800fde8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 800fd52:	f240 604e 	movw	r0, #1614	@ 0x64e
 800fd56:	4283      	cmp	r3, r0
 800fd58:	d207      	bcs.n	800fd6a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800fd5a:	f240 601a 	movw	r0, #1562	@ 0x61a
 800fd5e:	4283      	cmp	r3, r0
 800fd60:	d02a      	beq.n	800fdb8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800fd62:	d821      	bhi.n	800fda8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 800fd64:	f5b3 6fc2 	cmp.w	r3, #1552	@ 0x610
 800fd68:	d35b      	bcc.n	800fe22 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 800fd6a:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	@ 0x5a
 800fd6e:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 800fd72:	f040 80d0 	bne.w	800ff16 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 800fd76:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	@ 0x5c
 800fd7a:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 800fd7e:	f040 80ca 	bne.w	800ff16 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 800fd82:	00cb      	lsls	r3, r1, #3
 800fd84:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 800fd88:	7a13      	ldrb	r3, [r2, #8]
 800fd8a:	0649      	lsls	r1, r1, #25
 800fd8c:	ea43 0300 	orr.w	r3, r3, r0
 800fd90:	bf44      	itt	mi
 800fd92:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 800fd96:	b21b      	sxthmi	r3, r3
 800fd98:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 800fd9c:	1b5d      	subs	r5, r3, r5
 800fd9e:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 800fda2:	4610      	mov	r0, r2
 800fda4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fda8:	f240 604b 	movw	r0, #1611	@ 0x64b
 800fdac:	4283      	cmp	r3, r0
 800fdae:	d338      	bcc.n	800fe22 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 800fdb0:	f240 604c 	movw	r0, #1612	@ 0x64c
 800fdb4:	4283      	cmp	r3, r0
 800fdb6:	d9d8      	bls.n	800fd6a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800fdb8:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	@ 0x5a
 800fdbc:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	@ 0x5c
 800fdc0:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 800fdc4:	f040 80f2 	bne.w	800ffac <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b4>
 800fdc8:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 800fdcc:	f040 80ee 	bne.w	800ffac <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b4>
 800fdd0:	00cb      	lsls	r3, r1, #3
 800fdd2:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 800fdd6:	7a13      	ldrb	r3, [r2, #8]
 800fdd8:	064e      	lsls	r6, r1, #25
 800fdda:	ea43 0300 	orr.w	r3, r3, r0
 800fdde:	bf44      	itt	mi
 800fde0:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 800fde4:	b21b      	sxthmi	r3, r3
 800fde6:	e7d9      	b.n	800fd9c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 800fde8:	f240 6054 	movw	r0, #1620	@ 0x654
 800fdec:	4283      	cmp	r3, r0
 800fdee:	d8e3      	bhi.n	800fdb8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800fdf0:	f5b3 6fca 	cmp.w	r3, #1616	@ 0x650
 800fdf4:	d9e0      	bls.n	800fdb8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800fdf6:	e7b8      	b.n	800fd6a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800fdf8:	f240 6074 	movw	r0, #1652	@ 0x674
 800fdfc:	4283      	cmp	r3, r0
 800fdfe:	d0b4      	beq.n	800fd6a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800fe00:	d82d      	bhi.n	800fe5e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 800fe02:	f240 605e 	movw	r0, #1630	@ 0x65e
 800fe06:	4283      	cmp	r3, r0
 800fe08:	d804      	bhi.n	800fe14 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 800fe0a:	f240 605d 	movw	r0, #1629	@ 0x65d
 800fe0e:	4283      	cmp	r3, r0
 800fe10:	d3d2      	bcc.n	800fdb8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800fe12:	e7aa      	b.n	800fd6a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800fe14:	f240 605f 	movw	r0, #1631	@ 0x65f
 800fe18:	4283      	cmp	r3, r0
 800fe1a:	d0cd      	beq.n	800fdb8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800fe1c:	f5b3 6fce 	cmp.w	r3, #1648	@ 0x670
 800fe20:	d0a3      	beq.n	800fd6a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800fe22:	00cb      	lsls	r3, r1, #3
 800fe24:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 800fe28:	7a13      	ldrb	r3, [r2, #8]
 800fe2a:	0649      	lsls	r1, r1, #25
 800fe2c:	ea43 0300 	orr.w	r3, r3, r0
 800fe30:	bf44      	itt	mi
 800fe32:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 800fe36:	b21b      	sxthmi	r3, r3
 800fe38:	1b5d      	subs	r5, r3, r5
 800fe3a:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 800fe3e:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 800fe42:	7b53      	ldrb	r3, [r2, #13]
 800fe44:	015b      	lsls	r3, r3, #5
 800fe46:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 800fe4a:	7993      	ldrb	r3, [r2, #6]
 800fe4c:	430b      	orrs	r3, r1
 800fe4e:	005b      	lsls	r3, r3, #1
 800fe50:	2105      	movs	r1, #5
 800fe52:	fb93 f3f1 	sdiv	r3, r3, r1
 800fe56:	f992 1009 	ldrsb.w	r1, [r2, #9]
 800fe5a:	440b      	add	r3, r1
 800fe5c:	e756      	b.n	800fd0c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 800fe5e:	f240 60e2 	movw	r0, #1762	@ 0x6e2
 800fe62:	4283      	cmp	r3, r0
 800fe64:	d809      	bhi.n	800fe7a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 800fe66:	f240 60df 	movw	r0, #1759	@ 0x6df
 800fe6a:	4283      	cmp	r3, r0
 800fe6c:	f4bf af7d 	bcs.w	800fd6a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800fe70:	f2a3 63d6 	subw	r3, r3, #1750	@ 0x6d6
 800fe74:	2b05      	cmp	r3, #5
 800fe76:	d8d4      	bhi.n	800fe22 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 800fe78:	e777      	b.n	800fd6a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800fe7a:	f240 60e3 	movw	r0, #1763	@ 0x6e3
 800fe7e:	4283      	cmp	r3, r0
 800fe80:	d09a      	beq.n	800fdb8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800fe82:	f240 60e4 	movw	r0, #1764	@ 0x6e4
 800fe86:	4283      	cmp	r3, r0
 800fe88:	e7ca      	b.n	800fe20 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 800fe8a:	f5b3 6f0f 	cmp.w	r3, #2288	@ 0x8f0
 800fe8e:	d22b      	bcs.n	800fee8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 800fe90:	f640 00ed 	movw	r0, #2285	@ 0x8ed
 800fe94:	4283      	cmp	r3, r0
 800fe96:	d28f      	bcs.n	800fdb8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800fe98:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 800fe9c:	4283      	cmp	r3, r0
 800fe9e:	d816      	bhi.n	800fece <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 800fea0:	f640 00e4 	movw	r0, #2276	@ 0x8e4
 800fea4:	4283      	cmp	r3, r0
 800fea6:	f4bf af60 	bcs.w	800fd6a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800feaa:	f240 60ec 	movw	r0, #1772	@ 0x6ec
 800feae:	4283      	cmp	r3, r0
 800feb0:	d80a      	bhi.n	800fec8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 800feb2:	f240 60eb 	movw	r0, #1771	@ 0x6eb
 800feb6:	4283      	cmp	r3, r0
 800feb8:	f4bf af57 	bcs.w	800fd6a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800febc:	f240 60ea 	movw	r0, #1770	@ 0x6ea
 800fec0:	4283      	cmp	r3, r0
 800fec2:	f43f af79 	beq.w	800fdb8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800fec6:	e7ac      	b.n	800fe22 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 800fec8:	f240 60ed 	movw	r0, #1773	@ 0x6ed
 800fecc:	e7f8      	b.n	800fec0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 800fece:	f640 00e8 	movw	r0, #2280	@ 0x8e8
 800fed2:	4283      	cmp	r3, r0
 800fed4:	d802      	bhi.n	800fedc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 800fed6:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 800feda:	e798      	b.n	800fe0e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 800fedc:	f640 00e9 	movw	r0, #2281	@ 0x8e9
 800fee0:	4283      	cmp	r3, r0
 800fee2:	f47f af42 	bne.w	800fd6a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800fee6:	e767      	b.n	800fdb8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800fee8:	f640 00f6 	movw	r0, #2294	@ 0x8f6
 800feec:	4283      	cmp	r3, r0
 800feee:	f43f af63 	beq.w	800fdb8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800fef2:	d802      	bhi.n	800fefa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 800fef4:	f640 00f2 	movw	r0, #2290	@ 0x8f2
 800fef8:	e7f2      	b.n	800fee0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 800fefa:	f640 00fa 	movw	r0, #2298	@ 0x8fa
 800fefe:	4283      	cmp	r3, r0
 800ff00:	d805      	bhi.n	800ff0e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 800ff02:	f640 00f9 	movw	r0, #2297	@ 0x8f9
 800ff06:	4283      	cmp	r3, r0
 800ff08:	f4ff af2f 	bcc.w	800fd6a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800ff0c:	e754      	b.n	800fdb8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800ff0e:	f640 00fe 	movw	r0, #2302	@ 0x8fe
 800ff12:	4283      	cmp	r3, r0
 800ff14:	e7af      	b.n	800fe76 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 800ff16:	f104 0c4c 	add.w	ip, r4, #76	@ 0x4c
 800ff1a:	4617      	mov	r7, r2
 800ff1c:	f102 0808 	add.w	r8, r2, #8
 800ff20:	4666      	mov	r6, ip
 800ff22:	6838      	ldr	r0, [r7, #0]
 800ff24:	6879      	ldr	r1, [r7, #4]
 800ff26:	46e6      	mov	lr, ip
 800ff28:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 800ff2c:	3708      	adds	r7, #8
 800ff2e:	4547      	cmp	r7, r8
 800ff30:	46f4      	mov	ip, lr
 800ff32:	d1f6      	bne.n	800ff22 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 800ff34:	6838      	ldr	r0, [r7, #0]
 800ff36:	f8ce 0000 	str.w	r0, [lr]
 800ff3a:	88b9      	ldrh	r1, [r7, #4]
 800ff3c:	f8ae 1004 	strh.w	r1, [lr, #4]
 800ff40:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	@ 0x5e
 800ff44:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 800ff48:	d009      	beq.n	800ff5e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x266>
 800ff4a:	7b51      	ldrb	r1, [r2, #13]
 800ff4c:	7992      	ldrb	r2, [r2, #6]
 800ff4e:	0149      	lsls	r1, r1, #5
 800ff50:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 800ff54:	4311      	orrs	r1, r2
 800ff56:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 800ff5a:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
 800ff5e:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 800ff62:	b2ad      	uxth	r5, r5
 800ff64:	d00d      	beq.n	800ff82 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28a>
 800ff66:	442b      	add	r3, r5
 800ff68:	b29b      	uxth	r3, r3
 800ff6a:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 800ff6e:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 800ff72:	10db      	asrs	r3, r3, #3
 800ff74:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800ff78:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ff7c:	4313      	orrs	r3, r2
 800ff7e:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 800ff82:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 800ff86:	00cb      	lsls	r3, r1, #3
 800ff88:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 800ff8c:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 800ff90:	064f      	lsls	r7, r1, #25
 800ff92:	ea43 0302 	orr.w	r3, r3, r2
 800ff96:	bf44      	itt	mi
 800ff98:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 800ff9c:	b21b      	sxthmi	r3, r3
 800ff9e:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 800ffa2:	1b5b      	subs	r3, r3, r5
 800ffa4:	f8a4 305c 	strh.w	r3, [r4, #92]	@ 0x5c
 800ffa8:	4632      	mov	r2, r6
 800ffaa:	e6fa      	b.n	800fda2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 800ffac:	f104 0c4c 	add.w	ip, r4, #76	@ 0x4c
 800ffb0:	4617      	mov	r7, r2
 800ffb2:	f102 0908 	add.w	r9, r2, #8
 800ffb6:	4666      	mov	r6, ip
 800ffb8:	6838      	ldr	r0, [r7, #0]
 800ffba:	6879      	ldr	r1, [r7, #4]
 800ffbc:	46e0      	mov	r8, ip
 800ffbe:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 800ffc2:	3708      	adds	r7, #8
 800ffc4:	454f      	cmp	r7, r9
 800ffc6:	46c4      	mov	ip, r8
 800ffc8:	d1f6      	bne.n	800ffb8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c0>
 800ffca:	6838      	ldr	r0, [r7, #0]
 800ffcc:	f8c8 0000 	str.w	r0, [r8]
 800ffd0:	88b9      	ldrh	r1, [r7, #4]
 800ffd2:	f8a8 1004 	strh.w	r1, [r8, #4]
 800ffd6:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	@ 0x5e
 800ffda:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 800ffde:	d009      	beq.n	800fff4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2fc>
 800ffe0:	7b51      	ldrb	r1, [r2, #13]
 800ffe2:	7992      	ldrb	r2, [r2, #6]
 800ffe4:	0149      	lsls	r1, r1, #5
 800ffe6:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 800ffea:	4311      	orrs	r1, r2
 800ffec:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 800fff0:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
 800fff4:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 800fff8:	d00e      	beq.n	8010018 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x320>
 800fffa:	eba3 030e 	sub.w	r3, r3, lr
 800fffe:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 8010002:	b29b      	uxth	r3, r3
 8010004:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 8010008:	10db      	asrs	r3, r3, #3
 801000a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801000e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8010012:	4313      	orrs	r3, r2
 8010014:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 8010018:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 801001c:	00cb      	lsls	r3, r1, #3
 801001e:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8010022:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 8010026:	0648      	lsls	r0, r1, #25
 8010028:	ea43 0302 	orr.w	r3, r3, r2
 801002c:	bf44      	itt	mi
 801002e:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8010032:	b21b      	sxthmi	r3, r3
 8010034:	1b5d      	subs	r5, r3, r5
 8010036:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 801003a:	e7b5      	b.n	800ffa8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b0>

0801003c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 801003c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010040:	461e      	mov	r6, r3
 8010042:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 8010044:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8010048:	4604      	mov	r4, r0
 801004a:	4617      	mov	r7, r2
 801004c:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 8010050:	f7f4 f8fa 	bl	8004248 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8010054:	4605      	mov	r5, r0
 8010056:	b918      	cbnz	r0, 8010060 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 8010058:	6030      	str	r0, [r6, #0]
 801005a:	4628      	mov	r0, r5
 801005c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010060:	683b      	ldr	r3, [r7, #0]
 8010062:	4601      	mov	r1, r0
 8010064:	68db      	ldr	r3, [r3, #12]
 8010066:	4638      	mov	r0, r7
 8010068:	4798      	blx	r3
 801006a:	f5a8 63c0 	sub.w	r3, r8, #1536	@ 0x600
 801006e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8010072:	4602      	mov	r2, r0
 8010074:	6030      	str	r0, [r6, #0]
 8010076:	d213      	bcs.n	80100a0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 8010078:	4643      	mov	r3, r8
 801007a:	4639      	mov	r1, r7
 801007c:	4620      	mov	r0, r4
 801007e:	f7ff fe3b 	bl	800fcf8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 8010082:	6030      	str	r0, [r6, #0]
 8010084:	6833      	ldr	r3, [r6, #0]
 8010086:	b143      	cbz	r3, 801009a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 8010088:	7b5a      	ldrb	r2, [r3, #13]
 801008a:	7a9b      	ldrb	r3, [r3, #10]
 801008c:	0052      	lsls	r2, r2, #1
 801008e:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 8010092:	4313      	orrs	r3, r2
 8010094:	bf0c      	ite	eq
 8010096:	2301      	moveq	r3, #1
 8010098:	2300      	movne	r3, #0
 801009a:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
 801009e:	e7dc      	b.n	801005a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 80100a0:	f5a5 6360 	sub.w	r3, r5, #3584	@ 0xe00
 80100a4:	b29b      	uxth	r3, r3
 80100a6:	2b7f      	cmp	r3, #127	@ 0x7f
 80100a8:	d804      	bhi.n	80100b4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 80100aa:	4639      	mov	r1, r7
 80100ac:	4620      	mov	r0, r4
 80100ae:	f7ff fd17 	bl	800fae0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 80100b2:	e7e6      	b.n	8010082 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 80100b4:	f894 3061 	ldrb.w	r3, [r4, #97]	@ 0x61
 80100b8:	2b00      	cmp	r3, #0
 80100ba:	d0e3      	beq.n	8010084 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 80100bc:	f640 1302 	movw	r3, #2306	@ 0x902
 80100c0:	429d      	cmp	r5, r3
 80100c2:	d1df      	bne.n	8010084 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 80100c4:	4601      	mov	r1, r0
 80100c6:	4620      	mov	r0, r4
 80100c8:	f7ff fcdc 	bl	800fa84 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 80100cc:	e7d9      	b.n	8010082 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

080100ce <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 80100ce:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80100d2:	461e      	mov	r6, r3
 80100d4:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 80100d6:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80100da:	4604      	mov	r4, r0
 80100dc:	4617      	mov	r7, r2
 80100de:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 80100e2:	f7f4 f8b1 	bl	8004248 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 80100e6:	4605      	mov	r5, r0
 80100e8:	b918      	cbnz	r0, 80100f2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x24>
 80100ea:	6030      	str	r0, [r6, #0]
 80100ec:	4628      	mov	r0, r5
 80100ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80100f2:	683b      	ldr	r3, [r7, #0]
 80100f4:	4601      	mov	r1, r0
 80100f6:	f8d3 9008 	ldr.w	r9, [r3, #8]
 80100fa:	4638      	mov	r0, r7
 80100fc:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8010100:	47c8      	blx	r9
 8010102:	f5a8 63c0 	sub.w	r3, r8, #1536	@ 0x600
 8010106:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801010a:	4602      	mov	r2, r0
 801010c:	6030      	str	r0, [r6, #0]
 801010e:	d213      	bcs.n	8010138 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x6a>
 8010110:	4643      	mov	r3, r8
 8010112:	4639      	mov	r1, r7
 8010114:	4620      	mov	r0, r4
 8010116:	f7ff fdef 	bl	800fcf8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801011a:	6030      	str	r0, [r6, #0]
 801011c:	6833      	ldr	r3, [r6, #0]
 801011e:	b143      	cbz	r3, 8010132 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x64>
 8010120:	7b5a      	ldrb	r2, [r3, #13]
 8010122:	7a9b      	ldrb	r3, [r3, #10]
 8010124:	0052      	lsls	r2, r2, #1
 8010126:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 801012a:	4313      	orrs	r3, r2
 801012c:	bf0c      	ite	eq
 801012e:	2301      	moveq	r3, #1
 8010130:	2300      	movne	r3, #0
 8010132:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
 8010136:	e7d9      	b.n	80100ec <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1e>
 8010138:	f5a5 6360 	sub.w	r3, r5, #3584	@ 0xe00
 801013c:	b29b      	uxth	r3, r3
 801013e:	2b7f      	cmp	r3, #127	@ 0x7f
 8010140:	d804      	bhi.n	801014c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7e>
 8010142:	4639      	mov	r1, r7
 8010144:	4620      	mov	r0, r4
 8010146:	f7ff fccb 	bl	800fae0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801014a:	e7e6      	b.n	801011a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>
 801014c:	f894 3061 	ldrb.w	r3, [r4, #97]	@ 0x61
 8010150:	2b00      	cmp	r3, #0
 8010152:	d0e3      	beq.n	801011c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 8010154:	f640 1302 	movw	r3, #2306	@ 0x902
 8010158:	429d      	cmp	r5, r3
 801015a:	d1df      	bne.n	801011c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 801015c:	4601      	mov	r1, r0
 801015e:	4620      	mov	r0, r4
 8010160:	f7ff fc90 	bl	800fa84 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 8010164:	e7d9      	b.n	801011a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>

08010166 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 8010166:	b510      	push	{r4, lr}
 8010168:	4604      	mov	r4, r0
 801016a:	f8b4 1040 	ldrh.w	r1, [r4, #64]	@ 0x40
 801016e:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 8010170:	b1f1      	cbz	r1, 80101b0 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4a>
 8010172:	2b0a      	cmp	r3, #10
 8010174:	d02f      	beq.n	80101d6 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x70>
 8010176:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 8010178:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 801017c:	3901      	subs	r1, #1
 801017e:	8f40      	ldrh	r0, [r0, #58]	@ 0x3a
 8010180:	f8a4 1040 	strh.w	r1, [r4, #64]	@ 0x40
 8010184:	1c51      	adds	r1, r2, #1
 8010186:	b289      	uxth	r1, r1
 8010188:	2901      	cmp	r1, #1
 801018a:	bf84      	itt	hi
 801018c:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8010190:	87e2      	strhhi	r2, [r4, #62]	@ 0x3e
 8010192:	f103 0201 	add.w	r2, r3, #1
 8010196:	8722      	strh	r2, [r4, #56]	@ 0x38
 8010198:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 801019a:	bf98      	it	ls
 801019c:	87e1      	strhls	r1, [r4, #62]	@ 0x3e
 801019e:	4413      	add	r3, r2
 80101a0:	b29b      	uxth	r3, r3
 80101a2:	2b09      	cmp	r3, #9
 80101a4:	bf88      	it	hi
 80101a6:	3b0a      	subhi	r3, #10
 80101a8:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80101ac:	8458      	strh	r0, [r3, #34]	@ 0x22
 80101ae:	e7dc      	b.n	801016a <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 80101b0:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 80101b2:	2b0a      	cmp	r3, #10
 80101b4:	d00f      	beq.n	80101d6 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x70>
 80101b6:	4620      	mov	r0, r4
 80101b8:	f7fe ffb7 	bl	800f12a <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 80101bc:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 80101be:	1c5a      	adds	r2, r3, #1
 80101c0:	8722      	strh	r2, [r4, #56]	@ 0x38
 80101c2:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 80101c4:	4413      	add	r3, r2
 80101c6:	b29b      	uxth	r3, r3
 80101c8:	2b09      	cmp	r3, #9
 80101ca:	bf88      	it	hi
 80101cc:	3b0a      	subhi	r3, #10
 80101ce:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80101d2:	8458      	strh	r0, [r3, #34]	@ 0x22
 80101d4:	e7ec      	b.n	80101b0 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4a>
 80101d6:	bd10      	pop	{r4, pc}

080101d8 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 80101d8:	b538      	push	{r3, r4, r5, lr}
 80101da:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 80101dc:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 80101e0:	4604      	mov	r4, r0
 80101e2:	8c55      	ldrh	r5, [r2, #34]	@ 0x22
 80101e4:	8f02      	ldrh	r2, [r0, #56]	@ 0x38
 80101e6:	3a01      	subs	r2, #1
 80101e8:	8702      	strh	r2, [r0, #56]	@ 0x38
 80101ea:	1c5a      	adds	r2, r3, #1
 80101ec:	b292      	uxth	r2, r2
 80101ee:	2a09      	cmp	r2, #9
 80101f0:	bf86      	itte	hi
 80101f2:	3b09      	subhi	r3, #9
 80101f4:	86c3      	strhhi	r3, [r0, #54]	@ 0x36
 80101f6:	86c2      	strhls	r2, [r0, #54]	@ 0x36
 80101f8:	f7ff ffb5 	bl	8010166 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 80101fc:	8c23      	ldrh	r3, [r4, #32]
 80101fe:	2b01      	cmp	r3, #1
 8010200:	bf9c      	itt	ls
 8010202:	3301      	addls	r3, #1
 8010204:	8423      	strhls	r3, [r4, #32]
 8010206:	8be3      	ldrh	r3, [r4, #30]
 8010208:	b90b      	cbnz	r3, 801020e <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 801020a:	2302      	movs	r3, #2
 801020c:	83e3      	strh	r3, [r4, #30]
 801020e:	8be3      	ldrh	r3, [r4, #30]
 8010210:	3b01      	subs	r3, #1
 8010212:	b29b      	uxth	r3, r3
 8010214:	83e3      	strh	r3, [r4, #30]
 8010216:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801021a:	4628      	mov	r0, r5
 801021c:	8365      	strh	r5, [r4, #26]
 801021e:	bd38      	pop	{r3, r4, r5, pc}

08010220 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 8010220:	428a      	cmp	r2, r1
 8010222:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010226:	8ec7      	ldrh	r7, [r0, #54]	@ 0x36
 8010228:	d931      	bls.n	801028e <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x6e>
 801022a:	8f05      	ldrh	r5, [r0, #56]	@ 0x38
 801022c:	f8b0 8040 	ldrh.w	r8, [r0, #64]	@ 0x40
 8010230:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	@ 0x3e
 8010234:	19ee      	adds	r6, r5, r7
 8010236:	1a54      	subs	r4, r2, r1
 8010238:	3e01      	subs	r6, #1
 801023a:	fa1f fe84 	uxth.w	lr, r4
 801023e:	b2b4      	uxth	r4, r6
 8010240:	eba4 090e 	sub.w	r9, r4, lr
 8010244:	fa1f f989 	uxth.w	r9, r9
 8010248:	2c09      	cmp	r4, #9
 801024a:	4626      	mov	r6, r4
 801024c:	bf88      	it	hi
 801024e:	f1a4 060a 	subhi.w	r6, r4, #10
 8010252:	f1bc 0f00 	cmp.w	ip, #0
 8010256:	bf08      	it	eq
 8010258:	f04f 0c02 	moveq.w	ip, #2
 801025c:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 8010260:	f10c 3cff 	add.w	ip, ip, #4294967295
 8010264:	fa1f fc8c 	uxth.w	ip, ip
 8010268:	3c01      	subs	r4, #1
 801026a:	f8b6 a022 	ldrh.w	sl, [r6, #34]	@ 0x22
 801026e:	b2a4      	uxth	r4, r4
 8010270:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 8010274:	454c      	cmp	r4, r9
 8010276:	f8a6 a03a 	strh.w	sl, [r6, #58]	@ 0x3a
 801027a:	d1e5      	bne.n	8010248 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 801027c:	eba5 050e 	sub.w	r5, r5, lr
 8010280:	eb0e 0408 	add.w	r4, lr, r8
 8010284:	8705      	strh	r5, [r0, #56]	@ 0x38
 8010286:	f8a0 4040 	strh.w	r4, [r0, #64]	@ 0x40
 801028a:	f8a0 c03e 	strh.w	ip, [r0, #62]	@ 0x3e
 801028e:	8f04      	ldrh	r4, [r0, #56]	@ 0x38
 8010290:	1a64      	subs	r4, r4, r1
 8010292:	4439      	add	r1, r7
 8010294:	b289      	uxth	r1, r1
 8010296:	2909      	cmp	r1, #9
 8010298:	bf88      	it	hi
 801029a:	390a      	subhi	r1, #10
 801029c:	8704      	strh	r4, [r0, #56]	@ 0x38
 801029e:	86c1      	strh	r1, [r0, #54]	@ 0x36
 80102a0:	250a      	movs	r5, #10
 80102a2:	b18a      	cbz	r2, 80102c8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xa8>
 80102a4:	8f01      	ldrh	r1, [r0, #56]	@ 0x38
 80102a6:	3a01      	subs	r2, #1
 80102a8:	b292      	uxth	r2, r2
 80102aa:	3101      	adds	r1, #1
 80102ac:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 80102b0:	8701      	strh	r1, [r0, #56]	@ 0x38
 80102b2:	8ec1      	ldrh	r1, [r0, #54]	@ 0x36
 80102b4:	b901      	cbnz	r1, 80102b8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x98>
 80102b6:	86c5      	strh	r5, [r0, #54]	@ 0x36
 80102b8:	8ec1      	ldrh	r1, [r0, #54]	@ 0x36
 80102ba:	3901      	subs	r1, #1
 80102bc:	b289      	uxth	r1, r1
 80102be:	86c1      	strh	r1, [r0, #54]	@ 0x36
 80102c0:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 80102c4:	844c      	strh	r4, [r1, #34]	@ 0x22
 80102c6:	e7ec      	b.n	80102a2 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x82>
 80102c8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80102cc:	f7ff bf4b 	b.w	8010166 <_ZN8touchgfx12TextProvider15fillInputBufferEv>

080102d0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 80102d0:	b570      	push	{r4, r5, r6, lr}
 80102d2:	2500      	movs	r5, #0
 80102d4:	4295      	cmp	r5, r2
 80102d6:	d011      	beq.n	80102fc <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 80102d8:	8bc4      	ldrh	r4, [r0, #30]
 80102da:	f831 6b02 	ldrh.w	r6, [r1], #2
 80102de:	4414      	add	r4, r2
 80102e0:	3c01      	subs	r4, #1
 80102e2:	1b64      	subs	r4, r4, r5
 80102e4:	b2a4      	uxth	r4, r4
 80102e6:	2c01      	cmp	r4, #1
 80102e8:	bf88      	it	hi
 80102ea:	3c02      	subhi	r4, #2
 80102ec:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 80102f0:	8b64      	ldrh	r4, [r4, #26]
 80102f2:	42b4      	cmp	r4, r6
 80102f4:	d117      	bne.n	8010326 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 80102f6:	3501      	adds	r5, #1
 80102f8:	b2ad      	uxth	r5, r5
 80102fa:	e7eb      	b.n	80102d4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 80102fc:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8010300:	2400      	movs	r4, #0
 8010302:	4413      	add	r3, r2
 8010304:	b2a2      	uxth	r2, r4
 8010306:	429a      	cmp	r2, r3
 8010308:	da0f      	bge.n	801032a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 801030a:	8ec6      	ldrh	r6, [r0, #54]	@ 0x36
 801030c:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 8010310:	4432      	add	r2, r6
 8010312:	b292      	uxth	r2, r2
 8010314:	2a09      	cmp	r2, #9
 8010316:	bf88      	it	hi
 8010318:	3a0a      	subhi	r2, #10
 801031a:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801031e:	3401      	adds	r4, #1
 8010320:	8c52      	ldrh	r2, [r2, #34]	@ 0x22
 8010322:	42aa      	cmp	r2, r5
 8010324:	d0ee      	beq.n	8010304 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 8010326:	2000      	movs	r0, #0
 8010328:	bd70      	pop	{r4, r5, r6, pc}
 801032a:	2001      	movs	r0, #1
 801032c:	e7fc      	b.n	8010328 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

0801032e <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 801032e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010332:	4605      	mov	r5, r0
 8010334:	4616      	mov	r6, r2
 8010336:	1c8c      	adds	r4, r1, #2
 8010338:	8809      	ldrh	r1, [r1, #0]
 801033a:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 801033e:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 8010342:	42b3      	cmp	r3, r6
 8010344:	d124      	bne.n	8010390 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 8010346:	f3c1 2903 	ubfx	r9, r1, #8, #4
 801034a:	f3c1 1803 	ubfx	r8, r1, #4, #4
 801034e:	f001 070f 	and.w	r7, r1, #15
 8010352:	f8cd 8000 	str.w	r8, [sp]
 8010356:	464b      	mov	r3, r9
 8010358:	4652      	mov	r2, sl
 801035a:	4621      	mov	r1, r4
 801035c:	4628      	mov	r0, r5
 801035e:	f7ff ffb7 	bl	80102d0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 8010362:	4683      	mov	fp, r0
 8010364:	b168      	cbz	r0, 8010382 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 8010366:	eb0a 0109 	add.w	r1, sl, r9
 801036a:	4441      	add	r1, r8
 801036c:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 8010370:	463a      	mov	r2, r7
 8010372:	4649      	mov	r1, r9
 8010374:	4628      	mov	r0, r5
 8010376:	f7ff ff53 	bl	8010220 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 801037a:	4658      	mov	r0, fp
 801037c:	b003      	add	sp, #12
 801037e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010382:	eb07 010a 	add.w	r1, r7, sl
 8010386:	4449      	add	r1, r9
 8010388:	4441      	add	r1, r8
 801038a:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 801038e:	e7d2      	b.n	8010336 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 8010390:	f04f 0b00 	mov.w	fp, #0
 8010394:	e7f1      	b.n	801037a <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

08010396 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 8010396:	b570      	push	{r4, r5, r6, lr}
 8010398:	8810      	ldrh	r0, [r2, #0]
 801039a:	4298      	cmp	r0, r3
 801039c:	d817      	bhi.n	80103ce <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801039e:	1e48      	subs	r0, r1, #1
 80103a0:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 80103a4:	4298      	cmp	r0, r3
 80103a6:	d312      	bcc.n	80103ce <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 80103a8:	2400      	movs	r4, #0
 80103aa:	428c      	cmp	r4, r1
 80103ac:	d20f      	bcs.n	80103ce <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 80103ae:	1860      	adds	r0, r4, r1
 80103b0:	1040      	asrs	r0, r0, #1
 80103b2:	0085      	lsls	r5, r0, #2
 80103b4:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 80103b8:	42b3      	cmp	r3, r6
 80103ba:	d902      	bls.n	80103c2 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 80103bc:	3001      	adds	r0, #1
 80103be:	b284      	uxth	r4, r0
 80103c0:	e7f3      	b.n	80103aa <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 80103c2:	d201      	bcs.n	80103c8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 80103c4:	b281      	uxth	r1, r0
 80103c6:	e7f0      	b.n	80103aa <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 80103c8:	442a      	add	r2, r5
 80103ca:	8850      	ldrh	r0, [r2, #2]
 80103cc:	bd70      	pop	{r4, r5, r6, pc}
 80103ce:	2000      	movs	r0, #0
 80103d0:	e7fc      	b.n	80103cc <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

080103d2 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 80103d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80103d6:	6c45      	ldr	r5, [r0, #68]	@ 0x44
 80103d8:	886f      	ldrh	r7, [r5, #2]
 80103da:	4604      	mov	r4, r0
 80103dc:	087f      	lsrs	r7, r7, #1
 80103de:	260b      	movs	r6, #11
 80103e0:	3e01      	subs	r6, #1
 80103e2:	d013      	beq.n	801040c <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 80103e4:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80103e6:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80103ea:	462a      	mov	r2, r5
 80103ec:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 80103f0:	4639      	mov	r1, r7
 80103f2:	4643      	mov	r3, r8
 80103f4:	4620      	mov	r0, r4
 80103f6:	f7ff ffce 	bl	8010396 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 80103fa:	b138      	cbz	r0, 801040c <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 80103fc:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 8010400:	4642      	mov	r2, r8
 8010402:	4620      	mov	r0, r4
 8010404:	f7ff ff93 	bl	801032e <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 8010408:	2800      	cmp	r0, #0
 801040a:	d1e9      	bne.n	80103e0 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 801040c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010410 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 8010410:	b570      	push	{r4, r5, r6, lr}
 8010412:	694a      	ldr	r2, [r1, #20]
 8010414:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 8010416:	684b      	ldr	r3, [r1, #4]
 8010418:	6ace      	ldr	r6, [r1, #44]	@ 0x2c
 801041a:	1b54      	subs	r4, r2, r5
 801041c:	f000 8106 	beq.w	801062c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 8010420:	1b9b      	subs	r3, r3, r6
 8010422:	d003      	beq.n	801042c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 8010424:	4363      	muls	r3, r4
 8010426:	2210      	movs	r2, #16
 8010428:	fb93 f3f2 	sdiv	r3, r3, r2
 801042c:	680c      	ldr	r4, [r1, #0]
 801042e:	698a      	ldr	r2, [r1, #24]
 8010430:	1b65      	subs	r5, r4, r5
 8010432:	f000 80fd 	beq.w	8010630 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 8010436:	1b92      	subs	r2, r2, r6
 8010438:	d003      	beq.n	8010442 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801043a:	436a      	muls	r2, r5
 801043c:	2410      	movs	r4, #16
 801043e:	fb92 f2f4 	sdiv	r2, r2, r4
 8010442:	1a9b      	subs	r3, r3, r2
 8010444:	ee07 3a90 	vmov	s15, r3
 8010448:	ed9f 4a88 	vldr	s8, [pc, #544]	@ 801066c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 801044c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010450:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8010454:	ee67 7a84 	vmul.f32	s15, s15, s8
 8010458:	460a      	mov	r2, r1
 801045a:	ee87 3a27 	vdiv.f32	s6, s14, s15
 801045e:	4603      	mov	r3, r0
 8010460:	f100 040c 	add.w	r4, r0, #12
 8010464:	eeb1 6a43 	vneg.f32	s12, s6
 8010468:	edd2 7a02 	vldr	s15, [r2, #8]
 801046c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8010470:	3214      	adds	r2, #20
 8010472:	ece3 6a01 	vstmia	r3!, {s13}
 8010476:	ed52 7a02 	vldr	s15, [r2, #-8]
 801047a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801047e:	429c      	cmp	r4, r3
 8010480:	edc3 7a02 	vstr	s15, [r3, #8]
 8010484:	ed52 7a01 	vldr	s15, [r2, #-4]
 8010488:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801048c:	edc3 7a05 	vstr	s15, [r3, #20]
 8010490:	d1ea      	bne.n	8010468 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 8010492:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8010494:	698b      	ldr	r3, [r1, #24]
 8010496:	edd0 4a02 	vldr	s9, [r0, #8]
 801049a:	edd0 3a00 	vldr	s7, [r0]
 801049e:	edd0 6a01 	vldr	s13, [r0, #4]
 80104a2:	ed90 5a05 	vldr	s10, [r0, #20]
 80104a6:	ed90 2a03 	vldr	s4, [r0, #12]
 80104aa:	edd0 5a04 	vldr	s11, [r0, #16]
 80104ae:	ed90 1a07 	vldr	s2, [r0, #28]
 80104b2:	edd0 2a06 	vldr	s5, [r0, #24]
 80104b6:	1a9b      	subs	r3, r3, r2
 80104b8:	ee07 3a90 	vmov	s15, r3
 80104bc:	684b      	ldr	r3, [r1, #4]
 80104be:	1a9b      	subs	r3, r3, r2
 80104c0:	ee07 3a10 	vmov	s14, r3
 80104c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80104c8:	ee76 6ae4 	vsub.f32	s13, s13, s9
 80104cc:	ee67 7a84 	vmul.f32	s15, s15, s8
 80104d0:	ee73 4ae4 	vsub.f32	s9, s7, s9
 80104d4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80104d8:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 80104dc:	ee27 7a04 	vmul.f32	s14, s14, s8
 80104e0:	ee75 5ac5 	vsub.f32	s11, s11, s10
 80104e4:	eee6 7a87 	vfma.f32	s15, s13, s14
 80104e8:	ee32 5a45 	vsub.f32	s10, s4, s10
 80104ec:	ee67 7a83 	vmul.f32	s15, s15, s6
 80104f0:	edc0 7a09 	vstr	s15, [r0, #36]	@ 0x24
 80104f4:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 80104f6:	694a      	ldr	r2, [r1, #20]
 80104f8:	1b13      	subs	r3, r2, r4
 80104fa:	ee07 3a10 	vmov	s14, r3
 80104fe:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8010502:	680b      	ldr	r3, [r1, #0]
 8010504:	ee27 7a04 	vmul.f32	s14, s14, s8
 8010508:	1b1b      	subs	r3, r3, r4
 801050a:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 801050e:	ee07 3a10 	vmov	s14, r3
 8010512:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8010516:	ee27 7a04 	vmul.f32	s14, s14, s8
 801051a:	eee6 4a87 	vfma.f32	s9, s13, s14
 801051e:	ee64 4a86 	vmul.f32	s9, s9, s12
 8010522:	edc0 4a0a 	vstr	s9, [r0, #40]	@ 0x28
 8010526:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8010528:	698b      	ldr	r3, [r1, #24]
 801052a:	1a9b      	subs	r3, r3, r2
 801052c:	ee06 3a90 	vmov	s13, r3
 8010530:	684b      	ldr	r3, [r1, #4]
 8010532:	1a9b      	subs	r3, r3, r2
 8010534:	ee07 3a10 	vmov	s14, r3
 8010538:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801053c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8010540:	ee66 6a84 	vmul.f32	s13, s13, s8
 8010544:	ee27 7a04 	vmul.f32	s14, s14, s8
 8010548:	ee65 6a66 	vnmul.f32	s13, s10, s13
 801054c:	eee5 6a87 	vfma.f32	s13, s11, s14
 8010550:	ee66 6a83 	vmul.f32	s13, s13, s6
 8010554:	edc0 6a0b 	vstr	s13, [r0, #44]	@ 0x2c
 8010558:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 801055a:	694a      	ldr	r2, [r1, #20]
 801055c:	1b13      	subs	r3, r2, r4
 801055e:	ee07 3a10 	vmov	s14, r3
 8010562:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8010566:	680b      	ldr	r3, [r1, #0]
 8010568:	ee27 7a04 	vmul.f32	s14, s14, s8
 801056c:	1b1b      	subs	r3, r3, r4
 801056e:	ee25 5a47 	vnmul.f32	s10, s10, s14
 8010572:	ee07 3a10 	vmov	s14, r3
 8010576:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801057a:	ee27 7a04 	vmul.f32	s14, s14, s8
 801057e:	eea5 5a87 	vfma.f32	s10, s11, s14
 8010582:	edd0 5a08 	vldr	s11, [r0, #32]
 8010586:	ee25 5a06 	vmul.f32	s10, s10, s12
 801058a:	ee31 1a65 	vsub.f32	s2, s2, s11
 801058e:	ed80 5a0c 	vstr	s10, [r0, #48]	@ 0x30
 8010592:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8010594:	698b      	ldr	r3, [r1, #24]
 8010596:	1a9b      	subs	r3, r3, r2
 8010598:	ee07 3a10 	vmov	s14, r3
 801059c:	684b      	ldr	r3, [r1, #4]
 801059e:	1a9b      	subs	r3, r3, r2
 80105a0:	ee01 3a90 	vmov	s3, r3
 80105a4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80105a8:	ee72 5ae5 	vsub.f32	s11, s5, s11
 80105ac:	ee27 7a04 	vmul.f32	s14, s14, s8
 80105b0:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 80105b4:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 80105b8:	ee61 1a84 	vmul.f32	s3, s3, s8
 80105bc:	eea1 7a21 	vfma.f32	s14, s2, s3
 80105c0:	ee27 7a03 	vmul.f32	s14, s14, s6
 80105c4:	ed80 7a0d 	vstr	s14, [r0, #52]	@ 0x34
 80105c8:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 80105ca:	694a      	ldr	r2, [r1, #20]
 80105cc:	1b13      	subs	r3, r2, r4
 80105ce:	ee03 3a10 	vmov	s6, r3
 80105d2:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 80105d6:	680b      	ldr	r3, [r1, #0]
 80105d8:	ee23 3a04 	vmul.f32	s6, s6, s8
 80105dc:	1b1b      	subs	r3, r3, r4
 80105de:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 80105e2:	ee03 3a10 	vmov	s6, r3
 80105e6:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 80105ea:	ee23 4a04 	vmul.f32	s8, s6, s8
 80105ee:	eee1 5a04 	vfma.f32	s11, s2, s8
 80105f2:	ee25 6a86 	vmul.f32	s12, s11, s12
 80105f6:	ee62 5a67 	vnmul.f32	s11, s4, s15
 80105fa:	ed80 6a0e 	vstr	s12, [r0, #56]	@ 0x38
 80105fe:	eee3 5aa6 	vfma.f32	s11, s7, s13
 8010602:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 8010606:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801060a:	dd13      	ble.n	8010634 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 801060c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8010610:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 8010614:	63c3      	str	r3, [r0, #60]	@ 0x3c
 8010616:	eee3 7a87 	vfma.f32	s15, s7, s14
 801061a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801061e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010622:	dd15      	ble.n	8010650 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 8010624:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8010628:	6403      	str	r3, [r0, #64]	@ 0x40
 801062a:	bd70      	pop	{r4, r5, r6, pc}
 801062c:	4623      	mov	r3, r4
 801062e:	e6fd      	b.n	801042c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 8010630:	462a      	mov	r2, r5
 8010632:	e706      	b.n	8010442 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 8010634:	d502      	bpl.n	801063c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 8010636:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 801063a:	e7e9      	b.n	8010610 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 801063c:	ee22 2a64 	vnmul.f32	s4, s4, s9
 8010640:	eea3 2a85 	vfma.f32	s4, s7, s10
 8010644:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 8010648:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801064c:	dade      	bge.n	801060c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 801064e:	e7f2      	b.n	8010636 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 8010650:	d502      	bpl.n	8010658 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 8010652:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8010656:	e7e7      	b.n	8010628 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 8010658:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 801065c:	eee3 4a86 	vfma.f32	s9, s7, s12
 8010660:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 8010664:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010668:	dadc      	bge.n	8010624 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 801066a:	e7f2      	b.n	8010652 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 801066c:	3d800000 	.word	0x3d800000

08010670 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 8010670:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010674:	2714      	movs	r7, #20
 8010676:	435f      	muls	r7, r3
 8010678:	eb02 0c07 	add.w	ip, r2, r7
 801067c:	f8dc 5004 	ldr.w	r5, [ip, #4]
 8010680:	f115 0e0f 	adds.w	lr, r5, #15
 8010684:	f100 80a2 	bmi.w	80107cc <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 8010688:	ea4f 1e2e 	mov.w	lr, lr, asr #4
 801068c:	9c08      	ldr	r4, [sp, #32]
 801068e:	f8c0 e014 	str.w	lr, [r0, #20]
 8010692:	2614      	movs	r6, #20
 8010694:	4366      	muls	r6, r4
 8010696:	eb02 0806 	add.w	r8, r2, r6
 801069a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801069e:	f115 040f 	adds.w	r4, r5, #15
 80106a2:	f100 809f 	bmi.w	80107e4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
 80106a6:	1124      	asrs	r4, r4, #4
 80106a8:	eba4 040e 	sub.w	r4, r4, lr
 80106ac:	6184      	str	r4, [r0, #24]
 80106ae:	2c00      	cmp	r4, #0
 80106b0:	f000 808a 	beq.w	80107c8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
 80106b4:	f8dc 9004 	ldr.w	r9, [ip, #4]
 80106b8:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80106bc:	5995      	ldr	r5, [r2, r6]
 80106be:	eba4 0809 	sub.w	r8, r4, r9
 80106c2:	59d4      	ldr	r4, [r2, r7]
 80106c4:	eba5 0a04 	sub.w	sl, r5, r4
 80106c8:	ea4f 150a 	mov.w	r5, sl, lsl #4
 80106cc:	fb0e fe05 	mul.w	lr, lr, r5
 80106d0:	fb0a ee19 	mls	lr, sl, r9, lr
 80106d4:	fb08 e404 	mla	r4, r8, r4, lr
 80106d8:	ea4f 1608 	mov.w	r6, r8, lsl #4
 80106dc:	3c01      	subs	r4, #1
 80106de:	19a4      	adds	r4, r4, r6
 80106e0:	f100 808c 	bmi.w	80107fc <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
 80106e4:	fb94 fef6 	sdiv	lr, r4, r6
 80106e8:	f8c0 e000 	str.w	lr, [r0]
 80106ec:	fb06 441e 	mls	r4, r6, lr, r4
 80106f0:	6104      	str	r4, [r0, #16]
 80106f2:	2d00      	cmp	r5, #0
 80106f4:	f2c0 8095 	blt.w	8010822 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
 80106f8:	fb95 f4f6 	sdiv	r4, r5, r6
 80106fc:	6044      	str	r4, [r0, #4]
 80106fe:	fb06 5514 	mls	r5, r6, r4, r5
 8010702:	6085      	str	r5, [r0, #8]
 8010704:	60c6      	str	r6, [r0, #12]
 8010706:	f8dc 4004 	ldr.w	r4, [ip, #4]
 801070a:	6945      	ldr	r5, [r0, #20]
 801070c:	59d2      	ldr	r2, [r2, r7]
 801070e:	eddf 6a4d 	vldr	s13, [pc, #308]	@ 8010844 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
 8010712:	ed91 6a0a 	vldr	s12, [r1, #40]	@ 0x28
 8010716:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
 801071a:	ee07 4a10 	vmov	s14, r4
 801071e:	6804      	ldr	r4, [r0, #0]
 8010720:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
 8010724:	ee07 2a90 	vmov	s15, r2
 8010728:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801072c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010730:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8010734:	ee27 7a26 	vmul.f32	s14, s14, s13
 8010738:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801073c:	edd3 6a00 	vldr	s13, [r3]
 8010740:	eee6 6a07 	vfma.f32	s13, s12, s14
 8010744:	ed91 6a09 	vldr	s12, [r1, #36]	@ 0x24
 8010748:	eee6 6a27 	vfma.f32	s13, s12, s15
 801074c:	edc0 6a07 	vstr	s13, [r0, #28]
 8010750:	edd0 6a01 	vldr	s13, [r0, #4]
 8010754:	edd1 5a09 	vldr	s11, [r1, #36]	@ 0x24
 8010758:	ed91 6a0a 	vldr	s12, [r1, #40]	@ 0x28
 801075c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8010760:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8010764:	ed80 6a08 	vstr	s12, [r0, #32]
 8010768:	6a4a      	ldr	r2, [r1, #36]	@ 0x24
 801076a:	6242      	str	r2, [r0, #36]	@ 0x24
 801076c:	edd1 5a0c 	vldr	s11, [r1, #48]	@ 0x30
 8010770:	ed93 6a03 	vldr	s12, [r3, #12]
 8010774:	eea5 6a87 	vfma.f32	s12, s11, s14
 8010778:	edd1 5a0b 	vldr	s11, [r1, #44]	@ 0x2c
 801077c:	eea5 6aa7 	vfma.f32	s12, s11, s15
 8010780:	ed80 6a0a 	vstr	s12, [r0, #40]	@ 0x28
 8010784:	edd1 5a0b 	vldr	s11, [r1, #44]	@ 0x2c
 8010788:	ed91 6a0c 	vldr	s12, [r1, #48]	@ 0x30
 801078c:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8010790:	ed80 6a0b 	vstr	s12, [r0, #44]	@ 0x2c
 8010794:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8010796:	6302      	str	r2, [r0, #48]	@ 0x30
 8010798:	ed93 6a06 	vldr	s12, [r3, #24]
 801079c:	edd1 5a0e 	vldr	s11, [r1, #56]	@ 0x38
 80107a0:	eea5 6a87 	vfma.f32	s12, s11, s14
 80107a4:	eeb0 7a46 	vmov.f32	s14, s12
 80107a8:	ed91 6a0d 	vldr	s12, [r1, #52]	@ 0x34
 80107ac:	eea6 7a27 	vfma.f32	s14, s12, s15
 80107b0:	ed80 7a0d 	vstr	s14, [r0, #52]	@ 0x34
 80107b4:	ed91 7a0d 	vldr	s14, [r1, #52]	@ 0x34
 80107b8:	edd1 7a0e 	vldr	s15, [r1, #56]	@ 0x38
 80107bc:	eee6 7a87 	vfma.f32	s15, s13, s14
 80107c0:	edc0 7a0e 	vstr	s15, [r0, #56]	@ 0x38
 80107c4:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 80107c6:	63c3      	str	r3, [r0, #60]	@ 0x3c
 80107c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80107cc:	f1c5 0501 	rsb	r5, r5, #1
 80107d0:	f015 050f 	ands.w	r5, r5, #15
 80107d4:	bf18      	it	ne
 80107d6:	2501      	movne	r5, #1
 80107d8:	2410      	movs	r4, #16
 80107da:	fb9e fef4 	sdiv	lr, lr, r4
 80107de:	ebae 0e05 	sub.w	lr, lr, r5
 80107e2:	e753      	b.n	801068c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
 80107e4:	f1c5 0501 	rsb	r5, r5, #1
 80107e8:	f015 050f 	ands.w	r5, r5, #15
 80107ec:	bf18      	it	ne
 80107ee:	2501      	movne	r5, #1
 80107f0:	f04f 0910 	mov.w	r9, #16
 80107f4:	fb94 f4f9 	sdiv	r4, r4, r9
 80107f8:	1b64      	subs	r4, r4, r5
 80107fa:	e755      	b.n	80106a8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
 80107fc:	4264      	negs	r4, r4
 80107fe:	fb94 fef6 	sdiv	lr, r4, r6
 8010802:	f1ce 0800 	rsb	r8, lr, #0
 8010806:	fb06 441e 	mls	r4, r6, lr, r4
 801080a:	f8c0 8000 	str.w	r8, [r0]
 801080e:	6104      	str	r4, [r0, #16]
 8010810:	2c00      	cmp	r4, #0
 8010812:	f43f af6e 	beq.w	80106f2 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
 8010816:	ea6f 0e0e 	mvn.w	lr, lr
 801081a:	f8c0 e000 	str.w	lr, [r0]
 801081e:	1b34      	subs	r4, r6, r4
 8010820:	e766      	b.n	80106f0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
 8010822:	426d      	negs	r5, r5
 8010824:	fb95 f4f6 	sdiv	r4, r5, r6
 8010828:	f1c4 0e00 	rsb	lr, r4, #0
 801082c:	fb06 5514 	mls	r5, r6, r4, r5
 8010830:	f8c0 e004 	str.w	lr, [r0, #4]
 8010834:	6085      	str	r5, [r0, #8]
 8010836:	2d00      	cmp	r5, #0
 8010838:	f43f af64 	beq.w	8010704 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
 801083c:	43e4      	mvns	r4, r4
 801083e:	6044      	str	r4, [r0, #4]
 8010840:	1b75      	subs	r5, r6, r5
 8010842:	e75e      	b.n	8010702 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
 8010844:	3d800000 	.word	0x3d800000

08010848 <_ZN8touchgfx7Unicode6strlenEPKt>:
 8010848:	4602      	mov	r2, r0
 801084a:	b148      	cbz	r0, 8010860 <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
 801084c:	2300      	movs	r3, #0
 801084e:	b298      	uxth	r0, r3
 8010850:	3301      	adds	r3, #1
 8010852:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 8010856:	f831 1c02 	ldrh.w	r1, [r1, #-2]
 801085a:	2900      	cmp	r1, #0
 801085c:	d1f7      	bne.n	801084e <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
 801085e:	4770      	bx	lr
 8010860:	4770      	bx	lr

08010862 <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
 8010862:	b530      	push	{r4, r5, lr}
 8010864:	4604      	mov	r4, r0
 8010866:	b159      	cbz	r1, 8010880 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1e>
 8010868:	b148      	cbz	r0, 801087e <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801086a:	2300      	movs	r3, #0
 801086c:	b298      	uxth	r0, r3
 801086e:	4282      	cmp	r2, r0
 8010870:	d905      	bls.n	801087e <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 8010872:	5ccd      	ldrb	r5, [r1, r3]
 8010874:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
 8010878:	3301      	adds	r3, #1
 801087a:	2d00      	cmp	r5, #0
 801087c:	d1f6      	bne.n	801086c <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
 801087e:	bd30      	pop	{r4, r5, pc}
 8010880:	4608      	mov	r0, r1
 8010882:	e7fc      	b.n	801087e <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>

08010884 <_ZN8touchgfx7Unicode4itoaElPtti.part.2>:
 8010884:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010886:	b08b      	sub	sp, #44	@ 0x2c
 8010888:	468c      	mov	ip, r1
 801088a:	2100      	movs	r1, #0
 801088c:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 8010890:	4604      	mov	r4, r0
 8010892:	261f      	movs	r6, #31
 8010894:	af01      	add	r7, sp, #4
 8010896:	fb94 fef3 	sdiv	lr, r4, r3
 801089a:	fb03 441e 	mls	r4, r3, lr, r4
 801089e:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
 80108a2:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
 80108a6:	b2ec      	uxtb	r4, r5
 80108a8:	2d09      	cmp	r5, #9
 80108aa:	bfd4      	ite	le
 80108ac:	3430      	addle	r4, #48	@ 0x30
 80108ae:	3457      	addgt	r4, #87	@ 0x57
 80108b0:	b2e4      	uxtb	r4, r4
 80108b2:	55bc      	strb	r4, [r7, r6]
 80108b4:	4674      	mov	r4, lr
 80108b6:	1e71      	subs	r1, r6, #1
 80108b8:	b974      	cbnz	r4, 80108d8 <_ZN8touchgfx7Unicode4itoaElPtti.part.2+0x54>
 80108ba:	2800      	cmp	r0, #0
 80108bc:	da05      	bge.n	80108ca <_ZN8touchgfx7Unicode4itoaElPtti.part.2+0x46>
 80108be:	ab0a      	add	r3, sp, #40	@ 0x28
 80108c0:	4419      	add	r1, r3
 80108c2:	232d      	movs	r3, #45	@ 0x2d
 80108c4:	f801 3c24 	strb.w	r3, [r1, #-36]
 80108c8:	1eb1      	subs	r1, r6, #2
 80108ca:	3101      	adds	r1, #1
 80108cc:	4439      	add	r1, r7
 80108ce:	4660      	mov	r0, ip
 80108d0:	f7ff ffc7 	bl	8010862 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 80108d4:	b00b      	add	sp, #44	@ 0x2c
 80108d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80108d8:	460e      	mov	r6, r1
 80108da:	e7dc      	b.n	8010896 <_ZN8touchgfx7Unicode4itoaElPtti.part.2+0x12>

080108dc <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>:
 80108dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80108de:	b08b      	sub	sp, #44	@ 0x2c
 80108e0:	468c      	mov	ip, r1
 80108e2:	2100      	movs	r1, #0
 80108e4:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 80108e8:	ae01      	add	r6, sp, #4
 80108ea:	211f      	movs	r1, #31
 80108ec:	fbb0 f7f3 	udiv	r7, r0, r3
 80108f0:	fb03 0517 	mls	r5, r3, r7, r0
 80108f4:	b2ec      	uxtb	r4, r5
 80108f6:	2d09      	cmp	r5, #9
 80108f8:	bfd4      	ite	le
 80108fa:	3430      	addle	r4, #48	@ 0x30
 80108fc:	3457      	addgt	r4, #87	@ 0x57
 80108fe:	b2e4      	uxtb	r4, r4
 8010900:	558c      	strb	r4, [r1, r6]
 8010902:	4638      	mov	r0, r7
 8010904:	1e4c      	subs	r4, r1, #1
 8010906:	b92f      	cbnz	r7, 8010914 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3+0x38>
 8010908:	4431      	add	r1, r6
 801090a:	4660      	mov	r0, ip
 801090c:	f7ff ffa9 	bl	8010862 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 8010910:	b00b      	add	sp, #44	@ 0x2c
 8010912:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010914:	4621      	mov	r1, r4
 8010916:	e7e9      	b.n	80108ec <_ZN8touchgfx7Unicode4utoaEmPtti.part.3+0x10>

08010918 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>:
 8010918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801091c:	4691      	mov	r9, r2
 801091e:	b085      	sub	sp, #20
 8010920:	6802      	ldr	r2, [r0, #0]
 8010922:	9201      	str	r2, [sp, #4]
 8010924:	4688      	mov	r8, r1
 8010926:	4683      	mov	fp, r0
 8010928:	f89d 1040 	ldrb.w	r1, [sp, #64]	@ 0x40
 801092c:	9103      	str	r1, [sp, #12]
 801092e:	4610      	mov	r0, r2
 8010930:	461c      	mov	r4, r3
 8010932:	f89d 3048 	ldrb.w	r3, [sp, #72]	@ 0x48
 8010936:	9302      	str	r3, [sp, #8]
 8010938:	f7ff ff86 	bl	8010848 <_ZN8touchgfx7Unicode6strlenEPKt>
 801093c:	f1b8 0f00 	cmp.w	r8, #0
 8010940:	bf0c      	ite	eq
 8010942:	4684      	moveq	ip, r0
 8010944:	f100 0c01 	addne.w	ip, r0, #1
 8010948:	f1b9 0f69 	cmp.w	r9, #105	@ 0x69
 801094c:	f89d 6038 	ldrb.w	r6, [sp, #56]	@ 0x38
 8010950:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 8010952:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 8010954:	f8dd a054 	ldr.w	sl, [sp, #84]	@ 0x54
 8010958:	9903      	ldr	r1, [sp, #12]
 801095a:	fa1f fc8c 	uxth.w	ip, ip
 801095e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8010962:	d041      	beq.n	80109e8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 8010964:	d834      	bhi.n	80109d0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xb8>
 8010966:	f1b9 0f63 	cmp.w	r9, #99	@ 0x63
 801096a:	d059      	beq.n	8010a20 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x108>
 801096c:	f1b9 0f64 	cmp.w	r9, #100	@ 0x64
 8010970:	d03a      	beq.n	80109e8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 8010972:	f1b9 0f58 	cmp.w	r9, #88	@ 0x58
 8010976:	d034      	beq.n	80109e2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 8010978:	2400      	movs	r4, #0
 801097a:	f8bd 2050 	ldrh.w	r2, [sp, #80]	@ 0x50
 801097e:	3a01      	subs	r2, #1
 8010980:	b169      	cbz	r1, 801099e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 8010982:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8010984:	458c      	cmp	ip, r1
 8010986:	da09      	bge.n	801099c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 8010988:	eba1 010c 	sub.w	r1, r1, ip
 801098c:	b289      	uxth	r1, r1
 801098e:	b933      	cbnz	r3, 801099e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 8010990:	2e00      	cmp	r6, #0
 8010992:	d051      	beq.n	8010a38 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 8010994:	2800      	cmp	r0, #0
 8010996:	d04f      	beq.n	8010a38 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 8010998:	440c      	add	r4, r1
 801099a:	b2a4      	uxth	r4, r4
 801099c:	2100      	movs	r1, #0
 801099e:	682b      	ldr	r3, [r5, #0]
 80109a0:	4293      	cmp	r3, r2
 80109a2:	da07      	bge.n	80109b4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 80109a4:	f1b8 0f00 	cmp.w	r8, #0
 80109a8:	d004      	beq.n	80109b4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 80109aa:	f82a 8013 	strh.w	r8, [sl, r3, lsl #1]
 80109ae:	682b      	ldr	r3, [r5, #0]
 80109b0:	3301      	adds	r3, #1
 80109b2:	602b      	str	r3, [r5, #0]
 80109b4:	2730      	movs	r7, #48	@ 0x30
 80109b6:	2c00      	cmp	r4, #0
 80109b8:	d04e      	beq.n	8010a58 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 80109ba:	682e      	ldr	r6, [r5, #0]
 80109bc:	3c01      	subs	r4, #1
 80109be:	42b2      	cmp	r2, r6
 80109c0:	b2a4      	uxth	r4, r4
 80109c2:	dd49      	ble.n	8010a58 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 80109c4:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 80109c8:	682b      	ldr	r3, [r5, #0]
 80109ca:	3301      	adds	r3, #1
 80109cc:	602b      	str	r3, [r5, #0]
 80109ce:	e7f2      	b.n	80109b6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9e>
 80109d0:	f1b9 0f73 	cmp.w	r9, #115	@ 0x73
 80109d4:	d01d      	beq.n	8010a12 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xfa>
 80109d6:	f1b9 0f78 	cmp.w	r9, #120	@ 0x78
 80109da:	d002      	beq.n	80109e2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 80109dc:	f1b9 0f6f 	cmp.w	r9, #111	@ 0x6f
 80109e0:	e7c9      	b.n	8010976 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x5e>
 80109e2:	4684      	mov	ip, r0
 80109e4:	f04f 0800 	mov.w	r8, #0
 80109e8:	2c00      	cmp	r4, #0
 80109ea:	d0c6      	beq.n	801097a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 80109ec:	b947      	cbnz	r7, 8010a00 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 80109ee:	2801      	cmp	r0, #1
 80109f0:	d106      	bne.n	8010a00 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 80109f2:	8814      	ldrh	r4, [r2, #0]
 80109f4:	2c30      	cmp	r4, #48	@ 0x30
 80109f6:	bf02      	ittt	eq
 80109f8:	3202      	addeq	r2, #2
 80109fa:	f8cb 2000 	streq.w	r2, [fp]
 80109fe:	4638      	moveq	r0, r7
 8010a00:	45bc      	cmp	ip, r7
 8010a02:	da14      	bge.n	8010a2e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x116>
 8010a04:	b2bf      	uxth	r7, r7
 8010a06:	eba7 040c 	sub.w	r4, r7, ip
 8010a0a:	b2a4      	uxth	r4, r4
 8010a0c:	46bc      	mov	ip, r7
 8010a0e:	2600      	movs	r6, #0
 8010a10:	e7b3      	b.n	801097a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 8010a12:	4684      	mov	ip, r0
 8010a14:	b16c      	cbz	r4, 8010a32 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x11a>
 8010a16:	42b8      	cmp	r0, r7
 8010a18:	dd00      	ble.n	8010a1c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x104>
 8010a1a:	b2b8      	uxth	r0, r7
 8010a1c:	2400      	movs	r4, #0
 8010a1e:	e003      	b.n	8010a28 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x110>
 8010a20:	f04f 0c01 	mov.w	ip, #1
 8010a24:	2400      	movs	r4, #0
 8010a26:	4660      	mov	r0, ip
 8010a28:	4626      	mov	r6, r4
 8010a2a:	46a0      	mov	r8, r4
 8010a2c:	e7a5      	b.n	801097a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 8010a2e:	2400      	movs	r4, #0
 8010a30:	e7ed      	b.n	8010a0e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xf6>
 8010a32:	4626      	mov	r6, r4
 8010a34:	46a0      	mov	r8, r4
 8010a36:	e7a0      	b.n	801097a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 8010a38:	2900      	cmp	r1, #0
 8010a3a:	d0b0      	beq.n	801099e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 8010a3c:	2720      	movs	r7, #32
 8010a3e:	682e      	ldr	r6, [r5, #0]
 8010a40:	2900      	cmp	r1, #0
 8010a42:	d0ac      	beq.n	801099e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 8010a44:	3901      	subs	r1, #1
 8010a46:	4296      	cmp	r6, r2
 8010a48:	b289      	uxth	r1, r1
 8010a4a:	daa7      	bge.n	801099c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 8010a4c:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 8010a50:	682b      	ldr	r3, [r5, #0]
 8010a52:	3301      	adds	r3, #1
 8010a54:	602b      	str	r3, [r5, #0]
 8010a56:	e7f2      	b.n	8010a3e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x126>
 8010a58:	b188      	cbz	r0, 8010a7e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 8010a5a:	682b      	ldr	r3, [r5, #0]
 8010a5c:	3801      	subs	r0, #1
 8010a5e:	429a      	cmp	r2, r3
 8010a60:	b280      	uxth	r0, r0
 8010a62:	dd0c      	ble.n	8010a7e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 8010a64:	f8db 3000 	ldr.w	r3, [fp]
 8010a68:	1c9c      	adds	r4, r3, #2
 8010a6a:	f8cb 4000 	str.w	r4, [fp]
 8010a6e:	881c      	ldrh	r4, [r3, #0]
 8010a70:	682b      	ldr	r3, [r5, #0]
 8010a72:	f82a 4013 	strh.w	r4, [sl, r3, lsl #1]
 8010a76:	682b      	ldr	r3, [r5, #0]
 8010a78:	3301      	adds	r3, #1
 8010a7a:	602b      	str	r3, [r5, #0]
 8010a7c:	e7ec      	b.n	8010a58 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 8010a7e:	2620      	movs	r6, #32
 8010a80:	b151      	cbz	r1, 8010a98 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 8010a82:	6828      	ldr	r0, [r5, #0]
 8010a84:	3901      	subs	r1, #1
 8010a86:	4282      	cmp	r2, r0
 8010a88:	b289      	uxth	r1, r1
 8010a8a:	dd05      	ble.n	8010a98 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 8010a8c:	f82a 6010 	strh.w	r6, [sl, r0, lsl #1]
 8010a90:	682b      	ldr	r3, [r5, #0]
 8010a92:	3301      	adds	r3, #1
 8010a94:	602b      	str	r3, [r5, #0]
 8010a96:	e7f3      	b.n	8010a80 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x168>
 8010a98:	b005      	add	sp, #20
 8010a9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010a9e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>:
 8010a9e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010aa2:	e9dd 8c07 	ldrd	r8, ip, [sp, #28]
 8010aa6:	e9dd e609 	ldrd	lr, r6, [sp, #36]	@ 0x24
 8010aaa:	e9dd 750b 	ldrd	r7, r5, [sp, #44]	@ 0x2c
 8010aae:	2400      	movs	r4, #0
 8010ab0:	8014      	strh	r4, [r2, #0]
 8010ab2:	701c      	strb	r4, [r3, #0]
 8010ab4:	f888 4000 	strb.w	r4, [r8]
 8010ab8:	f88c 4000 	strb.w	r4, [ip]
 8010abc:	f88e 4000 	strb.w	r4, [lr]
 8010ac0:	703c      	strb	r4, [r7, #0]
 8010ac2:	6804      	ldr	r4, [r0, #0]
 8010ac4:	b1a4      	cbz	r4, 8010af0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x52>
 8010ac6:	8824      	ldrh	r4, [r4, #0]
 8010ac8:	f04f 0901 	mov.w	r9, #1
 8010acc:	b314      	cbz	r4, 8010b14 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 8010ace:	2c2b      	cmp	r4, #43	@ 0x2b
 8010ad0:	d001      	beq.n	8010ad6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x38>
 8010ad2:	2c20      	cmp	r4, #32
 8010ad4:	d110      	bne.n	8010af8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x5a>
 8010ad6:	8014      	strh	r4, [r2, #0]
 8010ad8:	6804      	ldr	r4, [r0, #0]
 8010ada:	b10c      	cbz	r4, 8010ae0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x42>
 8010adc:	3402      	adds	r4, #2
 8010ade:	6004      	str	r4, [r0, #0]
 8010ae0:	680c      	ldr	r4, [r1, #0]
 8010ae2:	b10c      	cbz	r4, 8010ae8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x4a>
 8010ae4:	3401      	adds	r4, #1
 8010ae6:	600c      	str	r4, [r1, #0]
 8010ae8:	6804      	ldr	r4, [r0, #0]
 8010aea:	b17c      	cbz	r4, 8010b0c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x6e>
 8010aec:	8824      	ldrh	r4, [r4, #0]
 8010aee:	e7ed      	b.n	8010acc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 8010af0:	680c      	ldr	r4, [r1, #0]
 8010af2:	b17c      	cbz	r4, 8010b14 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 8010af4:	7824      	ldrb	r4, [r4, #0]
 8010af6:	e7e7      	b.n	8010ac8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2a>
 8010af8:	2c2d      	cmp	r4, #45	@ 0x2d
 8010afa:	d102      	bne.n	8010b02 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x64>
 8010afc:	f883 9000 	strb.w	r9, [r3]
 8010b00:	e7ea      	b.n	8010ad8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 8010b02:	2c23      	cmp	r4, #35	@ 0x23
 8010b04:	d107      	bne.n	8010b16 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x78>
 8010b06:	f888 9000 	strb.w	r9, [r8]
 8010b0a:	e7e5      	b.n	8010ad8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 8010b0c:	680c      	ldr	r4, [r1, #0]
 8010b0e:	b10c      	cbz	r4, 8010b14 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 8010b10:	7824      	ldrb	r4, [r4, #0]
 8010b12:	e7db      	b.n	8010acc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 8010b14:	2400      	movs	r4, #0
 8010b16:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 8010b1a:	2b09      	cmp	r3, #9
 8010b1c:	d901      	bls.n	8010b22 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x84>
 8010b1e:	2c2a      	cmp	r4, #42	@ 0x2a
 8010b20:	d122      	bne.n	8010b68 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 8010b22:	2301      	movs	r3, #1
 8010b24:	2c30      	cmp	r4, #48	@ 0x30
 8010b26:	f88e 3000 	strb.w	r3, [lr]
 8010b2a:	d10d      	bne.n	8010b48 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 8010b2c:	f88c 3000 	strb.w	r3, [ip]
 8010b30:	6803      	ldr	r3, [r0, #0]
 8010b32:	b10b      	cbz	r3, 8010b38 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x9a>
 8010b34:	3302      	adds	r3, #2
 8010b36:	6003      	str	r3, [r0, #0]
 8010b38:	680b      	ldr	r3, [r1, #0]
 8010b3a:	b10b      	cbz	r3, 8010b40 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xa2>
 8010b3c:	3301      	adds	r3, #1
 8010b3e:	600b      	str	r3, [r1, #0]
 8010b40:	6803      	ldr	r3, [r0, #0]
 8010b42:	2b00      	cmp	r3, #0
 8010b44:	d02f      	beq.n	8010ba6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x108>
 8010b46:	881c      	ldrh	r4, [r3, #0]
 8010b48:	2c2a      	cmp	r4, #42	@ 0x2a
 8010b4a:	d135      	bne.n	8010bb8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 8010b4c:	f04f 33ff 	mov.w	r3, #4294967295
 8010b50:	6033      	str	r3, [r6, #0]
 8010b52:	6803      	ldr	r3, [r0, #0]
 8010b54:	b10b      	cbz	r3, 8010b5a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xbc>
 8010b56:	3302      	adds	r3, #2
 8010b58:	6003      	str	r3, [r0, #0]
 8010b5a:	680b      	ldr	r3, [r1, #0]
 8010b5c:	b10b      	cbz	r3, 8010b62 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xc4>
 8010b5e:	3301      	adds	r3, #1
 8010b60:	600b      	str	r3, [r1, #0]
 8010b62:	6803      	ldr	r3, [r0, #0]
 8010b64:	b31b      	cbz	r3, 8010bae <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x110>
 8010b66:	881c      	ldrh	r4, [r3, #0]
 8010b68:	2c2e      	cmp	r4, #46	@ 0x2e
 8010b6a:	d11a      	bne.n	8010ba2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 8010b6c:	2301      	movs	r3, #1
 8010b6e:	703b      	strb	r3, [r7, #0]
 8010b70:	6803      	ldr	r3, [r0, #0]
 8010b72:	b10b      	cbz	r3, 8010b78 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xda>
 8010b74:	3302      	adds	r3, #2
 8010b76:	6003      	str	r3, [r0, #0]
 8010b78:	680b      	ldr	r3, [r1, #0]
 8010b7a:	b10b      	cbz	r3, 8010b80 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xe2>
 8010b7c:	3301      	adds	r3, #1
 8010b7e:	600b      	str	r3, [r1, #0]
 8010b80:	6803      	ldr	r3, [r0, #0]
 8010b82:	2b00      	cmp	r3, #0
 8010b84:	d036      	beq.n	8010bf4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x156>
 8010b86:	881b      	ldrh	r3, [r3, #0]
 8010b88:	2b2a      	cmp	r3, #42	@ 0x2a
 8010b8a:	d137      	bne.n	8010bfc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 8010b8c:	f04f 33ff 	mov.w	r3, #4294967295
 8010b90:	602b      	str	r3, [r5, #0]
 8010b92:	6803      	ldr	r3, [r0, #0]
 8010b94:	b10b      	cbz	r3, 8010b9a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xfc>
 8010b96:	3302      	adds	r3, #2
 8010b98:	6003      	str	r3, [r0, #0]
 8010b9a:	680b      	ldr	r3, [r1, #0]
 8010b9c:	b10b      	cbz	r3, 8010ba2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 8010b9e:	3301      	adds	r3, #1
 8010ba0:	600b      	str	r3, [r1, #0]
 8010ba2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010ba6:	680c      	ldr	r4, [r1, #0]
 8010ba8:	b134      	cbz	r4, 8010bb8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 8010baa:	7824      	ldrb	r4, [r4, #0]
 8010bac:	e7cc      	b.n	8010b48 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 8010bae:	680b      	ldr	r3, [r1, #0]
 8010bb0:	2b00      	cmp	r3, #0
 8010bb2:	d0f6      	beq.n	8010ba2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 8010bb4:	781c      	ldrb	r4, [r3, #0]
 8010bb6:	e7d7      	b.n	8010b68 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 8010bb8:	2300      	movs	r3, #0
 8010bba:	6033      	str	r3, [r6, #0]
 8010bbc:	220a      	movs	r2, #10
 8010bbe:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8010bc2:	fa1f f38c 	uxth.w	r3, ip
 8010bc6:	2b09      	cmp	r3, #9
 8010bc8:	d8ce      	bhi.n	8010b68 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 8010bca:	6833      	ldr	r3, [r6, #0]
 8010bcc:	fb02 c303 	mla	r3, r2, r3, ip
 8010bd0:	6033      	str	r3, [r6, #0]
 8010bd2:	6803      	ldr	r3, [r0, #0]
 8010bd4:	b10b      	cbz	r3, 8010bda <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x13c>
 8010bd6:	3302      	adds	r3, #2
 8010bd8:	6003      	str	r3, [r0, #0]
 8010bda:	680b      	ldr	r3, [r1, #0]
 8010bdc:	b10b      	cbz	r3, 8010be2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x144>
 8010bde:	3301      	adds	r3, #1
 8010be0:	600b      	str	r3, [r1, #0]
 8010be2:	6803      	ldr	r3, [r0, #0]
 8010be4:	b10b      	cbz	r3, 8010bea <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x14c>
 8010be6:	881c      	ldrh	r4, [r3, #0]
 8010be8:	e7e9      	b.n	8010bbe <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 8010bea:	680c      	ldr	r4, [r1, #0]
 8010bec:	2c00      	cmp	r4, #0
 8010bee:	d0e6      	beq.n	8010bbe <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 8010bf0:	7824      	ldrb	r4, [r4, #0]
 8010bf2:	e7e4      	b.n	8010bbe <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 8010bf4:	680b      	ldr	r3, [r1, #0]
 8010bf6:	b10b      	cbz	r3, 8010bfc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 8010bf8:	781b      	ldrb	r3, [r3, #0]
 8010bfa:	e7c5      	b.n	8010b88 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xea>
 8010bfc:	2200      	movs	r2, #0
 8010bfe:	602a      	str	r2, [r5, #0]
 8010c00:	240a      	movs	r4, #10
 8010c02:	3b30      	subs	r3, #48	@ 0x30
 8010c04:	b29e      	uxth	r6, r3
 8010c06:	2e09      	cmp	r6, #9
 8010c08:	682a      	ldr	r2, [r5, #0]
 8010c0a:	d813      	bhi.n	8010c34 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x196>
 8010c0c:	fb04 3302 	mla	r3, r4, r2, r3
 8010c10:	602b      	str	r3, [r5, #0]
 8010c12:	6803      	ldr	r3, [r0, #0]
 8010c14:	b10b      	cbz	r3, 8010c1a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x17c>
 8010c16:	3302      	adds	r3, #2
 8010c18:	6003      	str	r3, [r0, #0]
 8010c1a:	680b      	ldr	r3, [r1, #0]
 8010c1c:	b10b      	cbz	r3, 8010c22 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x184>
 8010c1e:	3301      	adds	r3, #1
 8010c20:	600b      	str	r3, [r1, #0]
 8010c22:	6803      	ldr	r3, [r0, #0]
 8010c24:	b10b      	cbz	r3, 8010c2a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x18c>
 8010c26:	881b      	ldrh	r3, [r3, #0]
 8010c28:	e7eb      	b.n	8010c02 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 8010c2a:	680b      	ldr	r3, [r1, #0]
 8010c2c:	2b00      	cmp	r3, #0
 8010c2e:	d0e8      	beq.n	8010c02 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 8010c30:	781b      	ldrb	r3, [r3, #0]
 8010c32:	e7e6      	b.n	8010c02 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 8010c34:	2a06      	cmp	r2, #6
 8010c36:	bfa8      	it	ge
 8010c38:	2206      	movge	r2, #6
 8010c3a:	602a      	str	r2, [r5, #0]
 8010c3c:	e7b1      	b.n	8010ba2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>

08010c3e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>:
 8010c3e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c42:	b0a3      	sub	sp, #140	@ 0x8c
 8010c44:	2600      	movs	r6, #0
 8010c46:	f10d 0944 	add.w	r9, sp, #68	@ 0x44
 8010c4a:	4607      	mov	r7, r0
 8010c4c:	4688      	mov	r8, r1
 8010c4e:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8010c52:	4631      	mov	r1, r6
 8010c54:	2242      	movs	r2, #66	@ 0x42
 8010c56:	4648      	mov	r0, r9
 8010c58:	9c2c      	ldr	r4, [sp, #176]	@ 0xb0
 8010c5a:	960d      	str	r6, [sp, #52]	@ 0x34
 8010c5c:	f003 fe79 	bl	8014952 <memset>
 8010c60:	b15f      	cbz	r7, 8010c7a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x3c>
 8010c62:	f108 3aff 	add.w	sl, r8, #4294967295
 8010c66:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010c68:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010c6a:	b152      	cbz	r2, 8010c82 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x44>
 8010c6c:	8812      	ldrh	r2, [r2, #0]
 8010c6e:	b10a      	cbz	r2, 8010c74 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 8010c70:	459a      	cmp	sl, r3
 8010c72:	dc2e      	bgt.n	8010cd2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x94>
 8010c74:	2200      	movs	r2, #0
 8010c76:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 8010c7a:	4638      	mov	r0, r7
 8010c7c:	b023      	add	sp, #140	@ 0x8c
 8010c7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c82:	9a08      	ldr	r2, [sp, #32]
 8010c84:	2a00      	cmp	r2, #0
 8010c86:	d0f5      	beq.n	8010c74 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 8010c88:	7812      	ldrb	r2, [r2, #0]
 8010c8a:	e7f0      	b.n	8010c6e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x30>
 8010c8c:	2d00      	cmp	r5, #0
 8010c8e:	d0ea      	beq.n	8010c66 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8010c90:	782a      	ldrb	r2, [r5, #0]
 8010c92:	b142      	cbz	r2, 8010ca6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x68>
 8010c94:	2a25      	cmp	r2, #37	@ 0x25
 8010c96:	d001      	beq.n	8010c9c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x5e>
 8010c98:	459a      	cmp	sl, r3
 8010c9a:	dc08      	bgt.n	8010cae <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x70>
 8010c9c:	f1bb 0f00 	cmp.w	fp, #0
 8010ca0:	d121      	bne.n	8010ce6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xa8>
 8010ca2:	2d00      	cmp	r5, #0
 8010ca4:	d0df      	beq.n	8010c66 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8010ca6:	782a      	ldrb	r2, [r5, #0]
 8010ca8:	f04f 0b00 	mov.w	fp, #0
 8010cac:	e01d      	b.n	8010cea <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xac>
 8010cae:	f1bb 0f00 	cmp.w	fp, #0
 8010cb2:	d078      	beq.n	8010da6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x168>
 8010cb4:	f8bb 2000 	ldrh.w	r2, [fp]
 8010cb8:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 8010cbc:	f1bb 0f00 	cmp.w	fp, #0
 8010cc0:	d002      	beq.n	8010cc8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x8a>
 8010cc2:	f10b 0202 	add.w	r2, fp, #2
 8010cc6:	9209      	str	r2, [sp, #36]	@ 0x24
 8010cc8:	b10d      	cbz	r5, 8010cce <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x90>
 8010cca:	3501      	adds	r5, #1
 8010ccc:	9508      	str	r5, [sp, #32]
 8010cce:	3301      	adds	r3, #1
 8010cd0:	930d      	str	r3, [sp, #52]	@ 0x34
 8010cd2:	e9dd 5b08 	ldrd	r5, fp, [sp, #32]
 8010cd6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010cd8:	f1bb 0f00 	cmp.w	fp, #0
 8010cdc:	d0d6      	beq.n	8010c8c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x4e>
 8010cde:	f8bb 2000 	ldrh.w	r2, [fp]
 8010ce2:	2a00      	cmp	r2, #0
 8010ce4:	d1d6      	bne.n	8010c94 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x56>
 8010ce6:	f8bb 2000 	ldrh.w	r2, [fp]
 8010cea:	2a00      	cmp	r2, #0
 8010cec:	d0bb      	beq.n	8010c66 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8010cee:	459a      	cmp	sl, r3
 8010cf0:	ddb9      	ble.n	8010c66 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8010cf2:	f8ad 6032 	strh.w	r6, [sp, #50]	@ 0x32
 8010cf6:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 8010cfa:	f88d 602e 	strb.w	r6, [sp, #46]	@ 0x2e
 8010cfe:	f88d 602f 	strb.w	r6, [sp, #47]	@ 0x2f
 8010d02:	f88d 6030 	strb.w	r6, [sp, #48]	@ 0x30
 8010d06:	960e      	str	r6, [sp, #56]	@ 0x38
 8010d08:	f88d 6031 	strb.w	r6, [sp, #49]	@ 0x31
 8010d0c:	960f      	str	r6, [sp, #60]	@ 0x3c
 8010d0e:	f1bb 0f00 	cmp.w	fp, #0
 8010d12:	d002      	beq.n	8010d1a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xdc>
 8010d14:	f10b 0302 	add.w	r3, fp, #2
 8010d18:	9309      	str	r3, [sp, #36]	@ 0x24
 8010d1a:	b10d      	cbz	r5, 8010d20 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xe2>
 8010d1c:	1c6b      	adds	r3, r5, #1
 8010d1e:	9308      	str	r3, [sp, #32]
 8010d20:	ab0f      	add	r3, sp, #60	@ 0x3c
 8010d22:	9305      	str	r3, [sp, #20]
 8010d24:	f10d 0331 	add.w	r3, sp, #49	@ 0x31
 8010d28:	9304      	str	r3, [sp, #16]
 8010d2a:	ab0e      	add	r3, sp, #56	@ 0x38
 8010d2c:	9303      	str	r3, [sp, #12]
 8010d2e:	ab0c      	add	r3, sp, #48	@ 0x30
 8010d30:	9302      	str	r3, [sp, #8]
 8010d32:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 8010d36:	9301      	str	r3, [sp, #4]
 8010d38:	f10d 032e 	add.w	r3, sp, #46	@ 0x2e
 8010d3c:	9300      	str	r3, [sp, #0]
 8010d3e:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 8010d42:	f10d 032d 	add.w	r3, sp, #45	@ 0x2d
 8010d46:	a908      	add	r1, sp, #32
 8010d48:	a809      	add	r0, sp, #36	@ 0x24
 8010d4a:	f7ff fea8 	bl	8010a9e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>
 8010d4e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010d50:	2b00      	cmp	r3, #0
 8010d52:	bfbe      	ittt	lt
 8010d54:	6823      	ldrlt	r3, [r4, #0]
 8010d56:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 8010d5a:	930e      	strlt	r3, [sp, #56]	@ 0x38
 8010d5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010d5e:	bfb8      	it	lt
 8010d60:	3404      	addlt	r4, #4
 8010d62:	2b00      	cmp	r3, #0
 8010d64:	bfb8      	it	lt
 8010d66:	6823      	ldrlt	r3, [r4, #0]
 8010d68:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 8010d6c:	bfbe      	ittt	lt
 8010d6e:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 8010d72:	930f      	strlt	r3, [sp, #60]	@ 0x3c
 8010d74:	3404      	addlt	r4, #4
 8010d76:	b1d9      	cbz	r1, 8010db0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x172>
 8010d78:	880b      	ldrh	r3, [r1, #0]
 8010d7a:	2b69      	cmp	r3, #105	@ 0x69
 8010d7c:	d01f      	beq.n	8010dbe <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x180>
 8010d7e:	d82f      	bhi.n	8010de0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a2>
 8010d80:	2b58      	cmp	r3, #88	@ 0x58
 8010d82:	d01c      	beq.n	8010dbe <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x180>
 8010d84:	d818      	bhi.n	8010db8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17a>
 8010d86:	2b25      	cmp	r3, #37	@ 0x25
 8010d88:	d034      	beq.n	8010df4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1b6>
 8010d8a:	e9cd 5b08 	strd	r5, fp, [sp, #32]
 8010d8e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010d90:	f1bb 0f00 	cmp.w	fp, #0
 8010d94:	f000 80b8 	beq.w	8010f08 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2ca>
 8010d98:	f8bb 5000 	ldrh.w	r5, [fp]
 8010d9c:	f827 5013 	strh.w	r5, [r7, r3, lsl #1]
 8010da0:	3301      	adds	r3, #1
 8010da2:	930d      	str	r3, [sp, #52]	@ 0x34
 8010da4:	e029      	b.n	8010dfa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1bc>
 8010da6:	b10d      	cbz	r5, 8010dac <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x16e>
 8010da8:	782a      	ldrb	r2, [r5, #0]
 8010daa:	e785      	b.n	8010cb8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 8010dac:	462a      	mov	r2, r5
 8010dae:	e783      	b.n	8010cb8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 8010db0:	2a00      	cmp	r2, #0
 8010db2:	d0ea      	beq.n	8010d8a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14c>
 8010db4:	7813      	ldrb	r3, [r2, #0]
 8010db6:	e7e0      	b.n	8010d7a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x13c>
 8010db8:	3b63      	subs	r3, #99	@ 0x63
 8010dba:	2b01      	cmp	r3, #1
 8010dbc:	d8e5      	bhi.n	8010d8a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14c>
 8010dbe:	f8cd 9040 	str.w	r9, [sp, #64]	@ 0x40
 8010dc2:	b329      	cbz	r1, 8010e10 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d2>
 8010dc4:	880b      	ldrh	r3, [r1, #0]
 8010dc6:	2b69      	cmp	r3, #105	@ 0x69
 8010dc8:	d063      	beq.n	8010e92 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x254>
 8010dca:	d825      	bhi.n	8010e18 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1da>
 8010dcc:	2b63      	cmp	r3, #99	@ 0x63
 8010dce:	d038      	beq.n	8010e42 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x204>
 8010dd0:	2b64      	cmp	r3, #100	@ 0x64
 8010dd2:	d05e      	beq.n	8010e92 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x254>
 8010dd4:	2b58      	cmp	r3, #88	@ 0x58
 8010dd6:	d07b      	beq.n	8010ed0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x292>
 8010dd8:	f8ad 6044 	strh.w	r6, [sp, #68]	@ 0x44
 8010ddc:	4625      	mov	r5, r4
 8010dde:	e036      	b.n	8010e4e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x210>
 8010de0:	2b73      	cmp	r3, #115	@ 0x73
 8010de2:	d0ec      	beq.n	8010dbe <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x180>
 8010de4:	d802      	bhi.n	8010dec <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ae>
 8010de6:	2b6f      	cmp	r3, #111	@ 0x6f
 8010de8:	d1cf      	bne.n	8010d8a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14c>
 8010dea:	e7e8      	b.n	8010dbe <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x180>
 8010dec:	2b75      	cmp	r3, #117	@ 0x75
 8010dee:	d0e6      	beq.n	8010dbe <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x180>
 8010df0:	2b78      	cmp	r3, #120	@ 0x78
 8010df2:	e7f9      	b.n	8010de8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1aa>
 8010df4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8010df6:	f827 3012 	strh.w	r3, [r7, r2, lsl #1]
 8010dfa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010dfc:	b10b      	cbz	r3, 8010e02 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1c4>
 8010dfe:	3302      	adds	r3, #2
 8010e00:	9309      	str	r3, [sp, #36]	@ 0x24
 8010e02:	9b08      	ldr	r3, [sp, #32]
 8010e04:	2b00      	cmp	r3, #0
 8010e06:	f43f af2e 	beq.w	8010c66 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8010e0a:	3301      	adds	r3, #1
 8010e0c:	9308      	str	r3, [sp, #32]
 8010e0e:	e72a      	b.n	8010c66 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8010e10:	2a00      	cmp	r2, #0
 8010e12:	d0e1      	beq.n	8010dd8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x19a>
 8010e14:	7813      	ldrb	r3, [r2, #0]
 8010e16:	e7d6      	b.n	8010dc6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x188>
 8010e18:	2b73      	cmp	r3, #115	@ 0x73
 8010e1a:	d036      	beq.n	8010e8a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24c>
 8010e1c:	d807      	bhi.n	8010e2e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1f0>
 8010e1e:	2b6f      	cmp	r3, #111	@ 0x6f
 8010e20:	d1da      	bne.n	8010dd8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x19a>
 8010e22:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8010e24:	1d25      	adds	r5, r4, #4
 8010e26:	eba8 0202 	sub.w	r2, r8, r2
 8010e2a:	2308      	movs	r3, #8
 8010e2c:	e04a      	b.n	8010ec4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x286>
 8010e2e:	2b75      	cmp	r3, #117	@ 0x75
 8010e30:	d043      	beq.n	8010eba <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x27c>
 8010e32:	2b78      	cmp	r3, #120	@ 0x78
 8010e34:	d1d0      	bne.n	8010dd8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x19a>
 8010e36:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8010e38:	1d25      	adds	r5, r4, #4
 8010e3a:	eba8 0202 	sub.w	r2, r8, r2
 8010e3e:	2310      	movs	r3, #16
 8010e40:	e040      	b.n	8010ec4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x286>
 8010e42:	6823      	ldr	r3, [r4, #0]
 8010e44:	f8ad 3044 	strh.w	r3, [sp, #68]	@ 0x44
 8010e48:	1d25      	adds	r5, r4, #4
 8010e4a:	f8ad 6046 	strh.w	r6, [sp, #70]	@ 0x46
 8010e4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010e50:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 8010e54:	2b00      	cmp	r3, #0
 8010e56:	d052      	beq.n	8010efe <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2c0>
 8010e58:	881a      	ldrh	r2, [r3, #0]
 8010e5a:	f89d 3031 	ldrb.w	r3, [sp, #49]	@ 0x31
 8010e5e:	a80d      	add	r0, sp, #52	@ 0x34
 8010e60:	9005      	str	r0, [sp, #20]
 8010e62:	f89d 002d 	ldrb.w	r0, [sp, #45]	@ 0x2d
 8010e66:	9004      	str	r0, [sp, #16]
 8010e68:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8010e6a:	9003      	str	r0, [sp, #12]
 8010e6c:	f89d 0030 	ldrb.w	r0, [sp, #48]	@ 0x30
 8010e70:	9002      	str	r0, [sp, #8]
 8010e72:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8010e74:	9001      	str	r0, [sp, #4]
 8010e76:	f89d 002f 	ldrb.w	r0, [sp, #47]	@ 0x2f
 8010e7a:	9000      	str	r0, [sp, #0]
 8010e7c:	e9cd 8706 	strd	r8, r7, [sp, #24]
 8010e80:	a810      	add	r0, sp, #64	@ 0x40
 8010e82:	f7ff fd49 	bl	8010918 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>
 8010e86:	462c      	mov	r4, r5
 8010e88:	e7b7      	b.n	8010dfa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1bc>
 8010e8a:	6823      	ldr	r3, [r4, #0]
 8010e8c:	1d25      	adds	r5, r4, #4
 8010e8e:	9310      	str	r3, [sp, #64]	@ 0x40
 8010e90:	e7dd      	b.n	8010e4e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x210>
 8010e92:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8010e94:	6820      	ldr	r0, [r4, #0]
 8010e96:	eba8 0202 	sub.w	r2, r8, r2
 8010e9a:	230a      	movs	r3, #10
 8010e9c:	b292      	uxth	r2, r2
 8010e9e:	4649      	mov	r1, r9
 8010ea0:	f7ff fcf0 	bl	8010884 <_ZN8touchgfx7Unicode4itoaElPtti.part.2>
 8010ea4:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 8010ea8:	2b2d      	cmp	r3, #45	@ 0x2d
 8010eaa:	f104 0504 	add.w	r5, r4, #4
 8010eae:	d1ce      	bne.n	8010e4e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x210>
 8010eb0:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 8010eb4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010eb6:	3302      	adds	r3, #2
 8010eb8:	e7e9      	b.n	8010e8e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x250>
 8010eba:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8010ebc:	1d25      	adds	r5, r4, #4
 8010ebe:	eba8 0202 	sub.w	r2, r8, r2
 8010ec2:	230a      	movs	r3, #10
 8010ec4:	b292      	uxth	r2, r2
 8010ec6:	4649      	mov	r1, r9
 8010ec8:	6820      	ldr	r0, [r4, #0]
 8010eca:	f7ff fd07 	bl	80108dc <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>
 8010ece:	e7be      	b.n	8010e4e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x210>
 8010ed0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8010ed2:	6820      	ldr	r0, [r4, #0]
 8010ed4:	eba8 0202 	sub.w	r2, r8, r2
 8010ed8:	b292      	uxth	r2, r2
 8010eda:	2310      	movs	r3, #16
 8010edc:	4649      	mov	r1, r9
 8010ede:	f7ff fcfd 	bl	80108dc <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>
 8010ee2:	1d25      	adds	r5, r4, #4
 8010ee4:	f10d 0242 	add.w	r2, sp, #66	@ 0x42
 8010ee8:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 8010eec:	2b00      	cmp	r3, #0
 8010eee:	d0ae      	beq.n	8010e4e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x210>
 8010ef0:	f1a3 0161 	sub.w	r1, r3, #97	@ 0x61
 8010ef4:	2919      	cmp	r1, #25
 8010ef6:	d8f7      	bhi.n	8010ee8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2aa>
 8010ef8:	3b20      	subs	r3, #32
 8010efa:	8013      	strh	r3, [r2, #0]
 8010efc:	e7f4      	b.n	8010ee8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2aa>
 8010efe:	9a08      	ldr	r2, [sp, #32]
 8010f00:	2a00      	cmp	r2, #0
 8010f02:	d0aa      	beq.n	8010e5a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21c>
 8010f04:	7812      	ldrb	r2, [r2, #0]
 8010f06:	e7a8      	b.n	8010e5a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21c>
 8010f08:	2d00      	cmp	r5, #0
 8010f0a:	f43f af47 	beq.w	8010d9c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15e>
 8010f0e:	782d      	ldrb	r5, [r5, #0]
 8010f10:	e744      	b.n	8010d9c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15e>

08010f12 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>:
 8010f12:	b507      	push	{r0, r1, r2, lr}
 8010f14:	9300      	str	r3, [sp, #0]
 8010f16:	4613      	mov	r3, r2
 8010f18:	2200      	movs	r2, #0
 8010f1a:	f7ff fe90 	bl	8010c3e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>
 8010f1e:	b003      	add	sp, #12
 8010f20:	f85d fb04 	ldr.w	pc, [sp], #4

08010f24 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>:
 8010f24:	b40c      	push	{r2, r3}
 8010f26:	b507      	push	{r0, r1, r2, lr}
 8010f28:	ab04      	add	r3, sp, #16
 8010f2a:	f853 2b04 	ldr.w	r2, [r3], #4
 8010f2e:	9301      	str	r3, [sp, #4]
 8010f30:	f7ff ffef 	bl	8010f12 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
 8010f34:	b003      	add	sp, #12
 8010f36:	f85d eb04 	ldr.w	lr, [sp], #4
 8010f3a:	b002      	add	sp, #8
 8010f3c:	4770      	bx	lr
	...

08010f40 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 8010f40:	4b01      	ldr	r3, [pc, #4]	@ (8010f48 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 8010f42:	6018      	str	r0, [r3, #0]
 8010f44:	4770      	bx	lr
 8010f46:	bf00      	nop
 8010f48:	20014fb4 	.word	0x20014fb4

08010f4c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 8010f4c:	4b06      	ldr	r3, [pc, #24]	@ (8010f68 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 8010f4e:	881a      	ldrh	r2, [r3, #0]
 8010f50:	4282      	cmp	r2, r0
 8010f52:	d807      	bhi.n	8010f64 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 8010f54:	4b05      	ldr	r3, [pc, #20]	@ (8010f6c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 8010f56:	881b      	ldrh	r3, [r3, #0]
 8010f58:	4413      	add	r3, r2
 8010f5a:	4298      	cmp	r0, r3
 8010f5c:	bfac      	ite	ge
 8010f5e:	2000      	movge	r0, #0
 8010f60:	2001      	movlt	r0, #1
 8010f62:	4770      	bx	lr
 8010f64:	2000      	movs	r0, #0
 8010f66:	4770      	bx	lr
 8010f68:	20014fd4 	.word	0x20014fd4
 8010f6c:	20014fd8 	.word	0x20014fd8

08010f70 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 8010f70:	b508      	push	{r3, lr}
 8010f72:	4601      	mov	r1, r0
 8010f74:	f7ff ffea 	bl	8010f4c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 8010f78:	b118      	cbz	r0, 8010f82 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 8010f7a:	4b02      	ldr	r3, [pc, #8]	@ (8010f84 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 8010f7c:	681b      	ldr	r3, [r3, #0]
 8010f7e:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8010f82:	bd08      	pop	{r3, pc}
 8010f84:	20014fb8 	.word	0x20014fb8

08010f88 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 8010f88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010f8a:	4c24      	ldr	r4, [pc, #144]	@ (801101c <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
 8010f8c:	6823      	ldr	r3, [r4, #0]
 8010f8e:	2b00      	cmp	r3, #0
 8010f90:	d042      	beq.n	8011018 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 8010f92:	4a23      	ldr	r2, [pc, #140]	@ (8011020 <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 8010f94:	4d23      	ldr	r5, [pc, #140]	@ (8011024 <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 8010f96:	8811      	ldrh	r1, [r2, #0]
 8010f98:	f8b5 c000 	ldrh.w	ip, [r5]
 8010f9c:	4822      	ldr	r0, [pc, #136]	@ (8011028 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 8010f9e:	4461      	add	r1, ip
 8010fa0:	1c4a      	adds	r2, r1, #1
 8010fa2:	f022 0201 	bic.w	r2, r2, #1
 8010fa6:	008f      	lsls	r7, r1, #2
 8010fa8:	0412      	lsls	r2, r2, #16
 8010faa:	19de      	adds	r6, r3, r7
 8010fac:	0c12      	lsrs	r2, r2, #16
 8010fae:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 8010fb2:	6006      	str	r6, [r0, #0]
 8010fb4:	4e1d      	ldr	r6, [pc, #116]	@ (801102c <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 8010fb6:	19da      	adds	r2, r3, r7
 8010fb8:	6032      	str	r2, [r6, #0]
 8010fba:	220e      	movs	r2, #14
 8010fbc:	fb02 f20c 	mul.w	r2, r2, ip
 8010fc0:	3203      	adds	r2, #3
 8010fc2:	f022 0203 	bic.w	r2, r2, #3
 8010fc6:	443a      	add	r2, r7
 8010fc8:	4f19      	ldr	r7, [pc, #100]	@ (8011030 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 8010fca:	4413      	add	r3, r2
 8010fcc:	603b      	str	r3, [r7, #0]
 8010fce:	4f19      	ldr	r7, [pc, #100]	@ (8011034 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 8010fd0:	2300      	movs	r3, #0
 8010fd2:	803b      	strh	r3, [r7, #0]
 8010fd4:	4f18      	ldr	r7, [pc, #96]	@ (8011038 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 8010fd6:	683f      	ldr	r7, [r7, #0]
 8010fd8:	1aba      	subs	r2, r7, r2
 8010fda:	4f18      	ldr	r7, [pc, #96]	@ (801103c <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 8010fdc:	603a      	str	r2, [r7, #0]
 8010fde:	4a18      	ldr	r2, [pc, #96]	@ (8011040 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 8010fe0:	469c      	mov	ip, r3
 8010fe2:	8013      	strh	r3, [r2, #0]
 8010fe4:	f64f 77ff 	movw	r7, #65535	@ 0xffff
 8010fe8:	428b      	cmp	r3, r1
 8010fea:	d10d      	bne.n	8011008 <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
 8010fec:	882d      	ldrh	r5, [r5, #0]
 8010fee:	6830      	ldr	r0, [r6, #0]
 8010ff0:	2300      	movs	r3, #0
 8010ff2:	240e      	movs	r4, #14
 8010ff4:	429d      	cmp	r5, r3
 8010ff6:	d90f      	bls.n	8011018 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 8010ff8:	fb04 0203 	mla	r2, r4, r3, r0
 8010ffc:	3301      	adds	r3, #1
 8010ffe:	7b11      	ldrb	r1, [r2, #12]
 8011000:	f36f 1145 	bfc	r1, #5, #1
 8011004:	7311      	strb	r1, [r2, #12]
 8011006:	e7f5      	b.n	8010ff4 <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
 8011008:	6822      	ldr	r2, [r4, #0]
 801100a:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 801100e:	6802      	ldr	r2, [r0, #0]
 8011010:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
 8011014:	3301      	adds	r3, #1
 8011016:	e7e7      	b.n	8010fe8 <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
 8011018:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801101a:	bf00      	nop
 801101c:	20014fb8 	.word	0x20014fb8
 8011020:	20014fd4 	.word	0x20014fd4
 8011024:	20014fd8 	.word	0x20014fd8
 8011028:	20014fcc 	.word	0x20014fcc
 801102c:	20014fbc 	.word	0x20014fbc
 8011030:	20014fc4 	.word	0x20014fc4
 8011034:	20014fd6 	.word	0x20014fd6
 8011038:	20014fc0 	.word	0x20014fc0
 801103c:	20014fd0 	.word	0x20014fd0
 8011040:	20014fc8 	.word	0x20014fc8

08011044 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 8011044:	4b06      	ldr	r3, [pc, #24]	@ (8011060 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1c>)
 8011046:	681b      	ldr	r3, [r3, #0]
 8011048:	b943      	cbnz	r3, 801105c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 801104a:	b139      	cbz	r1, 801105c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 801104c:	4b05      	ldr	r3, [pc, #20]	@ (8011064 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x20>)
 801104e:	801a      	strh	r2, [r3, #0]
 8011050:	4b05      	ldr	r3, [pc, #20]	@ (8011068 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x24>)
 8011052:	6019      	str	r1, [r3, #0]
 8011054:	4b05      	ldr	r3, [pc, #20]	@ (801106c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x28>)
 8011056:	6018      	str	r0, [r3, #0]
 8011058:	f7ff bf96 	b.w	8010f88 <_ZN8touchgfx6Bitmap10clearCacheEv>
 801105c:	4770      	bx	lr
 801105e:	bf00      	nop
 8011060:	20014fc4 	.word	0x20014fc4
 8011064:	20014fd8 	.word	0x20014fd8
 8011068:	20014fc0 	.word	0x20014fc0
 801106c:	20014fb8 	.word	0x20014fb8

08011070 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 8011070:	b470      	push	{r4, r5, r6}
 8011072:	4c07      	ldr	r4, [pc, #28]	@ (8011090 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 8011074:	6826      	ldr	r6, [r4, #0]
 8011076:	4605      	mov	r5, r0
 8011078:	4610      	mov	r0, r2
 801107a:	9a03      	ldr	r2, [sp, #12]
 801107c:	b936      	cbnz	r6, 801108c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 801107e:	6025      	str	r5, [r4, #0]
 8011080:	4c04      	ldr	r4, [pc, #16]	@ (8011094 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 8011082:	8021      	strh	r1, [r4, #0]
 8011084:	bc70      	pop	{r4, r5, r6}
 8011086:	4619      	mov	r1, r3
 8011088:	f7ff bfdc 	b.w	8011044 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 801108c:	bc70      	pop	{r4, r5, r6}
 801108e:	4770      	bx	lr
 8011090:	20014fdc 	.word	0x20014fdc
 8011094:	20014fd4 	.word	0x20014fd4

08011098 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 8011098:	4a12      	ldr	r2, [pc, #72]	@ (80110e4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
 801109a:	8803      	ldrh	r3, [r0, #0]
 801109c:	8812      	ldrh	r2, [r2, #0]
 801109e:	4293      	cmp	r3, r2
 80110a0:	d207      	bcs.n	80110b2 <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
 80110a2:	4a11      	ldr	r2, [pc, #68]	@ (80110e8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 80110a4:	6812      	ldr	r2, [r2, #0]
 80110a6:	2114      	movs	r1, #20
 80110a8:	fb01 2303 	mla	r3, r1, r3, r2
 80110ac:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 80110b0:	4770      	bx	lr
 80110b2:	490e      	ldr	r1, [pc, #56]	@ (80110ec <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 80110b4:	8809      	ldrh	r1, [r1, #0]
 80110b6:	4411      	add	r1, r2
 80110b8:	428b      	cmp	r3, r1
 80110ba:	da04      	bge.n	80110c6 <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
 80110bc:	1a9b      	subs	r3, r3, r2
 80110be:	4a0c      	ldr	r2, [pc, #48]	@ (80110f0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 80110c0:	210e      	movs	r1, #14
 80110c2:	6812      	ldr	r2, [r2, #0]
 80110c4:	e7f0      	b.n	80110a8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
 80110c6:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80110ca:	4293      	cmp	r3, r2
 80110cc:	d108      	bne.n	80110e0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
 80110ce:	4b09      	ldr	r3, [pc, #36]	@ (80110f4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 80110d0:	781b      	ldrb	r3, [r3, #0]
 80110d2:	b91b      	cbnz	r3, 80110dc <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
 80110d4:	4b08      	ldr	r3, [pc, #32]	@ (80110f8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 80110d6:	f9b3 0000 	ldrsh.w	r0, [r3]
 80110da:	4770      	bx	lr
 80110dc:	4b07      	ldr	r3, [pc, #28]	@ (80110fc <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 80110de:	e7fa      	b.n	80110d6 <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
 80110e0:	2000      	movs	r0, #0
 80110e2:	4770      	bx	lr
 80110e4:	20014fd4 	.word	0x20014fd4
 80110e8:	20014fdc 	.word	0x20014fdc
 80110ec:	20014fd8 	.word	0x20014fd8
 80110f0:	20014fbc 	.word	0x20014fbc
 80110f4:	20014f4c 	.word	0x20014f4c
 80110f8:	20014f4e 	.word	0x20014f4e
 80110fc:	20014f50 	.word	0x20014f50

08011100 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 8011100:	4a12      	ldr	r2, [pc, #72]	@ (801114c <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
 8011102:	8803      	ldrh	r3, [r0, #0]
 8011104:	8812      	ldrh	r2, [r2, #0]
 8011106:	4293      	cmp	r3, r2
 8011108:	d207      	bcs.n	801111a <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
 801110a:	4a11      	ldr	r2, [pc, #68]	@ (8011150 <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 801110c:	6812      	ldr	r2, [r2, #0]
 801110e:	2114      	movs	r1, #20
 8011110:	fb01 2303 	mla	r3, r1, r3, r2
 8011114:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
 8011118:	4770      	bx	lr
 801111a:	490e      	ldr	r1, [pc, #56]	@ (8011154 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 801111c:	8809      	ldrh	r1, [r1, #0]
 801111e:	4411      	add	r1, r2
 8011120:	428b      	cmp	r3, r1
 8011122:	da04      	bge.n	801112e <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
 8011124:	1a9b      	subs	r3, r3, r2
 8011126:	4a0c      	ldr	r2, [pc, #48]	@ (8011158 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 8011128:	210e      	movs	r1, #14
 801112a:	6812      	ldr	r2, [r2, #0]
 801112c:	e7f0      	b.n	8011110 <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
 801112e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8011132:	4293      	cmp	r3, r2
 8011134:	d108      	bne.n	8011148 <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
 8011136:	4b09      	ldr	r3, [pc, #36]	@ (801115c <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 8011138:	781b      	ldrb	r3, [r3, #0]
 801113a:	b91b      	cbnz	r3, 8011144 <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
 801113c:	4b08      	ldr	r3, [pc, #32]	@ (8011160 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 801113e:	f9b3 0000 	ldrsh.w	r0, [r3]
 8011142:	4770      	bx	lr
 8011144:	4b07      	ldr	r3, [pc, #28]	@ (8011164 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 8011146:	e7fa      	b.n	801113e <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
 8011148:	2000      	movs	r0, #0
 801114a:	4770      	bx	lr
 801114c:	20014fd4 	.word	0x20014fd4
 8011150:	20014fdc 	.word	0x20014fdc
 8011154:	20014fd8 	.word	0x20014fd8
 8011158:	20014fbc 	.word	0x20014fbc
 801115c:	20014f4c 	.word	0x20014f4c
 8011160:	20014f50 	.word	0x20014f50
 8011164:	20014f4e 	.word	0x20014f4e

08011168 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 8011168:	b530      	push	{r4, r5, lr}
 801116a:	4a22      	ldr	r2, [pc, #136]	@ (80111f4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x8c>)
 801116c:	880b      	ldrh	r3, [r1, #0]
 801116e:	8812      	ldrh	r2, [r2, #0]
 8011170:	4293      	cmp	r3, r2
 8011172:	d213      	bcs.n	801119c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x34>
 8011174:	4a20      	ldr	r2, [pc, #128]	@ (80111f8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 8011176:	6812      	ldr	r2, [r2, #0]
 8011178:	2114      	movs	r1, #20
 801117a:	fb01 2303 	mla	r3, r1, r3, r2
 801117e:	8a1a      	ldrh	r2, [r3, #16]
 8011180:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 8011184:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 8011188:	8a5b      	ldrh	r3, [r3, #18]
 801118a:	8004      	strh	r4, [r0, #0]
 801118c:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8011190:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011194:	8041      	strh	r1, [r0, #2]
 8011196:	8082      	strh	r2, [r0, #4]
 8011198:	80c3      	strh	r3, [r0, #6]
 801119a:	e024      	b.n	80111e6 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x7e>
 801119c:	4917      	ldr	r1, [pc, #92]	@ (80111fc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 801119e:	8809      	ldrh	r1, [r1, #0]
 80111a0:	4411      	add	r1, r2
 80111a2:	428b      	cmp	r3, r1
 80111a4:	da10      	bge.n	80111c8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x60>
 80111a6:	1a9b      	subs	r3, r3, r2
 80111a8:	220e      	movs	r2, #14
 80111aa:	4353      	muls	r3, r2
 80111ac:	4a14      	ldr	r2, [pc, #80]	@ (8011200 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 80111ae:	6811      	ldr	r1, [r2, #0]
 80111b0:	18ca      	adds	r2, r1, r3
 80111b2:	5ecd      	ldrsh	r5, [r1, r3]
 80111b4:	f9b2 4002 	ldrsh.w	r4, [r2, #2]
 80111b8:	f9b2 1004 	ldrsh.w	r1, [r2, #4]
 80111bc:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
 80111c0:	8005      	strh	r5, [r0, #0]
 80111c2:	8044      	strh	r4, [r0, #2]
 80111c4:	8081      	strh	r1, [r0, #4]
 80111c6:	e7e7      	b.n	8011198 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 80111c8:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80111cc:	4293      	cmp	r3, r2
 80111ce:	d10b      	bne.n	80111e8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x80>
 80111d0:	4b0c      	ldr	r3, [pc, #48]	@ (8011204 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 80111d2:	f9b3 1000 	ldrsh.w	r1, [r3]
 80111d6:	4b0c      	ldr	r3, [pc, #48]	@ (8011208 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 80111d8:	8081      	strh	r1, [r0, #4]
 80111da:	f9b3 2000 	ldrsh.w	r2, [r3]
 80111de:	80c2      	strh	r2, [r0, #6]
 80111e0:	2300      	movs	r3, #0
 80111e2:	8003      	strh	r3, [r0, #0]
 80111e4:	8043      	strh	r3, [r0, #2]
 80111e6:	bd30      	pop	{r4, r5, pc}
 80111e8:	2300      	movs	r3, #0
 80111ea:	8003      	strh	r3, [r0, #0]
 80111ec:	8043      	strh	r3, [r0, #2]
 80111ee:	8083      	strh	r3, [r0, #4]
 80111f0:	e7d2      	b.n	8011198 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 80111f2:	bf00      	nop
 80111f4:	20014fd4 	.word	0x20014fd4
 80111f8:	20014fdc 	.word	0x20014fdc
 80111fc:	20014fd8 	.word	0x20014fd8
 8011200:	20014fbc 	.word	0x20014fbc
 8011204:	20014f48 	.word	0x20014f48
 8011208:	20014f4a 	.word	0x20014f4a

0801120c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 801120c:	4a17      	ldr	r2, [pc, #92]	@ (801126c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x60>)
 801120e:	8803      	ldrh	r3, [r0, #0]
 8011210:	8812      	ldrh	r2, [r2, #0]
 8011212:	4293      	cmp	r3, r2
 8011214:	d213      	bcs.n	801123e <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x32>
 8011216:	4a16      	ldr	r2, [pc, #88]	@ (8011270 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 8011218:	6812      	ldr	r2, [r2, #0]
 801121a:	2114      	movs	r1, #20
 801121c:	fb01 2303 	mla	r3, r1, r3, r2
 8011220:	8a1a      	ldrh	r2, [r3, #16]
 8011222:	8919      	ldrh	r1, [r3, #8]
 8011224:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8011228:	428a      	cmp	r2, r1
 801122a:	db1d      	blt.n	8011268 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 801122c:	8a58      	ldrh	r0, [r3, #18]
 801122e:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8011232:	895b      	ldrh	r3, [r3, #10]
 8011234:	4298      	cmp	r0, r3
 8011236:	bfac      	ite	ge
 8011238:	2000      	movge	r0, #0
 801123a:	2001      	movlt	r0, #1
 801123c:	4770      	bx	lr
 801123e:	490d      	ldr	r1, [pc, #52]	@ (8011274 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 8011240:	8809      	ldrh	r1, [r1, #0]
 8011242:	4411      	add	r1, r2
 8011244:	428b      	cmp	r3, r1
 8011246:	da0d      	bge.n	8011264 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x58>
 8011248:	1a9b      	subs	r3, r3, r2
 801124a:	4a0b      	ldr	r2, [pc, #44]	@ (8011278 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 801124c:	6812      	ldr	r2, [r2, #0]
 801124e:	210e      	movs	r1, #14
 8011250:	fb01 2303 	mla	r3, r1, r3, r2
 8011254:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 8011258:	891a      	ldrh	r2, [r3, #8]
 801125a:	4291      	cmp	r1, r2
 801125c:	db04      	blt.n	8011268 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 801125e:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 8011262:	e7e6      	b.n	8011232 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x26>
 8011264:	2000      	movs	r0, #0
 8011266:	4770      	bx	lr
 8011268:	2001      	movs	r0, #1
 801126a:	4770      	bx	lr
 801126c:	20014fd4 	.word	0x20014fd4
 8011270:	20014fdc 	.word	0x20014fdc
 8011274:	20014fd8 	.word	0x20014fd8
 8011278:	20014fbc 	.word	0x20014fbc

0801127c <_ZNK8touchgfx6Bitmap7getDataEv>:
 801127c:	4a12      	ldr	r2, [pc, #72]	@ (80112c8 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 801127e:	8803      	ldrh	r3, [r0, #0]
 8011280:	8811      	ldrh	r1, [r2, #0]
 8011282:	428b      	cmp	r3, r1
 8011284:	d20b      	bcs.n	801129e <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
 8011286:	4a11      	ldr	r2, [pc, #68]	@ (80112cc <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 8011288:	6812      	ldr	r2, [r2, #0]
 801128a:	b112      	cbz	r2, 8011292 <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 801128c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8011290:	b9c0      	cbnz	r0, 80112c4 <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
 8011292:	4a0f      	ldr	r2, [pc, #60]	@ (80112d0 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 8011294:	6811      	ldr	r1, [r2, #0]
 8011296:	2214      	movs	r2, #20
 8011298:	4353      	muls	r3, r2
 801129a:	58c8      	ldr	r0, [r1, r3]
 801129c:	4770      	bx	lr
 801129e:	4a0d      	ldr	r2, [pc, #52]	@ (80112d4 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 80112a0:	8812      	ldrh	r2, [r2, #0]
 80112a2:	440a      	add	r2, r1
 80112a4:	4293      	cmp	r3, r2
 80112a6:	da04      	bge.n	80112b2 <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
 80112a8:	4a08      	ldr	r2, [pc, #32]	@ (80112cc <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 80112aa:	6812      	ldr	r2, [r2, #0]
 80112ac:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80112b0:	4770      	bx	lr
 80112b2:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80112b6:	4293      	cmp	r3, r2
 80112b8:	d103      	bne.n	80112c2 <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 80112ba:	4b07      	ldr	r3, [pc, #28]	@ (80112d8 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 80112bc:	681b      	ldr	r3, [r3, #0]
 80112be:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 80112c0:	4770      	bx	lr
 80112c2:	2000      	movs	r0, #0
 80112c4:	4770      	bx	lr
 80112c6:	bf00      	nop
 80112c8:	20014fd4 	.word	0x20014fd4
 80112cc:	20014fb8 	.word	0x20014fb8
 80112d0:	20014fdc 	.word	0x20014fdc
 80112d4:	20014fd8 	.word	0x20014fd8
 80112d8:	20014f54 	.word	0x20014f54

080112dc <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 80112dc:	4b24      	ldr	r3, [pc, #144]	@ (8011370 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 80112de:	8802      	ldrh	r2, [r0, #0]
 80112e0:	8818      	ldrh	r0, [r3, #0]
 80112e2:	4282      	cmp	r2, r0
 80112e4:	d221      	bcs.n	801132a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
 80112e6:	4b23      	ldr	r3, [pc, #140]	@ (8011374 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 80112e8:	6819      	ldr	r1, [r3, #0]
 80112ea:	2314      	movs	r3, #20
 80112ec:	fb03 1302 	mla	r3, r3, r2, r1
 80112f0:	6858      	ldr	r0, [r3, #4]
 80112f2:	2800      	cmp	r0, #0
 80112f4:	d03a      	beq.n	801136c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 80112f6:	4920      	ldr	r1, [pc, #128]	@ (8011378 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 80112f8:	6809      	ldr	r1, [r1, #0]
 80112fa:	2900      	cmp	r1, #0
 80112fc:	d036      	beq.n	801136c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 80112fe:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8011302:	2900      	cmp	r1, #0
 8011304:	d032      	beq.n	801136c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 8011306:	891a      	ldrh	r2, [r3, #8]
 8011308:	8958      	ldrh	r0, [r3, #10]
 801130a:	4350      	muls	r0, r2
 801130c:	7c5a      	ldrb	r2, [r3, #17]
 801130e:	7cdb      	ldrb	r3, [r3, #19]
 8011310:	0952      	lsrs	r2, r2, #5
 8011312:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8011316:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 801131a:	2b0b      	cmp	r3, #11
 801131c:	bf18      	it	ne
 801131e:	0040      	lslne	r0, r0, #1
 8011320:	3003      	adds	r0, #3
 8011322:	f020 0003 	bic.w	r0, r0, #3
 8011326:	4408      	add	r0, r1
 8011328:	4770      	bx	lr
 801132a:	4b14      	ldr	r3, [pc, #80]	@ (801137c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 801132c:	881b      	ldrh	r3, [r3, #0]
 801132e:	4403      	add	r3, r0
 8011330:	429a      	cmp	r2, r3
 8011332:	da1a      	bge.n	801136a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 8011334:	4b12      	ldr	r3, [pc, #72]	@ (8011380 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 8011336:	681b      	ldr	r3, [r3, #0]
 8011338:	1a10      	subs	r0, r2, r0
 801133a:	210e      	movs	r1, #14
 801133c:	fb01 3000 	mla	r0, r1, r0, r3
 8011340:	7b03      	ldrb	r3, [r0, #12]
 8011342:	f003 031f 	and.w	r3, r3, #31
 8011346:	2b0b      	cmp	r3, #11
 8011348:	d10b      	bne.n	8011362 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
 801134a:	8903      	ldrh	r3, [r0, #8]
 801134c:	8940      	ldrh	r0, [r0, #10]
 801134e:	4358      	muls	r0, r3
 8011350:	4b09      	ldr	r3, [pc, #36]	@ (8011378 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 8011352:	6819      	ldr	r1, [r3, #0]
 8011354:	3003      	adds	r0, #3
 8011356:	f020 0303 	bic.w	r3, r0, #3
 801135a:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 801135e:	4418      	add	r0, r3
 8011360:	4770      	bx	lr
 8011362:	2b0d      	cmp	r3, #13
 8011364:	d101      	bne.n	801136a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 8011366:	300d      	adds	r0, #13
 8011368:	4770      	bx	lr
 801136a:	2000      	movs	r0, #0
 801136c:	4770      	bx	lr
 801136e:	bf00      	nop
 8011370:	20014fd4 	.word	0x20014fd4
 8011374:	20014fdc 	.word	0x20014fdc
 8011378:	20014fb8 	.word	0x20014fb8
 801137c:	20014fd8 	.word	0x20014fd8
 8011380:	20014fbc 	.word	0x20014fbc

08011384 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 8011384:	b510      	push	{r4, lr}
 8011386:	4b1f      	ldr	r3, [pc, #124]	@ (8011404 <_ZNK8touchgfx6Bitmap9getFormatEv+0x80>)
 8011388:	8802      	ldrh	r2, [r0, #0]
 801138a:	881b      	ldrh	r3, [r3, #0]
 801138c:	429a      	cmp	r2, r3
 801138e:	d21a      	bcs.n	80113c6 <_ZNK8touchgfx6Bitmap9getFormatEv+0x42>
 8011390:	4b1d      	ldr	r3, [pc, #116]	@ (8011408 <_ZNK8touchgfx6Bitmap9getFormatEv+0x84>)
 8011392:	681b      	ldr	r3, [r3, #0]
 8011394:	2114      	movs	r1, #20
 8011396:	fb01 3102 	mla	r1, r1, r2, r3
 801139a:	7c4b      	ldrb	r3, [r1, #17]
 801139c:	0958      	lsrs	r0, r3, #5
 801139e:	7ccb      	ldrb	r3, [r1, #19]
 80113a0:	491a      	ldr	r1, [pc, #104]	@ (801140c <_ZNK8touchgfx6Bitmap9getFormatEv+0x88>)
 80113a2:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80113a6:	6809      	ldr	r1, [r1, #0]
 80113a8:	ea43 03c0 	orr.w	r3, r3, r0, lsl #3
 80113ac:	b2d8      	uxtb	r0, r3
 80113ae:	b149      	cbz	r1, 80113c4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 80113b0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80113b4:	b132      	cbz	r2, 80113c4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 80113b6:	2b0e      	cmp	r3, #14
 80113b8:	d021      	beq.n	80113fe <_ZNK8touchgfx6Bitmap9getFormatEv+0x7a>
 80113ba:	280f      	cmp	r0, #15
 80113bc:	d01d      	beq.n	80113fa <_ZNK8touchgfx6Bitmap9getFormatEv+0x76>
 80113be:	2810      	cmp	r0, #16
 80113c0:	bf08      	it	eq
 80113c2:	2002      	moveq	r0, #2
 80113c4:	bd10      	pop	{r4, pc}
 80113c6:	4912      	ldr	r1, [pc, #72]	@ (8011410 <_ZNK8touchgfx6Bitmap9getFormatEv+0x8c>)
 80113c8:	8809      	ldrh	r1, [r1, #0]
 80113ca:	4419      	add	r1, r3
 80113cc:	428a      	cmp	r2, r1
 80113ce:	da09      	bge.n	80113e4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>
 80113d0:	1ad3      	subs	r3, r2, r3
 80113d2:	4a10      	ldr	r2, [pc, #64]	@ (8011414 <_ZNK8touchgfx6Bitmap9getFormatEv+0x90>)
 80113d4:	6812      	ldr	r2, [r2, #0]
 80113d6:	210e      	movs	r1, #14
 80113d8:	fb01 2303 	mla	r3, r1, r3, r2
 80113dc:	7b18      	ldrb	r0, [r3, #12]
 80113de:	f000 001f 	and.w	r0, r0, #31
 80113e2:	e7ef      	b.n	80113c4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 80113e4:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 80113e8:	429a      	cmp	r2, r3
 80113ea:	d108      	bne.n	80113fe <_ZNK8touchgfx6Bitmap9getFormatEv+0x7a>
 80113ec:	f7f8 fefe 	bl	800a1ec <_ZN8touchgfx3HAL3lcdEv>
 80113f0:	6803      	ldr	r3, [r0, #0]
 80113f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80113f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80113f8:	4718      	bx	r3
 80113fa:	2001      	movs	r0, #1
 80113fc:	e7e2      	b.n	80113c4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 80113fe:	2000      	movs	r0, #0
 8011400:	e7e0      	b.n	80113c4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 8011402:	bf00      	nop
 8011404:	20014fd4 	.word	0x20014fd4
 8011408:	20014fdc 	.word	0x20014fdc
 801140c:	20014fb8 	.word	0x20014fb8
 8011410:	20014fd8 	.word	0x20014fd8
 8011414:	20014fbc 	.word	0x20014fbc

08011418 <_ZNK8touchgfx8LCD16bpp8bitDepthEv>:
 8011418:	2010      	movs	r0, #16
 801141a:	4770      	bx	lr

0801141c <_ZNK8touchgfx8LCD16bpp17framebufferFormatEv>:
 801141c:	2000      	movs	r0, #0
 801141e:	4770      	bx	lr

08011420 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv>:
 8011420:	4b02      	ldr	r3, [pc, #8]	@ (801142c <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0xc>)
 8011422:	8818      	ldrh	r0, [r3, #0]
 8011424:	0040      	lsls	r0, r0, #1
 8011426:	b280      	uxth	r0, r0
 8011428:	4770      	bx	lr
 801142a:	bf00      	nop
 801142c:	20014f4e 	.word	0x20014f4e

08011430 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 8011430:	2bff      	cmp	r3, #255	@ 0xff
 8011432:	d05e      	beq.n	80114f2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc2>
 8011434:	2a0b      	cmp	r2, #11
 8011436:	d058      	beq.n	80114ea <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xba>
 8011438:	d80e      	bhi.n	8011458 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 801143a:	2a03      	cmp	r2, #3
 801143c:	d04d      	beq.n	80114da <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xaa>
 801143e:	d804      	bhi.n	801144a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8011440:	2a01      	cmp	r2, #1
 8011442:	d04c      	beq.n	80114de <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xae>
 8011444:	d94d      	bls.n	80114e2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xb2>
 8011446:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8011448:	e031      	b.n	80114ae <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801144a:	2a09      	cmp	r2, #9
 801144c:	d04d      	beq.n	80114ea <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xba>
 801144e:	d84a      	bhi.n	80114e6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xb6>
 8011450:	2a08      	cmp	r2, #8
 8011452:	d048      	beq.n	80114e6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xb6>
 8011454:	2300      	movs	r3, #0
 8011456:	e02a      	b.n	80114ae <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8011458:	2a2f      	cmp	r2, #47	@ 0x2f
 801145a:	d02c      	beq.n	80114b6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x86>
 801145c:	d811      	bhi.n	8011482 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x52>
 801145e:	2a2d      	cmp	r2, #45	@ 0x2d
 8011460:	d018      	beq.n	8011494 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x64>
 8011462:	d831      	bhi.n	80114c8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x98>
 8011464:	2a2c      	cmp	r2, #44	@ 0x2c
 8011466:	d1f5      	bne.n	8011454 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8011468:	684a      	ldr	r2, [r1, #4]
 801146a:	7813      	ldrb	r3, [r2, #0]
 801146c:	7852      	ldrb	r2, [r2, #1]
 801146e:	2a00      	cmp	r2, #0
 8011470:	d1f0      	bne.n	8011454 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8011472:	2b01      	cmp	r3, #1
 8011474:	d01d      	beq.n	80114b2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 8011476:	2b00      	cmp	r3, #0
 8011478:	d02d      	beq.n	80114d6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 801147a:	2b02      	cmp	r3, #2
 801147c:	d1ea      	bne.n	8011454 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801147e:	68c3      	ldr	r3, [r0, #12]
 8011480:	e015      	b.n	80114ae <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8011482:	2a31      	cmp	r2, #49	@ 0x31
 8011484:	d004      	beq.n	8011490 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x60>
 8011486:	d332      	bcc.n	80114ee <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbe>
 8011488:	2a32      	cmp	r2, #50	@ 0x32
 801148a:	d030      	beq.n	80114ee <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbe>
 801148c:	2a33      	cmp	r2, #51	@ 0x33
 801148e:	d1e1      	bne.n	8011454 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8011490:	6f43      	ldr	r3, [r0, #116]	@ 0x74
 8011492:	e00c      	b.n	80114ae <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8011494:	684a      	ldr	r2, [r1, #4]
 8011496:	7813      	ldrb	r3, [r2, #0]
 8011498:	7852      	ldrb	r2, [r2, #1]
 801149a:	2a00      	cmp	r2, #0
 801149c:	d1da      	bne.n	8011454 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801149e:	2b01      	cmp	r3, #1
 80114a0:	d004      	beq.n	80114ac <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7c>
 80114a2:	d30f      	bcc.n	80114c4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x94>
 80114a4:	2b02      	cmp	r3, #2
 80114a6:	d1d5      	bne.n	8011454 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80114a8:	6943      	ldr	r3, [r0, #20]
 80114aa:	e000      	b.n	80114ae <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 80114ac:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80114ae:	4618      	mov	r0, r3
 80114b0:	4770      	bx	lr
 80114b2:	69c3      	ldr	r3, [r0, #28]
 80114b4:	e7fb      	b.n	80114ae <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 80114b6:	684b      	ldr	r3, [r1, #4]
 80114b8:	781a      	ldrb	r2, [r3, #0]
 80114ba:	785b      	ldrb	r3, [r3, #1]
 80114bc:	2b00      	cmp	r3, #0
 80114be:	d1c9      	bne.n	8011454 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80114c0:	2a00      	cmp	r2, #0
 80114c2:	d1f4      	bne.n	80114ae <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 80114c4:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80114c6:	e7f2      	b.n	80114ae <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 80114c8:	684b      	ldr	r3, [r1, #4]
 80114ca:	781a      	ldrb	r2, [r3, #0]
 80114cc:	785b      	ldrb	r3, [r3, #1]
 80114ce:	2b00      	cmp	r3, #0
 80114d0:	d1c0      	bne.n	8011454 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80114d2:	2a00      	cmp	r2, #0
 80114d4:	d1eb      	bne.n	80114ae <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 80114d6:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80114d8:	e7e9      	b.n	80114ae <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 80114da:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 80114dc:	e7e7      	b.n	80114ae <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 80114de:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 80114e0:	e7e5      	b.n	80114ae <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 80114e2:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 80114e4:	e7e3      	b.n	80114ae <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 80114e6:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 80114e8:	e7e1      	b.n	80114ae <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 80114ea:	6e43      	ldr	r3, [r0, #100]	@ 0x64
 80114ec:	e7df      	b.n	80114ae <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 80114ee:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 80114f0:	e7dd      	b.n	80114ae <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 80114f2:	2a0b      	cmp	r2, #11
 80114f4:	d059      	beq.n	80115aa <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x17a>
 80114f6:	d80e      	bhi.n	8011516 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe6>
 80114f8:	2a03      	cmp	r2, #3
 80114fa:	d050      	beq.n	801159e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x16e>
 80114fc:	d804      	bhi.n	8011508 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xd8>
 80114fe:	2a01      	cmp	r2, #1
 8011500:	d04f      	beq.n	80115a2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x172>
 8011502:	d950      	bls.n	80115a6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x176>
 8011504:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8011506:	e7d2      	b.n	80114ae <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8011508:	2a09      	cmp	r2, #9
 801150a:	d04e      	beq.n	80115aa <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x17a>
 801150c:	d801      	bhi.n	8011512 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe2>
 801150e:	2a08      	cmp	r2, #8
 8011510:	d1a0      	bne.n	8011454 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8011512:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 8011514:	e7cb      	b.n	80114ae <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8011516:	2a2f      	cmp	r2, #47	@ 0x2f
 8011518:	d02d      	beq.n	8011576 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x146>
 801151a:	d811      	bhi.n	8011540 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x110>
 801151c:	2a2d      	cmp	r2, #45	@ 0x2d
 801151e:	d018      	beq.n	8011552 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x122>
 8011520:	d833      	bhi.n	801158a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x15a>
 8011522:	2a2c      	cmp	r2, #44	@ 0x2c
 8011524:	d196      	bne.n	8011454 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8011526:	684a      	ldr	r2, [r1, #4]
 8011528:	7813      	ldrb	r3, [r2, #0]
 801152a:	7852      	ldrb	r2, [r2, #1]
 801152c:	2a00      	cmp	r2, #0
 801152e:	d191      	bne.n	8011454 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8011530:	2b01      	cmp	r3, #1
 8011532:	d01e      	beq.n	8011572 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 8011534:	2b00      	cmp	r3, #0
 8011536:	d030      	beq.n	801159a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x16a>
 8011538:	2b02      	cmp	r3, #2
 801153a:	d18b      	bne.n	8011454 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801153c:	6903      	ldr	r3, [r0, #16]
 801153e:	e7b6      	b.n	80114ae <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8011540:	2a31      	cmp	r2, #49	@ 0x31
 8011542:	d004      	beq.n	801154e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11e>
 8011544:	d333      	bcc.n	80115ae <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x17e>
 8011546:	2a32      	cmp	r2, #50	@ 0x32
 8011548:	d031      	beq.n	80115ae <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x17e>
 801154a:	2a33      	cmp	r2, #51	@ 0x33
 801154c:	d182      	bne.n	8011454 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801154e:	6f83      	ldr	r3, [r0, #120]	@ 0x78
 8011550:	e7ad      	b.n	80114ae <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8011552:	684a      	ldr	r2, [r1, #4]
 8011554:	7813      	ldrb	r3, [r2, #0]
 8011556:	7852      	ldrb	r2, [r2, #1]
 8011558:	2a00      	cmp	r2, #0
 801155a:	f47f af7b 	bne.w	8011454 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801155e:	2b01      	cmp	r3, #1
 8011560:	d005      	beq.n	801156e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 8011562:	d310      	bcc.n	8011586 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x156>
 8011564:	2b02      	cmp	r3, #2
 8011566:	f47f af75 	bne.w	8011454 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801156a:	6983      	ldr	r3, [r0, #24]
 801156c:	e79f      	b.n	80114ae <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801156e:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8011570:	e79d      	b.n	80114ae <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8011572:	6a03      	ldr	r3, [r0, #32]
 8011574:	e79b      	b.n	80114ae <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8011576:	684b      	ldr	r3, [r1, #4]
 8011578:	781a      	ldrb	r2, [r3, #0]
 801157a:	785b      	ldrb	r3, [r3, #1]
 801157c:	2b00      	cmp	r3, #0
 801157e:	f47f af69 	bne.w	8011454 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8011582:	2a00      	cmp	r2, #0
 8011584:	d193      	bne.n	80114ae <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8011586:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8011588:	e791      	b.n	80114ae <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801158a:	684b      	ldr	r3, [r1, #4]
 801158c:	781a      	ldrb	r2, [r3, #0]
 801158e:	785b      	ldrb	r3, [r3, #1]
 8011590:	2b00      	cmp	r3, #0
 8011592:	f47f af5f 	bne.w	8011454 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8011596:	2a00      	cmp	r2, #0
 8011598:	d189      	bne.n	80114ae <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801159a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801159c:	e787      	b.n	80114ae <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801159e:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 80115a0:	e785      	b.n	80114ae <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 80115a2:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 80115a4:	e783      	b.n	80114ae <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 80115a6:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 80115a8:	e781      	b.n	80114ae <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 80115aa:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 80115ac:	e77f      	b.n	80114ae <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 80115ae:	6f03      	ldr	r3, [r0, #112]	@ 0x70
 80115b0:	e77d      	b.n	80114ae <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>

080115b2 <_ZN8touchgfx8LCD16bppD1Ev>:
 80115b2:	4770      	bx	lr

080115b4 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L4D1Ev>:
 80115b4:	4770      	bx	lr

080115b6 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 80115b6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80115ba:	b088      	sub	sp, #32
 80115bc:	ac08      	add	r4, sp, #32
 80115be:	4606      	mov	r6, r0
 80115c0:	f824 3d0c 	strh.w	r3, [r4, #-12]!
 80115c4:	4620      	mov	r0, r4
 80115c6:	4688      	mov	r8, r1
 80115c8:	4691      	mov	r9, r2
 80115ca:	f7ff fe57 	bl	801127c <_ZNK8touchgfx6Bitmap7getDataEv>
 80115ce:	6833      	ldr	r3, [r6, #0]
 80115d0:	4605      	mov	r5, r0
 80115d2:	4620      	mov	r0, r4
 80115d4:	699f      	ldr	r7, [r3, #24]
 80115d6:	f7ff fd5f 	bl	8011098 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80115da:	4682      	mov	sl, r0
 80115dc:	4620      	mov	r0, r4
 80115de:	f7ff fd8f 	bl	8011100 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80115e2:	9500      	str	r5, [sp, #0]
 80115e4:	e9cd a001 	strd	sl, r0, [sp, #4]
 80115e8:	464b      	mov	r3, r9
 80115ea:	a806      	add	r0, sp, #24
 80115ec:	4642      	mov	r2, r8
 80115ee:	4631      	mov	r1, r6
 80115f0:	47b8      	blx	r7
 80115f2:	4628      	mov	r0, r5
 80115f4:	b008      	add	sp, #32
 80115f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

080115fc <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
 80115fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011600:	2300      	movs	r3, #0
 8011602:	9300      	str	r3, [sp, #0]
 8011604:	4b3d      	ldr	r3, [pc, #244]	@ (80116fc <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x100>)
 8011606:	781b      	ldrb	r3, [r3, #0]
 8011608:	2b00      	cmp	r3, #0
 801160a:	d137      	bne.n	801167c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x80>
 801160c:	4a3c      	ldr	r2, [pc, #240]	@ (8011700 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 801160e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8011612:	f8ad 2004 	strh.w	r2, [sp, #4]
 8011616:	2b00      	cmp	r3, #0
 8011618:	d132      	bne.n	8011680 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x84>
 801161a:	4b3a      	ldr	r3, [pc, #232]	@ (8011704 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 801161c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011620:	6808      	ldr	r0, [r1, #0]
 8011622:	6849      	ldr	r1, [r1, #4]
 8011624:	f8ad 3006 	strh.w	r3, [sp, #6]
 8011628:	ac02      	add	r4, sp, #8
 801162a:	ab02      	add	r3, sp, #8
 801162c:	c303      	stmia	r3!, {r0, r1}
 801162e:	4669      	mov	r1, sp
 8011630:	4620      	mov	r0, r4
 8011632:	f7fb ff2f 	bl	800d494 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8011636:	4668      	mov	r0, sp
 8011638:	f7fb ff04 	bl	800d444 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801163c:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8011640:	f8bd 2000 	ldrh.w	r2, [sp]
 8011644:	4d30      	ldr	r5, [pc, #192]	@ (8011708 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x10c>)
 8011646:	4413      	add	r3, r2
 8011648:	f8ad 3008 	strh.w	r3, [sp, #8]
 801164c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8011650:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8011654:	6828      	ldr	r0, [r5, #0]
 8011656:	4413      	add	r3, r2
 8011658:	f8ad 300a 	strh.w	r3, [sp, #10]
 801165c:	6803      	ldr	r3, [r0, #0]
 801165e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011660:	4798      	blx	r3
 8011662:	f010 0f01 	tst.w	r0, #1
 8011666:	462f      	mov	r7, r5
 8011668:	d00c      	beq.n	8011684 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x88>
 801166a:	6828      	ldr	r0, [r5, #0]
 801166c:	6803      	ldr	r3, [r0, #0]
 801166e:	e894 0006 	ldmia.w	r4, {r1, r2}
 8011672:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011674:	4798      	blx	r3
 8011676:	b004      	add	sp, #16
 8011678:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801167c:	4a21      	ldr	r2, [pc, #132]	@ (8011704 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 801167e:	e7c6      	b.n	801160e <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
 8011680:	4b1f      	ldr	r3, [pc, #124]	@ (8011700 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 8011682:	e7cb      	b.n	801161c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
 8011684:	6838      	ldr	r0, [r7, #0]
 8011686:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
 801168a:	6803      	ldr	r3, [r0, #0]
 801168c:	f9bd 500e 	ldrsh.w	r5, [sp, #14]
 8011690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011692:	4798      	blx	r3
 8011694:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 8011698:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801169c:	f8bd 6004 	ldrh.w	r6, [sp, #4]
 80116a0:	fb16 3602 	smlabb	r6, r6, r2, r3
 80116a4:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 80116a8:	6838      	ldr	r0, [r7, #0]
 80116aa:	6803      	ldr	r3, [r0, #0]
 80116ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80116ae:	4798      	blx	r3
 80116b0:	4a13      	ldr	r2, [pc, #76]	@ (8011700 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 80116b2:	f9bd 400a 	ldrsh.w	r4, [sp, #10]
 80116b6:	8813      	ldrh	r3, [r2, #0]
 80116b8:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 80116bc:	fb03 1404 	mla	r4, r3, r4, r1
 80116c0:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 80116c4:	435d      	muls	r5, r3
 80116c6:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 80116ca:	ea4f 0848 	mov.w	r8, r8, lsl #1
 80116ce:	4691      	mov	r9, r2
 80116d0:	6838      	ldr	r0, [r7, #0]
 80116d2:	42ac      	cmp	r4, r5
 80116d4:	6803      	ldr	r3, [r0, #0]
 80116d6:	d20e      	bcs.n	80116f6 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xfa>
 80116d8:	f8d3 a034 	ldr.w	sl, [r3, #52]	@ 0x34
 80116dc:	4632      	mov	r2, r6
 80116de:	4643      	mov	r3, r8
 80116e0:	4621      	mov	r1, r4
 80116e2:	47d0      	blx	sl
 80116e4:	f8b9 3000 	ldrh.w	r3, [r9]
 80116e8:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80116ec:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 80116f0:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 80116f4:	e7ec      	b.n	80116d0 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xd4>
 80116f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80116f8:	4798      	blx	r3
 80116fa:	e7bc      	b.n	8011676 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
 80116fc:	20014f4c 	.word	0x20014f4c
 8011700:	20014f4e 	.word	0x20014f4e
 8011704:	20014f50 	.word	0x20014f50
 8011708:	20014f54 	.word	0x20014f54

0801170c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 801170c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011710:	b08b      	sub	sp, #44	@ 0x2c
 8011712:	460f      	mov	r7, r1
 8011714:	f89d b050 	ldrb.w	fp, [sp, #80]	@ 0x50
 8011718:	f89d 4054 	ldrb.w	r4, [sp, #84]	@ 0x54
 801171c:	4616      	mov	r6, r2
 801171e:	f1bb 0f00 	cmp.w	fp, #0
 8011722:	d04a      	beq.n	80117ba <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xae>
 8011724:	6810      	ldr	r0, [r2, #0]
 8011726:	6851      	ldr	r1, [r2, #4]
 8011728:	ad06      	add	r5, sp, #24
 801172a:	c503      	stmia	r5!, {r0, r1}
 801172c:	6818      	ldr	r0, [r3, #0]
 801172e:	6859      	ldr	r1, [r3, #4]
 8011730:	ad08      	add	r5, sp, #32
 8011732:	c503      	stmia	r5!, {r0, r1}
 8011734:	a806      	add	r0, sp, #24
 8011736:	f7fb fe85 	bl	800d444 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801173a:	4631      	mov	r1, r6
 801173c:	a808      	add	r0, sp, #32
 801173e:	f7fb fea9 	bl	800d494 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8011742:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8011746:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 801174a:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 801174e:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	@ 0x24
 8011752:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	@ 0x26
 8011756:	fb16 2103 	smlabb	r1, r6, r3, r2
 801175a:	eb07 0641 	add.w	r6, r7, r1, lsl #1
 801175e:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 8011762:	4f5f      	ldr	r7, [pc, #380]	@ (80118e0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 8011764:	440a      	add	r2, r1
 8011766:	f8ad 2020 	strh.w	r2, [sp, #32]
 801176a:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801176e:	6838      	ldr	r0, [r7, #0]
 8011770:	4413      	add	r3, r2
 8011772:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 8011776:	6803      	ldr	r3, [r0, #0]
 8011778:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801177a:	4798      	blx	r3
 801177c:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 8011780:	46b9      	mov	r9, r7
 8011782:	d11d      	bne.n	80117c0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb4>
 8011784:	b9fc      	cbnz	r4, 80117c6 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 8011786:	f010 0f01 	tst.w	r0, #1
 801178a:	d01c      	beq.n	80117c6 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 801178c:	f8d9 0000 	ldr.w	r0, [r9]
 8011790:	f8bd 3022 	ldrh.w	r3, [sp, #34]	@ 0x22
 8011794:	6801      	ldr	r1, [r0, #0]
 8011796:	f8cd b00c 	str.w	fp, [sp, #12]
 801179a:	2700      	movs	r7, #0
 801179c:	e9cd 4704 	strd	r4, r7, [sp, #16]
 80117a0:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 80117a4:	9402      	str	r4, [sp, #8]
 80117a6:	b2ad      	uxth	r5, r5
 80117a8:	fa1f f488 	uxth.w	r4, r8
 80117ac:	9501      	str	r5, [sp, #4]
 80117ae:	9400      	str	r4, [sp, #0]
 80117b0:	6c4c      	ldr	r4, [r1, #68]	@ 0x44
 80117b2:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80117b6:	4631      	mov	r1, r6
 80117b8:	47a0      	blx	r4
 80117ba:	b00b      	add	sp, #44	@ 0x2c
 80117bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80117c0:	f010 0f04 	tst.w	r0, #4
 80117c4:	e7e1      	b.n	801178a <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x7e>
 80117c6:	f8d9 0000 	ldr.w	r0, [r9]
 80117ca:	6803      	ldr	r3, [r0, #0]
 80117cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80117ce:	4798      	blx	r3
 80117d0:	4b44      	ldr	r3, [pc, #272]	@ (80118e4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d8>)
 80117d2:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	@ 0x22
 80117d6:	881a      	ldrh	r2, [r3, #0]
 80117d8:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 80117dc:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 80117e0:	fb02 1404 	mla	r4, r2, r4, r1
 80117e4:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 80117e8:	469a      	mov	sl, r3
 80117ea:	fb05 f502 	mul.w	r5, r5, r2
 80117ee:	ea4f 0748 	mov.w	r7, r8, lsl #1
 80117f2:	d059      	beq.n	80118a8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x19c>
 80117f4:	f1cb 09ff 	rsb	r9, fp, #255	@ 0xff
 80117f8:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 80117fc:	fa1f f28b 	uxth.w	r2, fp
 8011800:	fa1f f989 	uxth.w	r9, r9
 8011804:	469e      	mov	lr, r3
 8011806:	42ac      	cmp	r4, r5
 8011808:	d264      	bcs.n	80118d4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 801180a:	eb04 0a07 	add.w	sl, r4, r7
 801180e:	4554      	cmp	r4, sl
 8011810:	d23d      	bcs.n	801188e <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x182>
 8011812:	8821      	ldrh	r1, [r4, #0]
 8011814:	f836 3b02 	ldrh.w	r3, [r6], #2
 8011818:	1208      	asrs	r0, r1, #8
 801181a:	ea4f 2c23 	mov.w	ip, r3, asr #8
 801181e:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 8011822:	fb10 f009 	smulbb	r0, r0, r9
 8011826:	ea4f 0be1 	mov.w	fp, r1, asr #3
 801182a:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801182e:	00c9      	lsls	r1, r1, #3
 8011830:	fb0c 0c02 	mla	ip, ip, r2, r0
 8011834:	f00b 0bfc 	and.w	fp, fp, #252	@ 0xfc
 8011838:	10d8      	asrs	r0, r3, #3
 801183a:	b2c9      	uxtb	r1, r1
 801183c:	00db      	lsls	r3, r3, #3
 801183e:	fa1f fc8c 	uxth.w	ip, ip
 8011842:	fb1b fb09 	smulbb	fp, fp, r9
 8011846:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 801184a:	b2db      	uxtb	r3, r3
 801184c:	fb11 f109 	smulbb	r1, r1, r9
 8011850:	fb00 b002 	mla	r0, r0, r2, fp
 8011854:	fb03 1302 	mla	r3, r3, r2, r1
 8011858:	f10c 0b01 	add.w	fp, ip, #1
 801185c:	b29b      	uxth	r3, r3
 801185e:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 8011862:	b280      	uxth	r0, r0
 8011864:	f40c 4b78 	and.w	fp, ip, #63488	@ 0xf800
 8011868:	f103 0c01 	add.w	ip, r3, #1
 801186c:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8011870:	1c43      	adds	r3, r0, #1
 8011872:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8011876:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801187a:	0940      	lsrs	r0, r0, #5
 801187c:	ea4c 0c0b 	orr.w	ip, ip, fp
 8011880:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8011884:	ea4c 0c00 	orr.w	ip, ip, r0
 8011888:	f824 cb02 	strh.w	ip, [r4], #2
 801188c:	e7bf      	b.n	801180e <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x102>
 801188e:	f8be 3000 	ldrh.w	r3, [lr]
 8011892:	eba3 0308 	sub.w	r3, r3, r8
 8011896:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801189a:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801189e:	eba3 0308 	sub.w	r3, r3, r8
 80118a2:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 80118a6:	e7ae      	b.n	8011806 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfa>
 80118a8:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 80118ac:	f8d9 0000 	ldr.w	r0, [r9]
 80118b0:	42ac      	cmp	r4, r5
 80118b2:	6803      	ldr	r3, [r0, #0]
 80118b4:	d20e      	bcs.n	80118d4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 80118b6:	f8d3 8034 	ldr.w	r8, [r3, #52]	@ 0x34
 80118ba:	4632      	mov	r2, r6
 80118bc:	463b      	mov	r3, r7
 80118be:	4621      	mov	r1, r4
 80118c0:	47c0      	blx	r8
 80118c2:	f8ba 3000 	ldrh.w	r3, [sl]
 80118c6:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80118ca:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 80118ce:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 80118d2:	e7eb      	b.n	80118ac <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1a0>
 80118d4:	4b02      	ldr	r3, [pc, #8]	@ (80118e0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 80118d6:	6818      	ldr	r0, [r3, #0]
 80118d8:	6803      	ldr	r3, [r0, #0]
 80118da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80118dc:	4798      	blx	r3
 80118de:	e76c      	b.n	80117ba <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xae>
 80118e0:	20014f54 	.word	0x20014f54
 80118e4:	20014f4e 	.word	0x20014f4e

080118e8 <_ZN8touchgfx8LCD16bppD0Ev>:
 80118e8:	b510      	push	{r4, lr}
 80118ea:	218c      	movs	r1, #140	@ 0x8c
 80118ec:	4604      	mov	r4, r0
 80118ee:	f002 fa32 	bl	8013d56 <_ZdlPvj>
 80118f2:	4620      	mov	r0, r4
 80118f4:	bd10      	pop	{r4, pc}

080118f6 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L4D0Ev>:
 80118f6:	b510      	push	{r4, lr}
 80118f8:	2104      	movs	r1, #4
 80118fa:	4604      	mov	r4, r0
 80118fc:	f002 fa2b 	bl	8013d56 <_ZdlPvj>
 8011900:	4620      	mov	r0, r4
 8011902:	bd10      	pop	{r4, pc}

08011904 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
 8011904:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011908:	b091      	sub	sp, #68	@ 0x44
 801190a:	469b      	mov	fp, r3
 801190c:	f10d 0828 	add.w	r8, sp, #40	@ 0x28
 8011910:	4616      	mov	r6, r2
 8011912:	f9bd 906c 	ldrsh.w	r9, [sp, #108]	@ 0x6c
 8011916:	f9b3 2000 	ldrsh.w	r2, [r3]
 801191a:	f9bd 7070 	ldrsh.w	r7, [sp, #112]	@ 0x70
 801191e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8011922:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 8011926:	4604      	mov	r4, r0
 8011928:	460d      	mov	r5, r1
 801192a:	4640      	mov	r0, r8
 801192c:	4659      	mov	r1, fp
 801192e:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 8011932:	f8ad 902c 	strh.w	r9, [sp, #44]	@ 0x2c
 8011936:	f8ad 702e 	strh.w	r7, [sp, #46]	@ 0x2e
 801193a:	f7f8 f981 	bl	8009c40 <_ZN8touchgfx4RectaNERKS0_>
 801193e:	4631      	mov	r1, r6
 8011940:	4640      	mov	r0, r8
 8011942:	f7f8 f97d 	bl	8009c40 <_ZN8touchgfx4RectaNERKS0_>
 8011946:	4b74      	ldr	r3, [pc, #464]	@ (8011b18 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x214>)
 8011948:	8818      	ldrh	r0, [r3, #0]
 801194a:	4b74      	ldr	r3, [pc, #464]	@ (8011b1c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x218>)
 801194c:	8819      	ldrh	r1, [r3, #0]
 801194e:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	@ 0x28
 8011952:	2b00      	cmp	r3, #0
 8011954:	b202      	sxth	r2, r0
 8011956:	b20e      	sxth	r6, r1
 8011958:	da07      	bge.n	801196a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x66>
 801195a:	f8bd c02c 	ldrh.w	ip, [sp, #44]	@ 0x2c
 801195e:	4463      	add	r3, ip
 8011960:	f8ad 302c 	strh.w	r3, [sp, #44]	@ 0x2c
 8011964:	2300      	movs	r3, #0
 8011966:	f8ad 3028 	strh.w	r3, [sp, #40]	@ 0x28
 801196a:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	@ 0x28
 801196e:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	@ 0x2c
 8011972:	1ad2      	subs	r2, r2, r3
 8011974:	4594      	cmp	ip, r2
 8011976:	bfc4      	itt	gt
 8011978:	1ac2      	subgt	r2, r0, r3
 801197a:	f8ad 202c 	strhgt.w	r2, [sp, #44]	@ 0x2c
 801197e:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
 8011982:	2a00      	cmp	r2, #0
 8011984:	da07      	bge.n	8011996 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x92>
 8011986:	f8bd c02e 	ldrh.w	ip, [sp, #46]	@ 0x2e
 801198a:	4462      	add	r2, ip
 801198c:	f8ad 202e 	strh.w	r2, [sp, #46]	@ 0x2e
 8011990:	2200      	movs	r2, #0
 8011992:	f8ad 202a 	strh.w	r2, [sp, #42]	@ 0x2a
 8011996:	f9bd a02a 	ldrsh.w	sl, [sp, #42]	@ 0x2a
 801199a:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	@ 0x2e
 801199e:	eba6 060a 	sub.w	r6, r6, sl
 80119a2:	42b2      	cmp	r2, r6
 80119a4:	bfc4      	itt	gt
 80119a6:	eba1 020a 	subgt.w	r2, r1, sl
 80119aa:	f8ad 202e 	strhgt.w	r2, [sp, #46]	@ 0x2e
 80119ae:	4a5c      	ldr	r2, [pc, #368]	@ (8011b20 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x21c>)
 80119b0:	7812      	ldrb	r2, [r2, #0]
 80119b2:	b9a2      	cbnz	r2, 80119de <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xda>
 80119b4:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	@ 0x2c
 80119b8:	4286      	cmp	r6, r0
 80119ba:	4640      	mov	r0, r8
 80119bc:	9303      	str	r3, [sp, #12]
 80119be:	bf14      	ite	ne
 80119c0:	2600      	movne	r6, #0
 80119c2:	2601      	moveq	r6, #1
 80119c4:	f7f8 f97f 	bl	8009cc6 <_ZNK8touchgfx4Rect7isEmptyEv>
 80119c8:	9b03      	ldr	r3, [sp, #12]
 80119ca:	b160      	cbz	r0, 80119e6 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xe2>
 80119cc:	2300      	movs	r3, #0
 80119ce:	8023      	strh	r3, [r4, #0]
 80119d0:	8063      	strh	r3, [r4, #2]
 80119d2:	80a3      	strh	r3, [r4, #4]
 80119d4:	4620      	mov	r0, r4
 80119d6:	80e3      	strh	r3, [r4, #6]
 80119d8:	b011      	add	sp, #68	@ 0x44
 80119da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80119de:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	@ 0x2e
 80119e2:	428e      	cmp	r6, r1
 80119e4:	e7e9      	b.n	80119ba <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xb6>
 80119e6:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 80119ea:	9205      	str	r2, [sp, #20]
 80119ec:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	@ 0x2e
 80119f0:	9206      	str	r2, [sp, #24]
 80119f2:	f8bb 2000 	ldrh.w	r2, [fp]
 80119f6:	900e      	str	r0, [sp, #56]	@ 0x38
 80119f8:	1a9b      	subs	r3, r3, r2
 80119fa:	b21b      	sxth	r3, r3
 80119fc:	9303      	str	r3, [sp, #12]
 80119fe:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 8011a02:	f8ad 903c 	strh.w	r9, [sp, #60]	@ 0x3c
 8011a06:	ebaa 0a03 	sub.w	sl, sl, r3
 8011a0a:	fa0f f38a 	sxth.w	r3, sl
 8011a0e:	9304      	str	r3, [sp, #16]
 8011a10:	9b03      	ldr	r3, [sp, #12]
 8011a12:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
 8011a16:	9b04      	ldr	r3, [sp, #16]
 8011a18:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 8011a1c:	9b05      	ldr	r3, [sp, #20]
 8011a1e:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 8011a22:	a90e      	add	r1, sp, #56	@ 0x38
 8011a24:	9b06      	ldr	r3, [sp, #24]
 8011a26:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 8011a2a:	a80c      	add	r0, sp, #48	@ 0x30
 8011a2c:	f8ad 703e 	strh.w	r7, [sp, #62]	@ 0x3e
 8011a30:	f7fb fd30 	bl	800d494 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8011a34:	4640      	mov	r0, r8
 8011a36:	f7fb fd05 	bl	800d444 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8011a3a:	a80e      	add	r0, sp, #56	@ 0x38
 8011a3c:	f7fb fd02 	bl	800d444 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8011a40:	4b38      	ldr	r3, [pc, #224]	@ (8011b24 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x220>)
 8011a42:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	@ 0x3c
 8011a46:	881b      	ldrh	r3, [r3, #0]
 8011a48:	9307      	str	r3, [sp, #28]
 8011a4a:	682b      	ldr	r3, [r5, #0]
 8011a4c:	f8df b0d8 	ldr.w	fp, [pc, #216]	@ 8011b28 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
 8011a50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011a52:	4628      	mov	r0, r5
 8011a54:	4798      	blx	r3
 8011a56:	f8bd 5032 	ldrh.w	r5, [sp, #50]	@ 0x32
 8011a5a:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 8011a5e:	4681      	mov	r9, r0
 8011a60:	fb1a 3305 	smlabb	r3, sl, r5, r3
 8011a64:	f8db 0000 	ldr.w	r0, [fp]
 8011a68:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 8011a6a:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 8011a6e:	6803      	ldr	r3, [r0, #0]
 8011a70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011a72:	4798      	blx	r3
 8011a74:	4607      	mov	r7, r0
 8011a76:	f8db 0000 	ldr.w	r0, [fp]
 8011a7a:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	@ 0x28
 8011a7e:	6803      	ldr	r3, [r0, #0]
 8011a80:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
 8011a84:	9109      	str	r1, [sp, #36]	@ 0x24
 8011a86:	9208      	str	r2, [sp, #32]
 8011a88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011a8a:	4798      	blx	r3
 8011a8c:	f010 0f01 	tst.w	r0, #1
 8011a90:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 8011a94:	d012      	beq.n	8011abc <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1b8>
 8011a96:	f8db 0000 	ldr.w	r0, [fp]
 8011a9a:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	@ 0x34
 8011a9e:	6803      	ldr	r3, [r0, #0]
 8011aa0:	9200      	str	r2, [sp, #0]
 8011aa2:	6ede      	ldr	r6, [r3, #108]	@ 0x6c
 8011aa4:	e898 0006 	ldmia.w	r8, {r1, r2}
 8011aa8:	462b      	mov	r3, r5
 8011aaa:	47b0      	blx	r6
 8011aac:	9b03      	ldr	r3, [sp, #12]
 8011aae:	8023      	strh	r3, [r4, #0]
 8011ab0:	9b04      	ldr	r3, [sp, #16]
 8011ab2:	8063      	strh	r3, [r4, #2]
 8011ab4:	9b05      	ldr	r3, [sp, #20]
 8011ab6:	80a3      	strh	r3, [r4, #4]
 8011ab8:	9b06      	ldr	r3, [sp, #24]
 8011aba:	e78b      	b.n	80119d4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xd0>
 8011abc:	fb09 f202 	mul.w	r2, r9, r2
 8011ac0:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8011ac4:	440f      	add	r7, r1
 8011ac6:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	@ 0x36
 8011aca:	b166      	cbz	r6, 8011ae6 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
 8011acc:	9a07      	ldr	r2, [sp, #28]
 8011ace:	4592      	cmp	sl, r2
 8011ad0:	d109      	bne.n	8011ae6 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
 8011ad2:	f8db 0000 	ldr.w	r0, [fp]
 8011ad6:	6802      	ldr	r2, [r0, #0]
 8011ad8:	fb09 f303 	mul.w	r3, r9, r3
 8011adc:	6b56      	ldr	r6, [r2, #52]	@ 0x34
 8011ade:	4629      	mov	r1, r5
 8011ae0:	463a      	mov	r2, r7
 8011ae2:	47b0      	blx	r6
 8011ae4:	e7e2      	b.n	8011aac <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
 8011ae6:	fb0a f303 	mul.w	r3, sl, r3
 8011aea:	f8df b03c 	ldr.w	fp, [pc, #60]	@ 8011b28 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
 8011aee:	eb05 0843 	add.w	r8, r5, r3, lsl #1
 8011af2:	ea4f 064a 	mov.w	r6, sl, lsl #1
 8011af6:	4545      	cmp	r5, r8
 8011af8:	d2d8      	bcs.n	8011aac <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
 8011afa:	f8db 0000 	ldr.w	r0, [fp]
 8011afe:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 8011b02:	6802      	ldr	r2, [r0, #0]
 8011b04:	4629      	mov	r1, r5
 8011b06:	f8d2 a034 	ldr.w	sl, [r2, #52]	@ 0x34
 8011b0a:	005b      	lsls	r3, r3, #1
 8011b0c:	463a      	mov	r2, r7
 8011b0e:	47d0      	blx	sl
 8011b10:	444f      	add	r7, r9
 8011b12:	4435      	add	r5, r6
 8011b14:	e7ef      	b.n	8011af6 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f2>
 8011b16:	bf00      	nop
 8011b18:	20014f48 	.word	0x20014f48
 8011b1c:	20014f4a 	.word	0x20014f4a
 8011b20:	20014f4c 	.word	0x20014f4c
 8011b24:	20014f4e 	.word	0x20014f4e
 8011b28:	20014f54 	.word	0x20014f54

08011b2c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 8011b2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011b2e:	4606      	mov	r6, r0
 8011b30:	b087      	sub	sp, #28
 8011b32:	460c      	mov	r4, r1
 8011b34:	4617      	mov	r7, r2
 8011b36:	461d      	mov	r5, r3
 8011b38:	b333      	cbz	r3, 8011b88 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 8011b3a:	4608      	mov	r0, r1
 8011b3c:	f7f8 f8c3 	bl	8009cc6 <_ZNK8touchgfx4Rect7isEmptyEv>
 8011b40:	bb10      	cbnz	r0, 8011b88 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 8011b42:	6820      	ldr	r0, [r4, #0]
 8011b44:	6861      	ldr	r1, [r4, #4]
 8011b46:	4c1c      	ldr	r4, [pc, #112]	@ (8011bb8 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x8c>)
 8011b48:	ab04      	add	r3, sp, #16
 8011b4a:	c303      	stmia	r3!, {r0, r1}
 8011b4c:	a804      	add	r0, sp, #16
 8011b4e:	f7fb fc79 	bl	800d444 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8011b52:	6820      	ldr	r0, [r4, #0]
 8011b54:	6803      	ldr	r3, [r0, #0]
 8011b56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011b58:	4798      	blx	r3
 8011b5a:	2dff      	cmp	r5, #255	@ 0xff
 8011b5c:	d016      	beq.n	8011b8c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x60>
 8011b5e:	f010 0f08 	tst.w	r0, #8
 8011b62:	6820      	ldr	r0, [r4, #0]
 8011b64:	d015      	beq.n	8011b92 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 8011b66:	2400      	movs	r4, #0
 8011b68:	6801      	ldr	r1, [r0, #0]
 8011b6a:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8011b6e:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8011b72:	e9cd 5402 	strd	r5, r4, [sp, #8]
 8011b76:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 8011b7a:	9401      	str	r4, [sp, #4]
 8011b7c:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 8011b80:	9400      	str	r4, [sp, #0]
 8011b82:	6e0c      	ldr	r4, [r1, #96]	@ 0x60
 8011b84:	4639      	mov	r1, r7
 8011b86:	47a0      	blx	r4
 8011b88:	b007      	add	sp, #28
 8011b8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011b8c:	f010 0f02 	tst.w	r0, #2
 8011b90:	e7e7      	b.n	8011b62 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x36>
 8011b92:	6803      	ldr	r3, [r0, #0]
 8011b94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011b96:	4798      	blx	r3
 8011b98:	4b08      	ldr	r3, [pc, #32]	@ (8011bbc <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 8011b9a:	881a      	ldrh	r2, [r3, #0]
 8011b9c:	6833      	ldr	r3, [r6, #0]
 8011b9e:	e9cd 7500 	strd	r7, r5, [sp]
 8011ba2:	4601      	mov	r1, r0
 8011ba4:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 8011ba6:	4630      	mov	r0, r6
 8011ba8:	ab04      	add	r3, sp, #16
 8011baa:	47a8      	blx	r5
 8011bac:	6820      	ldr	r0, [r4, #0]
 8011bae:	6803      	ldr	r3, [r0, #0]
 8011bb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011bb2:	4798      	blx	r3
 8011bb4:	e7e8      	b.n	8011b88 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 8011bb6:	bf00      	nop
 8011bb8:	20014f54 	.word	0x20014f54
 8011bbc:	20014f4e 	.word	0x20014f4e

08011bc0 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 8011bc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011bc4:	f89d 7024 	ldrb.w	r7, [sp, #36]	@ 0x24
 8011bc8:	9e08      	ldr	r6, [sp, #32]
 8011bca:	4688      	mov	r8, r1
 8011bcc:	4614      	mov	r4, r2
 8011bce:	461d      	mov	r5, r3
 8011bd0:	2f00      	cmp	r7, #0
 8011bd2:	f000 80a9 	beq.w	8011d28 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 8011bd6:	4618      	mov	r0, r3
 8011bd8:	f7f8 f875 	bl	8009cc6 <_ZNK8touchgfx4Rect7isEmptyEv>
 8011bdc:	2800      	cmp	r0, #0
 8011bde:	f040 80a3 	bne.w	8011d28 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 8011be2:	f9b5 1000 	ldrsh.w	r1, [r5]
 8011be6:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8011bea:	f9b5 0004 	ldrsh.w	r0, [r5, #4]
 8011bee:	f9b5 5006 	ldrsh.w	r5, [r5, #6]
 8011bf2:	fb04 1303 	mla	r3, r4, r3, r1
 8011bf6:	eb08 0143 	add.w	r1, r8, r3, lsl #1
 8011bfa:	4365      	muls	r5, r4
 8011bfc:	2fff      	cmp	r7, #255	@ 0xff
 8011bfe:	eba4 0200 	sub.w	r2, r4, r0
 8011c02:	eb01 0545 	add.w	r5, r1, r5, lsl #1
 8011c06:	ea4f 2816 	mov.w	r8, r6, lsr #8
 8011c0a:	d04a      	beq.n	8011ca2 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe2>
 8011c0c:	b2bc      	uxth	r4, r7
 8011c0e:	f1c7 0cff 	rsb	ip, r7, #255	@ 0xff
 8011c12:	f3c6 4e07 	ubfx	lr, r6, #16, #8
 8011c16:	fa5f f788 	uxtb.w	r7, r8
 8011c1a:	b2f3      	uxtb	r3, r6
 8011c1c:	0040      	lsls	r0, r0, #1
 8011c1e:	fb0e fe04 	mul.w	lr, lr, r4
 8011c22:	4367      	muls	r7, r4
 8011c24:	4363      	muls	r3, r4
 8011c26:	ea4f 0842 	mov.w	r8, r2, lsl #1
 8011c2a:	fa1f fc8c 	uxth.w	ip, ip
 8011c2e:	42a9      	cmp	r1, r5
 8011c30:	d27a      	bcs.n	8011d28 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 8011c32:	eb01 0900 	add.w	r9, r1, r0
 8011c36:	4549      	cmp	r1, r9
 8011c38:	d231      	bcs.n	8011c9e <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xde>
 8011c3a:	880a      	ldrh	r2, [r1, #0]
 8011c3c:	1214      	asrs	r4, r2, #8
 8011c3e:	10d6      	asrs	r6, r2, #3
 8011c40:	f004 04f8 	and.w	r4, r4, #248	@ 0xf8
 8011c44:	00d2      	lsls	r2, r2, #3
 8011c46:	b2d2      	uxtb	r2, r2
 8011c48:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 8011c4c:	fb14 f40c 	smulbb	r4, r4, ip
 8011c50:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8011c54:	4474      	add	r4, lr
 8011c56:	fb12 f20c 	smulbb	r2, r2, ip
 8011c5a:	b2a4      	uxth	r4, r4
 8011c5c:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 8011c60:	441a      	add	r2, r3
 8011c62:	b292      	uxth	r2, r2
 8011c64:	f104 0a01 	add.w	sl, r4, #1
 8011c68:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 8011c6c:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 8011c70:	fb16 f60c 	smulbb	r6, r6, ip
 8011c74:	f102 0a01 	add.w	sl, r2, #1
 8011c78:	443e      	add	r6, r7
 8011c7a:	eb0a 2212 	add.w	r2, sl, r2, lsr #8
 8011c7e:	b2b6      	uxth	r6, r6
 8011c80:	f404 4478 	and.w	r4, r4, #63488	@ 0xf800
 8011c84:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8011c88:	4322      	orrs	r2, r4
 8011c8a:	1c74      	adds	r4, r6, #1
 8011c8c:	eb04 2616 	add.w	r6, r4, r6, lsr #8
 8011c90:	0976      	lsrs	r6, r6, #5
 8011c92:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 8011c96:	4332      	orrs	r2, r6
 8011c98:	f821 2b02 	strh.w	r2, [r1], #2
 8011c9c:	e7cb      	b.n	8011c36 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x76>
 8011c9e:	4441      	add	r1, r8
 8011ca0:	e7c5      	b.n	8011c2e <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x6e>
 8011ca2:	4f22      	ldr	r7, [pc, #136]	@ (8011d2c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>)
 8011ca4:	0973      	lsrs	r3, r6, #5
 8011ca6:	ea08 0707 	and.w	r7, r8, r7
 8011caa:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8011cae:	433b      	orrs	r3, r7
 8011cb0:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 8011cb4:	4333      	orrs	r3, r6
 8011cb6:	07e7      	lsls	r7, r4, #31
 8011cb8:	b29b      	uxth	r3, r3
 8011cba:	d50b      	bpl.n	8011cd4 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x114>
 8011cbc:	0040      	lsls	r0, r0, #1
 8011cbe:	0052      	lsls	r2, r2, #1
 8011cc0:	42a9      	cmp	r1, r5
 8011cc2:	d231      	bcs.n	8011d28 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 8011cc4:	180c      	adds	r4, r1, r0
 8011cc6:	42a1      	cmp	r1, r4
 8011cc8:	d202      	bcs.n	8011cd0 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x110>
 8011cca:	f821 3b02 	strh.w	r3, [r1], #2
 8011cce:	e7fa      	b.n	8011cc6 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x106>
 8011cd0:	4411      	add	r1, r2
 8011cd2:	e7f5      	b.n	8011cc0 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x100>
 8011cd4:	078e      	lsls	r6, r1, #30
 8011cd6:	d008      	beq.n	8011cea <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12a>
 8011cd8:	0066      	lsls	r6, r4, #1
 8011cda:	460a      	mov	r2, r1
 8011cdc:	42aa      	cmp	r2, r5
 8011cde:	d202      	bcs.n	8011ce6 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x126>
 8011ce0:	8013      	strh	r3, [r2, #0]
 8011ce2:	4432      	add	r2, r6
 8011ce4:	e7fa      	b.n	8011cdc <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x11c>
 8011ce6:	3102      	adds	r1, #2
 8011ce8:	3801      	subs	r0, #1
 8011cea:	07c2      	lsls	r2, r0, #31
 8011cec:	d50b      	bpl.n	8011d06 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x146>
 8011cee:	f100 4200 	add.w	r2, r0, #2147483648	@ 0x80000000
 8011cf2:	3a01      	subs	r2, #1
 8011cf4:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8011cf8:	0066      	lsls	r6, r4, #1
 8011cfa:	42aa      	cmp	r2, r5
 8011cfc:	d202      	bcs.n	8011d04 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x144>
 8011cfe:	8013      	strh	r3, [r2, #0]
 8011d00:	4432      	add	r2, r6
 8011d02:	e7fa      	b.n	8011cfa <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x13a>
 8011d04:	3801      	subs	r0, #1
 8011d06:	b178      	cbz	r0, 8011d28 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 8011d08:	1040      	asrs	r0, r0, #1
 8011d0a:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
 8011d0e:	0080      	lsls	r0, r0, #2
 8011d10:	0064      	lsls	r4, r4, #1
 8011d12:	42a9      	cmp	r1, r5
 8011d14:	d208      	bcs.n	8011d28 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 8011d16:	180e      	adds	r6, r1, r0
 8011d18:	460a      	mov	r2, r1
 8011d1a:	42b2      	cmp	r2, r6
 8011d1c:	d202      	bcs.n	8011d24 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x164>
 8011d1e:	f842 3b04 	str.w	r3, [r2], #4
 8011d22:	e7fa      	b.n	8011d1a <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x15a>
 8011d24:	4421      	add	r1, r4
 8011d26:	e7f4      	b.n	8011d12 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x152>
 8011d28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011d2c:	00fff800 	.word	0x00fff800

08011d30 <_ZN8touchgfx8LCD16bppC1Ev>:
 8011d30:	2200      	movs	r2, #0
 8011d32:	4912      	ldr	r1, [pc, #72]	@ (8011d7c <_ZN8touchgfx8LCD16bppC1Ev+0x4c>)
 8011d34:	6001      	str	r1, [r0, #0]
 8011d36:	e9c0 2201 	strd	r2, r2, [r0, #4]
 8011d3a:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8011d3e:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8011d42:	e9c0 2207 	strd	r2, r2, [r0, #28]
 8011d46:	e9c0 2209 	strd	r2, r2, [r0, #36]	@ 0x24
 8011d4a:	e9c0 220b 	strd	r2, r2, [r0, #44]	@ 0x2c
 8011d4e:	e9c0 220d 	strd	r2, r2, [r0, #52]	@ 0x34
 8011d52:	e9c0 220f 	strd	r2, r2, [r0, #60]	@ 0x3c
 8011d56:	e9c0 2211 	strd	r2, r2, [r0, #68]	@ 0x44
 8011d5a:	e9c0 2213 	strd	r2, r2, [r0, #76]	@ 0x4c
 8011d5e:	e9c0 2215 	strd	r2, r2, [r0, #84]	@ 0x54
 8011d62:	e9c0 2217 	strd	r2, r2, [r0, #92]	@ 0x5c
 8011d66:	e9c0 2219 	strd	r2, r2, [r0, #100]	@ 0x64
 8011d6a:	e9c0 221b 	strd	r2, r2, [r0, #108]	@ 0x6c
 8011d6e:	e9c0 221d 	strd	r2, r2, [r0, #116]	@ 0x74
 8011d72:	e9c0 221f 	strd	r2, r2, [r0, #124]	@ 0x7c
 8011d76:	e9c0 2221 	strd	r2, r2, [r0, #132]	@ 0x84
 8011d7a:	4770      	bx	lr
 8011d7c:	08016bdc 	.word	0x08016bdc

08011d80 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 8011d80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d84:	460d      	mov	r5, r1
 8011d86:	b08d      	sub	sp, #52	@ 0x34
 8011d88:	4604      	mov	r4, r0
 8011d8a:	6808      	ldr	r0, [r1, #0]
 8011d8c:	6849      	ldr	r1, [r1, #4]
 8011d8e:	4699      	mov	r9, r3
 8011d90:	ab08      	add	r3, sp, #32
 8011d92:	c303      	stmia	r3!, {r0, r1}
 8011d94:	6810      	ldr	r0, [r2, #0]
 8011d96:	6851      	ldr	r1, [r2, #4]
 8011d98:	ab0a      	add	r3, sp, #40	@ 0x28
 8011d9a:	c303      	stmia	r3!, {r0, r1}
 8011d9c:	a808      	add	r0, sp, #32
 8011d9e:	f7fb fb51 	bl	800d444 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8011da2:	4629      	mov	r1, r5
 8011da4:	a80a      	add	r0, sp, #40	@ 0x28
 8011da6:	f7fb fb75 	bl	800d494 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8011daa:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	@ 0x28
 8011dae:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	@ 0x2a
 8011db2:	f8bd 1024 	ldrh.w	r1, [sp, #36]	@ 0x24
 8011db6:	4d63      	ldr	r5, [pc, #396]	@ (8011f44 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 8011db8:	f9bd 802c 	ldrsh.w	r8, [sp, #44]	@ 0x2c
 8011dbc:	6828      	ldr	r0, [r5, #0]
 8011dbe:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	@ 0x2e
 8011dc2:	fb11 2103 	smlabb	r1, r1, r3, r2
 8011dc6:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8011dca:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 8011dce:	440a      	add	r2, r1
 8011dd0:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 8011dd4:	f8bd 2022 	ldrh.w	r2, [sp, #34]	@ 0x22
 8011dd8:	4413      	add	r3, r2
 8011dda:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 8011dde:	6803      	ldr	r3, [r0, #0]
 8011de0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011de2:	4798      	blx	r3
 8011de4:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 8011de8:	d119      	bne.n	8011e1e <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9e>
 8011dea:	f010 0f20 	tst.w	r0, #32
 8011dee:	6828      	ldr	r0, [r5, #0]
 8011df0:	d018      	beq.n	8011e24 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa4>
 8011df2:	2500      	movs	r5, #0
 8011df4:	6801      	ldr	r1, [r0, #0]
 8011df6:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 8011dfa:	f8bd 2028 	ldrh.w	r2, [sp, #40]	@ 0x28
 8011dfe:	e9cd 9503 	strd	r9, r5, [sp, #12]
 8011e02:	f8bd 5024 	ldrh.w	r5, [sp, #36]	@ 0x24
 8011e06:	9502      	str	r5, [sp, #8]
 8011e08:	b2b6      	uxth	r6, r6
 8011e0a:	fa1f f588 	uxth.w	r5, r8
 8011e0e:	9601      	str	r6, [sp, #4]
 8011e10:	9500      	str	r5, [sp, #0]
 8011e12:	6d0d      	ldr	r5, [r1, #80]	@ 0x50
 8011e14:	4621      	mov	r1, r4
 8011e16:	47a8      	blx	r5
 8011e18:	b00d      	add	sp, #52	@ 0x34
 8011e1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011e1e:	f010 0f40 	tst.w	r0, #64	@ 0x40
 8011e22:	e7e4      	b.n	8011dee <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
 8011e24:	6803      	ldr	r3, [r0, #0]
 8011e26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011e28:	4798      	blx	r3
 8011e2a:	4947      	ldr	r1, [pc, #284]	@ (8011f48 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c8>)
 8011e2c:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
 8011e30:	880b      	ldrh	r3, [r1, #0]
 8011e32:	f9bd 5028 	ldrsh.w	r5, [sp, #40]	@ 0x28
 8011e36:	fb03 5202 	mla	r2, r3, r2, r5
 8011e3a:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8011e3e:	4373      	muls	r3, r6
 8011e40:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8011e44:	9307      	str	r3, [sp, #28]
 8011e46:	ea4f 0348 	mov.w	r3, r8, lsl #1
 8011e4a:	9306      	str	r3, [sp, #24]
 8011e4c:	468a      	mov	sl, r1
 8011e4e:	9b07      	ldr	r3, [sp, #28]
 8011e50:	4298      	cmp	r0, r3
 8011e52:	d270      	bcs.n	8011f36 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b6>
 8011e54:	9b06      	ldr	r3, [sp, #24]
 8011e56:	4621      	mov	r1, r4
 8011e58:	eb00 0b03 	add.w	fp, r0, r3
 8011e5c:	4558      	cmp	r0, fp
 8011e5e:	d25d      	bcs.n	8011f1c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x19c>
 8011e60:	f851 4b04 	ldr.w	r4, [r1], #4
 8011e64:	0e23      	lsrs	r3, r4, #24
 8011e66:	d014      	beq.n	8011e92 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 8011e68:	2bff      	cmp	r3, #255	@ 0xff
 8011e6a:	ea4f 2c14 	mov.w	ip, r4, lsr #8
 8011e6e:	d112      	bne.n	8011e96 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 8011e70:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 8011e74:	d10f      	bne.n	8011e96 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 8011e76:	0963      	lsrs	r3, r4, #5
 8011e78:	f42c 6cff 	bic.w	ip, ip, #2040	@ 0x7f8
 8011e7c:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8011e80:	f02c 0c07 	bic.w	ip, ip, #7
 8011e84:	ea43 0c0c 	orr.w	ip, r3, ip
 8011e88:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 8011e8c:	ea4c 0404 	orr.w	r4, ip, r4
 8011e90:	8004      	strh	r4, [r0, #0]
 8011e92:	3002      	adds	r0, #2
 8011e94:	e7e2      	b.n	8011e5c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xdc>
 8011e96:	fb09 f303 	mul.w	r3, r9, r3
 8011e9a:	8807      	ldrh	r7, [r0, #0]
 8011e9c:	1c5a      	adds	r2, r3, #1
 8011e9e:	eb02 2223 	add.w	r2, r2, r3, asr #8
 8011ea2:	1212      	asrs	r2, r2, #8
 8011ea4:	123e      	asrs	r6, r7, #8
 8011ea6:	b293      	uxth	r3, r2
 8011ea8:	f3c4 4e07 	ubfx	lr, r4, #16, #8
 8011eac:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 8011eb0:	43d2      	mvns	r2, r2
 8011eb2:	b2d2      	uxtb	r2, r2
 8011eb4:	10fd      	asrs	r5, r7, #3
 8011eb6:	fb1e fe03 	smulbb	lr, lr, r3
 8011eba:	00ff      	lsls	r7, r7, #3
 8011ebc:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 8011ec0:	fb06 e602 	mla	r6, r6, r2, lr
 8011ec4:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 8011ec8:	b2ff      	uxtb	r7, r7
 8011eca:	fa5f fc8c 	uxtb.w	ip, ip
 8011ece:	b2e4      	uxtb	r4, r4
 8011ed0:	b2b6      	uxth	r6, r6
 8011ed2:	fb1c fc03 	smulbb	ip, ip, r3
 8011ed6:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 8011eda:	ea47 1757 	orr.w	r7, r7, r7, lsr #5
 8011ede:	fb14 f403 	smulbb	r4, r4, r3
 8011ee2:	fb05 c502 	mla	r5, r5, r2, ip
 8011ee6:	f106 0e01 	add.w	lr, r6, #1
 8011eea:	fb07 4702 	mla	r7, r7, r2, r4
 8011eee:	b2ad      	uxth	r5, r5
 8011ef0:	b2bf      	uxth	r7, r7
 8011ef2:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 8011ef6:	f406 4e78 	and.w	lr, r6, #63488	@ 0xf800
 8011efa:	f105 0c01 	add.w	ip, r5, #1
 8011efe:	1c7e      	adds	r6, r7, #1
 8011f00:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 8011f04:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8011f08:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 8011f0c:	096d      	lsrs	r5, r5, #5
 8011f0e:	ea46 060e 	orr.w	r6, r6, lr
 8011f12:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8011f16:	432e      	orrs	r6, r5
 8011f18:	8006      	strh	r6, [r0, #0]
 8011f1a:	e7ba      	b.n	8011e92 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 8011f1c:	f8ba 3000 	ldrh.w	r3, [sl]
 8011f20:	f9bd 4024 	ldrsh.w	r4, [sp, #36]	@ 0x24
 8011f24:	eba3 0308 	sub.w	r3, r3, r8
 8011f28:	eba4 0408 	sub.w	r4, r4, r8
 8011f2c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8011f30:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 8011f34:	e78b      	b.n	8011e4e <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xce>
 8011f36:	4b03      	ldr	r3, [pc, #12]	@ (8011f44 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 8011f38:	6818      	ldr	r0, [r3, #0]
 8011f3a:	6803      	ldr	r3, [r0, #0]
 8011f3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011f3e:	4798      	blx	r3
 8011f40:	e76a      	b.n	8011e18 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x98>
 8011f42:	bf00      	nop
 8011f44:	20014f54 	.word	0x20014f54
 8011f48:	20014f4e 	.word	0x20014f4e

08011f4c <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>:
 8011f4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011f50:	460c      	mov	r4, r1
 8011f52:	b085      	sub	sp, #20
 8011f54:	6810      	ldr	r0, [r2, #0]
 8011f56:	6851      	ldr	r1, [r2, #4]
 8011f58:	466d      	mov	r5, sp
 8011f5a:	c503      	stmia	r5!, {r0, r1}
 8011f5c:	6818      	ldr	r0, [r3, #0]
 8011f5e:	6859      	ldr	r1, [r3, #4]
 8011f60:	4616      	mov	r6, r2
 8011f62:	c503      	stmia	r5!, {r0, r1}
 8011f64:	4668      	mov	r0, sp
 8011f66:	f7fb fa6d 	bl	800d444 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8011f6a:	4631      	mov	r1, r6
 8011f6c:	a802      	add	r0, sp, #8
 8011f6e:	f7fb fa91 	bl	800d494 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8011f72:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 8011f76:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8011f7a:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 8011f7e:	4d28      	ldr	r5, [pc, #160]	@ (8012020 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd4>)
 8011f80:	4e28      	ldr	r6, [pc, #160]	@ (8012024 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd8>)
 8011f82:	6828      	ldr	r0, [r5, #0]
 8011f84:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 8011f88:	f9bd 800e 	ldrsh.w	r8, [sp, #14]
 8011f8c:	fb11 2103 	smlabb	r1, r1, r3, r2
 8011f90:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8011f94:	f8bd 1000 	ldrh.w	r1, [sp]
 8011f98:	440a      	add	r2, r1
 8011f9a:	f8ad 2008 	strh.w	r2, [sp, #8]
 8011f9e:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8011fa2:	4413      	add	r3, r2
 8011fa4:	f8ad 300a 	strh.w	r3, [sp, #10]
 8011fa8:	6803      	ldr	r3, [r0, #0]
 8011faa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011fac:	4798      	blx	r3
 8011fae:	8833      	ldrh	r3, [r6, #0]
 8011fb0:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 8011fb4:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 8011fb8:	f8df e06c 	ldr.w	lr, [pc, #108]	@ 8012028 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xdc>
 8011fbc:	fb03 1202 	mla	r2, r3, r2, r1
 8011fc0:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8011fc4:	fb08 f303 	mul.w	r3, r8, r3
 8011fc8:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8011fcc:	ea4f 0c47 	mov.w	ip, r7, lsl #1
 8011fd0:	4298      	cmp	r0, r3
 8011fd2:	d21d      	bcs.n	8012010 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xc4>
 8011fd4:	eb00 080c 	add.w	r8, r0, ip
 8011fd8:	4540      	cmp	r0, r8
 8011fda:	d20f      	bcs.n	8011ffc <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xb0>
 8011fdc:	f854 1b04 	ldr.w	r1, [r4], #4
 8011fe0:	ea4f 1951 	mov.w	r9, r1, lsr #5
 8011fe4:	ea0e 2211 	and.w	r2, lr, r1, lsr #8
 8011fe8:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 8011fec:	ea42 0209 	orr.w	r2, r2, r9
 8011ff0:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 8011ff4:	430a      	orrs	r2, r1
 8011ff6:	f820 2b02 	strh.w	r2, [r0], #2
 8011ffa:	e7ed      	b.n	8011fd8 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x8c>
 8011ffc:	8832      	ldrh	r2, [r6, #0]
 8011ffe:	1bd2      	subs	r2, r2, r7
 8012000:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8012004:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 8012008:	1bd2      	subs	r2, r2, r7
 801200a:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 801200e:	e7df      	b.n	8011fd0 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x84>
 8012010:	6828      	ldr	r0, [r5, #0]
 8012012:	6803      	ldr	r3, [r0, #0]
 8012014:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012016:	4798      	blx	r3
 8012018:	b005      	add	sp, #20
 801201a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801201e:	bf00      	nop
 8012020:	20014f54 	.word	0x20014f54
 8012024:	20014f4e 	.word	0x20014f4e
 8012028:	fffff800 	.word	0xfffff800

0801202c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>:
 801202c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012030:	460e      	mov	r6, r1
 8012032:	b08e      	sub	sp, #56	@ 0x38
 8012034:	4604      	mov	r4, r0
 8012036:	6808      	ldr	r0, [r1, #0]
 8012038:	6849      	ldr	r1, [r1, #4]
 801203a:	f8df 81d8 	ldr.w	r8, [pc, #472]	@ 8012214 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>
 801203e:	f8df 91d8 	ldr.w	r9, [pc, #472]	@ 8012218 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1ec>
 8012042:	461d      	mov	r5, r3
 8012044:	ab0a      	add	r3, sp, #40	@ 0x28
 8012046:	c303      	stmia	r3!, {r0, r1}
 8012048:	6810      	ldr	r0, [r2, #0]
 801204a:	6851      	ldr	r1, [r2, #4]
 801204c:	ab0c      	add	r3, sp, #48	@ 0x30
 801204e:	c303      	stmia	r3!, {r0, r1}
 8012050:	a80a      	add	r0, sp, #40	@ 0x28
 8012052:	f7fb f9f7 	bl	800d444 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8012056:	4631      	mov	r1, r6
 8012058:	a80c      	add	r0, sp, #48	@ 0x30
 801205a:	f7fb fa1b 	bl	800d494 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801205e:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 8012062:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 8012066:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 801206a:	f8d8 0000 	ldr.w	r0, [r8]
 801206e:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	@ 0x34
 8012072:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	@ 0x36
 8012076:	fb11 2103 	smlabb	r1, r1, r3, r2
 801207a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801207e:	440c      	add	r4, r1
 8012080:	f8bd 1028 	ldrh.w	r1, [sp, #40]	@ 0x28
 8012084:	440a      	add	r2, r1
 8012086:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 801208a:	f8bd 202a 	ldrh.w	r2, [sp, #42]	@ 0x2a
 801208e:	4413      	add	r3, r2
 8012090:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 8012094:	6803      	ldr	r3, [r0, #0]
 8012096:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012098:	4798      	blx	r3
 801209a:	2dff      	cmp	r5, #255	@ 0xff
 801209c:	d124      	bne.n	80120e8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xbc>
 801209e:	f010 0f01 	tst.w	r0, #1
 80120a2:	f8d8 0000 	ldr.w	r0, [r8]
 80120a6:	d022      	beq.n	80120ee <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xc2>
 80120a8:	2100      	movs	r1, #0
 80120aa:	f8d0 c000 	ldr.w	ip, [r0]
 80120ae:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 80120b2:	f8bd 2030 	ldrh.w	r2, [sp, #48]	@ 0x30
 80120b6:	e9cd 1107 	strd	r1, r1, [sp, #28]
 80120ba:	f04f 0e01 	mov.w	lr, #1
 80120be:	f8cd e018 	str.w	lr, [sp, #24]
 80120c2:	f8b9 e000 	ldrh.w	lr, [r9]
 80120c6:	9503      	str	r5, [sp, #12]
 80120c8:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 80120cc:	b2b6      	uxth	r6, r6
 80120ce:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 80120d2:	9102      	str	r1, [sp, #8]
 80120d4:	b2bf      	uxth	r7, r7
 80120d6:	9601      	str	r6, [sp, #4]
 80120d8:	9700      	str	r7, [sp, #0]
 80120da:	f8dc 5040 	ldr.w	r5, [ip, #64]	@ 0x40
 80120de:	4621      	mov	r1, r4
 80120e0:	47a8      	blx	r5
 80120e2:	b00e      	add	sp, #56	@ 0x38
 80120e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80120e8:	f010 0f04 	tst.w	r0, #4
 80120ec:	e7d9      	b.n	80120a2 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x76>
 80120ee:	6803      	ldr	r3, [r0, #0]
 80120f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80120f2:	4798      	blx	r3
 80120f4:	f8b9 3000 	ldrh.w	r3, [r9]
 80120f8:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 80120fc:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	@ 0x30
 8012100:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	@ 0x2c
 8012104:	fb03 1202 	mla	r2, r3, r2, r1
 8012108:	ebac 0c07 	sub.w	ip, ip, r7
 801210c:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8012110:	435e      	muls	r6, r3
 8012112:	ea4f 0e47 	mov.w	lr, r7, lsl #1
 8012116:	2dff      	cmp	r5, #255	@ 0xff
 8012118:	eba3 0707 	sub.w	r7, r3, r7
 801211c:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 8012120:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8012124:	ea4f 0747 	mov.w	r7, r7, lsl #1
 8012128:	d049      	beq.n	80121be <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x192>
 801212a:	43eb      	mvns	r3, r5
 801212c:	fa1f f985 	uxth.w	r9, r5
 8012130:	b2db      	uxtb	r3, r3
 8012132:	42b0      	cmp	r0, r6
 8012134:	d266      	bcs.n	8012204 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 8012136:	eb00 0a0e 	add.w	sl, r0, lr
 801213a:	4550      	cmp	r0, sl
 801213c:	4621      	mov	r1, r4
 801213e:	f104 0403 	add.w	r4, r4, #3
 8012142:	d25b      	bcs.n	80121fc <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d0>
 8012144:	8802      	ldrh	r2, [r0, #0]
 8012146:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 801214a:	ea4f 2822 	mov.w	r8, r2, asr #8
 801214e:	f008 08f8 	and.w	r8, r8, #248	@ 0xf8
 8012152:	fb11 f109 	smulbb	r1, r1, r9
 8012156:	ea48 1858 	orr.w	r8, r8, r8, lsr #5
 801215a:	10d5      	asrs	r5, r2, #3
 801215c:	fb08 1803 	mla	r8, r8, r3, r1
 8012160:	f814 1c02 	ldrb.w	r1, [r4, #-2]
 8012164:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 8012168:	fb11 f109 	smulbb	r1, r1, r9
 801216c:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 8012170:	fb05 1503 	mla	r5, r5, r3, r1
 8012174:	00d2      	lsls	r2, r2, #3
 8012176:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 801217a:	b2d2      	uxtb	r2, r2
 801217c:	fb11 f109 	smulbb	r1, r1, r9
 8012180:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8012184:	fa1f f888 	uxth.w	r8, r8
 8012188:	fb02 1203 	mla	r2, r2, r3, r1
 801218c:	b292      	uxth	r2, r2
 801218e:	f108 0101 	add.w	r1, r8, #1
 8012192:	b2ad      	uxth	r5, r5
 8012194:	eb01 2818 	add.w	r8, r1, r8, lsr #8
 8012198:	1c51      	adds	r1, r2, #1
 801219a:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801219e:	1c69      	adds	r1, r5, #1
 80121a0:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 80121a4:	f408 4878 	and.w	r8, r8, #63488	@ 0xf800
 80121a8:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 80121ac:	096d      	lsrs	r5, r5, #5
 80121ae:	ea42 0208 	orr.w	r2, r2, r8
 80121b2:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 80121b6:	432a      	orrs	r2, r5
 80121b8:	f820 2b02 	strh.w	r2, [r0], #2
 80121bc:	e7bd      	b.n	801213a <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x10e>
 80121be:	4a14      	ldr	r2, [pc, #80]	@ (8012210 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e4>)
 80121c0:	42b0      	cmp	r0, r6
 80121c2:	d21f      	bcs.n	8012204 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 80121c4:	eb00 050e 	add.w	r5, r0, lr
 80121c8:	42a8      	cmp	r0, r5
 80121ca:	4621      	mov	r1, r4
 80121cc:	f104 0403 	add.w	r4, r4, #3
 80121d0:	d210      	bcs.n	80121f4 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1c8>
 80121d2:	f814 3c02 	ldrb.w	r3, [r4, #-2]
 80121d6:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 80121da:	00db      	lsls	r3, r3, #3
 80121dc:	ea02 2101 	and.w	r1, r2, r1, lsl #8
 80121e0:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 80121e4:	430b      	orrs	r3, r1
 80121e6:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 80121ea:	ea43 03d1 	orr.w	r3, r3, r1, lsr #3
 80121ee:	f820 3b02 	strh.w	r3, [r0], #2
 80121f2:	e7e9      	b.n	80121c8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x19c>
 80121f4:	4438      	add	r0, r7
 80121f6:	eb01 040c 	add.w	r4, r1, ip
 80121fa:	e7e1      	b.n	80121c0 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x194>
 80121fc:	4438      	add	r0, r7
 80121fe:	eb01 040c 	add.w	r4, r1, ip
 8012202:	e796      	b.n	8012132 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x106>
 8012204:	4b03      	ldr	r3, [pc, #12]	@ (8012214 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>)
 8012206:	6818      	ldr	r0, [r3, #0]
 8012208:	6803      	ldr	r3, [r0, #0]
 801220a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801220c:	4798      	blx	r3
 801220e:	e768      	b.n	80120e2 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xb6>
 8012210:	fffff800 	.word	0xfffff800
 8012214:	20014f54 	.word	0x20014f54
 8012218:	20014f4e 	.word	0x20014f4e

0801221c <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 801221c:	b4f0      	push	{r4, r5, r6, r7}
 801221e:	4616      	mov	r6, r2
 8012220:	2e01      	cmp	r6, #1
 8012222:	461c      	mov	r4, r3
 8012224:	460d      	mov	r5, r1
 8012226:	9a04      	ldr	r2, [sp, #16]
 8012228:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801222c:	f89d 7018 	ldrb.w	r7, [sp, #24]
 8012230:	d012      	beq.n	8012258 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x3c>
 8012232:	d303      	bcc.n	801223c <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x20>
 8012234:	2e02      	cmp	r6, #2
 8012236:	d00a      	beq.n	801224e <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x32>
 8012238:	bcf0      	pop	{r4, r5, r6, r7}
 801223a:	4770      	bx	lr
 801223c:	6805      	ldr	r5, [r0, #0]
 801223e:	e9cd 3704 	strd	r3, r7, [sp, #16]
 8012242:	68ed      	ldr	r5, [r5, #12]
 8012244:	4613      	mov	r3, r2
 8012246:	46ac      	mov	ip, r5
 8012248:	4622      	mov	r2, r4
 801224a:	bcf0      	pop	{r4, r5, r6, r7}
 801224c:	4760      	bx	ip
 801224e:	4621      	mov	r1, r4
 8012250:	4628      	mov	r0, r5
 8012252:	bcf0      	pop	{r4, r5, r6, r7}
 8012254:	f7ff bd94 	b.w	8011d80 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8012258:	4621      	mov	r1, r4
 801225a:	4628      	mov	r0, r5
 801225c:	bcf0      	pop	{r4, r5, r6, r7}
 801225e:	f7ff bee5 	b.w	801202c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
	...

08012264 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 8012264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012268:	4681      	mov	r9, r0
 801226a:	b093      	sub	sp, #76	@ 0x4c
 801226c:	6810      	ldr	r0, [r2, #0]
 801226e:	f89d a070 	ldrb.w	sl, [sp, #112]	@ 0x70
 8012272:	4f6d      	ldr	r7, [pc, #436]	@ (8012428 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c4>)
 8012274:	4688      	mov	r8, r1
 8012276:	6851      	ldr	r1, [r2, #4]
 8012278:	ac0e      	add	r4, sp, #56	@ 0x38
 801227a:	c403      	stmia	r4!, {r0, r1}
 801227c:	6818      	ldr	r0, [r3, #0]
 801227e:	6859      	ldr	r1, [r3, #4]
 8012280:	ac10      	add	r4, sp, #64	@ 0x40
 8012282:	4616      	mov	r6, r2
 8012284:	c403      	stmia	r4!, {r0, r1}
 8012286:	a80e      	add	r0, sp, #56	@ 0x38
 8012288:	f7fb f8dc 	bl	800d444 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801228c:	4631      	mov	r1, r6
 801228e:	a810      	add	r0, sp, #64	@ 0x40
 8012290:	f7fb f900 	bl	800d494 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8012294:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	@ 0x40
 8012298:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	@ 0x42
 801229c:	f8bd 103c 	ldrh.w	r1, [sp, #60]	@ 0x3c
 80122a0:	4e62      	ldr	r6, [pc, #392]	@ (801242c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 80122a2:	f9bd 4044 	ldrsh.w	r4, [sp, #68]	@ 0x44
 80122a6:	6830      	ldr	r0, [r6, #0]
 80122a8:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	@ 0x46
 80122ac:	fb11 2103 	smlabb	r1, r1, r3, r2
 80122b0:	4489      	add	r9, r1
 80122b2:	f8bd 1038 	ldrh.w	r1, [sp, #56]	@ 0x38
 80122b6:	440a      	add	r2, r1
 80122b8:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 80122bc:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 80122c0:	4413      	add	r3, r2
 80122c2:	f8ad 3042 	strh.w	r3, [sp, #66]	@ 0x42
 80122c6:	6803      	ldr	r3, [r0, #0]
 80122c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80122ca:	4798      	blx	r3
 80122cc:	f010 0f80 	tst.w	r0, #128	@ 0x80
 80122d0:	6830      	ldr	r0, [r6, #0]
 80122d2:	d01d      	beq.n	8012310 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xac>
 80122d4:	2200      	movs	r2, #0
 80122d6:	6801      	ldr	r1, [r0, #0]
 80122d8:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 80122dc:	e9cd 2208 	strd	r2, r2, [sp, #32]
 80122e0:	220b      	movs	r2, #11
 80122e2:	9207      	str	r2, [sp, #28]
 80122e4:	883a      	ldrh	r2, [r7, #0]
 80122e6:	9206      	str	r2, [sp, #24]
 80122e8:	2201      	movs	r2, #1
 80122ea:	e9cd a204 	strd	sl, r2, [sp, #16]
 80122ee:	f8bd 203c 	ldrh.w	r2, [sp, #60]	@ 0x3c
 80122f2:	9203      	str	r2, [sp, #12]
 80122f4:	b2a4      	uxth	r4, r4
 80122f6:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 80122fa:	9200      	str	r2, [sp, #0]
 80122fc:	b2ad      	uxth	r5, r5
 80122fe:	9502      	str	r5, [sp, #8]
 8012300:	9401      	str	r4, [sp, #4]
 8012302:	6bcc      	ldr	r4, [r1, #60]	@ 0x3c
 8012304:	4642      	mov	r2, r8
 8012306:	4649      	mov	r1, r9
 8012308:	47a0      	blx	r4
 801230a:	b013      	add	sp, #76	@ 0x4c
 801230c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012310:	6803      	ldr	r3, [r0, #0]
 8012312:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012314:	4798      	blx	r3
 8012316:	883b      	ldrh	r3, [r7, #0]
 8012318:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	@ 0x42
 801231c:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	@ 0x40
 8012320:	fb03 1202 	mla	r2, r3, r2, r1
 8012324:	435d      	muls	r5, r3
 8012326:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801232a:	eb00 0245 	add.w	r2, r0, r5, lsl #1
 801232e:	920c      	str	r2, [sp, #48]	@ 0x30
 8012330:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	@ 0x3c
 8012334:	1b12      	subs	r2, r2, r4
 8012336:	920d      	str	r2, [sp, #52]	@ 0x34
 8012338:	0062      	lsls	r2, r4, #1
 801233a:	1b1c      	subs	r4, r3, r4
 801233c:	0063      	lsls	r3, r4, #1
 801233e:	920a      	str	r2, [sp, #40]	@ 0x28
 8012340:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012342:	f04f 0e04 	mov.w	lr, #4
 8012346:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012348:	4298      	cmp	r0, r3
 801234a:	d266      	bcs.n	801241a <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b6>
 801234c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801234e:	eb00 0b03 	add.w	fp, r0, r3
 8012352:	4558      	cmp	r0, fp
 8012354:	d25c      	bcs.n	8012410 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ac>
 8012356:	f819 3b01 	ldrb.w	r3, [r9], #1
 801235a:	fb1e e303 	smlabb	r3, lr, r3, lr
 801235e:	f858 2003 	ldr.w	r2, [r8, r3]
 8012362:	0e11      	lsrs	r1, r2, #24
 8012364:	d012      	beq.n	801238c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 8012366:	29ff      	cmp	r1, #255	@ 0xff
 8012368:	ea4f 2712 	mov.w	r7, r2, lsr #8
 801236c:	d110      	bne.n	8012390 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 801236e:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 8012372:	d10d      	bne.n	8012390 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 8012374:	0953      	lsrs	r3, r2, #5
 8012376:	f427 67ff 	bic.w	r7, r7, #2040	@ 0x7f8
 801237a:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 801237e:	f027 0707 	bic.w	r7, r7, #7
 8012382:	431f      	orrs	r7, r3
 8012384:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8012388:	433a      	orrs	r2, r7
 801238a:	8002      	strh	r2, [r0, #0]
 801238c:	3002      	adds	r0, #2
 801238e:	e7e0      	b.n	8012352 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xee>
 8012390:	fb0a f101 	mul.w	r1, sl, r1
 8012394:	8806      	ldrh	r6, [r0, #0]
 8012396:	1c4b      	adds	r3, r1, #1
 8012398:	eb03 2321 	add.w	r3, r3, r1, asr #8
 801239c:	1235      	asrs	r5, r6, #8
 801239e:	10f4      	asrs	r4, r6, #3
 80123a0:	121b      	asrs	r3, r3, #8
 80123a2:	00f6      	lsls	r6, r6, #3
 80123a4:	b299      	uxth	r1, r3
 80123a6:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 80123aa:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 80123ae:	b2f6      	uxtb	r6, r6
 80123b0:	43db      	mvns	r3, r3
 80123b2:	b2d2      	uxtb	r2, r2
 80123b4:	b2db      	uxtb	r3, r3
 80123b6:	fb1c fc01 	smulbb	ip, ip, r1
 80123ba:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 80123be:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 80123c2:	fb12 f201 	smulbb	r2, r2, r1
 80123c6:	fb05 c503 	mla	r5, r5, r3, ip
 80123ca:	f004 04fc 	and.w	r4, r4, #252	@ 0xfc
 80123ce:	b2ff      	uxtb	r7, r7
 80123d0:	fb06 2203 	mla	r2, r6, r3, r2
 80123d4:	b2ad      	uxth	r5, r5
 80123d6:	fb17 f701 	smulbb	r7, r7, r1
 80123da:	b292      	uxth	r2, r2
 80123dc:	ea44 1494 	orr.w	r4, r4, r4, lsr #6
 80123e0:	fb04 7403 	mla	r4, r4, r3, r7
 80123e4:	f105 0c01 	add.w	ip, r5, #1
 80123e8:	1c57      	adds	r7, r2, #1
 80123ea:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 80123ee:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 80123f2:	b2a4      	uxth	r4, r4
 80123f4:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 80123f8:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 80123fc:	433d      	orrs	r5, r7
 80123fe:	1c67      	adds	r7, r4, #1
 8012400:	eb07 2414 	add.w	r4, r7, r4, lsr #8
 8012404:	0964      	lsrs	r4, r4, #5
 8012406:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
 801240a:	4325      	orrs	r5, r4
 801240c:	8005      	strh	r5, [r0, #0]
 801240e:	e7bd      	b.n	801238c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 8012410:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012412:	4418      	add	r0, r3
 8012414:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012416:	4499      	add	r9, r3
 8012418:	e795      	b.n	8012346 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xe2>
 801241a:	4b04      	ldr	r3, [pc, #16]	@ (801242c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 801241c:	6818      	ldr	r0, [r3, #0]
 801241e:	6803      	ldr	r3, [r0, #0]
 8012420:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012422:	4798      	blx	r3
 8012424:	e771      	b.n	801230a <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xa6>
 8012426:	bf00      	nop
 8012428:	20014f4e 	.word	0x20014f4e
 801242c:	20014f54 	.word	0x20014f54

08012430 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>:
 8012430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012434:	b087      	sub	sp, #28
 8012436:	4680      	mov	r8, r0
 8012438:	f89d 6040 	ldrb.w	r6, [sp, #64]	@ 0x40
 801243c:	460d      	mov	r5, r1
 801243e:	4614      	mov	r4, r2
 8012440:	2e00      	cmp	r6, #0
 8012442:	f000 80b9 	beq.w	80125b8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x188>
 8012446:	6810      	ldr	r0, [r2, #0]
 8012448:	6851      	ldr	r1, [r2, #4]
 801244a:	af02      	add	r7, sp, #8
 801244c:	c703      	stmia	r7!, {r0, r1}
 801244e:	6818      	ldr	r0, [r3, #0]
 8012450:	6859      	ldr	r1, [r3, #4]
 8012452:	af04      	add	r7, sp, #16
 8012454:	c703      	stmia	r7!, {r0, r1}
 8012456:	a802      	add	r0, sp, #8
 8012458:	f7fa fff4 	bl	800d444 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801245c:	4621      	mov	r1, r4
 801245e:	a804      	add	r0, sp, #16
 8012460:	f7fb f818 	bl	800d494 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8012464:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8012468:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801246c:	f8bd 400c 	ldrh.w	r4, [sp, #12]
 8012470:	f9bd 7016 	ldrsh.w	r7, [sp, #22]
 8012474:	fb14 2103 	smlabb	r1, r4, r3, r2
 8012478:	eb08 0401 	add.w	r4, r8, r1
 801247c:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8012480:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 8012484:	440a      	add	r2, r1
 8012486:	f8ad 2010 	strh.w	r2, [sp, #16]
 801248a:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801248e:	4413      	add	r3, r2
 8012490:	f8ad 3012 	strh.w	r3, [sp, #18]
 8012494:	4b4a      	ldr	r3, [pc, #296]	@ (80125c0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
 8012496:	6818      	ldr	r0, [r3, #0]
 8012498:	6803      	ldr	r3, [r0, #0]
 801249a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801249c:	4798      	blx	r3
 801249e:	4b49      	ldr	r3, [pc, #292]	@ (80125c4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x194>)
 80124a0:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 80124a4:	881a      	ldrh	r2, [r3, #0]
 80124a6:	f9bd c010 	ldrsh.w	ip, [sp, #16]
 80124aa:	2eff      	cmp	r6, #255	@ 0xff
 80124ac:	fb02 c101 	mla	r1, r2, r1, ip
 80124b0:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 80124b4:	fb02 f207 	mul.w	r2, r2, r7
 80124b8:	f105 0104 	add.w	r1, r5, #4
 80124bc:	ea4f 0a48 	mov.w	sl, r8, lsl #1
 80124c0:	461d      	mov	r5, r3
 80124c2:	d05a      	beq.n	801257a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14a>
 80124c4:	f1c6 0eff 	rsb	lr, r6, #255	@ 0xff
 80124c8:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 80124cc:	b2b6      	uxth	r6, r6
 80124ce:	fa1f fe8e 	uxth.w	lr, lr
 80124d2:	9301      	str	r3, [sp, #4]
 80124d4:	4282      	cmp	r2, r0
 80124d6:	d96a      	bls.n	80125ae <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
 80124d8:	eb00 0b0a 	add.w	fp, r0, sl
 80124dc:	4583      	cmp	fp, r0
 80124de:	d940      	bls.n	8012562 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x132>
 80124e0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80124e4:	8805      	ldrh	r5, [r0, #0]
 80124e6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80124ea:	122f      	asrs	r7, r5, #8
 80124ec:	ea4f 2c23 	mov.w	ip, r3, asr #8
 80124f0:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 80124f4:	fb17 f70e 	smulbb	r7, r7, lr
 80124f8:	ea4f 09e5 	mov.w	r9, r5, asr #3
 80124fc:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 8012500:	00ed      	lsls	r5, r5, #3
 8012502:	fb0c 7c06 	mla	ip, ip, r6, r7
 8012506:	f009 09fc 	and.w	r9, r9, #252	@ 0xfc
 801250a:	10df      	asrs	r7, r3, #3
 801250c:	b2ed      	uxtb	r5, r5
 801250e:	00db      	lsls	r3, r3, #3
 8012510:	fa1f fc8c 	uxth.w	ip, ip
 8012514:	fb19 f90e 	smulbb	r9, r9, lr
 8012518:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 801251c:	b2db      	uxtb	r3, r3
 801251e:	fb15 f50e 	smulbb	r5, r5, lr
 8012522:	fb07 9706 	mla	r7, r7, r6, r9
 8012526:	fb03 5306 	mla	r3, r3, r6, r5
 801252a:	f10c 0901 	add.w	r9, ip, #1
 801252e:	b29b      	uxth	r3, r3
 8012530:	eb09 2c1c 	add.w	ip, r9, ip, lsr #8
 8012534:	f40c 4978 	and.w	r9, ip, #63488	@ 0xf800
 8012538:	f103 0c01 	add.w	ip, r3, #1
 801253c:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8012540:	b2bf      	uxth	r7, r7
 8012542:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8012546:	ea4c 0c09 	orr.w	ip, ip, r9
 801254a:	f107 0901 	add.w	r9, r7, #1
 801254e:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 8012552:	097f      	lsrs	r7, r7, #5
 8012554:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 8012558:	ea4c 0c07 	orr.w	ip, ip, r7
 801255c:	f820 cb02 	strh.w	ip, [r0], #2
 8012560:	e7bc      	b.n	80124dc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xac>
 8012562:	9b01      	ldr	r3, [sp, #4]
 8012564:	881b      	ldrh	r3, [r3, #0]
 8012566:	eba3 0308 	sub.w	r3, r3, r8
 801256a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801256e:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8012572:	eba3 0308 	sub.w	r3, r3, r8
 8012576:	441c      	add	r4, r3
 8012578:	e7ac      	b.n	80124d4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xa4>
 801257a:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801257e:	4282      	cmp	r2, r0
 8012580:	d915      	bls.n	80125ae <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
 8012582:	eb00 060a 	add.w	r6, r0, sl
 8012586:	4286      	cmp	r6, r0
 8012588:	d906      	bls.n	8012598 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x168>
 801258a:	f814 3b01 	ldrb.w	r3, [r4], #1
 801258e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8012592:	f820 3b02 	strh.w	r3, [r0], #2
 8012596:	e7f6      	b.n	8012586 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x156>
 8012598:	882b      	ldrh	r3, [r5, #0]
 801259a:	eba3 0308 	sub.w	r3, r3, r8
 801259e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80125a2:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 80125a6:	eba3 0308 	sub.w	r3, r3, r8
 80125aa:	441c      	add	r4, r3
 80125ac:	e7e7      	b.n	801257e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14e>
 80125ae:	4b04      	ldr	r3, [pc, #16]	@ (80125c0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
 80125b0:	6818      	ldr	r0, [r3, #0]
 80125b2:	6803      	ldr	r3, [r0, #0]
 80125b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80125b6:	4798      	blx	r3
 80125b8:	b007      	add	sp, #28
 80125ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80125be:	bf00      	nop
 80125c0:	20014f54 	.word	0x20014f54
 80125c4:	20014f4e 	.word	0x20014f4e

080125c8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 80125c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80125cc:	b091      	sub	sp, #68	@ 0x44
 80125ce:	4680      	mov	r8, r0
 80125d0:	f89d 5068 	ldrb.w	r5, [sp, #104]	@ 0x68
 80125d4:	460f      	mov	r7, r1
 80125d6:	4614      	mov	r4, r2
 80125d8:	2d00      	cmp	r5, #0
 80125da:	d051      	beq.n	8012680 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
 80125dc:	6810      	ldr	r0, [r2, #0]
 80125de:	6851      	ldr	r1, [r2, #4]
 80125e0:	f8df 9200 	ldr.w	r9, [pc, #512]	@ 80127e4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>
 80125e4:	ae0c      	add	r6, sp, #48	@ 0x30
 80125e6:	c603      	stmia	r6!, {r0, r1}
 80125e8:	6818      	ldr	r0, [r3, #0]
 80125ea:	6859      	ldr	r1, [r3, #4]
 80125ec:	ae0e      	add	r6, sp, #56	@ 0x38
 80125ee:	c603      	stmia	r6!, {r0, r1}
 80125f0:	a80c      	add	r0, sp, #48	@ 0x30
 80125f2:	f7fa ff27 	bl	800d444 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80125f6:	4621      	mov	r1, r4
 80125f8:	a80e      	add	r0, sp, #56	@ 0x38
 80125fa:	f7fa ff4b 	bl	800d494 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80125fe:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	@ 0x38
 8012602:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 8012606:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 801260a:	f8d9 0000 	ldr.w	r0, [r9]
 801260e:	f9bd 603c 	ldrsh.w	r6, [sp, #60]	@ 0x3c
 8012612:	f9bd a03e 	ldrsh.w	sl, [sp, #62]	@ 0x3e
 8012616:	fb11 2103 	smlabb	r1, r1, r3, r2
 801261a:	eb08 0401 	add.w	r4, r8, r1
 801261e:	f8bd 1030 	ldrh.w	r1, [sp, #48]	@ 0x30
 8012622:	f8df 81c4 	ldr.w	r8, [pc, #452]	@ 80127e8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x220>
 8012626:	440a      	add	r2, r1
 8012628:	f8ad 2038 	strh.w	r2, [sp, #56]	@ 0x38
 801262c:	f8bd 2032 	ldrh.w	r2, [sp, #50]	@ 0x32
 8012630:	4413      	add	r3, r2
 8012632:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
 8012636:	6803      	ldr	r3, [r0, #0]
 8012638:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801263a:	4798      	blx	r3
 801263c:	f010 0f80 	tst.w	r0, #128	@ 0x80
 8012640:	f8d9 0000 	ldr.w	r0, [r9]
 8012644:	d01f      	beq.n	8012686 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xbe>
 8012646:	2200      	movs	r2, #0
 8012648:	6801      	ldr	r1, [r0, #0]
 801264a:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 801264e:	e9cd 2208 	strd	r2, r2, [sp, #32]
 8012652:	220b      	movs	r2, #11
 8012654:	9207      	str	r2, [sp, #28]
 8012656:	f8b8 2000 	ldrh.w	r2, [r8]
 801265a:	9206      	str	r2, [sp, #24]
 801265c:	2201      	movs	r2, #1
 801265e:	e9cd 5204 	strd	r5, r2, [sp, #16]
 8012662:	f8bd 2034 	ldrh.w	r2, [sp, #52]	@ 0x34
 8012666:	9203      	str	r2, [sp, #12]
 8012668:	fa1f f28a 	uxth.w	r2, sl
 801266c:	9202      	str	r2, [sp, #8]
 801266e:	b2b6      	uxth	r6, r6
 8012670:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 8012674:	9200      	str	r2, [sp, #0]
 8012676:	9601      	str	r6, [sp, #4]
 8012678:	6bcd      	ldr	r5, [r1, #60]	@ 0x3c
 801267a:	463a      	mov	r2, r7
 801267c:	4621      	mov	r1, r4
 801267e:	47a8      	blx	r5
 8012680:	b011      	add	sp, #68	@ 0x44
 8012682:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012686:	6803      	ldr	r3, [r0, #0]
 8012688:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801268a:	4798      	blx	r3
 801268c:	f8b8 2000 	ldrh.w	r2, [r8]
 8012690:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 8012694:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	@ 0x38
 8012698:	2dff      	cmp	r5, #255	@ 0xff
 801269a:	fb02 1303 	mla	r3, r2, r3, r1
 801269e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80126a2:	ea4f 0946 	mov.w	r9, r6, lsl #1
 80126a6:	fb0a fa02 	mul.w	sl, sl, r2
 80126aa:	d062      	beq.n	8012772 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1aa>
 80126ac:	ea6f 0c05 	mvn.w	ip, r5
 80126b0:	eb00 034a 	add.w	r3, r0, sl, lsl #1
 80126b4:	930a      	str	r3, [sp, #40]	@ 0x28
 80126b6:	b2ad      	uxth	r5, r5
 80126b8:	fa5f fc8c 	uxtb.w	ip, ip
 80126bc:	f8cd 802c 	str.w	r8, [sp, #44]	@ 0x2c
 80126c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80126c2:	4298      	cmp	r0, r3
 80126c4:	f080 8085 	bcs.w	80127d2 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 80126c8:	eb00 0b09 	add.w	fp, r0, r9
 80126cc:	4558      	cmp	r0, fp
 80126ce:	d246      	bcs.n	801275e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x196>
 80126d0:	f814 eb01 	ldrb.w	lr, [r4], #1
 80126d4:	2303      	movs	r3, #3
 80126d6:	2204      	movs	r2, #4
 80126d8:	fb13 2e0e 	smlabb	lr, r3, lr, r2
 80126dc:	eb07 0a0e 	add.w	sl, r7, lr
 80126e0:	8803      	ldrh	r3, [r0, #0]
 80126e2:	f89a 8002 	ldrb.w	r8, [sl, #2]
 80126e6:	f817 e00e 	ldrb.w	lr, [r7, lr]
 80126ea:	1219      	asrs	r1, r3, #8
 80126ec:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 80126f0:	fb18 f805 	smulbb	r8, r8, r5
 80126f4:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
 80126f8:	10da      	asrs	r2, r3, #3
 80126fa:	fb01 810c 	mla	r1, r1, ip, r8
 80126fe:	00db      	lsls	r3, r3, #3
 8012700:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8012704:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 8012708:	b2db      	uxtb	r3, r3
 801270a:	fb18 f805 	smulbb	r8, r8, r5
 801270e:	fb1e fe05 	smulbb	lr, lr, r5
 8012712:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 8012716:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 801271a:	b289      	uxth	r1, r1
 801271c:	fb02 820c 	mla	r2, r2, ip, r8
 8012720:	fb03 e30c 	mla	r3, r3, ip, lr
 8012724:	b292      	uxth	r2, r2
 8012726:	b29b      	uxth	r3, r3
 8012728:	f101 0801 	add.w	r8, r1, #1
 801272c:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 8012730:	f103 0e01 	add.w	lr, r3, #1
 8012734:	f102 0801 	add.w	r8, r2, #1
 8012738:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 801273c:	eb08 2812 	add.w	r8, r8, r2, lsr #8
 8012740:	f401 4178 	and.w	r1, r1, #63488	@ 0xf800
 8012744:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 8012748:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801274c:	ea4e 0101 	orr.w	r1, lr, r1
 8012750:	f408 68fc 	and.w	r8, r8, #2016	@ 0x7e0
 8012754:	ea41 0108 	orr.w	r1, r1, r8
 8012758:	f820 1b02 	strh.w	r1, [r0], #2
 801275c:	e7b6      	b.n	80126cc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x104>
 801275e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012760:	881b      	ldrh	r3, [r3, #0]
 8012762:	1b9b      	subs	r3, r3, r6
 8012764:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8012768:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 801276c:	1b9b      	subs	r3, r3, r6
 801276e:	441c      	add	r4, r3
 8012770:	e7a6      	b.n	80126c0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xf8>
 8012772:	491b      	ldr	r1, [pc, #108]	@ (80127e0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x218>)
 8012774:	eb00 0a4a 	add.w	sl, r0, sl, lsl #1
 8012778:	2203      	movs	r2, #3
 801277a:	2504      	movs	r5, #4
 801277c:	4550      	cmp	r0, sl
 801277e:	d228      	bcs.n	80127d2 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 8012780:	eb00 0c09 	add.w	ip, r0, r9
 8012784:	4560      	cmp	r0, ip
 8012786:	4623      	mov	r3, r4
 8012788:	d219      	bcs.n	80127be <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1f6>
 801278a:	f893 e000 	ldrb.w	lr, [r3]
 801278e:	fb12 5e0e 	smlabb	lr, r2, lr, r5
 8012792:	eb07 0b0e 	add.w	fp, r7, lr
 8012796:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801279a:	f89b 3002 	ldrb.w	r3, [fp, #2]
 801279e:	f89b b001 	ldrb.w	fp, [fp, #1]
 80127a2:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 80127a6:	ea01 2303 	and.w	r3, r1, r3, lsl #8
 80127aa:	f40b 6bfc 	and.w	fp, fp, #2016	@ 0x7e0
 80127ae:	ea43 030b 	orr.w	r3, r3, fp
 80127b2:	ea43 03de 	orr.w	r3, r3, lr, lsr #3
 80127b6:	3401      	adds	r4, #1
 80127b8:	f820 3b02 	strh.w	r3, [r0], #2
 80127bc:	e7e2      	b.n	8012784 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1bc>
 80127be:	f8b8 3000 	ldrh.w	r3, [r8]
 80127c2:	1b9b      	subs	r3, r3, r6
 80127c4:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80127c8:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 80127cc:	1b9b      	subs	r3, r3, r6
 80127ce:	441c      	add	r4, r3
 80127d0:	e7d4      	b.n	801277c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b4>
 80127d2:	4b04      	ldr	r3, [pc, #16]	@ (80127e4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>)
 80127d4:	6818      	ldr	r0, [r3, #0]
 80127d6:	6803      	ldr	r3, [r0, #0]
 80127d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80127da:	4798      	blx	r3
 80127dc:	e750      	b.n	8012680 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
 80127de:	bf00      	nop
 80127e0:	fffff800 	.word	0xfffff800
 80127e4:	20014f54 	.word	0x20014f54
 80127e8:	20014f4e 	.word	0x20014f4e

080127ec <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 80127ec:	b4f0      	push	{r4, r5, r6, r7}
 80127ee:	460c      	mov	r4, r1
 80127f0:	4611      	mov	r1, r2
 80127f2:	f89d 5014 	ldrb.w	r5, [sp, #20]
 80127f6:	780f      	ldrb	r7, [r1, #0]
 80127f8:	784e      	ldrb	r6, [r1, #1]
 80127fa:	2f01      	cmp	r7, #1
 80127fc:	461a      	mov	r2, r3
 80127fe:	9b04      	ldr	r3, [sp, #16]
 8012800:	d038      	beq.n	8012874 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x88>
 8012802:	d31f      	bcc.n	8012844 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x58>
 8012804:	2f02      	cmp	r7, #2
 8012806:	d14d      	bne.n	80128a4 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 8012808:	2e03      	cmp	r6, #3
 801280a:	d84b      	bhi.n	80128a4 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 801280c:	e8df f006 	tbb	[pc, r6]
 8012810:	17140702 	.word	0x17140702
 8012814:	9504      	str	r5, [sp, #16]
 8012816:	4620      	mov	r0, r4
 8012818:	bcf0      	pop	{r4, r5, r6, r7}
 801281a:	f7ff be09 	b.w	8012430 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>
 801281e:	6fc0      	ldr	r0, [r0, #124]	@ 0x7c
 8012820:	2800      	cmp	r0, #0
 8012822:	d03f      	beq.n	80128a4 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 8012824:	6806      	ldr	r6, [r0, #0]
 8012826:	e9cd 3504 	strd	r3, r5, [sp, #16]
 801282a:	68b5      	ldr	r5, [r6, #8]
 801282c:	4613      	mov	r3, r2
 801282e:	46ac      	mov	ip, r5
 8012830:	460a      	mov	r2, r1
 8012832:	4621      	mov	r1, r4
 8012834:	bcf0      	pop	{r4, r5, r6, r7}
 8012836:	4760      	bx	ip
 8012838:	f8d0 0080 	ldr.w	r0, [r0, #128]	@ 0x80
 801283c:	e7f0      	b.n	8012820 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 801283e:	f8d0 0084 	ldr.w	r0, [r0, #132]	@ 0x84
 8012842:	e7ed      	b.n	8012820 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 8012844:	2e03      	cmp	r6, #3
 8012846:	d82d      	bhi.n	80128a4 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 8012848:	e8df f006 	tbb	[pc, r6]
 801284c:	110e0702 	.word	0x110e0702
 8012850:	9504      	str	r5, [sp, #16]
 8012852:	4620      	mov	r0, r4
 8012854:	bcf0      	pop	{r4, r5, r6, r7}
 8012856:	f7ff bd05 	b.w	8012264 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 801285a:	6fc0      	ldr	r0, [r0, #124]	@ 0x7c
 801285c:	b310      	cbz	r0, 80128a4 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 801285e:	6806      	ldr	r6, [r0, #0]
 8012860:	e9cd 3504 	strd	r3, r5, [sp, #16]
 8012864:	68f5      	ldr	r5, [r6, #12]
 8012866:	e7e1      	b.n	801282c <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x40>
 8012868:	f8d0 0080 	ldr.w	r0, [r0, #128]	@ 0x80
 801286c:	e7f6      	b.n	801285c <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x70>
 801286e:	f8d0 0084 	ldr.w	r0, [r0, #132]	@ 0x84
 8012872:	e7f3      	b.n	801285c <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x70>
 8012874:	2e03      	cmp	r6, #3
 8012876:	d815      	bhi.n	80128a4 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 8012878:	e8df f006 	tbb	[pc, r6]
 801287c:	110e0702 	.word	0x110e0702
 8012880:	9504      	str	r5, [sp, #16]
 8012882:	4620      	mov	r0, r4
 8012884:	bcf0      	pop	{r4, r5, r6, r7}
 8012886:	f7ff be9f 	b.w	80125c8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 801288a:	6fc0      	ldr	r0, [r0, #124]	@ 0x7c
 801288c:	b150      	cbz	r0, 80128a4 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 801288e:	6806      	ldr	r6, [r0, #0]
 8012890:	e9cd 3504 	strd	r3, r5, [sp, #16]
 8012894:	6935      	ldr	r5, [r6, #16]
 8012896:	e7c9      	b.n	801282c <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x40>
 8012898:	f8d0 0080 	ldr.w	r0, [r0, #128]	@ 0x80
 801289c:	e7f6      	b.n	801288c <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xa0>
 801289e:	f8d0 0084 	ldr.w	r0, [r0, #132]	@ 0x84
 80128a2:	e7f3      	b.n	801288c <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xa0>
 80128a4:	bcf0      	pop	{r4, r5, r6, r7}
 80128a6:	4770      	bx	lr

080128a8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>:
 80128a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80128ac:	4604      	mov	r4, r0
 80128ae:	b087      	sub	sp, #28
 80128b0:	6810      	ldr	r0, [r2, #0]
 80128b2:	f89d a040 	ldrb.w	sl, [sp, #64]	@ 0x40
 80128b6:	f8df 9238 	ldr.w	r9, [pc, #568]	@ 8012af0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x248>
 80128ba:	460e      	mov	r6, r1
 80128bc:	6851      	ldr	r1, [r2, #4]
 80128be:	ad02      	add	r5, sp, #8
 80128c0:	c503      	stmia	r5!, {r0, r1}
 80128c2:	6818      	ldr	r0, [r3, #0]
 80128c4:	6859      	ldr	r1, [r3, #4]
 80128c6:	ad04      	add	r5, sp, #16
 80128c8:	4617      	mov	r7, r2
 80128ca:	c503      	stmia	r5!, {r0, r1}
 80128cc:	a802      	add	r0, sp, #8
 80128ce:	f7fa fdb9 	bl	800d444 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80128d2:	4639      	mov	r1, r7
 80128d4:	a804      	add	r0, sp, #16
 80128d6:	f7fa fddd 	bl	800d494 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80128da:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80128de:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80128e2:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 80128e6:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 80128ea:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
 80128ee:	fb11 2103 	smlabb	r1, r1, r3, r2
 80128f2:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 80128f6:	440e      	add	r6, r1
 80128f8:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 80128fc:	440a      	add	r2, r1
 80128fe:	f8ad 2010 	strh.w	r2, [sp, #16]
 8012902:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8012906:	4413      	add	r3, r2
 8012908:	f8ad 3012 	strh.w	r3, [sp, #18]
 801290c:	4b77      	ldr	r3, [pc, #476]	@ (8012aec <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 801290e:	6818      	ldr	r0, [r3, #0]
 8012910:	6803      	ldr	r3, [r0, #0]
 8012912:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012914:	4798      	blx	r3
 8012916:	f8b9 b000 	ldrh.w	fp, [r9]
 801291a:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801291e:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8012922:	fb0b 2303 	mla	r3, fp, r3, r2
 8012926:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801292a:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 801292e:	ea4f 0348 	mov.w	r3, r8, lsl #1
 8012932:	fb05 f50b 	mul.w	r5, r5, fp
 8012936:	9300      	str	r3, [sp, #0]
 8012938:	d069      	beq.n	8012a0e <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x166>
 801293a:	eb00 0b45 	add.w	fp, r0, r5, lsl #1
 801293e:	4558      	cmp	r0, fp
 8012940:	f080 80cc 	bcs.w	8012adc <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 8012944:	9b00      	ldr	r3, [sp, #0]
 8012946:	18c3      	adds	r3, r0, r3
 8012948:	9301      	str	r3, [sp, #4]
 801294a:	4631      	mov	r1, r6
 801294c:	9b01      	ldr	r3, [sp, #4]
 801294e:	4298      	cmp	r0, r3
 8012950:	d24f      	bcs.n	80129f2 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x14a>
 8012952:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012956:	2a00      	cmp	r2, #0
 8012958:	d048      	beq.n	80129ec <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 801295a:	fb0a f202 	mul.w	r2, sl, r2
 801295e:	1c53      	adds	r3, r2, #1
 8012960:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8012964:	121b      	asrs	r3, r3, #8
 8012966:	d041      	beq.n	80129ec <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 8012968:	8802      	ldrh	r2, [r0, #0]
 801296a:	f8b4 c000 	ldrh.w	ip, [r4]
 801296e:	b29e      	uxth	r6, r3
 8012970:	1215      	asrs	r5, r2, #8
 8012972:	43db      	mvns	r3, r3
 8012974:	b2db      	uxtb	r3, r3
 8012976:	ea4f 272c 	mov.w	r7, ip, asr #8
 801297a:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 801297e:	fb15 f503 	smulbb	r5, r5, r3
 8012982:	ea4f 0ee2 	mov.w	lr, r2, asr #3
 8012986:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801298a:	00d2      	lsls	r2, r2, #3
 801298c:	fb07 5706 	mla	r7, r7, r6, r5
 8012990:	f00e 0efc 	and.w	lr, lr, #252	@ 0xfc
 8012994:	ea4f 05ec 	mov.w	r5, ip, asr #3
 8012998:	b2d2      	uxtb	r2, r2
 801299a:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801299e:	b2bf      	uxth	r7, r7
 80129a0:	fb1e fe03 	smulbb	lr, lr, r3
 80129a4:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 80129a8:	fa5f fc8c 	uxtb.w	ip, ip
 80129ac:	fb12 f203 	smulbb	r2, r2, r3
 80129b0:	fb05 e506 	mla	r5, r5, r6, lr
 80129b4:	fb0c 2c06 	mla	ip, ip, r6, r2
 80129b8:	f107 0e01 	add.w	lr, r7, #1
 80129bc:	fa1f fc8c 	uxth.w	ip, ip
 80129c0:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 80129c4:	f407 4e78 	and.w	lr, r7, #63488	@ 0xf800
 80129c8:	f10c 0701 	add.w	r7, ip, #1
 80129cc:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 80129d0:	b2ad      	uxth	r5, r5
 80129d2:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 80129d6:	ea47 070e 	orr.w	r7, r7, lr
 80129da:	f105 0e01 	add.w	lr, r5, #1
 80129de:	eb0e 2515 	add.w	r5, lr, r5, lsr #8
 80129e2:	096d      	lsrs	r5, r5, #5
 80129e4:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 80129e8:	432f      	orrs	r7, r5
 80129ea:	8007      	strh	r7, [r0, #0]
 80129ec:	3002      	adds	r0, #2
 80129ee:	3402      	adds	r4, #2
 80129f0:	e7ac      	b.n	801294c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xa4>
 80129f2:	f8b9 3000 	ldrh.w	r3, [r9]
 80129f6:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 80129fa:	eba3 0308 	sub.w	r3, r3, r8
 80129fe:	eba6 0608 	sub.w	r6, r6, r8
 8012a02:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 8012a06:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8012a0a:	440e      	add	r6, r1
 8012a0c:	e797      	b.n	801293e <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x96>
 8012a0e:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8012a12:	42a8      	cmp	r0, r5
 8012a14:	d262      	bcs.n	8012adc <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 8012a16:	9b00      	ldr	r3, [sp, #0]
 8012a18:	4631      	mov	r1, r6
 8012a1a:	eb00 0b03 	add.w	fp, r0, r3
 8012a1e:	4558      	cmp	r0, fp
 8012a20:	d24e      	bcs.n	8012ac0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x218>
 8012a22:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012a26:	b12b      	cbz	r3, 8012a34 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 8012a28:	2bff      	cmp	r3, #255	@ 0xff
 8012a2a:	f8b4 e000 	ldrh.w	lr, [r4]
 8012a2e:	d104      	bne.n	8012a3a <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x192>
 8012a30:	f8a0 e000 	strh.w	lr, [r0]
 8012a34:	3002      	adds	r0, #2
 8012a36:	3402      	adds	r4, #2
 8012a38:	e7f1      	b.n	8012a1e <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x176>
 8012a3a:	8802      	ldrh	r2, [r0, #0]
 8012a3c:	b29f      	uxth	r7, r3
 8012a3e:	1216      	asrs	r6, r2, #8
 8012a40:	43db      	mvns	r3, r3
 8012a42:	b2db      	uxtb	r3, r3
 8012a44:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8012a48:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 8012a4c:	fb16 f603 	smulbb	r6, r6, r3
 8012a50:	ea4f 0ae2 	mov.w	sl, r2, asr #3
 8012a54:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 8012a58:	00d2      	lsls	r2, r2, #3
 8012a5a:	fb0c 6c07 	mla	ip, ip, r7, r6
 8012a5e:	b2d2      	uxtb	r2, r2
 8012a60:	ea4f 06ee 	mov.w	r6, lr, asr #3
 8012a64:	f00a 0afc 	and.w	sl, sl, #252	@ 0xfc
 8012a68:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8012a6c:	fb1a fa03 	smulbb	sl, sl, r3
 8012a70:	fa1f fc8c 	uxth.w	ip, ip
 8012a74:	fb12 f303 	smulbb	r3, r2, r3
 8012a78:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 8012a7c:	fa5f fe8e 	uxtb.w	lr, lr
 8012a80:	fb06 a607 	mla	r6, r6, r7, sl
 8012a84:	f10c 0201 	add.w	r2, ip, #1
 8012a88:	fb0e 3307 	mla	r3, lr, r7, r3
 8012a8c:	b2b6      	uxth	r6, r6
 8012a8e:	b29b      	uxth	r3, r3
 8012a90:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 8012a94:	f40c 4278 	and.w	r2, ip, #63488	@ 0xf800
 8012a98:	f106 0a01 	add.w	sl, r6, #1
 8012a9c:	f103 0c01 	add.w	ip, r3, #1
 8012aa0:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8012aa4:	eb0a 2616 	add.w	r6, sl, r6, lsr #8
 8012aa8:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8012aac:	0976      	lsrs	r6, r6, #5
 8012aae:	ea4c 0c02 	orr.w	ip, ip, r2
 8012ab2:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 8012ab6:	ea4c 0c06 	orr.w	ip, ip, r6
 8012aba:	f8a0 c000 	strh.w	ip, [r0]
 8012abe:	e7b9      	b.n	8012a34 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 8012ac0:	f8b9 3000 	ldrh.w	r3, [r9]
 8012ac4:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 8012ac8:	eba3 0308 	sub.w	r3, r3, r8
 8012acc:	eba6 0608 	sub.w	r6, r6, r8
 8012ad0:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 8012ad4:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8012ad8:	440e      	add	r6, r1
 8012ada:	e79a      	b.n	8012a12 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x16a>
 8012adc:	4b03      	ldr	r3, [pc, #12]	@ (8012aec <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 8012ade:	6818      	ldr	r0, [r3, #0]
 8012ae0:	6803      	ldr	r3, [r0, #0]
 8012ae2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012ae4:	4798      	blx	r3
 8012ae6:	b007      	add	sp, #28
 8012ae8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012aec:	20014f54 	.word	0x20014f54
 8012af0:	20014f4e 	.word	0x20014f4e

08012af4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 8012af4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012af8:	b089      	sub	sp, #36	@ 0x24
 8012afa:	4607      	mov	r7, r0
 8012afc:	f89d 604c 	ldrb.w	r6, [sp, #76]	@ 0x4c
 8012b00:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8012b02:	4688      	mov	r8, r1
 8012b04:	4692      	mov	sl, r2
 8012b06:	4699      	mov	r9, r3
 8012b08:	2e00      	cmp	r6, #0
 8012b0a:	d048      	beq.n	8012b9e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8012b0c:	4608      	mov	r0, r1
 8012b0e:	f7fe fac3 	bl	8011098 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8012b12:	4605      	mov	r5, r0
 8012b14:	4640      	mov	r0, r8
 8012b16:	f7fe faf3 	bl	8011100 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8012b1a:	f8ad 000e 	strh.w	r0, [sp, #14]
 8012b1e:	4640      	mov	r0, r8
 8012b20:	f8ad a008 	strh.w	sl, [sp, #8]
 8012b24:	f8ad 500c 	strh.w	r5, [sp, #12]
 8012b28:	f8ad 900a 	strh.w	r9, [sp, #10]
 8012b2c:	f7fe fba6 	bl	801127c <_ZNK8touchgfx6Bitmap7getDataEv>
 8012b30:	4605      	mov	r5, r0
 8012b32:	4640      	mov	r0, r8
 8012b34:	f7fe fbd2 	bl	80112dc <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 8012b38:	4682      	mov	sl, r0
 8012b3a:	4640      	mov	r0, r8
 8012b3c:	f7fe fc22 	bl	8011384 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8012b40:	2810      	cmp	r0, #16
 8012b42:	d82c      	bhi.n	8012b9e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8012b44:	e8df f010 	tbh	[pc, r0, lsl #1]
 8012b48:	00ba00ca 	.word	0x00ba00ca
 8012b4c:	002b0011 	.word	0x002b0011
 8012b50:	002b002b 	.word	0x002b002b
 8012b54:	002b002b 	.word	0x002b002b
 8012b58:	002b002b 	.word	0x002b002b
 8012b5c:	00c1002b 	.word	0x00c1002b
 8012b60:	002b002b 	.word	0x002b002b
 8012b64:	002b0180 	.word	0x002b0180
 8012b68:	0173      	.short	0x0173
 8012b6a:	4bbc      	ldr	r3, [pc, #752]	@ (8012e5c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x368>)
 8012b6c:	6818      	ldr	r0, [r3, #0]
 8012b6e:	6803      	ldr	r3, [r0, #0]
 8012b70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012b72:	4798      	blx	r3
 8012b74:	2eff      	cmp	r6, #255	@ 0xff
 8012b76:	d101      	bne.n	8012b7c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x88>
 8012b78:	0683      	lsls	r3, r0, #26
 8012b7a:	d506      	bpl.n	8012b8a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x96>
 8012b7c:	4633      	mov	r3, r6
 8012b7e:	4622      	mov	r2, r4
 8012b80:	a902      	add	r1, sp, #8
 8012b82:	4628      	mov	r0, r5
 8012b84:	f7ff f8fc 	bl	8011d80 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8012b88:	e009      	b.n	8012b9e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8012b8a:	4640      	mov	r0, r8
 8012b8c:	f7fe fb3e 	bl	801120c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 8012b90:	b940      	cbnz	r0, 8012ba4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xb0>
 8012b92:	4623      	mov	r3, r4
 8012b94:	aa02      	add	r2, sp, #8
 8012b96:	4629      	mov	r1, r5
 8012b98:	4638      	mov	r0, r7
 8012b9a:	f7ff f9d7 	bl	8011f4c <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 8012b9e:	b009      	add	sp, #36	@ 0x24
 8012ba0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ba4:	f10d 0918 	add.w	r9, sp, #24
 8012ba8:	4641      	mov	r1, r8
 8012baa:	4648      	mov	r0, r9
 8012bac:	f7fe fadc 	bl	8011168 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8012bb0:	e899 0003 	ldmia.w	r9, {r0, r1}
 8012bb4:	f10d 0810 	add.w	r8, sp, #16
 8012bb8:	e888 0003 	stmia.w	r8, {r0, r1}
 8012bbc:	4640      	mov	r0, r8
 8012bbe:	4621      	mov	r1, r4
 8012bc0:	f7f7 f83e 	bl	8009c40 <_ZN8touchgfx4RectaNERKS0_>
 8012bc4:	4640      	mov	r0, r8
 8012bc6:	f7f7 f87e 	bl	8009cc6 <_ZNK8touchgfx4Rect7isEmptyEv>
 8012bca:	2800      	cmp	r0, #0
 8012bcc:	d1d6      	bne.n	8012b7c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x88>
 8012bce:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8012bd2:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8012bd6:	4293      	cmp	r3, r2
 8012bd8:	dd12      	ble.n	8012c00 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x10c>
 8012bda:	1a9b      	subs	r3, r3, r2
 8012bdc:	f9b4 0000 	ldrsh.w	r0, [r4]
 8012be0:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8012be4:	f8ad 0018 	strh.w	r0, [sp, #24]
 8012be8:	f8ad 201a 	strh.w	r2, [sp, #26]
 8012bec:	f8ad 101c 	strh.w	r1, [sp, #28]
 8012bf0:	f8ad 301e 	strh.w	r3, [sp, #30]
 8012bf4:	464a      	mov	r2, r9
 8012bf6:	4633      	mov	r3, r6
 8012bf8:	a902      	add	r1, sp, #8
 8012bfa:	4628      	mov	r0, r5
 8012bfc:	f7ff f8c0 	bl	8011d80 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8012c00:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8012c04:	f9b4 2000 	ldrsh.w	r2, [r4]
 8012c08:	4293      	cmp	r3, r2
 8012c0a:	dd12      	ble.n	8012c32 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x13e>
 8012c0c:	1a9b      	subs	r3, r3, r2
 8012c0e:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 8012c12:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 8012c16:	f8ad 2018 	strh.w	r2, [sp, #24]
 8012c1a:	f8ad 001a 	strh.w	r0, [sp, #26]
 8012c1e:	f8ad 301c 	strh.w	r3, [sp, #28]
 8012c22:	f8ad 101e 	strh.w	r1, [sp, #30]
 8012c26:	23ff      	movs	r3, #255	@ 0xff
 8012c28:	464a      	mov	r2, r9
 8012c2a:	a902      	add	r1, sp, #8
 8012c2c:	4628      	mov	r0, r5
 8012c2e:	f7ff f8a7 	bl	8011d80 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8012c32:	4643      	mov	r3, r8
 8012c34:	aa02      	add	r2, sp, #8
 8012c36:	4629      	mov	r1, r5
 8012c38:	4638      	mov	r0, r7
 8012c3a:	f7ff f987 	bl	8011f4c <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 8012c3e:	88a2      	ldrh	r2, [r4, #4]
 8012c40:	8823      	ldrh	r3, [r4, #0]
 8012c42:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 8012c46:	4413      	add	r3, r2
 8012c48:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8012c4c:	440a      	add	r2, r1
 8012c4e:	b29b      	uxth	r3, r3
 8012c50:	b292      	uxth	r2, r2
 8012c52:	b211      	sxth	r1, r2
 8012c54:	b218      	sxth	r0, r3
 8012c56:	4288      	cmp	r0, r1
 8012c58:	dd12      	ble.n	8012c80 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x18c>
 8012c5a:	1a9b      	subs	r3, r3, r2
 8012c5c:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 8012c60:	f9bd 6012 	ldrsh.w	r6, [sp, #18]
 8012c64:	f8ad 1018 	strh.w	r1, [sp, #24]
 8012c68:	f8ad 301c 	strh.w	r3, [sp, #28]
 8012c6c:	f8ad 001e 	strh.w	r0, [sp, #30]
 8012c70:	23ff      	movs	r3, #255	@ 0xff
 8012c72:	464a      	mov	r2, r9
 8012c74:	a902      	add	r1, sp, #8
 8012c76:	4628      	mov	r0, r5
 8012c78:	f8ad 601a 	strh.w	r6, [sp, #26]
 8012c7c:	f7ff f880 	bl	8011d80 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8012c80:	88e2      	ldrh	r2, [r4, #6]
 8012c82:	8863      	ldrh	r3, [r4, #2]
 8012c84:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 8012c88:	4413      	add	r3, r2
 8012c8a:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8012c8e:	440a      	add	r2, r1
 8012c90:	b29b      	uxth	r3, r3
 8012c92:	b292      	uxth	r2, r2
 8012c94:	b211      	sxth	r1, r2
 8012c96:	b218      	sxth	r0, r3
 8012c98:	4288      	cmp	r0, r1
 8012c9a:	dd80      	ble.n	8012b9e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8012c9c:	1a9b      	subs	r3, r3, r2
 8012c9e:	f9b4 6000 	ldrsh.w	r6, [r4]
 8012ca2:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8012ca6:	f8ad 301e 	strh.w	r3, [sp, #30]
 8012caa:	f8ad 6018 	strh.w	r6, [sp, #24]
 8012cae:	f8ad 101a 	strh.w	r1, [sp, #26]
 8012cb2:	f8ad 001c 	strh.w	r0, [sp, #28]
 8012cb6:	23ff      	movs	r3, #255	@ 0xff
 8012cb8:	464a      	mov	r2, r9
 8012cba:	e761      	b.n	8012b80 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x8c>
 8012cbc:	4633      	mov	r3, r6
 8012cbe:	4622      	mov	r2, r4
 8012cc0:	a902      	add	r1, sp, #8
 8012cc2:	4628      	mov	r0, r5
 8012cc4:	f7ff f9b2 	bl	801202c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
 8012cc8:	e769      	b.n	8012b9e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8012cca:	e9cd 4600 	strd	r4, r6, [sp]
 8012cce:	ab02      	add	r3, sp, #8
 8012cd0:	4652      	mov	r2, sl
 8012cd2:	4629      	mov	r1, r5
 8012cd4:	4638      	mov	r0, r7
 8012cd6:	f7ff fd89 	bl	80127ec <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 8012cda:	e760      	b.n	8012b9e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8012cdc:	4640      	mov	r0, r8
 8012cde:	f7fe fa95 	bl	801120c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 8012ce2:	b948      	cbnz	r0, 8012cf8 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x204>
 8012ce4:	683b      	ldr	r3, [r7, #0]
 8012ce6:	e9cd 6000 	strd	r6, r0, [sp]
 8012cea:	aa02      	add	r2, sp, #8
 8012cec:	68de      	ldr	r6, [r3, #12]
 8012cee:	4629      	mov	r1, r5
 8012cf0:	4623      	mov	r3, r4
 8012cf2:	4638      	mov	r0, r7
 8012cf4:	47b0      	blx	r6
 8012cf6:	e752      	b.n	8012b9e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8012cf8:	f10d 0918 	add.w	r9, sp, #24
 8012cfc:	4641      	mov	r1, r8
 8012cfe:	4648      	mov	r0, r9
 8012d00:	f7fe fa32 	bl	8011168 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8012d04:	e899 0003 	ldmia.w	r9, {r0, r1}
 8012d08:	f10d 0810 	add.w	r8, sp, #16
 8012d0c:	e888 0003 	stmia.w	r8, {r0, r1}
 8012d10:	4640      	mov	r0, r8
 8012d12:	4621      	mov	r1, r4
 8012d14:	f7f6 ff94 	bl	8009c40 <_ZN8touchgfx4RectaNERKS0_>
 8012d18:	4640      	mov	r0, r8
 8012d1a:	f7f6 ffd4 	bl	8009cc6 <_ZNK8touchgfx4Rect7isEmptyEv>
 8012d1e:	b138      	cbz	r0, 8012d30 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x23c>
 8012d20:	9600      	str	r6, [sp, #0]
 8012d22:	4623      	mov	r3, r4
 8012d24:	aa02      	add	r2, sp, #8
 8012d26:	4651      	mov	r1, sl
 8012d28:	4628      	mov	r0, r5
 8012d2a:	f7ff fdbd 	bl	80128a8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8012d2e:	e736      	b.n	8012b9e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8012d30:	683b      	ldr	r3, [r7, #0]
 8012d32:	e9cd 6000 	strd	r6, r0, [sp]
 8012d36:	aa02      	add	r2, sp, #8
 8012d38:	f8d3 b00c 	ldr.w	fp, [r3, #12]
 8012d3c:	4629      	mov	r1, r5
 8012d3e:	4643      	mov	r3, r8
 8012d40:	4638      	mov	r0, r7
 8012d42:	47d8      	blx	fp
 8012d44:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8012d48:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8012d4c:	4293      	cmp	r3, r2
 8012d4e:	dd13      	ble.n	8012d78 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x284>
 8012d50:	f9b4 0000 	ldrsh.w	r0, [r4]
 8012d54:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8012d58:	f8ad 0018 	strh.w	r0, [sp, #24]
 8012d5c:	1a9b      	subs	r3, r3, r2
 8012d5e:	f8ad 201a 	strh.w	r2, [sp, #26]
 8012d62:	f8ad 101c 	strh.w	r1, [sp, #28]
 8012d66:	f8ad 301e 	strh.w	r3, [sp, #30]
 8012d6a:	9600      	str	r6, [sp, #0]
 8012d6c:	464b      	mov	r3, r9
 8012d6e:	aa02      	add	r2, sp, #8
 8012d70:	4651      	mov	r1, sl
 8012d72:	4628      	mov	r0, r5
 8012d74:	f7ff fd98 	bl	80128a8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8012d78:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8012d7c:	f9b4 2000 	ldrsh.w	r2, [r4]
 8012d80:	4293      	cmp	r3, r2
 8012d82:	dd13      	ble.n	8012dac <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2b8>
 8012d84:	1a9b      	subs	r3, r3, r2
 8012d86:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 8012d8a:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 8012d8e:	f8ad 2018 	strh.w	r2, [sp, #24]
 8012d92:	f8ad 001a 	strh.w	r0, [sp, #26]
 8012d96:	f8ad 301c 	strh.w	r3, [sp, #28]
 8012d9a:	f8ad 101e 	strh.w	r1, [sp, #30]
 8012d9e:	9600      	str	r6, [sp, #0]
 8012da0:	464b      	mov	r3, r9
 8012da2:	aa02      	add	r2, sp, #8
 8012da4:	4651      	mov	r1, sl
 8012da6:	4628      	mov	r0, r5
 8012da8:	f7ff fd7e 	bl	80128a8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8012dac:	88a2      	ldrh	r2, [r4, #4]
 8012dae:	8823      	ldrh	r3, [r4, #0]
 8012db0:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 8012db4:	4413      	add	r3, r2
 8012db6:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8012dba:	440a      	add	r2, r1
 8012dbc:	b29b      	uxth	r3, r3
 8012dbe:	b292      	uxth	r2, r2
 8012dc0:	b211      	sxth	r1, r2
 8012dc2:	b218      	sxth	r0, r3
 8012dc4:	4288      	cmp	r0, r1
 8012dc6:	dd13      	ble.n	8012df0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2fc>
 8012dc8:	1a9b      	subs	r3, r3, r2
 8012dca:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 8012dce:	f9bd 7012 	ldrsh.w	r7, [sp, #18]
 8012dd2:	f8ad 1018 	strh.w	r1, [sp, #24]
 8012dd6:	f8ad 301c 	strh.w	r3, [sp, #28]
 8012dda:	f8ad 001e 	strh.w	r0, [sp, #30]
 8012dde:	9600      	str	r6, [sp, #0]
 8012de0:	464b      	mov	r3, r9
 8012de2:	aa02      	add	r2, sp, #8
 8012de4:	4651      	mov	r1, sl
 8012de6:	4628      	mov	r0, r5
 8012de8:	f8ad 701a 	strh.w	r7, [sp, #26]
 8012dec:	f7ff fd5c 	bl	80128a8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8012df0:	88e2      	ldrh	r2, [r4, #6]
 8012df2:	8863      	ldrh	r3, [r4, #2]
 8012df4:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 8012df8:	4413      	add	r3, r2
 8012dfa:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8012dfe:	440a      	add	r2, r1
 8012e00:	b29b      	uxth	r3, r3
 8012e02:	b292      	uxth	r2, r2
 8012e04:	b211      	sxth	r1, r2
 8012e06:	b218      	sxth	r0, r3
 8012e08:	4288      	cmp	r0, r1
 8012e0a:	f77f aec8 	ble.w	8012b9e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8012e0e:	f9b4 7000 	ldrsh.w	r7, [r4]
 8012e12:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8012e16:	f8ad 7018 	strh.w	r7, [sp, #24]
 8012e1a:	1a9b      	subs	r3, r3, r2
 8012e1c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8012e20:	f8ad 101a 	strh.w	r1, [sp, #26]
 8012e24:	f8ad 001c 	strh.w	r0, [sp, #28]
 8012e28:	9600      	str	r6, [sp, #0]
 8012e2a:	464b      	mov	r3, r9
 8012e2c:	e77a      	b.n	8012d24 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x230>
 8012e2e:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8012e32:	2800      	cmp	r0, #0
 8012e34:	f43f aeb3 	beq.w	8012b9e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8012e38:	6803      	ldr	r3, [r0, #0]
 8012e3a:	9600      	str	r6, [sp, #0]
 8012e3c:	68de      	ldr	r6, [r3, #12]
 8012e3e:	4623      	mov	r3, r4
 8012e40:	aa02      	add	r2, sp, #8
 8012e42:	4629      	mov	r1, r5
 8012e44:	47b0      	blx	r6
 8012e46:	e6aa      	b.n	8012b9e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8012e48:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8012e4c:	2800      	cmp	r0, #0
 8012e4e:	f43f aea6 	beq.w	8012b9e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8012e52:	6803      	ldr	r3, [r0, #0]
 8012e54:	9600      	str	r6, [sp, #0]
 8012e56:	689e      	ldr	r6, [r3, #8]
 8012e58:	e7f1      	b.n	8012e3e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x34a>
 8012e5a:	bf00      	nop
 8012e5c:	20014f54 	.word	0x20014f54

08012e60 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>:
 8012e60:	b180      	cbz	r0, 8012e84 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x24>
 8012e62:	2903      	cmp	r1, #3
 8012e64:	d81c      	bhi.n	8012ea0 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 8012e66:	e8df f001 	tbb	[pc, r1]
 8012e6a:	1d02      	.short	0x1d02
 8012e6c:	1f08      	.short	0x1f08
 8012e6e:	4b10      	ldr	r3, [pc, #64]	@ (8012eb0 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 8012e70:	8818      	ldrh	r0, [r3, #0]
 8012e72:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8012e76:	4240      	negs	r0, r0
 8012e78:	4770      	bx	lr
 8012e7a:	4b0d      	ldr	r3, [pc, #52]	@ (8012eb0 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 8012e7c:	8818      	ldrh	r0, [r3, #0]
 8012e7e:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8012e82:	4770      	bx	lr
 8012e84:	2903      	cmp	r1, #3
 8012e86:	d80b      	bhi.n	8012ea0 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 8012e88:	a301      	add	r3, pc, #4	@ (adr r3, 8012e90 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x30>)
 8012e8a:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 8012e8e:	bf00      	nop
 8012e90:	08012ea5 	.word	0x08012ea5
 8012e94:	08012e7b 	.word	0x08012e7b
 8012e98:	08012ea9 	.word	0x08012ea9
 8012e9c:	08012e6f 	.word	0x08012e6f
 8012ea0:	2000      	movs	r0, #0
 8012ea2:	4770      	bx	lr
 8012ea4:	2001      	movs	r0, #1
 8012ea6:	4770      	bx	lr
 8012ea8:	f04f 30ff 	mov.w	r0, #4294967295
 8012eac:	4770      	bx	lr
 8012eae:	bf00      	nop
 8012eb0:	20014f4e 	.word	0x20014f4e

08012eb4 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>:
 8012eb4:	b180      	cbz	r0, 8012ed8 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x24>
 8012eb6:	2903      	cmp	r1, #3
 8012eb8:	d81c      	bhi.n	8012ef4 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
 8012eba:	e8df f001 	tbb	[pc, r1]
 8012ebe:	021d      	.short	0x021d
 8012ec0:	071f      	.short	0x071f
 8012ec2:	4b10      	ldr	r3, [pc, #64]	@ (8012f04 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 8012ec4:	8818      	ldrh	r0, [r3, #0]
 8012ec6:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8012eca:	4770      	bx	lr
 8012ecc:	4b0d      	ldr	r3, [pc, #52]	@ (8012f04 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 8012ece:	8818      	ldrh	r0, [r3, #0]
 8012ed0:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8012ed4:	4240      	negs	r0, r0
 8012ed6:	4770      	bx	lr
 8012ed8:	2903      	cmp	r1, #3
 8012eda:	d80b      	bhi.n	8012ef4 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
 8012edc:	a301      	add	r3, pc, #4	@ (adr r3, 8012ee4 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x30>)
 8012ede:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 8012ee2:	bf00      	nop
 8012ee4:	08012ec3 	.word	0x08012ec3
 8012ee8:	08012efd 	.word	0x08012efd
 8012eec:	08012ecd 	.word	0x08012ecd
 8012ef0:	08012ef9 	.word	0x08012ef9
 8012ef4:	2000      	movs	r0, #0
 8012ef6:	4770      	bx	lr
 8012ef8:	2001      	movs	r0, #1
 8012efa:	4770      	bx	lr
 8012efc:	f04f 30ff 	mov.w	r0, #4294967295
 8012f00:	4770      	bx	lr
 8012f02:	bf00      	nop
 8012f04:	20014f4e 	.word	0x20014f4e

08012f08 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 8012f08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f0c:	b099      	sub	sp, #100	@ 0x64
 8012f0e:	910b      	str	r1, [sp, #44]	@ 0x2c
 8012f10:	a914      	add	r1, sp, #80	@ 0x50
 8012f12:	e881 000c 	stmia.w	r1, {r2, r3}
 8012f16:	e9dd 2126 	ldrd	r2, r1, [sp, #152]	@ 0x98
 8012f1a:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	@ 0x8c
 8012f1e:	f891 900d 	ldrb.w	r9, [r1, #13]
 8012f22:	9309      	str	r3, [sp, #36]	@ 0x24
 8012f24:	f89d 30a4 	ldrb.w	r3, [sp, #164]	@ 0xa4
 8012f28:	9310      	str	r3, [sp, #64]	@ 0x40
 8012f2a:	ea4f 1749 	mov.w	r7, r9, lsl #5
 8012f2e:	f89d 30b0 	ldrb.w	r3, [sp, #176]	@ 0xb0
 8012f32:	930c      	str	r3, [sp, #48]	@ 0x30
 8012f34:	f407 7380 	and.w	r3, r7, #256	@ 0x100
 8012f38:	798f      	ldrb	r7, [r1, #6]
 8012f3a:	f9bd 4088 	ldrsh.w	r4, [sp, #136]	@ 0x88
 8012f3e:	f8bd 5090 	ldrh.w	r5, [sp, #144]	@ 0x90
 8012f42:	f8bd 6094 	ldrh.w	r6, [sp, #148]	@ 0x94
 8012f46:	f89d 80ac 	ldrb.w	r8, [sp, #172]	@ 0xac
 8012f4a:	f89d a0b4 	ldrb.w	sl, [sp, #180]	@ 0xb4
 8012f4e:	431f      	orrs	r7, r3
 8012f50:	f000 8195 	beq.w	801327e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 8012f54:	ea4f 1909 	mov.w	r9, r9, lsl #4
 8012f58:	f409 7380 	and.w	r3, r9, #256	@ 0x100
 8012f5c:	f891 9007 	ldrb.w	r9, [r1, #7]
 8012f60:	ea59 0903 	orrs.w	r9, r9, r3
 8012f64:	f000 818b 	beq.w	801327e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 8012f68:	f991 3009 	ldrsb.w	r3, [r1, #9]
 8012f6c:	b29b      	uxth	r3, r3
 8012f6e:	2d00      	cmp	r5, #0
 8012f70:	f000 812e 	beq.w	80131d0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2c8>
 8012f74:	1aed      	subs	r5, r5, r3
 8012f76:	b2ad      	uxth	r5, r5
 8012f78:	042b      	lsls	r3, r5, #16
 8012f7a:	d502      	bpl.n	8012f82 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
 8012f7c:	1b64      	subs	r4, r4, r5
 8012f7e:	b224      	sxth	r4, r4
 8012f80:	2500      	movs	r5, #0
 8012f82:	f9b2 1000 	ldrsh.w	r1, [r2]
 8012f86:	f8cd 9028 	str.w	r9, [sp, #40]	@ 0x28
 8012f8a:	428c      	cmp	r4, r1
 8012f8c:	b28b      	uxth	r3, r1
 8012f8e:	bfbf      	itttt	lt
 8012f90:	18ed      	addlt	r5, r5, r3
 8012f92:	1b2c      	sublt	r4, r5, r4
 8012f94:	b2a5      	uxthlt	r5, r4
 8012f96:	460c      	movlt	r4, r1
 8012f98:	8891      	ldrh	r1, [r2, #4]
 8012f9a:	440b      	add	r3, r1
 8012f9c:	b21b      	sxth	r3, r3
 8012f9e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8012fa0:	88d3      	ldrh	r3, [r2, #6]
 8012fa2:	8852      	ldrh	r2, [r2, #2]
 8012fa4:	4413      	add	r3, r2
 8012fa6:	b21b      	sxth	r3, r3
 8012fa8:	930d      	str	r3, [sp, #52]	@ 0x34
 8012faa:	4bbe      	ldr	r3, [pc, #760]	@ (80132a4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39c>)
 8012fac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012fae:	f893 b000 	ldrb.w	fp, [r3]
 8012fb2:	f10b 3cff 	add.w	ip, fp, #4294967295
 8012fb6:	f1dc 0300 	rsbs	r3, ip, #0
 8012fba:	eb43 030c 	adc.w	r3, r3, ip
 8012fbe:	930e      	str	r3, [sp, #56]	@ 0x38
 8012fc0:	4621      	mov	r1, r4
 8012fc2:	4653      	mov	r3, sl
 8012fc4:	a814      	add	r0, sp, #80	@ 0x50
 8012fc6:	f7fa f8b2 	bl	800d12e <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 8012fca:	4621      	mov	r1, r4
 8012fcc:	f8ad 005c 	strh.w	r0, [sp, #92]	@ 0x5c
 8012fd0:	4653      	mov	r3, sl
 8012fd2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012fd4:	a814      	add	r0, sp, #80	@ 0x50
 8012fd6:	f7fa f8c7 	bl	800d168 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 8012fda:	a918      	add	r1, sp, #96	@ 0x60
 8012fdc:	f821 0d02 	strh.w	r0, [r1, #-2]!
 8012fe0:	a817      	add	r0, sp, #92	@ 0x5c
 8012fe2:	f7fa f9ed 	bl	800d3c0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 8012fe6:	f1ba 0f00 	cmp.w	sl, #0
 8012fea:	f040 80f4 	bne.w	80131d6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ce>
 8012fee:	f1bb 0f01 	cmp.w	fp, #1
 8012ff2:	f040 80f8 	bne.w	80131e6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2de>
 8012ff6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8012ff8:	2b00      	cmp	r3, #0
 8012ffa:	f040 8145 	bne.w	8013288 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>
 8012ffe:	b2ba      	uxth	r2, r7
 8013000:	b905      	cbnz	r5, 8013004 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xfc>
 8013002:	b16e      	cbz	r6, 8013020 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x118>
 8013004:	fb06 5302 	mla	r3, r6, r2, r5
 8013008:	9828      	ldr	r0, [sp, #160]	@ 0xa0
 801300a:	fb08 f303 	mul.w	r3, r8, r3
 801300e:	4631      	mov	r1, r6
 8013010:	f003 0607 	and.w	r6, r3, #7
 8013014:	eb00 03d3 	add.w	r3, r0, r3, lsr #3
 8013018:	9328      	str	r3, [sp, #160]	@ 0xa0
 801301a:	eba9 0301 	sub.w	r3, r9, r1
 801301e:	930a      	str	r3, [sp, #40]	@ 0x28
 8013020:	4651      	mov	r1, sl
 8013022:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8013024:	f7ff ff1c 	bl	8012e60 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>
 8013028:	4681      	mov	r9, r0
 801302a:	980e      	ldr	r0, [sp, #56]	@ 0x38
 801302c:	f7ff ff42 	bl	8012eb4 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>
 8013030:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8013032:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8013034:	eba3 0a01 	sub.w	sl, r3, r1
 8013038:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801303a:	459a      	cmp	sl, r3
 801303c:	bfa8      	it	ge
 801303e:	469a      	movge	sl, r3
 8013040:	f1ba 0f00 	cmp.w	sl, #0
 8013044:	4683      	mov	fp, r0
 8013046:	f340 811a 	ble.w	801327e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 801304a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801304c:	1b64      	subs	r4, r4, r5
 801304e:	1b1c      	subs	r4, r3, r4
 8013050:	42bc      	cmp	r4, r7
 8013052:	bfd4      	ite	le
 8013054:	ebc5 0504 	rsble	r5, r5, r4
 8013058:	ebc5 0507 	rsbgt	r5, r5, r7
 801305c:	2d00      	cmp	r5, #0
 801305e:	f340 810e 	ble.w	801327e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 8013062:	1b52      	subs	r2, r2, r5
 8013064:	fb08 f302 	mul.w	r3, r8, r2
 8013068:	930f      	str	r3, [sp, #60]	@ 0x3c
 801306a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801306c:	2b00      	cmp	r3, #0
 801306e:	f040 8116 	bne.w	801329e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x396>
 8013072:	4b8d      	ldr	r3, [pc, #564]	@ (80132a8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a0>)
 8013074:	6818      	ldr	r0, [r3, #0]
 8013076:	6803      	ldr	r3, [r0, #0]
 8013078:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801307a:	4798      	blx	r3
 801307c:	2301      	movs	r3, #1
 801307e:	fa03 f308 	lsl.w	r3, r3, r8
 8013082:	4a8a      	ldr	r2, [pc, #552]	@ (80132ac <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a4>)
 8013084:	3b01      	subs	r3, #1
 8013086:	b2db      	uxtb	r3, r3
 8013088:	8811      	ldrh	r1, [r2, #0]
 801308a:	930e      	str	r3, [sp, #56]	@ 0x38
 801308c:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	@ 0x5c
 8013090:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	@ 0x5e
 8013094:	fb01 2303 	mla	r3, r1, r3, r2
 8013098:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801309c:	930a      	str	r3, [sp, #40]	@ 0x28
 801309e:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 80130a0:	f3c3 4307 	ubfx	r3, r3, #16, #8
 80130a4:	9313      	str	r3, [sp, #76]	@ 0x4c
 80130a6:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 80130a8:	0a19      	lsrs	r1, r3, #8
 80130aa:	b2cb      	uxtb	r3, r1
 80130ac:	9312      	str	r3, [sp, #72]	@ 0x48
 80130ae:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 80130b0:	b2db      	uxtb	r3, r3
 80130b2:	9311      	str	r3, [sp, #68]	@ 0x44
 80130b4:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 80130b6:	095a      	lsrs	r2, r3, #5
 80130b8:	4b7d      	ldr	r3, [pc, #500]	@ (80132b0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a8>)
 80130ba:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 80130be:	400b      	ands	r3, r1
 80130c0:	4313      	orrs	r3, r2
 80130c2:	9a2a      	ldr	r2, [sp, #168]	@ 0xa8
 80130c4:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 80130c8:	4313      	orrs	r3, r2
 80130ca:	b29b      	uxth	r3, r3
 80130cc:	9310      	str	r3, [sp, #64]	@ 0x40
 80130ce:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80130d0:	781a      	ldrb	r2, [r3, #0]
 80130d2:	ea4f 0349 	mov.w	r3, r9, lsl #1
 80130d6:	4132      	asrs	r2, r6
 80130d8:	fb05 b919 	mls	r9, r5, r9, fp
 80130dc:	fb03 fb05 	mul.w	fp, r3, r5
 80130e0:	b2d2      	uxtb	r2, r2
 80130e2:	930d      	str	r3, [sp, #52]	@ 0x34
 80130e4:	eb0b 0b49 	add.w	fp, fp, r9, lsl #1
 80130e8:	f11a 3aff 	adds.w	sl, sl, #4294967295
 80130ec:	f0c0 80f5 	bcc.w	80132da <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3d2>
 80130f0:	f8dd c028 	ldr.w	ip, [sp, #40]	@ 0x28
 80130f4:	46ae      	mov	lr, r5
 80130f6:	f11e 3eff 	adds.w	lr, lr, #4294967295
 80130fa:	f0c0 80dd 	bcc.w	80132b8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b0>
 80130fe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013100:	4013      	ands	r3, r2
 8013102:	d055      	beq.n	80131b0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a8>
 8013104:	20ff      	movs	r0, #255	@ 0xff
 8013106:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8013108:	fb90 f1f1 	sdiv	r1, r0, r1
 801310c:	434b      	muls	r3, r1
 801310e:	2bfe      	cmp	r3, #254	@ 0xfe
 8013110:	dd03      	ble.n	801311a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x212>
 8013112:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8013114:	4281      	cmp	r1, r0
 8013116:	f000 80cd 	beq.w	80132b4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>
 801311a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801311c:	f8bc 4000 	ldrh.w	r4, [ip]
 8013120:	fb11 f303 	smulbb	r3, r1, r3
 8013124:	b29b      	uxth	r3, r3
 8013126:	1c59      	adds	r1, r3, #1
 8013128:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 801312c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8013130:	b29f      	uxth	r7, r3
 8013132:	43db      	mvns	r3, r3
 8013134:	b2db      	uxtb	r3, r3
 8013136:	9309      	str	r3, [sp, #36]	@ 0x24
 8013138:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801313a:	1220      	asrs	r0, r4, #8
 801313c:	fb13 f907 	smulbb	r9, r3, r7
 8013140:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 8013144:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013146:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 801314a:	fb00 9003 	mla	r0, r0, r3, r9
 801314e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8013150:	10e1      	asrs	r1, r4, #3
 8013152:	fb13 f907 	smulbb	r9, r3, r7
 8013156:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 801315a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801315c:	ea41 1191 	orr.w	r1, r1, r1, lsr #6
 8013160:	fb01 9103 	mla	r1, r1, r3, r9
 8013164:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8013166:	00e4      	lsls	r4, r4, #3
 8013168:	fb13 f707 	smulbb	r7, r3, r7
 801316c:	b2e4      	uxtb	r4, r4
 801316e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013170:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 8013174:	fb04 7403 	mla	r4, r4, r3, r7
 8013178:	b280      	uxth	r0, r0
 801317a:	b2a4      	uxth	r4, r4
 801317c:	1c43      	adds	r3, r0, #1
 801317e:	f104 0901 	add.w	r9, r4, #1
 8013182:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8013186:	eb09 2914 	add.w	r9, r9, r4, lsr #8
 801318a:	b289      	uxth	r1, r1
 801318c:	f3c9 29c4 	ubfx	r9, r9, #11, #5
 8013190:	f400 4078 	and.w	r0, r0, #63488	@ 0xf800
 8013194:	ea49 0000 	orr.w	r0, r9, r0
 8013198:	f101 0901 	add.w	r9, r1, #1
 801319c:	eb09 2911 	add.w	r9, r9, r1, lsr #8
 80131a0:	ea4f 1959 	mov.w	r9, r9, lsr #5
 80131a4:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 80131a8:	ea40 0009 	orr.w	r0, r0, r9
 80131ac:	f8ac 0000 	strh.w	r0, [ip]
 80131b0:	4446      	add	r6, r8
 80131b2:	b2b6      	uxth	r6, r6
 80131b4:	2e07      	cmp	r6, #7
 80131b6:	bf81      	itttt	hi
 80131b8:	9b28      	ldrhi	r3, [sp, #160]	@ 0xa0
 80131ba:	785a      	ldrbhi	r2, [r3, #1]
 80131bc:	3301      	addhi	r3, #1
 80131be:	9328      	strhi	r3, [sp, #160]	@ 0xa0
 80131c0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80131c2:	bf9a      	itte	ls
 80131c4:	fa42 f208 	asrls.w	r2, r2, r8
 80131c8:	b2d2      	uxtbls	r2, r2
 80131ca:	2600      	movhi	r6, #0
 80131cc:	449c      	add	ip, r3
 80131ce:	e792      	b.n	80130f6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1ee>
 80131d0:	441c      	add	r4, r3
 80131d2:	b224      	sxth	r4, r4
 80131d4:	e6d5      	b.n	8012f82 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
 80131d6:	f1ba 0f01 	cmp.w	sl, #1
 80131da:	f47f af0c 	bne.w	8012ff6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 80131de:	f1bb 0f01 	cmp.w	fp, #1
 80131e2:	f47f af08 	bne.w	8012ff6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 80131e6:	f8df b0c0 	ldr.w	fp, [pc, #192]	@ 80132a8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a0>
 80131ea:	f8db 0000 	ldr.w	r0, [fp]
 80131ee:	6803      	ldr	r3, [r0, #0]
 80131f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80131f2:	4798      	blx	r3
 80131f4:	f410 7380 	ands.w	r3, r0, #256	@ 0x100
 80131f8:	465a      	mov	r2, fp
 80131fa:	d006      	beq.n	801320a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x302>
 80131fc:	f1b8 0f04 	cmp.w	r8, #4
 8013200:	d140      	bne.n	8013284 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37c>
 8013202:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8013204:	3300      	adds	r3, #0
 8013206:	bf18      	it	ne
 8013208:	2301      	movne	r3, #1
 801320a:	0580      	lsls	r0, r0, #22
 801320c:	d56e      	bpl.n	80132ec <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e4>
 801320e:	f1b8 0f08 	cmp.w	r8, #8
 8013212:	d16b      	bne.n	80132ec <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e4>
 8013214:	2b00      	cmp	r3, #0
 8013216:	bf0c      	ite	eq
 8013218:	f44f 7100 	moveq.w	r1, #512	@ 0x200
 801321c:	f44f 7180 	movne.w	r1, #256	@ 0x100
 8013220:	2d00      	cmp	r5, #0
 8013222:	f47f aee8 	bne.w	8012ff6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 8013226:	2e00      	cmp	r6, #0
 8013228:	f47f aee5 	bne.w	8012ff6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801322c:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 801322e:	19e3      	adds	r3, r4, r7
 8013230:	4283      	cmp	r3, r0
 8013232:	f73f aee0 	bgt.w	8012ff6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 8013236:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013238:	980d      	ldr	r0, [sp, #52]	@ 0x34
 801323a:	444b      	add	r3, r9
 801323c:	4283      	cmp	r3, r0
 801323e:	f73f aeda 	bgt.w	8012ff6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 8013242:	6810      	ldr	r0, [r2, #0]
 8013244:	f8bd 305e 	ldrh.w	r3, [sp, #94]	@ 0x5e
 8013248:	6804      	ldr	r4, [r0, #0]
 801324a:	f8bd 205c 	ldrh.w	r2, [sp, #92]	@ 0x5c
 801324e:	b2bf      	uxth	r7, r7
 8013250:	f1b8 0f08 	cmp.w	r8, #8
 8013254:	f04f 0500 	mov.w	r5, #0
 8013258:	bf18      	it	ne
 801325a:	3701      	addne	r7, #1
 801325c:	e9cd 1505 	strd	r1, r5, [sp, #20]
 8013260:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8013262:	9104      	str	r1, [sp, #16]
 8013264:	bf18      	it	ne
 8013266:	f027 0701 	bicne.w	r7, r7, #1
 801326a:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 801326c:	bf18      	it	ne
 801326e:	b2bf      	uxthne	r7, r7
 8013270:	e9cd 7102 	strd	r7, r1, [sp, #8]
 8013274:	e9cd 7900 	strd	r7, r9, [sp]
 8013278:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 801327a:	6d64      	ldr	r4, [r4, #84]	@ 0x54
 801327c:	47a0      	blx	r4
 801327e:	b019      	add	sp, #100	@ 0x64
 8013280:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013284:	2300      	movs	r3, #0
 8013286:	e7c0      	b.n	801320a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x302>
 8013288:	2208      	movs	r2, #8
 801328a:	fb92 f3f8 	sdiv	r3, r2, r8
 801328e:	1e5a      	subs	r2, r3, #1
 8013290:	443a      	add	r2, r7
 8013292:	fb92 f2f3 	sdiv	r2, r2, r3
 8013296:	fb12 f203 	smulbb	r2, r2, r3
 801329a:	b292      	uxth	r2, r2
 801329c:	e6b0      	b.n	8013000 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf8>
 801329e:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80132a0:	e6ec      	b.n	801307c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x174>
 80132a2:	bf00      	nop
 80132a4:	20014f4c 	.word	0x20014f4c
 80132a8:	20014f54 	.word	0x20014f54
 80132ac:	20014f4e 	.word	0x20014f4e
 80132b0:	00fff800 	.word	0x00fff800
 80132b4:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80132b6:	e779      	b.n	80131ac <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a4>
 80132b8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80132ba:	b153      	cbz	r3, 80132d2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ca>
 80132bc:	441e      	add	r6, r3
 80132be:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80132c0:	b2b6      	uxth	r6, r6
 80132c2:	eb03 03d6 	add.w	r3, r3, r6, lsr #3
 80132c6:	f006 0607 	and.w	r6, r6, #7
 80132ca:	781a      	ldrb	r2, [r3, #0]
 80132cc:	9328      	str	r3, [sp, #160]	@ 0xa0
 80132ce:	4132      	asrs	r2, r6
 80132d0:	b2d2      	uxtb	r2, r2
 80132d2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80132d4:	445b      	add	r3, fp
 80132d6:	930a      	str	r3, [sp, #40]	@ 0x28
 80132d8:	e706      	b.n	80130e8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e0>
 80132da:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80132dc:	2b00      	cmp	r3, #0
 80132de:	d1ce      	bne.n	801327e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 80132e0:	4b05      	ldr	r3, [pc, #20]	@ (80132f8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3f0>)
 80132e2:	6818      	ldr	r0, [r3, #0]
 80132e4:	6803      	ldr	r3, [r0, #0]
 80132e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80132e8:	4798      	blx	r3
 80132ea:	e7c8      	b.n	801327e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 80132ec:	2b00      	cmp	r3, #0
 80132ee:	f43f ae82 	beq.w	8012ff6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 80132f2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80132f6:	e793      	b.n	8013220 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x318>
 80132f8:	20014f54 	.word	0x20014f54

080132fc <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev>:
 80132fc:	b538      	push	{r3, r4, r5, lr}
 80132fe:	4c0b      	ldr	r4, [pc, #44]	@ (801332c <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x30>)
 8013300:	7823      	ldrb	r3, [r4, #0]
 8013302:	f3bf 8f5b 	dmb	ish
 8013306:	07db      	lsls	r3, r3, #31
 8013308:	4605      	mov	r5, r0
 801330a:	d40b      	bmi.n	8013324 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x28>
 801330c:	4620      	mov	r0, r4
 801330e:	f000 fd24 	bl	8013d5a <__cxa_guard_acquire>
 8013312:	b138      	cbz	r0, 8013324 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x28>
 8013314:	4620      	mov	r0, r4
 8013316:	f000 fd2c 	bl	8013d72 <__cxa_guard_release>
 801331a:	4a05      	ldr	r2, [pc, #20]	@ (8013330 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x34>)
 801331c:	4905      	ldr	r1, [pc, #20]	@ (8013334 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x38>)
 801331e:	4806      	ldr	r0, [pc, #24]	@ (8013338 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x3c>)
 8013320:	f000 fd14 	bl	8013d4c <__aeabi_atexit>
 8013324:	4b04      	ldr	r3, [pc, #16]	@ (8013338 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x3c>)
 8013326:	67eb      	str	r3, [r5, #124]	@ 0x7c
 8013328:	bd38      	pop	{r3, r4, r5, pc}
 801332a:	bf00      	nop
 801332c:	20014fe0 	.word	0x20014fe0
 8013330:	20000000 	.word	0x20000000
 8013334:	080115b5 	.word	0x080115b5
 8013338:	20000088 	.word	0x20000088

0801333c <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>:
 801333c:	b570      	push	{r4, r5, r6, lr}
 801333e:	1208      	asrs	r0, r1, #8
 8013340:	b29e      	uxth	r6, r3
 8013342:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 8013346:	1213      	asrs	r3, r2, #8
 8013348:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 801334c:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 8013350:	fb13 f305 	smulbb	r3, r3, r5
 8013354:	fb10 f006 	smulbb	r0, r0, r6
 8013358:	4418      	add	r0, r3
 801335a:	10cc      	asrs	r4, r1, #3
 801335c:	10d3      	asrs	r3, r2, #3
 801335e:	f004 04fc 	and.w	r4, r4, #252	@ 0xfc
 8013362:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 8013366:	fb13 f305 	smulbb	r3, r3, r5
 801336a:	fb14 f406 	smulbb	r4, r4, r6
 801336e:	00c9      	lsls	r1, r1, #3
 8013370:	00d2      	lsls	r2, r2, #3
 8013372:	441c      	add	r4, r3
 8013374:	b2d2      	uxtb	r2, r2
 8013376:	b2cb      	uxtb	r3, r1
 8013378:	fb12 f205 	smulbb	r2, r2, r5
 801337c:	b280      	uxth	r0, r0
 801337e:	fb13 f306 	smulbb	r3, r3, r6
 8013382:	4413      	add	r3, r2
 8013384:	1c42      	adds	r2, r0, #1
 8013386:	b29b      	uxth	r3, r3
 8013388:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801338c:	f400 4278 	and.w	r2, r0, #63488	@ 0xf800
 8013390:	1c58      	adds	r0, r3, #1
 8013392:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8013396:	b2a4      	uxth	r4, r4
 8013398:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 801339c:	4310      	orrs	r0, r2
 801339e:	1c62      	adds	r2, r4, #1
 80133a0:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 80133a4:	0964      	lsrs	r4, r4, #5
 80133a6:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
 80133aa:	4320      	orrs	r0, r4
 80133ac:	bd70      	pop	{r4, r5, r6, pc}
	...

080133b0 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h>:
 80133b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80133b4:	b08f      	sub	sp, #60	@ 0x3c
 80133b6:	461c      	mov	r4, r3
 80133b8:	f89d 7064 	ldrb.w	r7, [sp, #100]	@ 0x64
 80133bc:	9004      	str	r0, [sp, #16]
 80133be:	460d      	mov	r5, r1
 80133c0:	4616      	mov	r6, r2
 80133c2:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80133c4:	2f00      	cmp	r7, #0
 80133c6:	f000 80f6 	beq.w	80135b6 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x206>
 80133ca:	6820      	ldr	r0, [r4, #0]
 80133cc:	6861      	ldr	r1, [r4, #4]
 80133ce:	aa0a      	add	r2, sp, #40	@ 0x28
 80133d0:	c203      	stmia	r2!, {r0, r1}
 80133d2:	6818      	ldr	r0, [r3, #0]
 80133d4:	6859      	ldr	r1, [r3, #4]
 80133d6:	aa0c      	add	r2, sp, #48	@ 0x30
 80133d8:	c203      	stmia	r2!, {r0, r1}
 80133da:	a80a      	add	r0, sp, #40	@ 0x28
 80133dc:	f7fa f832 	bl	800d444 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80133e0:	4621      	mov	r1, r4
 80133e2:	a80c      	add	r0, sp, #48	@ 0x30
 80133e4:	f7fa f856 	bl	800d494 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80133e8:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 80133ec:	f9bd b036 	ldrsh.w	fp, [sp, #54]	@ 0x36
 80133f0:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	@ 0x34
 80133f4:	f002 0301 	and.w	r3, r2, #1
 80133f8:	9306      	str	r3, [sp, #24]
 80133fa:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 80133fe:	f003 0101 	and.w	r1, r3, #1
 8013402:	9105      	str	r1, [sp, #20]
 8013404:	9805      	ldr	r0, [sp, #20]
 8013406:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 801340a:	4403      	add	r3, r0
 801340c:	fb01 2303 	mla	r3, r1, r3, r2
 8013410:	f04f 0802 	mov.w	r8, #2
 8013414:	fb93 f3f8 	sdiv	r3, r3, r8
 8013418:	441d      	add	r5, r3
 801341a:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 801341e:	441a      	add	r2, r3
 8013420:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 8013424:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 8013428:	4419      	add	r1, r3
 801342a:	4b64      	ldr	r3, [pc, #400]	@ (80135bc <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x20c>)
 801342c:	f8ad 1032 	strh.w	r1, [sp, #50]	@ 0x32
 8013430:	6818      	ldr	r0, [r3, #0]
 8013432:	6803      	ldr	r3, [r0, #0]
 8013434:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013436:	4798      	blx	r3
 8013438:	4a61      	ldr	r2, [pc, #388]	@ (80135c0 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x210>)
 801343a:	f9bd 4032 	ldrsh.w	r4, [sp, #50]	@ 0x32
 801343e:	8813      	ldrh	r3, [r2, #0]
 8013440:	f9bd a030 	ldrsh.w	sl, [sp, #48]	@ 0x30
 8013444:	2fff      	cmp	r7, #255	@ 0xff
 8013446:	fb03 a404 	mla	r4, r3, r4, sl
 801344a:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801344e:	f106 0604 	add.w	r6, r6, #4
 8013452:	4611      	mov	r1, r2
 8013454:	fb03 fb0b 	mul.w	fp, r3, fp
 8013458:	d06b      	beq.n	8013532 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x182>
 801345a:	f1c7 03ff 	rsb	r3, r7, #255	@ 0xff
 801345e:	9303      	str	r3, [sp, #12]
 8013460:	eb04 034b 	add.w	r3, r4, fp, lsl #1
 8013464:	e9cd 3207 	strd	r3, r2, [sp, #28]
 8013468:	f8cd 8024 	str.w	r8, [sp, #36]	@ 0x24
 801346c:	9b07      	ldr	r3, [sp, #28]
 801346e:	42a3      	cmp	r3, r4
 8013470:	f240 809c 	bls.w	80135ac <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1fc>
 8013474:	9b06      	ldr	r3, [sp, #24]
 8013476:	2b00      	cmp	r3, #0
 8013478:	d039      	beq.n	80134ee <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x13e>
 801347a:	782b      	ldrb	r3, [r5, #0]
 801347c:	8822      	ldrh	r2, [r4, #0]
 801347e:	9804      	ldr	r0, [sp, #16]
 8013480:	f003 030f 	and.w	r3, r3, #15
 8013484:	f105 0801 	add.w	r8, r5, #1
 8013488:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 801348c:	9b03      	ldr	r3, [sp, #12]
 801348e:	9300      	str	r3, [sp, #0]
 8013490:	463b      	mov	r3, r7
 8013492:	f7ff ff53 	bl	801333c <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>
 8013496:	f824 0b02 	strh.w	r0, [r4], #2
 801349a:	f109 3bff 	add.w	fp, r9, #4294967295
 801349e:	f1bb 0f01 	cmp.w	fp, #1
 80134a2:	46a2      	mov	sl, r4
 80134a4:	f104 0404 	add.w	r4, r4, #4
 80134a8:	dd24      	ble.n	80134f4 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x144>
 80134aa:	f898 3000 	ldrb.w	r3, [r8]
 80134ae:	f834 2c04 	ldrh.w	r2, [r4, #-4]
 80134b2:	9804      	ldr	r0, [sp, #16]
 80134b4:	091b      	lsrs	r3, r3, #4
 80134b6:	f1ab 0b02 	sub.w	fp, fp, #2
 80134ba:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 80134be:	9b03      	ldr	r3, [sp, #12]
 80134c0:	9300      	str	r3, [sp, #0]
 80134c2:	463b      	mov	r3, r7
 80134c4:	f7ff ff3a 	bl	801333c <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>
 80134c8:	f824 0c04 	strh.w	r0, [r4, #-4]
 80134cc:	f818 3b01 	ldrb.w	r3, [r8], #1
 80134d0:	f834 2c02 	ldrh.w	r2, [r4, #-2]
 80134d4:	9804      	ldr	r0, [sp, #16]
 80134d6:	f003 030f 	and.w	r3, r3, #15
 80134da:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 80134de:	9b03      	ldr	r3, [sp, #12]
 80134e0:	9300      	str	r3, [sp, #0]
 80134e2:	463b      	mov	r3, r7
 80134e4:	f7ff ff2a 	bl	801333c <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>
 80134e8:	f824 0c02 	strh.w	r0, [r4, #-2]
 80134ec:	e7d7      	b.n	801349e <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0xee>
 80134ee:	46a8      	mov	r8, r5
 80134f0:	46cb      	mov	fp, r9
 80134f2:	e7d4      	b.n	801349e <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0xee>
 80134f4:	d10e      	bne.n	8013514 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x164>
 80134f6:	f898 3000 	ldrb.w	r3, [r8]
 80134fa:	f8ba 2000 	ldrh.w	r2, [sl]
 80134fe:	9804      	ldr	r0, [sp, #16]
 8013500:	091b      	lsrs	r3, r3, #4
 8013502:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 8013506:	9b03      	ldr	r3, [sp, #12]
 8013508:	9300      	str	r3, [sp, #0]
 801350a:	463b      	mov	r3, r7
 801350c:	f7ff ff16 	bl	801333c <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>
 8013510:	f82a 0b02 	strh.w	r0, [sl], #2
 8013514:	9b08      	ldr	r3, [sp, #32]
 8013516:	9a05      	ldr	r2, [sp, #20]
 8013518:	881c      	ldrh	r4, [r3, #0]
 801351a:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 801351e:	eba4 0409 	sub.w	r4, r4, r9
 8013522:	4413      	add	r3, r2
 8013524:	eb0a 0444 	add.w	r4, sl, r4, lsl #1
 8013528:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801352a:	fb93 f3f2 	sdiv	r3, r3, r2
 801352e:	441d      	add	r5, r3
 8013530:	e79c      	b.n	801346c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0xbc>
 8013532:	eb04 0b4b 	add.w	fp, r4, fp, lsl #1
 8013536:	45a3      	cmp	fp, r4
 8013538:	d938      	bls.n	80135ac <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1fc>
 801353a:	9b06      	ldr	r3, [sp, #24]
 801353c:	b1f3      	cbz	r3, 801357c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1cc>
 801353e:	782b      	ldrb	r3, [r5, #0]
 8013540:	f003 030f 	and.w	r3, r3, #15
 8013544:	1c6a      	adds	r2, r5, #1
 8013546:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801354a:	8023      	strh	r3, [r4, #0]
 801354c:	f109 30ff 	add.w	r0, r9, #4294967295
 8013550:	3402      	adds	r4, #2
 8013552:	2801      	cmp	r0, #1
 8013554:	4623      	mov	r3, r4
 8013556:	f104 0404 	add.w	r4, r4, #4
 801355a:	dd12      	ble.n	8013582 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1d2>
 801355c:	7813      	ldrb	r3, [r2, #0]
 801355e:	091b      	lsrs	r3, r3, #4
 8013560:	3802      	subs	r0, #2
 8013562:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8013566:	f824 3c04 	strh.w	r3, [r4, #-4]
 801356a:	f812 3b01 	ldrb.w	r3, [r2], #1
 801356e:	f003 030f 	and.w	r3, r3, #15
 8013572:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8013576:	f824 3c02 	strh.w	r3, [r4, #-2]
 801357a:	e7ea      	b.n	8013552 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1a2>
 801357c:	462a      	mov	r2, r5
 801357e:	4648      	mov	r0, r9
 8013580:	e7e7      	b.n	8013552 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1a2>
 8013582:	d106      	bne.n	8013592 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1e2>
 8013584:	7812      	ldrb	r2, [r2, #0]
 8013586:	0912      	lsrs	r2, r2, #4
 8013588:	3302      	adds	r3, #2
 801358a:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 801358e:	f823 2c02 	strh.w	r2, [r3, #-2]
 8013592:	880c      	ldrh	r4, [r1, #0]
 8013594:	9a05      	ldr	r2, [sp, #20]
 8013596:	eba4 0409 	sub.w	r4, r4, r9
 801359a:	eb03 0444 	add.w	r4, r3, r4, lsl #1
 801359e:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 80135a2:	4413      	add	r3, r2
 80135a4:	fb93 f3f8 	sdiv	r3, r3, r8
 80135a8:	441d      	add	r5, r3
 80135aa:	e7c4      	b.n	8013536 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x186>
 80135ac:	4b03      	ldr	r3, [pc, #12]	@ (80135bc <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x20c>)
 80135ae:	6818      	ldr	r0, [r3, #0]
 80135b0:	6803      	ldr	r3, [r0, #0]
 80135b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80135b4:	4798      	blx	r3
 80135b6:	b00f      	add	sp, #60	@ 0x3c
 80135b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80135bc:	20014f54 	.word	0x20014f54
 80135c0:	20014f4e 	.word	0x20014f4e

080135c4 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>:
 80135c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80135c6:	f89d 5014 	ldrb.w	r5, [sp, #20]
 80135ca:	2dff      	cmp	r5, #255	@ 0xff
 80135cc:	ea4f 2711 	mov.w	r7, r1, lsr #8
 80135d0:	d10c      	bne.n	80135ec <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih+0x28>
 80135d2:	2bff      	cmp	r3, #255	@ 0xff
 80135d4:	d10a      	bne.n	80135ec <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih+0x28>
 80135d6:	4b25      	ldr	r3, [pc, #148]	@ (801366c <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih+0xa8>)
 80135d8:	0948      	lsrs	r0, r1, #5
 80135da:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 80135de:	403b      	ands	r3, r7
 80135e0:	4318      	orrs	r0, r3
 80135e2:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 80135e6:	4308      	orrs	r0, r1
 80135e8:	b280      	uxth	r0, r0
 80135ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80135ec:	fb15 f503 	smulbb	r5, r5, r3
 80135f0:	b2ab      	uxth	r3, r5
 80135f2:	1c5d      	adds	r5, r3, #1
 80135f4:	eb05 2513 	add.w	r5, r5, r3, lsr #8
 80135f8:	1214      	asrs	r4, r2, #8
 80135fa:	f3c5 2507 	ubfx	r5, r5, #8, #8
 80135fe:	fa1f fc85 	uxth.w	ip, r5
 8013602:	10d6      	asrs	r6, r2, #3
 8013604:	00d0      	lsls	r0, r2, #3
 8013606:	43ed      	mvns	r5, r5
 8013608:	f004 04f8 	and.w	r4, r4, #248	@ 0xf8
 801360c:	f3c1 4207 	ubfx	r2, r1, #16, #8
 8013610:	b2eb      	uxtb	r3, r5
 8013612:	b2c0      	uxtb	r0, r0
 8013614:	fb12 f20c 	smulbb	r2, r2, ip
 8013618:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 801361c:	fb04 2403 	mla	r4, r4, r3, r2
 8013620:	ea40 1250 	orr.w	r2, r0, r0, lsr #5
 8013624:	b2c8      	uxtb	r0, r1
 8013626:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 801362a:	b2fd      	uxtb	r5, r7
 801362c:	fb10 f00c 	smulbb	r0, r0, ip
 8013630:	b2a4      	uxth	r4, r4
 8013632:	fb02 0003 	mla	r0, r2, r3, r0
 8013636:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 801363a:	fb15 f50c 	smulbb	r5, r5, ip
 801363e:	fb06 5503 	mla	r5, r6, r3, r5
 8013642:	b283      	uxth	r3, r0
 8013644:	1c60      	adds	r0, r4, #1
 8013646:	b2ad      	uxth	r5, r5
 8013648:	eb00 2414 	add.w	r4, r0, r4, lsr #8
 801364c:	1c58      	adds	r0, r3, #1
 801364e:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8013652:	1c6b      	adds	r3, r5, #1
 8013654:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8013658:	f404 4478 	and.w	r4, r4, #63488	@ 0xf800
 801365c:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 8013660:	096d      	lsrs	r5, r5, #5
 8013662:	4320      	orrs	r0, r4
 8013664:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8013668:	4328      	orrs	r0, r5
 801366a:	e7be      	b.n	80135ea <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih+0x26>
 801366c:	00fff800 	.word	0x00fff800

08013670 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 8013670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013674:	461c      	mov	r4, r3
 8013676:	b08d      	sub	sp, #52	@ 0x34
 8013678:	460d      	mov	r5, r1
 801367a:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801367c:	6861      	ldr	r1, [r4, #4]
 801367e:	f89d 905c 	ldrb.w	r9, [sp, #92]	@ 0x5c
 8013682:	4680      	mov	r8, r0
 8013684:	6820      	ldr	r0, [r4, #0]
 8013686:	4616      	mov	r6, r2
 8013688:	aa08      	add	r2, sp, #32
 801368a:	c203      	stmia	r2!, {r0, r1}
 801368c:	6818      	ldr	r0, [r3, #0]
 801368e:	6859      	ldr	r1, [r3, #4]
 8013690:	aa0a      	add	r2, sp, #40	@ 0x28
 8013692:	c203      	stmia	r2!, {r0, r1}
 8013694:	a808      	add	r0, sp, #32
 8013696:	f7f9 fed5 	bl	800d444 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801369a:	4621      	mov	r1, r4
 801369c:	a80a      	add	r0, sp, #40	@ 0x28
 801369e:	f7f9 fef9 	bl	800d494 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80136a2:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	@ 0x28
 80136a6:	f9bd 702e 	ldrsh.w	r7, [sp, #46]	@ 0x2e
 80136aa:	f9bd b02c 	ldrsh.w	fp, [sp, #44]	@ 0x2c
 80136ae:	f002 0301 	and.w	r3, r2, #1
 80136b2:	9303      	str	r3, [sp, #12]
 80136b4:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	@ 0x24
 80136b8:	f003 0101 	and.w	r1, r3, #1
 80136bc:	9102      	str	r1, [sp, #8]
 80136be:	9802      	ldr	r0, [sp, #8]
 80136c0:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	@ 0x2a
 80136c4:	4403      	add	r3, r0
 80136c6:	fb01 2303 	mla	r3, r1, r3, r2
 80136ca:	f04f 0a02 	mov.w	sl, #2
 80136ce:	fb93 f3fa 	sdiv	r3, r3, sl
 80136d2:	441d      	add	r5, r3
 80136d4:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80136d8:	441a      	add	r2, r3
 80136da:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 80136de:	f8bd 3022 	ldrh.w	r3, [sp, #34]	@ 0x22
 80136e2:	4a3f      	ldr	r2, [pc, #252]	@ (80137e0 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x170>)
 80136e4:	9205      	str	r2, [sp, #20]
 80136e6:	4419      	add	r1, r3
 80136e8:	6810      	ldr	r0, [r2, #0]
 80136ea:	f8ad 102a 	strh.w	r1, [sp, #42]	@ 0x2a
 80136ee:	6803      	ldr	r3, [r0, #0]
 80136f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80136f2:	4798      	blx	r3
 80136f4:	4b3b      	ldr	r3, [pc, #236]	@ (80137e4 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x174>)
 80136f6:	f9bd 402a 	ldrsh.w	r4, [sp, #42]	@ 0x2a
 80136fa:	8819      	ldrh	r1, [r3, #0]
 80136fc:	f9bd c028 	ldrsh.w	ip, [sp, #40]	@ 0x28
 8013700:	fb01 c404 	mla	r4, r1, r4, ip
 8013704:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8013708:	434f      	muls	r7, r1
 801370a:	e9cd 3a06 	strd	r3, sl, [sp, #24]
 801370e:	eb04 0247 	add.w	r2, r4, r7, lsl #1
 8013712:	3604      	adds	r6, #4
 8013714:	9204      	str	r2, [sp, #16]
 8013716:	9b04      	ldr	r3, [sp, #16]
 8013718:	429c      	cmp	r4, r3
 801371a:	d258      	bcs.n	80137ce <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x15e>
 801371c:	9b03      	ldr	r3, [sp, #12]
 801371e:	2b00      	cmp	r3, #0
 8013720:	d034      	beq.n	801378c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x11c>
 8013722:	782b      	ldrb	r3, [r5, #0]
 8013724:	f003 030f 	and.w	r3, r3, #15
 8013728:	1c6f      	adds	r7, r5, #1
 801372a:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 801372e:	0e0b      	lsrs	r3, r1, #24
 8013730:	d006      	beq.n	8013740 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xd0>
 8013732:	8822      	ldrh	r2, [r4, #0]
 8013734:	9300      	str	r3, [sp, #0]
 8013736:	4640      	mov	r0, r8
 8013738:	464b      	mov	r3, r9
 801373a:	f7ff ff43 	bl	80135c4 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>
 801373e:	8020      	strh	r0, [r4, #0]
 8013740:	3402      	adds	r4, #2
 8013742:	f10b 3aff 	add.w	sl, fp, #4294967295
 8013746:	f1ba 0f01 	cmp.w	sl, #1
 801374a:	dd22      	ble.n	8013792 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x122>
 801374c:	783b      	ldrb	r3, [r7, #0]
 801374e:	091b      	lsrs	r3, r3, #4
 8013750:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8013754:	0e0b      	lsrs	r3, r1, #24
 8013756:	d006      	beq.n	8013766 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xf6>
 8013758:	8822      	ldrh	r2, [r4, #0]
 801375a:	9300      	str	r3, [sp, #0]
 801375c:	4640      	mov	r0, r8
 801375e:	464b      	mov	r3, r9
 8013760:	f7ff ff30 	bl	80135c4 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>
 8013764:	8020      	strh	r0, [r4, #0]
 8013766:	f817 3b01 	ldrb.w	r3, [r7], #1
 801376a:	f003 030f 	and.w	r3, r3, #15
 801376e:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8013772:	0e0b      	lsrs	r3, r1, #24
 8013774:	d006      	beq.n	8013784 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x114>
 8013776:	8862      	ldrh	r2, [r4, #2]
 8013778:	9300      	str	r3, [sp, #0]
 801377a:	4640      	mov	r0, r8
 801377c:	464b      	mov	r3, r9
 801377e:	f7ff ff21 	bl	80135c4 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>
 8013782:	8060      	strh	r0, [r4, #2]
 8013784:	3404      	adds	r4, #4
 8013786:	f1aa 0a02 	sub.w	sl, sl, #2
 801378a:	e7dc      	b.n	8013746 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xd6>
 801378c:	462f      	mov	r7, r5
 801378e:	46da      	mov	sl, fp
 8013790:	e7d9      	b.n	8013746 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xd6>
 8013792:	d10d      	bne.n	80137b0 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x140>
 8013794:	783b      	ldrb	r3, [r7, #0]
 8013796:	091b      	lsrs	r3, r3, #4
 8013798:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 801379c:	0e0b      	lsrs	r3, r1, #24
 801379e:	d006      	beq.n	80137ae <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x13e>
 80137a0:	8822      	ldrh	r2, [r4, #0]
 80137a2:	9300      	str	r3, [sp, #0]
 80137a4:	4640      	mov	r0, r8
 80137a6:	464b      	mov	r3, r9
 80137a8:	f7ff ff0c 	bl	80135c4 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>
 80137ac:	8020      	strh	r0, [r4, #0]
 80137ae:	3402      	adds	r4, #2
 80137b0:	9b06      	ldr	r3, [sp, #24]
 80137b2:	9a02      	ldr	r2, [sp, #8]
 80137b4:	881b      	ldrh	r3, [r3, #0]
 80137b6:	eba3 030b 	sub.w	r3, r3, fp
 80137ba:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80137be:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	@ 0x24
 80137c2:	4413      	add	r3, r2
 80137c4:	9a07      	ldr	r2, [sp, #28]
 80137c6:	fb93 f3f2 	sdiv	r3, r3, r2
 80137ca:	441d      	add	r5, r3
 80137cc:	e7a3      	b.n	8013716 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xa6>
 80137ce:	9b05      	ldr	r3, [sp, #20]
 80137d0:	6818      	ldr	r0, [r3, #0]
 80137d2:	6803      	ldr	r3, [r0, #0]
 80137d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80137d6:	4798      	blx	r3
 80137d8:	b00d      	add	sp, #52	@ 0x34
 80137da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80137de:	bf00      	nop
 80137e0:	20014f54 	.word	0x20014f54
 80137e4:	20014f4e 	.word	0x20014f4e

080137e8 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>:
 80137e8:	b570      	push	{r4, r5, r6, lr}
 80137ea:	1214      	asrs	r4, r2, #8
 80137ec:	788d      	ldrb	r5, [r1, #2]
 80137ee:	f89d 6010 	ldrb.w	r6, [sp, #16]
 80137f2:	f004 04f8 	and.w	r4, r4, #248	@ 0xf8
 80137f6:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 80137fa:	fb15 f503 	smulbb	r5, r5, r3
 80137fe:	fb04 5506 	mla	r5, r4, r6, r5
 8013802:	10d0      	asrs	r0, r2, #3
 8013804:	784c      	ldrb	r4, [r1, #1]
 8013806:	7809      	ldrb	r1, [r1, #0]
 8013808:	00d2      	lsls	r2, r2, #3
 801380a:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 801380e:	b2d2      	uxtb	r2, r2
 8013810:	ea40 1090 	orr.w	r0, r0, r0, lsr #6
 8013814:	fb14 f403 	smulbb	r4, r4, r3
 8013818:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801381c:	fb11 f303 	smulbb	r3, r1, r3
 8013820:	fb00 4406 	mla	r4, r0, r6, r4
 8013824:	fb02 3306 	mla	r3, r2, r6, r3
 8013828:	b2ad      	uxth	r5, r5
 801382a:	b29b      	uxth	r3, r3
 801382c:	b2a4      	uxth	r4, r4
 801382e:	1c68      	adds	r0, r5, #1
 8013830:	eb00 2515 	add.w	r5, r0, r5, lsr #8
 8013834:	1c62      	adds	r2, r4, #1
 8013836:	1c58      	adds	r0, r3, #1
 8013838:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801383c:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 8013840:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 8013844:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 8013848:	0964      	lsrs	r4, r4, #5
 801384a:	4328      	orrs	r0, r5
 801384c:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
 8013850:	4320      	orrs	r0, r4
 8013852:	bd70      	pop	{r4, r5, r6, pc}

08013854 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 8013854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013858:	b08f      	sub	sp, #60	@ 0x3c
 801385a:	461c      	mov	r4, r3
 801385c:	f89d 7064 	ldrb.w	r7, [sp, #100]	@ 0x64
 8013860:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8013862:	4682      	mov	sl, r0
 8013864:	460e      	mov	r6, r1
 8013866:	4615      	mov	r5, r2
 8013868:	2f00      	cmp	r7, #0
 801386a:	f000 8142 	beq.w	8013af2 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x29e>
 801386e:	6820      	ldr	r0, [r4, #0]
 8013870:	6861      	ldr	r1, [r4, #4]
 8013872:	aa0a      	add	r2, sp, #40	@ 0x28
 8013874:	c203      	stmia	r2!, {r0, r1}
 8013876:	6818      	ldr	r0, [r3, #0]
 8013878:	6859      	ldr	r1, [r3, #4]
 801387a:	aa0c      	add	r2, sp, #48	@ 0x30
 801387c:	c203      	stmia	r2!, {r0, r1}
 801387e:	a80a      	add	r0, sp, #40	@ 0x28
 8013880:	f7f9 fde0 	bl	800d444 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8013884:	4621      	mov	r1, r4
 8013886:	a80c      	add	r0, sp, #48	@ 0x30
 8013888:	f7f9 fe04 	bl	800d494 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801388c:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 8013890:	f9bd b036 	ldrsh.w	fp, [sp, #54]	@ 0x36
 8013894:	f002 0301 	and.w	r3, r2, #1
 8013898:	9306      	str	r3, [sp, #24]
 801389a:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 801389e:	f003 0101 	and.w	r1, r3, #1
 80138a2:	9105      	str	r1, [sp, #20]
 80138a4:	9805      	ldr	r0, [sp, #20]
 80138a6:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 80138aa:	4403      	add	r3, r0
 80138ac:	fb01 2303 	mla	r3, r1, r3, r2
 80138b0:	f04f 0802 	mov.w	r8, #2
 80138b4:	fb93 f3f8 	sdiv	r3, r3, r8
 80138b8:	441e      	add	r6, r3
 80138ba:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 80138be:	441a      	add	r2, r3
 80138c0:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 80138c4:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 80138c8:	4419      	add	r1, r3
 80138ca:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 80138ce:	9303      	str	r3, [sp, #12]
 80138d0:	4b89      	ldr	r3, [pc, #548]	@ (8013af8 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2a4>)
 80138d2:	f8ad 1032 	strh.w	r1, [sp, #50]	@ 0x32
 80138d6:	6818      	ldr	r0, [r3, #0]
 80138d8:	6803      	ldr	r3, [r0, #0]
 80138da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80138dc:	4798      	blx	r3
 80138de:	4a87      	ldr	r2, [pc, #540]	@ (8013afc <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2a8>)
 80138e0:	f9bd 4032 	ldrsh.w	r4, [sp, #50]	@ 0x32
 80138e4:	8813      	ldrh	r3, [r2, #0]
 80138e6:	f9bd 9030 	ldrsh.w	r9, [sp, #48]	@ 0x30
 80138ea:	2fff      	cmp	r7, #255	@ 0xff
 80138ec:	fb03 9404 	mla	r4, r3, r4, r9
 80138f0:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 80138f4:	f105 0504 	add.w	r5, r5, #4
 80138f8:	4694      	mov	ip, r2
 80138fa:	fb03 f30b 	mul.w	r3, r3, fp
 80138fe:	d071      	beq.n	80139e4 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x190>
 8013900:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8013904:	43f9      	mvns	r1, r7
 8013906:	e9cd 3207 	strd	r3, r2, [sp, #28]
 801390a:	b2c9      	uxtb	r1, r1
 801390c:	9104      	str	r1, [sp, #16]
 801390e:	f8cd 8024 	str.w	r8, [sp, #36]	@ 0x24
 8013912:	9b07      	ldr	r3, [sp, #28]
 8013914:	42a3      	cmp	r3, r4
 8013916:	f240 80e7 	bls.w	8013ae8 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x294>
 801391a:	9b06      	ldr	r3, [sp, #24]
 801391c:	2b00      	cmp	r3, #0
 801391e:	d03d      	beq.n	801399c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x148>
 8013920:	7831      	ldrb	r1, [r6, #0]
 8013922:	9b04      	ldr	r3, [sp, #16]
 8013924:	8822      	ldrh	r2, [r4, #0]
 8013926:	9300      	str	r3, [sp, #0]
 8013928:	f001 010f 	and.w	r1, r1, #15
 801392c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8013930:	463b      	mov	r3, r7
 8013932:	4429      	add	r1, r5
 8013934:	4650      	mov	r0, sl
 8013936:	f7ff ff57 	bl	80137e8 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>
 801393a:	9b03      	ldr	r3, [sp, #12]
 801393c:	f824 0b02 	strh.w	r0, [r4], #2
 8013940:	f106 0801 	add.w	r8, r6, #1
 8013944:	f103 3bff 	add.w	fp, r3, #4294967295
 8013948:	f1bb 0f01 	cmp.w	fp, #1
 801394c:	46a1      	mov	r9, r4
 801394e:	f104 0404 	add.w	r4, r4, #4
 8013952:	dd27      	ble.n	80139a4 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x150>
 8013954:	f898 1000 	ldrb.w	r1, [r8]
 8013958:	9b04      	ldr	r3, [sp, #16]
 801395a:	f834 2c04 	ldrh.w	r2, [r4, #-4]
 801395e:	9300      	str	r3, [sp, #0]
 8013960:	0909      	lsrs	r1, r1, #4
 8013962:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8013966:	463b      	mov	r3, r7
 8013968:	4429      	add	r1, r5
 801396a:	4650      	mov	r0, sl
 801396c:	f7ff ff3c 	bl	80137e8 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>
 8013970:	f824 0c04 	strh.w	r0, [r4, #-4]
 8013974:	f818 1b01 	ldrb.w	r1, [r8], #1
 8013978:	9b04      	ldr	r3, [sp, #16]
 801397a:	f834 2c02 	ldrh.w	r2, [r4, #-2]
 801397e:	9300      	str	r3, [sp, #0]
 8013980:	f001 010f 	and.w	r1, r1, #15
 8013984:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8013988:	463b      	mov	r3, r7
 801398a:	4429      	add	r1, r5
 801398c:	4650      	mov	r0, sl
 801398e:	f7ff ff2b 	bl	80137e8 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>
 8013992:	f1ab 0b02 	sub.w	fp, fp, #2
 8013996:	f824 0c02 	strh.w	r0, [r4, #-2]
 801399a:	e7d5      	b.n	8013948 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xf4>
 801399c:	46b0      	mov	r8, r6
 801399e:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80139a2:	e7d1      	b.n	8013948 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xf4>
 80139a4:	d10f      	bne.n	80139c6 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x172>
 80139a6:	f898 1000 	ldrb.w	r1, [r8]
 80139aa:	9b04      	ldr	r3, [sp, #16]
 80139ac:	f8b9 2000 	ldrh.w	r2, [r9]
 80139b0:	9300      	str	r3, [sp, #0]
 80139b2:	0909      	lsrs	r1, r1, #4
 80139b4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80139b8:	463b      	mov	r3, r7
 80139ba:	4429      	add	r1, r5
 80139bc:	4650      	mov	r0, sl
 80139be:	f7ff ff13 	bl	80137e8 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>
 80139c2:	f829 0b02 	strh.w	r0, [r9], #2
 80139c6:	9b08      	ldr	r3, [sp, #32]
 80139c8:	9a05      	ldr	r2, [sp, #20]
 80139ca:	881c      	ldrh	r4, [r3, #0]
 80139cc:	9b03      	ldr	r3, [sp, #12]
 80139ce:	1ae4      	subs	r4, r4, r3
 80139d0:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 80139d4:	eb09 0444 	add.w	r4, r9, r4, lsl #1
 80139d8:	4413      	add	r3, r2
 80139da:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80139dc:	fb93 f3f2 	sdiv	r3, r3, r2
 80139e0:	441e      	add	r6, r3
 80139e2:	e796      	b.n	8013912 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xbe>
 80139e4:	4f46      	ldr	r7, [pc, #280]	@ (8013b00 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2ac>)
 80139e6:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80139ea:	42a3      	cmp	r3, r4
 80139ec:	d97c      	bls.n	8013ae8 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x294>
 80139ee:	9a06      	ldr	r2, [sp, #24]
 80139f0:	2a00      	cmp	r2, #0
 80139f2:	d054      	beq.n	8013a9e <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x24a>
 80139f4:	7830      	ldrb	r0, [r6, #0]
 80139f6:	f000 000f 	and.w	r0, r0, #15
 80139fa:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80139fe:	eb05 0e00 	add.w	lr, r5, r0
 8013a02:	5c28      	ldrb	r0, [r5, r0]
 8013a04:	f89e 2002 	ldrb.w	r2, [lr, #2]
 8013a08:	f89e e001 	ldrb.w	lr, [lr, #1]
 8013a0c:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8013a10:	f40e 6efc 	and.w	lr, lr, #2016	@ 0x7e0
 8013a14:	ea07 2202 	and.w	r2, r7, r2, lsl #8
 8013a18:	ea42 020e 	orr.w	r2, r2, lr
 8013a1c:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
 8013a20:	f824 2b02 	strh.w	r2, [r4], #2
 8013a24:	9a03      	ldr	r2, [sp, #12]
 8013a26:	1c71      	adds	r1, r6, #1
 8013a28:	f102 3eff 	add.w	lr, r2, #4294967295
 8013a2c:	f1be 0f01 	cmp.w	lr, #1
 8013a30:	4620      	mov	r0, r4
 8013a32:	f104 0404 	add.w	r4, r4, #4
 8013a36:	dd36      	ble.n	8013aa6 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x252>
 8013a38:	7808      	ldrb	r0, [r1, #0]
 8013a3a:	0900      	lsrs	r0, r0, #4
 8013a3c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8013a40:	eb05 0a00 	add.w	sl, r5, r0
 8013a44:	f1ae 0e02 	sub.w	lr, lr, #2
 8013a48:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8013a4c:	f89a 9002 	ldrb.w	r9, [sl, #2]
 8013a50:	00d2      	lsls	r2, r2, #3
 8013a52:	ea07 2909 	and.w	r9, r7, r9, lsl #8
 8013a56:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8013a5a:	ea49 0202 	orr.w	r2, r9, r2
 8013a5e:	f815 9000 	ldrb.w	r9, [r5, r0]
 8013a62:	ea42 02d9 	orr.w	r2, r2, r9, lsr #3
 8013a66:	f824 2c04 	strh.w	r2, [r4, #-4]
 8013a6a:	f811 0b01 	ldrb.w	r0, [r1], #1
 8013a6e:	f000 000f 	and.w	r0, r0, #15
 8013a72:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8013a76:	eb05 0a00 	add.w	sl, r5, r0
 8013a7a:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8013a7e:	f89a 9002 	ldrb.w	r9, [sl, #2]
 8013a82:	00d2      	lsls	r2, r2, #3
 8013a84:	ea07 2909 	and.w	r9, r7, r9, lsl #8
 8013a88:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8013a8c:	ea49 0202 	orr.w	r2, r9, r2
 8013a90:	f815 9000 	ldrb.w	r9, [r5, r0]
 8013a94:	ea42 02d9 	orr.w	r2, r2, r9, lsr #3
 8013a98:	f824 2c02 	strh.w	r2, [r4, #-2]
 8013a9c:	e7c6      	b.n	8013a2c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1d8>
 8013a9e:	4631      	mov	r1, r6
 8013aa0:	f8dd e00c 	ldr.w	lr, [sp, #12]
 8013aa4:	e7c2      	b.n	8013a2c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1d8>
 8013aa6:	d111      	bne.n	8013acc <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x278>
 8013aa8:	7809      	ldrb	r1, [r1, #0]
 8013aaa:	0909      	lsrs	r1, r1, #4
 8013aac:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8013ab0:	186c      	adds	r4, r5, r1
 8013ab2:	5c69      	ldrb	r1, [r5, r1]
 8013ab4:	78a2      	ldrb	r2, [r4, #2]
 8013ab6:	7864      	ldrb	r4, [r4, #1]
 8013ab8:	00e4      	lsls	r4, r4, #3
 8013aba:	ea07 2202 	and.w	r2, r7, r2, lsl #8
 8013abe:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
 8013ac2:	4322      	orrs	r2, r4
 8013ac4:	ea42 02d1 	orr.w	r2, r2, r1, lsr #3
 8013ac8:	f820 2b02 	strh.w	r2, [r0], #2
 8013acc:	9a03      	ldr	r2, [sp, #12]
 8013ace:	f8bc 4000 	ldrh.w	r4, [ip]
 8013ad2:	9905      	ldr	r1, [sp, #20]
 8013ad4:	1aa4      	subs	r4, r4, r2
 8013ad6:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 8013ada:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8013ade:	440a      	add	r2, r1
 8013ae0:	fb92 f2f8 	sdiv	r2, r2, r8
 8013ae4:	4416      	add	r6, r2
 8013ae6:	e780      	b.n	80139ea <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x196>
 8013ae8:	4b03      	ldr	r3, [pc, #12]	@ (8013af8 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2a4>)
 8013aea:	6818      	ldr	r0, [r3, #0]
 8013aec:	6803      	ldr	r3, [r0, #0]
 8013aee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013af0:	4798      	blx	r3
 8013af2:	b00f      	add	sp, #60	@ 0x3c
 8013af4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013af8:	20014f54 	.word	0x20014f54
 8013afc:	20014f4e 	.word	0x20014f4e
 8013b00:	fffff800 	.word	0xfffff800

08013b04 <CRC_Lock>:
 8013b04:	b530      	push	{r4, r5, lr}
 8013b06:	4a2d      	ldr	r2, [pc, #180]	@ (8013bbc <CRC_Lock+0xb8>)
 8013b08:	6813      	ldr	r3, [r2, #0]
 8013b0a:	f023 0301 	bic.w	r3, r3, #1
 8013b0e:	6013      	str	r3, [r2, #0]
 8013b10:	4b2b      	ldr	r3, [pc, #172]	@ (8013bc0 <CRC_Lock+0xbc>)
 8013b12:	681c      	ldr	r4, [r3, #0]
 8013b14:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 8013b18:	4014      	ands	r4, r2
 8013b1a:	f24c 2540 	movw	r5, #49728	@ 0xc240
 8013b1e:	42ac      	cmp	r4, r5
 8013b20:	d005      	beq.n	8013b2e <CRC_Lock+0x2a>
 8013b22:	681c      	ldr	r4, [r3, #0]
 8013b24:	f24c 2570 	movw	r5, #49776	@ 0xc270
 8013b28:	4014      	ands	r4, r2
 8013b2a:	42ac      	cmp	r4, r5
 8013b2c:	d125      	bne.n	8013b7a <CRC_Lock+0x76>
 8013b2e:	4b25      	ldr	r3, [pc, #148]	@ (8013bc4 <CRC_Lock+0xc0>)
 8013b30:	681b      	ldr	r3, [r3, #0]
 8013b32:	2b00      	cmp	r3, #0
 8013b34:	d139      	bne.n	8013baa <CRC_Lock+0xa6>
 8013b36:	4b24      	ldr	r3, [pc, #144]	@ (8013bc8 <CRC_Lock+0xc4>)
 8013b38:	681a      	ldr	r2, [r3, #0]
 8013b3a:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8013b3e:	f5b2 6f8a 	cmp.w	r2, #1104	@ 0x450
 8013b42:	d00d      	beq.n	8013b60 <CRC_Lock+0x5c>
 8013b44:	681a      	ldr	r2, [r3, #0]
 8013b46:	f240 4483 	movw	r4, #1155	@ 0x483
 8013b4a:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8013b4e:	42a2      	cmp	r2, r4
 8013b50:	d006      	beq.n	8013b60 <CRC_Lock+0x5c>
 8013b52:	681b      	ldr	r3, [r3, #0]
 8013b54:	f240 4285 	movw	r2, #1157	@ 0x485
 8013b58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8013b5c:	4293      	cmp	r3, r2
 8013b5e:	d124      	bne.n	8013baa <CRC_Lock+0xa6>
 8013b60:	4b1a      	ldr	r3, [pc, #104]	@ (8013bcc <CRC_Lock+0xc8>)
 8013b62:	2201      	movs	r2, #1
 8013b64:	601a      	str	r2, [r3, #0]
 8013b66:	681a      	ldr	r2, [r3, #0]
 8013b68:	2a00      	cmp	r2, #0
 8013b6a:	d1fc      	bne.n	8013b66 <CRC_Lock+0x62>
 8013b6c:	4b18      	ldr	r3, [pc, #96]	@ (8013bd0 <CRC_Lock+0xcc>)
 8013b6e:	6018      	str	r0, [r3, #0]
 8013b70:	6818      	ldr	r0, [r3, #0]
 8013b72:	1a43      	subs	r3, r0, r1
 8013b74:	4258      	negs	r0, r3
 8013b76:	4158      	adcs	r0, r3
 8013b78:	e00e      	b.n	8013b98 <CRC_Lock+0x94>
 8013b7a:	681b      	ldr	r3, [r3, #0]
 8013b7c:	4013      	ands	r3, r2
 8013b7e:	f24d 2220 	movw	r2, #53792	@ 0xd220
 8013b82:	4293      	cmp	r3, r2
 8013b84:	d111      	bne.n	8013baa <CRC_Lock+0xa6>
 8013b86:	4b13      	ldr	r3, [pc, #76]	@ (8013bd4 <CRC_Lock+0xd0>)
 8013b88:	681b      	ldr	r3, [r3, #0]
 8013b8a:	f240 4286 	movw	r2, #1158	@ 0x486
 8013b8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8013b92:	4293      	cmp	r3, r2
 8013b94:	d001      	beq.n	8013b9a <CRC_Lock+0x96>
 8013b96:	2000      	movs	r0, #0
 8013b98:	bd30      	pop	{r4, r5, pc}
 8013b9a:	4b0f      	ldr	r3, [pc, #60]	@ (8013bd8 <CRC_Lock+0xd4>)
 8013b9c:	2201      	movs	r2, #1
 8013b9e:	601a      	str	r2, [r3, #0]
 8013ba0:	681a      	ldr	r2, [r3, #0]
 8013ba2:	2a00      	cmp	r2, #0
 8013ba4:	d1fc      	bne.n	8013ba0 <CRC_Lock+0x9c>
 8013ba6:	4b0d      	ldr	r3, [pc, #52]	@ (8013bdc <CRC_Lock+0xd8>)
 8013ba8:	e7e1      	b.n	8013b6e <CRC_Lock+0x6a>
 8013baa:	4b0d      	ldr	r3, [pc, #52]	@ (8013be0 <CRC_Lock+0xdc>)
 8013bac:	2201      	movs	r2, #1
 8013bae:	601a      	str	r2, [r3, #0]
 8013bb0:	681a      	ldr	r2, [r3, #0]
 8013bb2:	2a00      	cmp	r2, #0
 8013bb4:	d1fc      	bne.n	8013bb0 <CRC_Lock+0xac>
 8013bb6:	4b0b      	ldr	r3, [pc, #44]	@ (8013be4 <CRC_Lock+0xe0>)
 8013bb8:	e7d9      	b.n	8013b6e <CRC_Lock+0x6a>
 8013bba:	bf00      	nop
 8013bbc:	e0002000 	.word	0xe0002000
 8013bc0:	e000ed00 	.word	0xe000ed00
 8013bc4:	e0042000 	.word	0xe0042000
 8013bc8:	5c001000 	.word	0x5c001000
 8013bcc:	58024c08 	.word	0x58024c08
 8013bd0:	58024c00 	.word	0x58024c00
 8013bd4:	46008ff0 	.word	0x46008ff0
 8013bd8:	46024c08 	.word	0x46024c08
 8013bdc:	46024c00 	.word	0x46024c00
 8013be0:	40023008 	.word	0x40023008
 8013be4:	40023000 	.word	0x40023000

08013be8 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 8013be8:	6101      	str	r1, [r0, #16]
 8013bea:	4770      	bx	lr

08013bec <_ZN8touchgfx8Gestures4tickEv>:
 8013bec:	7b83      	ldrb	r3, [r0, #14]
 8013bee:	b14b      	cbz	r3, 8013c04 <_ZN8touchgfx8Gestures4tickEv+0x18>
 8013bf0:	8903      	ldrh	r3, [r0, #8]
 8013bf2:	3301      	adds	r3, #1
 8013bf4:	b29b      	uxth	r3, r3
 8013bf6:	2b07      	cmp	r3, #7
 8013bf8:	8103      	strh	r3, [r0, #8]
 8013bfa:	bf81      	itttt	hi
 8013bfc:	2300      	movhi	r3, #0
 8013bfe:	8143      	strhhi	r3, [r0, #10]
 8013c00:	8183      	strhhi	r3, [r0, #12]
 8013c02:	7383      	strbhi	r3, [r0, #14]
 8013c04:	4770      	bx	lr
	...

08013c08 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 8013c08:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8013c0c:	4698      	mov	r8, r3
 8013c0e:	8883      	ldrh	r3, [r0, #4]
 8013c10:	f8ad 3006 	strh.w	r3, [sp, #6]
 8013c14:	eba8 0303 	sub.w	r3, r8, r3
 8013c18:	b21b      	sxth	r3, r3
 8013c1a:	4604      	mov	r4, r0
 8013c1c:	2b00      	cmp	r3, #0
 8013c1e:	4617      	mov	r7, r2
 8013c20:	4a18      	ldr	r2, [pc, #96]	@ (8013c84 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
 8013c22:	9200      	str	r2, [sp, #0]
 8013c24:	bfb8      	it	lt
 8013c26:	425b      	neglt	r3, r3
 8013c28:	8aa2      	ldrh	r2, [r4, #20]
 8013c2a:	f8bd 5028 	ldrh.w	r5, [sp, #40]	@ 0x28
 8013c2e:	f8ad 800a 	strh.w	r8, [sp, #10]
 8013c32:	b21b      	sxth	r3, r3
 8013c34:	460e      	mov	r6, r1
 8013c36:	4293      	cmp	r3, r2
 8013c38:	88c1      	ldrh	r1, [r0, #6]
 8013c3a:	f8ad 1008 	strh.w	r1, [sp, #8]
 8013c3e:	f04f 0000 	mov.w	r0, #0
 8013c42:	f88d 0004 	strb.w	r0, [sp, #4]
 8013c46:	f8ad 500c 	strh.w	r5, [sp, #12]
 8013c4a:	dc07      	bgt.n	8013c5c <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x54>
 8013c4c:	1a69      	subs	r1, r5, r1
 8013c4e:	b209      	sxth	r1, r1
 8013c50:	2900      	cmp	r1, #0
 8013c52:	bfb8      	it	lt
 8013c54:	4249      	neglt	r1, r1
 8013c56:	b209      	sxth	r1, r1
 8013c58:	428a      	cmp	r2, r1
 8013c5a:	da10      	bge.n	8013c7e <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x76>
 8013c5c:	6920      	ldr	r0, [r4, #16]
 8013c5e:	6803      	ldr	r3, [r0, #0]
 8013c60:	4669      	mov	r1, sp
 8013c62:	685b      	ldr	r3, [r3, #4]
 8013c64:	4798      	blx	r3
 8013c66:	eba8 0606 	sub.w	r6, r8, r6
 8013c6a:	2300      	movs	r3, #0
 8013c6c:	1bef      	subs	r7, r5, r7
 8013c6e:	2001      	movs	r0, #1
 8013c70:	8123      	strh	r3, [r4, #8]
 8013c72:	8166      	strh	r6, [r4, #10]
 8013c74:	81a7      	strh	r7, [r4, #12]
 8013c76:	f8a4 8004 	strh.w	r8, [r4, #4]
 8013c7a:	80e5      	strh	r5, [r4, #6]
 8013c7c:	73a0      	strb	r0, [r4, #14]
 8013c7e:	b004      	add	sp, #16
 8013c80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013c84:	08016b64 	.word	0x08016b64

08013c88 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 8013c88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013c8a:	461e      	mov	r6, r3
 8013c8c:	1e4b      	subs	r3, r1, #1
 8013c8e:	2b01      	cmp	r3, #1
 8013c90:	b085      	sub	sp, #20
 8013c92:	4604      	mov	r4, r0
 8013c94:	460d      	mov	r5, r1
 8013c96:	4617      	mov	r7, r2
 8013c98:	d84b      	bhi.n	8013d32 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 8013c9a:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8013c9e:	1cd3      	adds	r3, r2, #3
 8013ca0:	b29b      	uxth	r3, r3
 8013ca2:	2b06      	cmp	r3, #6
 8013ca4:	d916      	bls.n	8013cd4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 8013ca6:	f8df c0a0 	ldr.w	ip, [pc, #160]	@ 8013d48 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8013caa:	f8cd c004 	str.w	ip, [sp, #4]
 8013cae:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8013cb2:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8013cb6:	6900      	ldr	r0, [r0, #16]
 8013cb8:	f8ad 100c 	strh.w	r1, [sp, #12]
 8013cbc:	f04f 0c00 	mov.w	ip, #0
 8013cc0:	f88d c008 	strb.w	ip, [sp, #8]
 8013cc4:	f8ad 200a 	strh.w	r2, [sp, #10]
 8013cc8:	f8ad 300e 	strh.w	r3, [sp, #14]
 8013ccc:	6803      	ldr	r3, [r0, #0]
 8013cce:	a901      	add	r1, sp, #4
 8013cd0:	689b      	ldr	r3, [r3, #8]
 8013cd2:	4798      	blx	r3
 8013cd4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013cd8:	1cd3      	adds	r3, r2, #3
 8013cda:	b29b      	uxth	r3, r3
 8013cdc:	2b06      	cmp	r3, #6
 8013cde:	d916      	bls.n	8013d0e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8013ce0:	f8df c064 	ldr.w	ip, [pc, #100]	@ 8013d48 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8013ce4:	f8cd c004 	str.w	ip, [sp, #4]
 8013ce8:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8013cec:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8013cf0:	6920      	ldr	r0, [r4, #16]
 8013cf2:	f8ad 100c 	strh.w	r1, [sp, #12]
 8013cf6:	f04f 0c01 	mov.w	ip, #1
 8013cfa:	f88d c008 	strb.w	ip, [sp, #8]
 8013cfe:	f8ad 200a 	strh.w	r2, [sp, #10]
 8013d02:	f8ad 300e 	strh.w	r3, [sp, #14]
 8013d06:	6803      	ldr	r3, [r0, #0]
 8013d08:	a901      	add	r1, sp, #4
 8013d0a:	689b      	ldr	r3, [r3, #8]
 8013d0c:	4798      	blx	r3
 8013d0e:	4b0d      	ldr	r3, [pc, #52]	@ (8013d44 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 8013d10:	9301      	str	r3, [sp, #4]
 8013d12:	6920      	ldr	r0, [r4, #16]
 8013d14:	f88d 5008 	strb.w	r5, [sp, #8]
 8013d18:	2300      	movs	r3, #0
 8013d1a:	f8ad 700a 	strh.w	r7, [sp, #10]
 8013d1e:	f8ad 600c 	strh.w	r6, [sp, #12]
 8013d22:	f8ad 300e 	strh.w	r3, [sp, #14]
 8013d26:	6803      	ldr	r3, [r0, #0]
 8013d28:	a901      	add	r1, sp, #4
 8013d2a:	681b      	ldr	r3, [r3, #0]
 8013d2c:	4798      	blx	r3
 8013d2e:	b005      	add	sp, #20
 8013d30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013d32:	2900      	cmp	r1, #0
 8013d34:	d1eb      	bne.n	8013d0e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8013d36:	80a2      	strh	r2, [r4, #4]
 8013d38:	80c6      	strh	r6, [r0, #6]
 8013d3a:	60a1      	str	r1, [r4, #8]
 8013d3c:	81a1      	strh	r1, [r4, #12]
 8013d3e:	73a1      	strb	r1, [r4, #14]
 8013d40:	e7e5      	b.n	8013d0e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8013d42:	bf00      	nop
 8013d44:	08016b50 	.word	0x08016b50
 8013d48:	08016b78 	.word	0x08016b78

08013d4c <__aeabi_atexit>:
 8013d4c:	460b      	mov	r3, r1
 8013d4e:	4601      	mov	r1, r0
 8013d50:	4618      	mov	r0, r3
 8013d52:	f000 bcc7 	b.w	80146e4 <__cxa_atexit>

08013d56 <_ZdlPvj>:
 8013d56:	f000 b8cd 	b.w	8013ef4 <_ZdlPv>

08013d5a <__cxa_guard_acquire>:
 8013d5a:	6802      	ldr	r2, [r0, #0]
 8013d5c:	07d2      	lsls	r2, r2, #31
 8013d5e:	4603      	mov	r3, r0
 8013d60:	d405      	bmi.n	8013d6e <__cxa_guard_acquire+0x14>
 8013d62:	7842      	ldrb	r2, [r0, #1]
 8013d64:	b102      	cbz	r2, 8013d68 <__cxa_guard_acquire+0xe>
 8013d66:	deff      	udf	#255	@ 0xff
 8013d68:	2001      	movs	r0, #1
 8013d6a:	7058      	strb	r0, [r3, #1]
 8013d6c:	4770      	bx	lr
 8013d6e:	2000      	movs	r0, #0
 8013d70:	4770      	bx	lr

08013d72 <__cxa_guard_release>:
 8013d72:	2301      	movs	r3, #1
 8013d74:	6003      	str	r3, [r0, #0]
 8013d76:	4770      	bx	lr

08013d78 <__cxa_pure_virtual>:
 8013d78:	b508      	push	{r3, lr}
 8013d7a:	f000 f8c9 	bl	8013f10 <_ZSt9terminatev>
	...

08013d80 <_ZNSt12_GLOBAL__N_117__libc_getentropyEPv>:
 8013d80:	b507      	push	{r0, r1, r2, lr}
 8013d82:	2104      	movs	r1, #4
 8013d84:	eb0d 0001 	add.w	r0, sp, r1
 8013d88:	f000 feb6 	bl	8014af8 <getentropy>
 8013d8c:	b110      	cbz	r0, 8013d94 <_ZNSt12_GLOBAL__N_117__libc_getentropyEPv+0x14>
 8013d8e:	4803      	ldr	r0, [pc, #12]	@ (8013d9c <_ZNSt12_GLOBAL__N_117__libc_getentropyEPv+0x1c>)
 8013d90:	f000 f8c3 	bl	8013f1a <_ZSt21__throw_runtime_errorPKc>
 8013d94:	9801      	ldr	r0, [sp, #4]
 8013d96:	b003      	add	sp, #12
 8013d98:	f85d fb04 	ldr.w	pc, [sp], #4
 8013d9c:	08016c2c 	.word	0x08016c2c

08013da0 <_ZNSt12_GLOBAL__N_117__libc_arc4randomEPv>:
 8013da0:	f000 bc6e 	b.w	8014680 <arc4random>

08013da4 <_ZNSt13random_device7_M_initERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
 8013da4:	2300      	movs	r3, #0
 8013da6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013da8:	e9c0 3300 	strd	r3, r3, [r0]
 8013dac:	460d      	mov	r5, r1
 8013dae:	f04f 33ff 	mov.w	r3, #4294967295
 8013db2:	4604      	mov	r4, r0
 8013db4:	6083      	str	r3, [r0, #8]
 8013db6:	4915      	ldr	r1, [pc, #84]	@ (8013e0c <_ZNSt13random_device7_M_initERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x68>)
 8013db8:	4628      	mov	r0, r5
 8013dba:	f000 f888 	bl	8013ece <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc>
 8013dbe:	b160      	cbz	r0, 8013dda <_ZNSt13random_device7_M_initERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x36>
 8013dc0:	4913      	ldr	r1, [pc, #76]	@ (8013e10 <_ZNSt13random_device7_M_initERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x6c>)
 8013dc2:	4628      	mov	r0, r5
 8013dc4:	f000 f883 	bl	8013ece <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc>
 8013dc8:	b178      	cbz	r0, 8013dea <_ZNSt13random_device7_M_initERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x46>
 8013dca:	4912      	ldr	r1, [pc, #72]	@ (8013e14 <_ZNSt13random_device7_M_initERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x70>)
 8013dcc:	4628      	mov	r0, r5
 8013dce:	f000 f87e 	bl	8013ece <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc>
 8013dd2:	b160      	cbz	r0, 8013dee <_ZNSt13random_device7_M_initERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x4a>
 8013dd4:	4810      	ldr	r0, [pc, #64]	@ (8013e18 <_ZNSt13random_device7_M_initERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x74>)
 8013dd6:	f000 f8a0 	bl	8013f1a <_ZSt21__throw_runtime_errorPKc>
 8013dda:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8013dde:	06da      	lsls	r2, r3, #27
 8013de0:	d507      	bpl.n	8013df2 <_ZNSt13random_device7_M_initERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x4e>
 8013de2:	4b0e      	ldr	r3, [pc, #56]	@ (8013e1c <_ZNSt13random_device7_M_initERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x78>)
 8013de4:	6063      	str	r3, [r4, #4]
 8013de6:	b003      	add	sp, #12
 8013de8:	bd30      	pop	{r4, r5, pc}
 8013dea:	2308      	movs	r3, #8
 8013dec:	e7f7      	b.n	8013dde <_ZNSt13random_device7_M_initERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x3a>
 8013dee:	2310      	movs	r3, #16
 8013df0:	e7f5      	b.n	8013dde <_ZNSt13random_device7_M_initERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x3a>
 8013df2:	071b      	lsls	r3, r3, #28
 8013df4:	d507      	bpl.n	8013e06 <_ZNSt13random_device7_M_initERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x62>
 8013df6:	2104      	movs	r1, #4
 8013df8:	eb0d 0001 	add.w	r0, sp, r1
 8013dfc:	f000 fe7c 	bl	8014af8 <getentropy>
 8013e00:	b908      	cbnz	r0, 8013e06 <_ZNSt13random_device7_M_initERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x62>
 8013e02:	4b07      	ldr	r3, [pc, #28]	@ (8013e20 <_ZNSt13random_device7_M_initERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x7c>)
 8013e04:	e7ee      	b.n	8013de4 <_ZNSt13random_device7_M_initERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x40>
 8013e06:	4807      	ldr	r0, [pc, #28]	@ (8013e24 <_ZNSt13random_device7_M_initERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x80>)
 8013e08:	e7e5      	b.n	8013dd6 <_ZNSt13random_device7_M_initERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x32>
 8013e0a:	bf00      	nop
 8013e0c:	08015640 	.word	0x08015640
 8013e10:	08016c4d 	.word	0x08016c4d
 8013e14:	08016c58 	.word	0x08016c58
 8013e18:	08016c63 	.word	0x08016c63
 8013e1c:	08013da1 	.word	0x08013da1
 8013e20:	08013d81 	.word	0x08013d81
 8013e24:	08016ca7 	.word	0x08016ca7

08013e28 <_ZNSt13random_device7_M_finiEv>:
 8013e28:	4770      	bx	lr
	...

08013e2c <_ZNSt13random_device9_M_getvalEv>:
 8013e2c:	6843      	ldr	r3, [r0, #4]
 8013e2e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013e30:	4604      	mov	r4, r0
 8013e32:	b123      	cbz	r3, 8013e3e <_ZNSt13random_device9_M_getvalEv+0x12>
 8013e34:	6800      	ldr	r0, [r0, #0]
 8013e36:	b002      	add	sp, #8
 8013e38:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013e3c:	4718      	bx	r3
 8013e3e:	2504      	movs	r5, #4
 8013e40:	eb0d 0605 	add.w	r6, sp, r5
 8013e44:	68a0      	ldr	r0, [r4, #8]
 8013e46:	462a      	mov	r2, r5
 8013e48:	4631      	mov	r1, r6
 8013e4a:	f000 fe5d 	bl	8014b08 <read>
 8013e4e:	1e03      	subs	r3, r0, #0
 8013e50:	dd05      	ble.n	8013e5e <_ZNSt13random_device9_M_getvalEv+0x32>
 8013e52:	1aed      	subs	r5, r5, r3
 8013e54:	441e      	add	r6, r3
 8013e56:	d1f5      	bne.n	8013e44 <_ZNSt13random_device9_M_getvalEv+0x18>
 8013e58:	9801      	ldr	r0, [sp, #4]
 8013e5a:	b002      	add	sp, #8
 8013e5c:	bd70      	pop	{r4, r5, r6, pc}
 8013e5e:	3301      	adds	r3, #1
 8013e60:	d002      	beq.n	8013e68 <_ZNSt13random_device9_M_getvalEv+0x3c>
 8013e62:	4804      	ldr	r0, [pc, #16]	@ (8013e74 <_ZNSt13random_device9_M_getvalEv+0x48>)
 8013e64:	f000 f859 	bl	8013f1a <_ZSt21__throw_runtime_errorPKc>
 8013e68:	f000 fe16 	bl	8014a98 <__errno>
 8013e6c:	6803      	ldr	r3, [r0, #0]
 8013e6e:	2b04      	cmp	r3, #4
 8013e70:	d0e8      	beq.n	8013e44 <_ZNSt13random_device9_M_getvalEv+0x18>
 8013e72:	e7f6      	b.n	8013e62 <_ZNSt13random_device9_M_getvalEv+0x36>
 8013e74:	08016cee 	.word	0x08016cee

08013e78 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
 8013e78:	b10a      	cbz	r2, 8013e7e <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0x6>
 8013e7a:	f000 be4f 	b.w	8014b1c <memcpy>
 8013e7e:	4770      	bx	lr

08013e80 <_ZNSt11char_traitsIcE7compareEPKcS2_j>:
 8013e80:	b10a      	cbz	r2, 8013e86 <_ZNSt11char_traitsIcE7compareEPKcS2_j+0x6>
 8013e82:	f000 bd56 	b.w	8014932 <memcmp>
 8013e86:	4610      	mov	r0, r2
 8013e88:	4770      	bx	lr

08013e8a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>:
 8013e8a:	f850 3b08 	ldr.w	r3, [r0], #8
 8013e8e:	1a1b      	subs	r3, r3, r0
 8013e90:	4258      	negs	r0, r3
 8013e92:	4158      	adcs	r0, r3
 8013e94:	4770      	bx	lr

08013e96 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 8013e96:	b510      	push	{r4, lr}
 8013e98:	4604      	mov	r4, r0
 8013e9a:	f7ff fff6 	bl	8013e8a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 8013e9e:	b920      	cbnz	r0, 8013eaa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0x14>
 8013ea0:	6820      	ldr	r0, [r4, #0]
 8013ea2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013ea6:	f000 b825 	b.w	8013ef4 <_ZdlPv>
 8013eaa:	bd10      	pop	{r4, pc}

08013eac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 8013eac:	2a01      	cmp	r2, #1
 8013eae:	b410      	push	{r4}
 8013eb0:	d104      	bne.n	8013ebc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0x10>
 8013eb2:	780a      	ldrb	r2, [r1, #0]
 8013eb4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013eb8:	7002      	strb	r2, [r0, #0]
 8013eba:	4770      	bx	lr
 8013ebc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013ec0:	f7ff bfda 	b.w	8013e78 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>

08013ec4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 8013ec4:	b508      	push	{r3, lr}
 8013ec6:	1a52      	subs	r2, r2, r1
 8013ec8:	f7ff fff0 	bl	8013eac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8013ecc:	bd08      	pop	{r3, pc}

08013ece <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc>:
 8013ece:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013ed0:	6847      	ldr	r7, [r0, #4]
 8013ed2:	4605      	mov	r5, r0
 8013ed4:	4608      	mov	r0, r1
 8013ed6:	460e      	mov	r6, r1
 8013ed8:	f7ec f9da 	bl	8000290 <strlen>
 8013edc:	4287      	cmp	r7, r0
 8013ede:	4604      	mov	r4, r0
 8013ee0:	463a      	mov	r2, r7
 8013ee2:	4631      	mov	r1, r6
 8013ee4:	bf28      	it	cs
 8013ee6:	4602      	movcs	r2, r0
 8013ee8:	6828      	ldr	r0, [r5, #0]
 8013eea:	f7ff ffc9 	bl	8013e80 <_ZNSt11char_traitsIcE7compareEPKcS2_j>
 8013eee:	b900      	cbnz	r0, 8013ef2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc+0x24>
 8013ef0:	1b38      	subs	r0, r7, r4
 8013ef2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08013ef4 <_ZdlPv>:
 8013ef4:	f000 b848 	b.w	8013f88 <free>

08013ef8 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8013ef8:	b508      	push	{r3, lr}
 8013efa:	4780      	blx	r0
 8013efc:	f000 f810 	bl	8013f20 <abort>

08013f00 <_ZSt13get_terminatev>:
 8013f00:	4b02      	ldr	r3, [pc, #8]	@ (8013f0c <_ZSt13get_terminatev+0xc>)
 8013f02:	6818      	ldr	r0, [r3, #0]
 8013f04:	f3bf 8f5b 	dmb	ish
 8013f08:	4770      	bx	lr
 8013f0a:	bf00      	nop
 8013f0c:	2000008c 	.word	0x2000008c

08013f10 <_ZSt9terminatev>:
 8013f10:	b508      	push	{r3, lr}
 8013f12:	f7ff fff5 	bl	8013f00 <_ZSt13get_terminatev>
 8013f16:	f7ff ffef 	bl	8013ef8 <_ZN10__cxxabiv111__terminateEPFvvE>

08013f1a <_ZSt21__throw_runtime_errorPKc>:
 8013f1a:	b508      	push	{r3, lr}
 8013f1c:	f000 f800 	bl	8013f20 <abort>

08013f20 <abort>:
 8013f20:	b508      	push	{r3, lr}
 8013f22:	2006      	movs	r0, #6
 8013f24:	f000 fd46 	bl	80149b4 <raise>
 8013f28:	2001      	movs	r0, #1
 8013f2a:	f7ee fc13 	bl	8002754 <_exit>
	...

08013f30 <__assert_func>:
 8013f30:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013f32:	4614      	mov	r4, r2
 8013f34:	461a      	mov	r2, r3
 8013f36:	4b09      	ldr	r3, [pc, #36]	@ (8013f5c <__assert_func+0x2c>)
 8013f38:	681b      	ldr	r3, [r3, #0]
 8013f3a:	4605      	mov	r5, r0
 8013f3c:	68d8      	ldr	r0, [r3, #12]
 8013f3e:	b954      	cbnz	r4, 8013f56 <__assert_func+0x26>
 8013f40:	4b07      	ldr	r3, [pc, #28]	@ (8013f60 <__assert_func+0x30>)
 8013f42:	461c      	mov	r4, r3
 8013f44:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013f48:	9100      	str	r1, [sp, #0]
 8013f4a:	462b      	mov	r3, r5
 8013f4c:	4905      	ldr	r1, [pc, #20]	@ (8013f64 <__assert_func+0x34>)
 8013f4e:	f000 fc7b 	bl	8014848 <fiprintf>
 8013f52:	f7ff ffe5 	bl	8013f20 <abort>
 8013f56:	4b04      	ldr	r3, [pc, #16]	@ (8013f68 <__assert_func+0x38>)
 8013f58:	e7f4      	b.n	8013f44 <__assert_func+0x14>
 8013f5a:	bf00      	nop
 8013f5c:	2000009c 	.word	0x2000009c
 8013f60:	08016d49 	.word	0x08016d49
 8013f64:	08016d1b 	.word	0x08016d1b
 8013f68:	08016d0e 	.word	0x08016d0e

08013f6c <atexit>:
 8013f6c:	2300      	movs	r3, #0
 8013f6e:	4601      	mov	r1, r0
 8013f70:	461a      	mov	r2, r3
 8013f72:	4618      	mov	r0, r3
 8013f74:	f000 bde0 	b.w	8014b38 <__register_exitproc>

08013f78 <malloc>:
 8013f78:	4b02      	ldr	r3, [pc, #8]	@ (8013f84 <malloc+0xc>)
 8013f7a:	4601      	mov	r1, r0
 8013f7c:	6818      	ldr	r0, [r3, #0]
 8013f7e:	f000 b82d 	b.w	8013fdc <_malloc_r>
 8013f82:	bf00      	nop
 8013f84:	2000009c 	.word	0x2000009c

08013f88 <free>:
 8013f88:	4b02      	ldr	r3, [pc, #8]	@ (8013f94 <free+0xc>)
 8013f8a:	4601      	mov	r1, r0
 8013f8c:	6818      	ldr	r0, [r3, #0]
 8013f8e:	f000 be2f 	b.w	8014bf0 <_free_r>
 8013f92:	bf00      	nop
 8013f94:	2000009c 	.word	0x2000009c

08013f98 <sbrk_aligned>:
 8013f98:	b570      	push	{r4, r5, r6, lr}
 8013f9a:	4e0f      	ldr	r6, [pc, #60]	@ (8013fd8 <sbrk_aligned+0x40>)
 8013f9c:	460c      	mov	r4, r1
 8013f9e:	6831      	ldr	r1, [r6, #0]
 8013fa0:	4605      	mov	r5, r0
 8013fa2:	b911      	cbnz	r1, 8013faa <sbrk_aligned+0x12>
 8013fa4:	f000 fd56 	bl	8014a54 <_sbrk_r>
 8013fa8:	6030      	str	r0, [r6, #0]
 8013faa:	4621      	mov	r1, r4
 8013fac:	4628      	mov	r0, r5
 8013fae:	f000 fd51 	bl	8014a54 <_sbrk_r>
 8013fb2:	1c43      	adds	r3, r0, #1
 8013fb4:	d103      	bne.n	8013fbe <sbrk_aligned+0x26>
 8013fb6:	f04f 34ff 	mov.w	r4, #4294967295
 8013fba:	4620      	mov	r0, r4
 8013fbc:	bd70      	pop	{r4, r5, r6, pc}
 8013fbe:	1cc4      	adds	r4, r0, #3
 8013fc0:	f024 0403 	bic.w	r4, r4, #3
 8013fc4:	42a0      	cmp	r0, r4
 8013fc6:	d0f8      	beq.n	8013fba <sbrk_aligned+0x22>
 8013fc8:	1a21      	subs	r1, r4, r0
 8013fca:	4628      	mov	r0, r5
 8013fcc:	f000 fd42 	bl	8014a54 <_sbrk_r>
 8013fd0:	3001      	adds	r0, #1
 8013fd2:	d1f2      	bne.n	8013fba <sbrk_aligned+0x22>
 8013fd4:	e7ef      	b.n	8013fb6 <sbrk_aligned+0x1e>
 8013fd6:	bf00      	nop
 8013fd8:	20014fe4 	.word	0x20014fe4

08013fdc <_malloc_r>:
 8013fdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013fe0:	1ccd      	adds	r5, r1, #3
 8013fe2:	f025 0503 	bic.w	r5, r5, #3
 8013fe6:	3508      	adds	r5, #8
 8013fe8:	2d0c      	cmp	r5, #12
 8013fea:	bf38      	it	cc
 8013fec:	250c      	movcc	r5, #12
 8013fee:	2d00      	cmp	r5, #0
 8013ff0:	4606      	mov	r6, r0
 8013ff2:	db01      	blt.n	8013ff8 <_malloc_r+0x1c>
 8013ff4:	42a9      	cmp	r1, r5
 8013ff6:	d904      	bls.n	8014002 <_malloc_r+0x26>
 8013ff8:	230c      	movs	r3, #12
 8013ffa:	6033      	str	r3, [r6, #0]
 8013ffc:	2000      	movs	r0, #0
 8013ffe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014002:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80140d8 <_malloc_r+0xfc>
 8014006:	f000 f869 	bl	80140dc <__malloc_lock>
 801400a:	f8d8 3000 	ldr.w	r3, [r8]
 801400e:	461c      	mov	r4, r3
 8014010:	bb44      	cbnz	r4, 8014064 <_malloc_r+0x88>
 8014012:	4629      	mov	r1, r5
 8014014:	4630      	mov	r0, r6
 8014016:	f7ff ffbf 	bl	8013f98 <sbrk_aligned>
 801401a:	1c43      	adds	r3, r0, #1
 801401c:	4604      	mov	r4, r0
 801401e:	d158      	bne.n	80140d2 <_malloc_r+0xf6>
 8014020:	f8d8 4000 	ldr.w	r4, [r8]
 8014024:	4627      	mov	r7, r4
 8014026:	2f00      	cmp	r7, #0
 8014028:	d143      	bne.n	80140b2 <_malloc_r+0xd6>
 801402a:	2c00      	cmp	r4, #0
 801402c:	d04b      	beq.n	80140c6 <_malloc_r+0xea>
 801402e:	6823      	ldr	r3, [r4, #0]
 8014030:	4639      	mov	r1, r7
 8014032:	4630      	mov	r0, r6
 8014034:	eb04 0903 	add.w	r9, r4, r3
 8014038:	f000 fd0c 	bl	8014a54 <_sbrk_r>
 801403c:	4581      	cmp	r9, r0
 801403e:	d142      	bne.n	80140c6 <_malloc_r+0xea>
 8014040:	6821      	ldr	r1, [r4, #0]
 8014042:	1a6d      	subs	r5, r5, r1
 8014044:	4629      	mov	r1, r5
 8014046:	4630      	mov	r0, r6
 8014048:	f7ff ffa6 	bl	8013f98 <sbrk_aligned>
 801404c:	3001      	adds	r0, #1
 801404e:	d03a      	beq.n	80140c6 <_malloc_r+0xea>
 8014050:	6823      	ldr	r3, [r4, #0]
 8014052:	442b      	add	r3, r5
 8014054:	6023      	str	r3, [r4, #0]
 8014056:	f8d8 3000 	ldr.w	r3, [r8]
 801405a:	685a      	ldr	r2, [r3, #4]
 801405c:	bb62      	cbnz	r2, 80140b8 <_malloc_r+0xdc>
 801405e:	f8c8 7000 	str.w	r7, [r8]
 8014062:	e00f      	b.n	8014084 <_malloc_r+0xa8>
 8014064:	6822      	ldr	r2, [r4, #0]
 8014066:	1b52      	subs	r2, r2, r5
 8014068:	d420      	bmi.n	80140ac <_malloc_r+0xd0>
 801406a:	2a0b      	cmp	r2, #11
 801406c:	d917      	bls.n	801409e <_malloc_r+0xc2>
 801406e:	1961      	adds	r1, r4, r5
 8014070:	42a3      	cmp	r3, r4
 8014072:	6025      	str	r5, [r4, #0]
 8014074:	bf18      	it	ne
 8014076:	6059      	strne	r1, [r3, #4]
 8014078:	6863      	ldr	r3, [r4, #4]
 801407a:	bf08      	it	eq
 801407c:	f8c8 1000 	streq.w	r1, [r8]
 8014080:	5162      	str	r2, [r4, r5]
 8014082:	604b      	str	r3, [r1, #4]
 8014084:	4630      	mov	r0, r6
 8014086:	f000 f82f 	bl	80140e8 <__malloc_unlock>
 801408a:	f104 000b 	add.w	r0, r4, #11
 801408e:	1d23      	adds	r3, r4, #4
 8014090:	f020 0007 	bic.w	r0, r0, #7
 8014094:	1ac2      	subs	r2, r0, r3
 8014096:	bf1c      	itt	ne
 8014098:	1a1b      	subne	r3, r3, r0
 801409a:	50a3      	strne	r3, [r4, r2]
 801409c:	e7af      	b.n	8013ffe <_malloc_r+0x22>
 801409e:	6862      	ldr	r2, [r4, #4]
 80140a0:	42a3      	cmp	r3, r4
 80140a2:	bf0c      	ite	eq
 80140a4:	f8c8 2000 	streq.w	r2, [r8]
 80140a8:	605a      	strne	r2, [r3, #4]
 80140aa:	e7eb      	b.n	8014084 <_malloc_r+0xa8>
 80140ac:	4623      	mov	r3, r4
 80140ae:	6864      	ldr	r4, [r4, #4]
 80140b0:	e7ae      	b.n	8014010 <_malloc_r+0x34>
 80140b2:	463c      	mov	r4, r7
 80140b4:	687f      	ldr	r7, [r7, #4]
 80140b6:	e7b6      	b.n	8014026 <_malloc_r+0x4a>
 80140b8:	461a      	mov	r2, r3
 80140ba:	685b      	ldr	r3, [r3, #4]
 80140bc:	42a3      	cmp	r3, r4
 80140be:	d1fb      	bne.n	80140b8 <_malloc_r+0xdc>
 80140c0:	2300      	movs	r3, #0
 80140c2:	6053      	str	r3, [r2, #4]
 80140c4:	e7de      	b.n	8014084 <_malloc_r+0xa8>
 80140c6:	230c      	movs	r3, #12
 80140c8:	6033      	str	r3, [r6, #0]
 80140ca:	4630      	mov	r0, r6
 80140cc:	f000 f80c 	bl	80140e8 <__malloc_unlock>
 80140d0:	e794      	b.n	8013ffc <_malloc_r+0x20>
 80140d2:	6005      	str	r5, [r0, #0]
 80140d4:	e7d6      	b.n	8014084 <_malloc_r+0xa8>
 80140d6:	bf00      	nop
 80140d8:	20014fe8 	.word	0x20014fe8

080140dc <__malloc_lock>:
 80140dc:	4801      	ldr	r0, [pc, #4]	@ (80140e4 <__malloc_lock+0x8>)
 80140de:	f000 bd07 	b.w	8014af0 <__retarget_lock_acquire_recursive>
 80140e2:	bf00      	nop
 80140e4:	2001557d 	.word	0x2001557d

080140e8 <__malloc_unlock>:
 80140e8:	4801      	ldr	r0, [pc, #4]	@ (80140f0 <__malloc_unlock+0x8>)
 80140ea:	f000 bd03 	b.w	8014af4 <__retarget_lock_release_recursive>
 80140ee:	bf00      	nop
 80140f0:	2001557d 	.word	0x2001557d

080140f4 <chacha_encrypt_bytes.part.0>:
 80140f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80140f8:	b0b1      	sub	sp, #196	@ 0xc4
 80140fa:	4683      	mov	fp, r0
 80140fc:	930a      	str	r3, [sp, #40]	@ 0x28
 80140fe:	6803      	ldr	r3, [r0, #0]
 8014100:	930b      	str	r3, [sp, #44]	@ 0x2c
 8014102:	6843      	ldr	r3, [r0, #4]
 8014104:	930c      	str	r3, [sp, #48]	@ 0x30
 8014106:	6883      	ldr	r3, [r0, #8]
 8014108:	930d      	str	r3, [sp, #52]	@ 0x34
 801410a:	68c3      	ldr	r3, [r0, #12]
 801410c:	930e      	str	r3, [sp, #56]	@ 0x38
 801410e:	6903      	ldr	r3, [r0, #16]
 8014110:	930f      	str	r3, [sp, #60]	@ 0x3c
 8014112:	6943      	ldr	r3, [r0, #20]
 8014114:	9310      	str	r3, [sp, #64]	@ 0x40
 8014116:	6983      	ldr	r3, [r0, #24]
 8014118:	9311      	str	r3, [sp, #68]	@ 0x44
 801411a:	69c3      	ldr	r3, [r0, #28]
 801411c:	9312      	str	r3, [sp, #72]	@ 0x48
 801411e:	6a03      	ldr	r3, [r0, #32]
 8014120:	9313      	str	r3, [sp, #76]	@ 0x4c
 8014122:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8014124:	9314      	str	r3, [sp, #80]	@ 0x50
 8014126:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8014128:	9315      	str	r3, [sp, #84]	@ 0x54
 801412a:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 801412c:	9316      	str	r3, [sp, #88]	@ 0x58
 801412e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8014130:	9317      	str	r3, [sp, #92]	@ 0x5c
 8014132:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8014134:	9302      	str	r3, [sp, #8]
 8014136:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8014138:	911f      	str	r1, [sp, #124]	@ 0x7c
 801413a:	9318      	str	r3, [sp, #96]	@ 0x60
 801413c:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 801413e:	9319      	str	r3, [sp, #100]	@ 0x64
 8014140:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8014142:	9308      	str	r3, [sp, #32]
 8014144:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014146:	9301      	str	r3, [sp, #4]
 8014148:	2300      	movs	r3, #0
 801414a:	931e      	str	r3, [sp, #120]	@ 0x78
 801414c:	9b01      	ldr	r3, [sp, #4]
 801414e:	2b3f      	cmp	r3, #63	@ 0x3f
 8014150:	d80c      	bhi.n	801416c <chacha_encrypt_bytes.part.0+0x78>
 8014152:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8014154:	9801      	ldr	r0, [sp, #4]
 8014156:	a920      	add	r1, sp, #128	@ 0x80
 8014158:	1818      	adds	r0, r3, r0
 801415a:	f813 4b01 	ldrb.w	r4, [r3], #1
 801415e:	f801 4b01 	strb.w	r4, [r1], #1
 8014162:	4298      	cmp	r0, r3
 8014164:	d1f9      	bne.n	801415a <chacha_encrypt_bytes.part.0+0x66>
 8014166:	921e      	str	r2, [sp, #120]	@ 0x78
 8014168:	aa20      	add	r2, sp, #128	@ 0x80
 801416a:	921f      	str	r2, [sp, #124]	@ 0x7c
 801416c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801416e:	9305      	str	r3, [sp, #20]
 8014170:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8014172:	9309      	str	r3, [sp, #36]	@ 0x24
 8014174:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8014176:	9307      	str	r3, [sp, #28]
 8014178:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801417a:	9304      	str	r3, [sp, #16]
 801417c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801417e:	9306      	str	r3, [sp, #24]
 8014180:	270a      	movs	r7, #10
 8014182:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8014184:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8014186:	f8dd 8060 	ldr.w	r8, [sp, #96]	@ 0x60
 801418a:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 801418c:	f8dd c050 	ldr.w	ip, [sp, #80]	@ 0x50
 8014190:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8014194:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8014196:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8014198:	f8dd e04c 	ldr.w	lr, [sp, #76]	@ 0x4c
 801419c:	f8dd a020 	ldr.w	sl, [sp, #32]
 80141a0:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 80141a2:	9303      	str	r3, [sp, #12]
 80141a4:	9700      	str	r7, [sp, #0]
 80141a6:	9f03      	ldr	r7, [sp, #12]
 80141a8:	4407      	add	r7, r0
 80141aa:	ea87 0a0a 	eor.w	sl, r7, sl
 80141ae:	eb0e 4e3a 	add.w	lr, lr, sl, ror #16
 80141b2:	440e      	add	r6, r1
 80141b4:	ea8e 0300 	eor.w	r3, lr, r0
 80141b8:	ea86 0909 	eor.w	r9, r6, r9
 80141bc:	eb0c 4c39 	add.w	ip, ip, r9, ror #16
 80141c0:	eb07 5733 	add.w	r7, r7, r3, ror #20
 80141c4:	ea87 4a3a 	eor.w	sl, r7, sl, ror #16
 80141c8:	ea8c 0101 	eor.w	r1, ip, r1
 80141cc:	eb0e 603a 	add.w	r0, lr, sl, ror #24
 80141d0:	eb06 5631 	add.w	r6, r6, r1, ror #20
 80141d4:	ea86 4939 	eor.w	r9, r6, r9, ror #16
 80141d8:	901a      	str	r0, [sp, #104]	@ 0x68
 80141da:	ea80 5033 	eor.w	r0, r0, r3, ror #20
 80141de:	9b06      	ldr	r3, [sp, #24]
 80141e0:	901b      	str	r0, [sp, #108]	@ 0x6c
 80141e2:	eb0c 6039 	add.w	r0, ip, r9, ror #24
 80141e6:	ea80 5131 	eor.w	r1, r0, r1, ror #20
 80141ea:	441d      	add	r5, r3
 80141ec:	901c      	str	r0, [sp, #112]	@ 0x70
 80141ee:	9804      	ldr	r0, [sp, #16]
 80141f0:	ea85 0808 	eor.w	r8, r5, r8
 80141f4:	eb00 4e38 	add.w	lr, r0, r8, ror #16
 80141f8:	ea8e 0303 	eor.w	r3, lr, r3
 80141fc:	eb05 5533 	add.w	r5, r5, r3, ror #20
 8014200:	ea85 4038 	eor.w	r0, r5, r8, ror #16
 8014204:	eb0e 6e30 	add.w	lr, lr, r0, ror #24
 8014208:	901d      	str	r0, [sp, #116]	@ 0x74
 801420a:	9807      	ldr	r0, [sp, #28]
 801420c:	4404      	add	r4, r0
 801420e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014210:	ea84 0800 	eor.w	r8, r4, r0
 8014214:	9805      	ldr	r0, [sp, #20]
 8014216:	eb00 4c38 	add.w	ip, r0, r8, ror #16
 801421a:	9807      	ldr	r0, [sp, #28]
 801421c:	ea8c 0000 	eor.w	r0, ip, r0
 8014220:	eb04 5430 	add.w	r4, r4, r0, ror #20
 8014224:	ea84 4838 	eor.w	r8, r4, r8, ror #16
 8014228:	eb07 6771 	add.w	r7, r7, r1, ror #25
 801422c:	eb0c 6c38 	add.w	ip, ip, r8, ror #24
 8014230:	ea87 6838 	eor.w	r8, r7, r8, ror #24
 8014234:	ea8e 5333 	eor.w	r3, lr, r3, ror #20
 8014238:	eb0e 4e38 	add.w	lr, lr, r8, ror #16
 801423c:	ea8e 6171 	eor.w	r1, lr, r1, ror #25
 8014240:	eb07 5731 	add.w	r7, r7, r1, ror #20
 8014244:	ea87 4838 	eor.w	r8, r7, r8, ror #16
 8014248:	eb06 6673 	add.w	r6, r6, r3, ror #25
 801424c:	9703      	str	r7, [sp, #12]
 801424e:	ea4f 6738 	mov.w	r7, r8, ror #24
 8014252:	9709      	str	r7, [sp, #36]	@ 0x24
 8014254:	eb0e 6738 	add.w	r7, lr, r8, ror #24
 8014258:	ea86 6e3a 	eor.w	lr, r6, sl, ror #24
 801425c:	ea8c 5030 	eor.w	r0, ip, r0, ror #20
 8014260:	eb0c 4c3e 	add.w	ip, ip, lr, ror #16
 8014264:	ea8c 6373 	eor.w	r3, ip, r3, ror #25
 8014268:	eb06 5633 	add.w	r6, r6, r3, ror #20
 801426c:	ea86 4e3e 	eor.w	lr, r6, lr, ror #16
 8014270:	ea87 5131 	eor.w	r1, r7, r1, ror #20
 8014274:	9704      	str	r7, [sp, #16]
 8014276:	eb0c 673e 	add.w	r7, ip, lr, ror #24
 801427a:	eb05 6570 	add.w	r5, r5, r0, ror #25
 801427e:	ea87 5333 	eor.w	r3, r7, r3, ror #20
 8014282:	9705      	str	r7, [sp, #20]
 8014284:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8014286:	ea85 6939 	eor.w	r9, r5, r9, ror #24
 801428a:	ea4f 6a3e 	mov.w	sl, lr, ror #24
 801428e:	eb07 4e39 	add.w	lr, r7, r9, ror #16
 8014292:	ea8e 6070 	eor.w	r0, lr, r0, ror #25
 8014296:	eb05 5530 	add.w	r5, r5, r0, ror #20
 801429a:	ea85 4c39 	eor.w	ip, r5, r9, ror #16
 801429e:	eb0e 6e3c 	add.w	lr, lr, ip, ror #24
 80142a2:	ea8e 5030 	eor.w	r0, lr, r0, ror #20
 80142a6:	ea4f 6070 	mov.w	r0, r0, ror #25
 80142aa:	9007      	str	r0, [sp, #28]
 80142ac:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 80142ae:	9f1b      	ldr	r7, [sp, #108]	@ 0x6c
 80142b0:	eb04 6470 	add.w	r4, r4, r0, ror #25
 80142b4:	981d      	ldr	r0, [sp, #116]	@ 0x74
 80142b6:	ea4f 693c 	mov.w	r9, ip, ror #24
 80142ba:	ea84 6c30 	eor.w	ip, r4, r0, ror #24
 80142be:	981c      	ldr	r0, [sp, #112]	@ 0x70
 80142c0:	ea4f 6373 	mov.w	r3, r3, ror #25
 80142c4:	eb00 403c 	add.w	r0, r0, ip, ror #16
 80142c8:	9306      	str	r3, [sp, #24]
 80142ca:	4603      	mov	r3, r0
 80142cc:	ea80 6077 	eor.w	r0, r0, r7, ror #25
 80142d0:	eb04 5430 	add.w	r4, r4, r0, ror #20
 80142d4:	9f00      	ldr	r7, [sp, #0]
 80142d6:	ea84 4c3c 	eor.w	ip, r4, ip, ror #16
 80142da:	ea4f 683c 	mov.w	r8, ip, ror #24
 80142de:	eb03 6c3c 	add.w	ip, r3, ip, ror #24
 80142e2:	ea8c 5030 	eor.w	r0, ip, r0, ror #20
 80142e6:	3f01      	subs	r7, #1
 80142e8:	ea4f 6171 	mov.w	r1, r1, ror #25
 80142ec:	ea4f 6070 	mov.w	r0, r0, ror #25
 80142f0:	9700      	str	r7, [sp, #0]
 80142f2:	f47f af58 	bne.w	80141a6 <chacha_encrypt_bytes.part.0+0xb2>
 80142f6:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80142f8:	9b03      	ldr	r3, [sp, #12]
 80142fa:	443b      	add	r3, r7
 80142fc:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 80142fe:	9303      	str	r3, [sp, #12]
 8014300:	443e      	add	r6, r7
 8014302:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 8014304:	9b06      	ldr	r3, [sp, #24]
 8014306:	443d      	add	r5, r7
 8014308:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
 801430a:	443c      	add	r4, r7
 801430c:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 801430e:	4438      	add	r0, r7
 8014310:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8014312:	4439      	add	r1, r7
 8014314:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 8014316:	443b      	add	r3, r7
 8014318:	9306      	str	r3, [sp, #24]
 801431a:	9f07      	ldr	r7, [sp, #28]
 801431c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801431e:	441f      	add	r7, r3
 8014320:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8014322:	9707      	str	r7, [sp, #28]
 8014324:	449e      	add	lr, r3
 8014326:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8014328:	9f04      	ldr	r7, [sp, #16]
 801432a:	449c      	add	ip, r3
 801432c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801432e:	441f      	add	r7, r3
 8014330:	9704      	str	r7, [sp, #16]
 8014332:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8014334:	9f05      	ldr	r7, [sp, #20]
 8014336:	441f      	add	r7, r3
 8014338:	9b08      	ldr	r3, [sp, #32]
 801433a:	9705      	str	r7, [sp, #20]
 801433c:	449a      	add	sl, r3
 801433e:	9b02      	ldr	r3, [sp, #8]
 8014340:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8014342:	4499      	add	r9, r3
 8014344:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8014346:	4498      	add	r8, r3
 8014348:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801434a:	441f      	add	r7, r3
 801434c:	9b08      	ldr	r3, [sp, #32]
 801434e:	9709      	str	r7, [sp, #36]	@ 0x24
 8014350:	3301      	adds	r3, #1
 8014352:	bf08      	it	eq
 8014354:	9f02      	ldreq	r7, [sp, #8]
 8014356:	9308      	str	r3, [sp, #32]
 8014358:	bf04      	itt	eq
 801435a:	3701      	addeq	r7, #1
 801435c:	9702      	streq	r7, [sp, #8]
 801435e:	9b03      	ldr	r3, [sp, #12]
 8014360:	7013      	strb	r3, [r2, #0]
 8014362:	0a1b      	lsrs	r3, r3, #8
 8014364:	7053      	strb	r3, [r2, #1]
 8014366:	9b03      	ldr	r3, [sp, #12]
 8014368:	7116      	strb	r6, [r2, #4]
 801436a:	0c1b      	lsrs	r3, r3, #16
 801436c:	7093      	strb	r3, [r2, #2]
 801436e:	9b03      	ldr	r3, [sp, #12]
 8014370:	7215      	strb	r5, [r2, #8]
 8014372:	0e1f      	lsrs	r7, r3, #24
 8014374:	70d7      	strb	r7, [r2, #3]
 8014376:	0a37      	lsrs	r7, r6, #8
 8014378:	7157      	strb	r7, [r2, #5]
 801437a:	0c37      	lsrs	r7, r6, #16
 801437c:	0e36      	lsrs	r6, r6, #24
 801437e:	71d6      	strb	r6, [r2, #7]
 8014380:	0a2e      	lsrs	r6, r5, #8
 8014382:	7256      	strb	r6, [r2, #9]
 8014384:	0c2e      	lsrs	r6, r5, #16
 8014386:	0e2d      	lsrs	r5, r5, #24
 8014388:	72d5      	strb	r5, [r2, #11]
 801438a:	0a25      	lsrs	r5, r4, #8
 801438c:	7314      	strb	r4, [r2, #12]
 801438e:	7355      	strb	r5, [r2, #13]
 8014390:	0c25      	lsrs	r5, r4, #16
 8014392:	0e24      	lsrs	r4, r4, #24
 8014394:	73d4      	strb	r4, [r2, #15]
 8014396:	0a04      	lsrs	r4, r0, #8
 8014398:	7410      	strb	r0, [r2, #16]
 801439a:	7454      	strb	r4, [r2, #17]
 801439c:	0c04      	lsrs	r4, r0, #16
 801439e:	0e00      	lsrs	r0, r0, #24
 80143a0:	9b06      	ldr	r3, [sp, #24]
 80143a2:	74d0      	strb	r0, [r2, #19]
 80143a4:	0a08      	lsrs	r0, r1, #8
 80143a6:	7511      	strb	r1, [r2, #20]
 80143a8:	7550      	strb	r0, [r2, #21]
 80143aa:	0c08      	lsrs	r0, r1, #16
 80143ac:	0e09      	lsrs	r1, r1, #24
 80143ae:	75d1      	strb	r1, [r2, #23]
 80143b0:	0a19      	lsrs	r1, r3, #8
 80143b2:	7613      	strb	r3, [r2, #24]
 80143b4:	7651      	strb	r1, [r2, #25]
 80143b6:	0c19      	lsrs	r1, r3, #16
 80143b8:	0e1b      	lsrs	r3, r3, #24
 80143ba:	7197      	strb	r7, [r2, #6]
 80143bc:	7296      	strb	r6, [r2, #10]
 80143be:	7395      	strb	r5, [r2, #14]
 80143c0:	7494      	strb	r4, [r2, #18]
 80143c2:	7590      	strb	r0, [r2, #22]
 80143c4:	7691      	strb	r1, [r2, #26]
 80143c6:	76d3      	strb	r3, [r2, #27]
 80143c8:	9b07      	ldr	r3, [sp, #28]
 80143ca:	7713      	strb	r3, [r2, #28]
 80143cc:	0a1b      	lsrs	r3, r3, #8
 80143ce:	7753      	strb	r3, [r2, #29]
 80143d0:	9b07      	ldr	r3, [sp, #28]
 80143d2:	f882 e020 	strb.w	lr, [r2, #32]
 80143d6:	0c1b      	lsrs	r3, r3, #16
 80143d8:	7793      	strb	r3, [r2, #30]
 80143da:	9b07      	ldr	r3, [sp, #28]
 80143dc:	f882 c024 	strb.w	ip, [r2, #36]	@ 0x24
 80143e0:	0e1b      	lsrs	r3, r3, #24
 80143e2:	77d3      	strb	r3, [r2, #31]
 80143e4:	ea4f 231e 	mov.w	r3, lr, lsr #8
 80143e8:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21
 80143ec:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80143f0:	f882 3022 	strb.w	r3, [r2, #34]	@ 0x22
 80143f4:	ea4f 231c 	mov.w	r3, ip, lsr #8
 80143f8:	f882 3025 	strb.w	r3, [r2, #37]	@ 0x25
 80143fc:	ea4f 431c 	mov.w	r3, ip, lsr #16
 8014400:	f882 3026 	strb.w	r3, [r2, #38]	@ 0x26
 8014404:	9b04      	ldr	r3, [sp, #16]
 8014406:	f882 3028 	strb.w	r3, [r2, #40]	@ 0x28
 801440a:	0a1b      	lsrs	r3, r3, #8
 801440c:	f882 3029 	strb.w	r3, [r2, #41]	@ 0x29
 8014410:	9b04      	ldr	r3, [sp, #16]
 8014412:	f882 a030 	strb.w	sl, [r2, #48]	@ 0x30
 8014416:	0c1b      	lsrs	r3, r3, #16
 8014418:	f882 302a 	strb.w	r3, [r2, #42]	@ 0x2a
 801441c:	9b04      	ldr	r3, [sp, #16]
 801441e:	0e1b      	lsrs	r3, r3, #24
 8014420:	f882 302b 	strb.w	r3, [r2, #43]	@ 0x2b
 8014424:	9b05      	ldr	r3, [sp, #20]
 8014426:	f882 302c 	strb.w	r3, [r2, #44]	@ 0x2c
 801442a:	0a1b      	lsrs	r3, r3, #8
 801442c:	f882 302d 	strb.w	r3, [r2, #45]	@ 0x2d
 8014430:	9b05      	ldr	r3, [sp, #20]
 8014432:	0c1b      	lsrs	r3, r3, #16
 8014434:	f882 302e 	strb.w	r3, [r2, #46]	@ 0x2e
 8014438:	9b05      	ldr	r3, [sp, #20]
 801443a:	0e1b      	lsrs	r3, r3, #24
 801443c:	f882 302f 	strb.w	r3, [r2, #47]	@ 0x2f
 8014440:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8014444:	f882 3031 	strb.w	r3, [r2, #49]	@ 0x31
 8014448:	ea4f 431a 	mov.w	r3, sl, lsr #16
 801444c:	f882 3032 	strb.w	r3, [r2, #50]	@ 0x32
 8014450:	ea4f 6e1e 	mov.w	lr, lr, lsr #24
 8014454:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8014458:	ea4f 6c1c 	mov.w	ip, ip, lsr #24
 801445c:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 8014460:	f882 e023 	strb.w	lr, [r2, #35]	@ 0x23
 8014464:	f882 c027 	strb.w	ip, [r2, #39]	@ 0x27
 8014468:	f882 a033 	strb.w	sl, [r2, #51]	@ 0x33
 801446c:	f882 3035 	strb.w	r3, [r2, #53]	@ 0x35
 8014470:	ea4f 4319 	mov.w	r3, r9, lsr #16
 8014474:	f882 3036 	strb.w	r3, [r2, #54]	@ 0x36
 8014478:	ea4f 2318 	mov.w	r3, r8, lsr #8
 801447c:	f882 3039 	strb.w	r3, [r2, #57]	@ 0x39
 8014480:	ea4f 4318 	mov.w	r3, r8, lsr #16
 8014484:	f882 303a 	strb.w	r3, [r2, #58]	@ 0x3a
 8014488:	ea4f 6318 	mov.w	r3, r8, lsr #24
 801448c:	f882 303b 	strb.w	r3, [r2, #59]	@ 0x3b
 8014490:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014492:	f882 303c 	strb.w	r3, [r2, #60]	@ 0x3c
 8014496:	0a1b      	lsrs	r3, r3, #8
 8014498:	f882 303d 	strb.w	r3, [r2, #61]	@ 0x3d
 801449c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801449e:	f882 9034 	strb.w	r9, [r2, #52]	@ 0x34
 80144a2:	0c1b      	lsrs	r3, r3, #16
 80144a4:	f882 303e 	strb.w	r3, [r2, #62]	@ 0x3e
 80144a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80144aa:	f882 8038 	strb.w	r8, [r2, #56]	@ 0x38
 80144ae:	0e1b      	lsrs	r3, r3, #24
 80144b0:	f882 303f 	strb.w	r3, [r2, #63]	@ 0x3f
 80144b4:	9b01      	ldr	r3, [sp, #4]
 80144b6:	ea4f 6919 	mov.w	r9, r9, lsr #24
 80144ba:	2b40      	cmp	r3, #64	@ 0x40
 80144bc:	f882 9037 	strb.w	r9, [r2, #55]	@ 0x37
 80144c0:	d81e      	bhi.n	8014500 <chacha_encrypt_bytes.part.0+0x40c>
 80144c2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80144c4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80144c6:	3b01      	subs	r3, #1
 80144c8:	099b      	lsrs	r3, r3, #6
 80144ca:	f06f 013f 	mvn.w	r1, #63	@ 0x3f
 80144ce:	fb01 0103 	mla	r1, r1, r3, r0
 80144d2:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 80144d4:	3301      	adds	r3, #1
 80144d6:	4403      	add	r3, r0
 80144d8:	2940      	cmp	r1, #64	@ 0x40
 80144da:	d009      	beq.n	80144f0 <chacha_encrypt_bytes.part.0+0x3fc>
 80144dc:	9800      	ldr	r0, [sp, #0]
 80144de:	9d00      	ldr	r5, [sp, #0]
 80144e0:	9c1e      	ldr	r4, [sp, #120]	@ 0x78
 80144e2:	5c10      	ldrb	r0, [r2, r0]
 80144e4:	5560      	strb	r0, [r4, r5]
 80144e6:	4628      	mov	r0, r5
 80144e8:	3001      	adds	r0, #1
 80144ea:	9000      	str	r0, [sp, #0]
 80144ec:	4288      	cmp	r0, r1
 80144ee:	e7f4      	b.n	80144da <chacha_encrypt_bytes.part.0+0x3e6>
 80144f0:	f8cb 3030 	str.w	r3, [fp, #48]	@ 0x30
 80144f4:	9b02      	ldr	r3, [sp, #8]
 80144f6:	f8cb 3034 	str.w	r3, [fp, #52]	@ 0x34
 80144fa:	b031      	add	sp, #196	@ 0xc4
 80144fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014500:	9b01      	ldr	r3, [sp, #4]
 8014502:	3b40      	subs	r3, #64	@ 0x40
 8014504:	9301      	str	r3, [sp, #4]
 8014506:	3240      	adds	r2, #64	@ 0x40
 8014508:	e620      	b.n	801414c <chacha_encrypt_bytes.part.0+0x58>
	...

0801450c <_rs_init.part.0>:
 801450c:	4916      	ldr	r1, [pc, #88]	@ (8014568 <_rs_init.part.0+0x5c>)
 801450e:	4a17      	ldr	r2, [pc, #92]	@ (801456c <_rs_init.part.0+0x60>)
 8014510:	680b      	ldr	r3, [r1, #0]
 8014512:	b91b      	cbnz	r3, 801451c <_rs_init.part.0+0x10>
 8014514:	4b16      	ldr	r3, [pc, #88]	@ (8014570 <_rs_init.part.0+0x64>)
 8014516:	600b      	str	r3, [r1, #0]
 8014518:	3308      	adds	r3, #8
 801451a:	6013      	str	r3, [r2, #0]
 801451c:	6813      	ldr	r3, [r2, #0]
 801451e:	6802      	ldr	r2, [r0, #0]
 8014520:	611a      	str	r2, [r3, #16]
 8014522:	6842      	ldr	r2, [r0, #4]
 8014524:	615a      	str	r2, [r3, #20]
 8014526:	6882      	ldr	r2, [r0, #8]
 8014528:	619a      	str	r2, [r3, #24]
 801452a:	68c2      	ldr	r2, [r0, #12]
 801452c:	61da      	str	r2, [r3, #28]
 801452e:	6902      	ldr	r2, [r0, #16]
 8014530:	621a      	str	r2, [r3, #32]
 8014532:	6942      	ldr	r2, [r0, #20]
 8014534:	625a      	str	r2, [r3, #36]	@ 0x24
 8014536:	6982      	ldr	r2, [r0, #24]
 8014538:	629a      	str	r2, [r3, #40]	@ 0x28
 801453a:	69c2      	ldr	r2, [r0, #28]
 801453c:	62da      	str	r2, [r3, #44]	@ 0x2c
 801453e:	490d      	ldr	r1, [pc, #52]	@ (8014574 <_rs_init.part.0+0x68>)
 8014540:	4a0d      	ldr	r2, [pc, #52]	@ (8014578 <_rs_init.part.0+0x6c>)
 8014542:	e9c3 1200 	strd	r1, r2, [r3]
 8014546:	4a0d      	ldr	r2, [pc, #52]	@ (801457c <_rs_init.part.0+0x70>)
 8014548:	609a      	str	r2, [r3, #8]
 801454a:	f1a2 6264 	sub.w	r2, r2, #239075328	@ 0xe400000
 801454e:	f5a2 32e3 	sub.w	r2, r2, #116224	@ 0x1c600
 8014552:	f5a2 72df 	sub.w	r2, r2, #446	@ 0x1be
 8014556:	60da      	str	r2, [r3, #12]
 8014558:	2200      	movs	r2, #0
 801455a:	e9c3 220c 	strd	r2, r2, [r3, #48]	@ 0x30
 801455e:	6a02      	ldr	r2, [r0, #32]
 8014560:	639a      	str	r2, [r3, #56]	@ 0x38
 8014562:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 8014564:	63da      	str	r2, [r3, #60]	@ 0x3c
 8014566:	4770      	bx	lr
 8014568:	20015438 	.word	0x20015438
 801456c:	20015434 	.word	0x20015434
 8014570:	20014fec 	.word	0x20014fec
 8014574:	61707865 	.word	0x61707865
 8014578:	3320646e 	.word	0x3320646e
 801457c:	79622d32 	.word	0x79622d32

08014580 <_rs_rekey>:
 8014580:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014584:	f8df 805c 	ldr.w	r8, [pc, #92]	@ 80145e4 <_rs_rekey+0x64>
 8014588:	f8d8 5000 	ldr.w	r5, [r8]
 801458c:	f105 0740 	add.w	r7, r5, #64	@ 0x40
 8014590:	4604      	mov	r4, r0
 8014592:	460e      	mov	r6, r1
 8014594:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8014598:	463a      	mov	r2, r7
 801459a:	4639      	mov	r1, r7
 801459c:	4628      	mov	r0, r5
 801459e:	f7ff fda9 	bl	80140f4 <chacha_encrypt_bytes.part.0>
 80145a2:	b124      	cbz	r4, 80145ae <_rs_rekey+0x2e>
 80145a4:	353f      	adds	r5, #63	@ 0x3f
 80145a6:	4620      	mov	r0, r4
 80145a8:	4426      	add	r6, r4
 80145aa:	42b0      	cmp	r0, r6
 80145ac:	d110      	bne.n	80145d0 <_rs_rekey+0x50>
 80145ae:	4638      	mov	r0, r7
 80145b0:	f7ff ffac 	bl	801450c <_rs_init.part.0>
 80145b4:	f8d8 0000 	ldr.w	r0, [r8]
 80145b8:	2228      	movs	r2, #40	@ 0x28
 80145ba:	2100      	movs	r1, #0
 80145bc:	3040      	adds	r0, #64	@ 0x40
 80145be:	f000 f9c8 	bl	8014952 <memset>
 80145c2:	4b07      	ldr	r3, [pc, #28]	@ (80145e0 <_rs_rekey+0x60>)
 80145c4:	681b      	ldr	r3, [r3, #0]
 80145c6:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 80145ca:	601a      	str	r2, [r3, #0]
 80145cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80145d0:	f810 3b01 	ldrb.w	r3, [r0], #1
 80145d4:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 80145d8:	4053      	eors	r3, r2
 80145da:	702b      	strb	r3, [r5, #0]
 80145dc:	e7e5      	b.n	80145aa <_rs_rekey+0x2a>
 80145de:	bf00      	nop
 80145e0:	20015438 	.word	0x20015438
 80145e4:	20015434 	.word	0x20015434

080145e8 <_rs_stir_if_needed>:
 80145e8:	b570      	push	{r4, r5, r6, lr}
 80145ea:	4d23      	ldr	r5, [pc, #140]	@ (8014678 <_rs_stir_if_needed+0x90>)
 80145ec:	682b      	ldr	r3, [r5, #0]
 80145ee:	b08c      	sub	sp, #48	@ 0x30
 80145f0:	4604      	mov	r4, r0
 80145f2:	b113      	cbz	r3, 80145fa <_rs_stir_if_needed+0x12>
 80145f4:	685b      	ldr	r3, [r3, #4]
 80145f6:	4283      	cmp	r3, r0
 80145f8:	d82f      	bhi.n	801465a <_rs_stir_if_needed+0x72>
 80145fa:	2100      	movs	r1, #0
 80145fc:	2228      	movs	r2, #40	@ 0x28
 80145fe:	a802      	add	r0, sp, #8
 8014600:	9101      	str	r1, [sp, #4]
 8014602:	f000 f9a6 	bl	8014952 <memset>
 8014606:	2128      	movs	r1, #40	@ 0x28
 8014608:	a802      	add	r0, sp, #8
 801460a:	f000 fa75 	bl	8014af8 <getentropy>
 801460e:	3001      	adds	r0, #1
 8014610:	d102      	bne.n	8014618 <_rs_stir_if_needed+0x30>
 8014612:	2009      	movs	r0, #9
 8014614:	f000 f9ce 	bl	80149b4 <raise>
 8014618:	682b      	ldr	r3, [r5, #0]
 801461a:	bb3b      	cbnz	r3, 801466c <_rs_stir_if_needed+0x84>
 801461c:	a802      	add	r0, sp, #8
 801461e:	f7ff ff75 	bl	801450c <_rs_init.part.0>
 8014622:	4e16      	ldr	r6, [pc, #88]	@ (801467c <_rs_stir_if_needed+0x94>)
 8014624:	2128      	movs	r1, #40	@ 0x28
 8014626:	a802      	add	r0, sp, #8
 8014628:	f000 f981 	bl	801492e <explicit_bzero>
 801462c:	682b      	ldr	r3, [r5, #0]
 801462e:	6830      	ldr	r0, [r6, #0]
 8014630:	2100      	movs	r1, #0
 8014632:	6019      	str	r1, [r3, #0]
 8014634:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8014638:	3040      	adds	r0, #64	@ 0x40
 801463a:	f000 f98a 	bl	8014952 <memset>
 801463e:	2304      	movs	r3, #4
 8014640:	eb0d 0203 	add.w	r2, sp, r3
 8014644:	4611      	mov	r1, r2
 8014646:	6830      	ldr	r0, [r6, #0]
 8014648:	f7ff fd54 	bl	80140f4 <chacha_encrypt_bytes.part.0>
 801464c:	9b01      	ldr	r3, [sp, #4]
 801464e:	682a      	ldr	r2, [r5, #0]
 8014650:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014654:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 8014658:	6053      	str	r3, [r2, #4]
 801465a:	682a      	ldr	r2, [r5, #0]
 801465c:	6853      	ldr	r3, [r2, #4]
 801465e:	42a3      	cmp	r3, r4
 8014660:	bf8c      	ite	hi
 8014662:	1b1b      	subhi	r3, r3, r4
 8014664:	2300      	movls	r3, #0
 8014666:	6053      	str	r3, [r2, #4]
 8014668:	b00c      	add	sp, #48	@ 0x30
 801466a:	bd70      	pop	{r4, r5, r6, pc}
 801466c:	2128      	movs	r1, #40	@ 0x28
 801466e:	a802      	add	r0, sp, #8
 8014670:	f7ff ff86 	bl	8014580 <_rs_rekey>
 8014674:	e7d5      	b.n	8014622 <_rs_stir_if_needed+0x3a>
 8014676:	bf00      	nop
 8014678:	20015438 	.word	0x20015438
 801467c:	20015434 	.word	0x20015434

08014680 <arc4random>:
 8014680:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014682:	4815      	ldr	r0, [pc, #84]	@ (80146d8 <arc4random+0x58>)
 8014684:	4d15      	ldr	r5, [pc, #84]	@ (80146dc <arc4random+0x5c>)
 8014686:	f000 fa32 	bl	8014aee <__retarget_lock_acquire>
 801468a:	2004      	movs	r0, #4
 801468c:	f7ff ffac 	bl	80145e8 <_rs_stir_if_needed>
 8014690:	682b      	ldr	r3, [r5, #0]
 8014692:	681b      	ldr	r3, [r3, #0]
 8014694:	2b03      	cmp	r3, #3
 8014696:	d803      	bhi.n	80146a0 <arc4random+0x20>
 8014698:	2100      	movs	r1, #0
 801469a:	4608      	mov	r0, r1
 801469c:	f7ff ff70 	bl	8014580 <_rs_rekey>
 80146a0:	4b0f      	ldr	r3, [pc, #60]	@ (80146e0 <arc4random+0x60>)
 80146a2:	681c      	ldr	r4, [r3, #0]
 80146a4:	682b      	ldr	r3, [r5, #0]
 80146a6:	681b      	ldr	r3, [r3, #0]
 80146a8:	1ae4      	subs	r4, r4, r3
 80146aa:	f504 6488 	add.w	r4, r4, #1088	@ 0x440
 80146ae:	2204      	movs	r2, #4
 80146b0:	4621      	mov	r1, r4
 80146b2:	eb0d 0002 	add.w	r0, sp, r2
 80146b6:	f000 fa31 	bl	8014b1c <memcpy>
 80146ba:	2100      	movs	r1, #0
 80146bc:	2204      	movs	r2, #4
 80146be:	4620      	mov	r0, r4
 80146c0:	f000 f947 	bl	8014952 <memset>
 80146c4:	682a      	ldr	r2, [r5, #0]
 80146c6:	4804      	ldr	r0, [pc, #16]	@ (80146d8 <arc4random+0x58>)
 80146c8:	6813      	ldr	r3, [r2, #0]
 80146ca:	3b04      	subs	r3, #4
 80146cc:	6013      	str	r3, [r2, #0]
 80146ce:	f000 fa10 	bl	8014af2 <__retarget_lock_release>
 80146d2:	9801      	ldr	r0, [sp, #4]
 80146d4:	b003      	add	sp, #12
 80146d6:	bd30      	pop	{r4, r5, pc}
 80146d8:	2001557c 	.word	0x2001557c
 80146dc:	20015438 	.word	0x20015438
 80146e0:	20015434 	.word	0x20015434

080146e4 <__cxa_atexit>:
 80146e4:	b510      	push	{r4, lr}
 80146e6:	4604      	mov	r4, r0
 80146e8:	4804      	ldr	r0, [pc, #16]	@ (80146fc <__cxa_atexit+0x18>)
 80146ea:	4613      	mov	r3, r2
 80146ec:	b120      	cbz	r0, 80146f8 <__cxa_atexit+0x14>
 80146ee:	460a      	mov	r2, r1
 80146f0:	2002      	movs	r0, #2
 80146f2:	4621      	mov	r1, r4
 80146f4:	f000 fa20 	bl	8014b38 <__register_exitproc>
 80146f8:	bd10      	pop	{r4, pc}
 80146fa:	bf00      	nop
 80146fc:	08014b39 	.word	0x08014b39

08014700 <std>:
 8014700:	2300      	movs	r3, #0
 8014702:	b510      	push	{r4, lr}
 8014704:	4604      	mov	r4, r0
 8014706:	e9c0 3300 	strd	r3, r3, [r0]
 801470a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801470e:	6083      	str	r3, [r0, #8]
 8014710:	8181      	strh	r1, [r0, #12]
 8014712:	6643      	str	r3, [r0, #100]	@ 0x64
 8014714:	81c2      	strh	r2, [r0, #14]
 8014716:	6183      	str	r3, [r0, #24]
 8014718:	4619      	mov	r1, r3
 801471a:	2208      	movs	r2, #8
 801471c:	305c      	adds	r0, #92	@ 0x5c
 801471e:	f000 f918 	bl	8014952 <memset>
 8014722:	4b0d      	ldr	r3, [pc, #52]	@ (8014758 <std+0x58>)
 8014724:	6263      	str	r3, [r4, #36]	@ 0x24
 8014726:	4b0d      	ldr	r3, [pc, #52]	@ (801475c <std+0x5c>)
 8014728:	62a3      	str	r3, [r4, #40]	@ 0x28
 801472a:	4b0d      	ldr	r3, [pc, #52]	@ (8014760 <std+0x60>)
 801472c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801472e:	4b0d      	ldr	r3, [pc, #52]	@ (8014764 <std+0x64>)
 8014730:	6323      	str	r3, [r4, #48]	@ 0x30
 8014732:	4b0d      	ldr	r3, [pc, #52]	@ (8014768 <std+0x68>)
 8014734:	6224      	str	r4, [r4, #32]
 8014736:	429c      	cmp	r4, r3
 8014738:	d006      	beq.n	8014748 <std+0x48>
 801473a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801473e:	4294      	cmp	r4, r2
 8014740:	d002      	beq.n	8014748 <std+0x48>
 8014742:	33d0      	adds	r3, #208	@ 0xd0
 8014744:	429c      	cmp	r4, r3
 8014746:	d105      	bne.n	8014754 <std+0x54>
 8014748:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801474c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014750:	f000 b9cc 	b.w	8014aec <__retarget_lock_init_recursive>
 8014754:	bd10      	pop	{r4, pc}
 8014756:	bf00      	nop
 8014758:	080148a9 	.word	0x080148a9
 801475c:	080148cb 	.word	0x080148cb
 8014760:	08014903 	.word	0x08014903
 8014764:	08014927 	.word	0x08014927
 8014768:	2001543c 	.word	0x2001543c

0801476c <stdio_exit_handler>:
 801476c:	4a02      	ldr	r2, [pc, #8]	@ (8014778 <stdio_exit_handler+0xc>)
 801476e:	4903      	ldr	r1, [pc, #12]	@ (801477c <stdio_exit_handler+0x10>)
 8014770:	4803      	ldr	r0, [pc, #12]	@ (8014780 <stdio_exit_handler+0x14>)
 8014772:	f000 b87b 	b.w	801486c <_fwalk_sglue>
 8014776:	bf00      	nop
 8014778:	20000090 	.word	0x20000090
 801477c:	0801532d 	.word	0x0801532d
 8014780:	200000a0 	.word	0x200000a0

08014784 <cleanup_stdio>:
 8014784:	6841      	ldr	r1, [r0, #4]
 8014786:	4b0c      	ldr	r3, [pc, #48]	@ (80147b8 <cleanup_stdio+0x34>)
 8014788:	4299      	cmp	r1, r3
 801478a:	b510      	push	{r4, lr}
 801478c:	4604      	mov	r4, r0
 801478e:	d001      	beq.n	8014794 <cleanup_stdio+0x10>
 8014790:	f000 fdcc 	bl	801532c <_fflush_r>
 8014794:	68a1      	ldr	r1, [r4, #8]
 8014796:	4b09      	ldr	r3, [pc, #36]	@ (80147bc <cleanup_stdio+0x38>)
 8014798:	4299      	cmp	r1, r3
 801479a:	d002      	beq.n	80147a2 <cleanup_stdio+0x1e>
 801479c:	4620      	mov	r0, r4
 801479e:	f000 fdc5 	bl	801532c <_fflush_r>
 80147a2:	68e1      	ldr	r1, [r4, #12]
 80147a4:	4b06      	ldr	r3, [pc, #24]	@ (80147c0 <cleanup_stdio+0x3c>)
 80147a6:	4299      	cmp	r1, r3
 80147a8:	d004      	beq.n	80147b4 <cleanup_stdio+0x30>
 80147aa:	4620      	mov	r0, r4
 80147ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80147b0:	f000 bdbc 	b.w	801532c <_fflush_r>
 80147b4:	bd10      	pop	{r4, pc}
 80147b6:	bf00      	nop
 80147b8:	2001543c 	.word	0x2001543c
 80147bc:	200154a4 	.word	0x200154a4
 80147c0:	2001550c 	.word	0x2001550c

080147c4 <global_stdio_init.part.0>:
 80147c4:	b510      	push	{r4, lr}
 80147c6:	4b0b      	ldr	r3, [pc, #44]	@ (80147f4 <global_stdio_init.part.0+0x30>)
 80147c8:	4c0b      	ldr	r4, [pc, #44]	@ (80147f8 <global_stdio_init.part.0+0x34>)
 80147ca:	4a0c      	ldr	r2, [pc, #48]	@ (80147fc <global_stdio_init.part.0+0x38>)
 80147cc:	601a      	str	r2, [r3, #0]
 80147ce:	4620      	mov	r0, r4
 80147d0:	2200      	movs	r2, #0
 80147d2:	2104      	movs	r1, #4
 80147d4:	f7ff ff94 	bl	8014700 <std>
 80147d8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80147dc:	2201      	movs	r2, #1
 80147de:	2109      	movs	r1, #9
 80147e0:	f7ff ff8e 	bl	8014700 <std>
 80147e4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80147e8:	2202      	movs	r2, #2
 80147ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80147ee:	2112      	movs	r1, #18
 80147f0:	f7ff bf86 	b.w	8014700 <std>
 80147f4:	20015574 	.word	0x20015574
 80147f8:	2001543c 	.word	0x2001543c
 80147fc:	0801476d 	.word	0x0801476d

08014800 <__sfp_lock_acquire>:
 8014800:	4801      	ldr	r0, [pc, #4]	@ (8014808 <__sfp_lock_acquire+0x8>)
 8014802:	f000 b975 	b.w	8014af0 <__retarget_lock_acquire_recursive>
 8014806:	bf00      	nop
 8014808:	2001557f 	.word	0x2001557f

0801480c <__sfp_lock_release>:
 801480c:	4801      	ldr	r0, [pc, #4]	@ (8014814 <__sfp_lock_release+0x8>)
 801480e:	f000 b971 	b.w	8014af4 <__retarget_lock_release_recursive>
 8014812:	bf00      	nop
 8014814:	2001557f 	.word	0x2001557f

08014818 <__sinit>:
 8014818:	b510      	push	{r4, lr}
 801481a:	4604      	mov	r4, r0
 801481c:	f7ff fff0 	bl	8014800 <__sfp_lock_acquire>
 8014820:	6a23      	ldr	r3, [r4, #32]
 8014822:	b11b      	cbz	r3, 801482c <__sinit+0x14>
 8014824:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014828:	f7ff bff0 	b.w	801480c <__sfp_lock_release>
 801482c:	4b04      	ldr	r3, [pc, #16]	@ (8014840 <__sinit+0x28>)
 801482e:	6223      	str	r3, [r4, #32]
 8014830:	4b04      	ldr	r3, [pc, #16]	@ (8014844 <__sinit+0x2c>)
 8014832:	681b      	ldr	r3, [r3, #0]
 8014834:	2b00      	cmp	r3, #0
 8014836:	d1f5      	bne.n	8014824 <__sinit+0xc>
 8014838:	f7ff ffc4 	bl	80147c4 <global_stdio_init.part.0>
 801483c:	e7f2      	b.n	8014824 <__sinit+0xc>
 801483e:	bf00      	nop
 8014840:	08014785 	.word	0x08014785
 8014844:	20015574 	.word	0x20015574

08014848 <fiprintf>:
 8014848:	b40e      	push	{r1, r2, r3}
 801484a:	b503      	push	{r0, r1, lr}
 801484c:	4601      	mov	r1, r0
 801484e:	ab03      	add	r3, sp, #12
 8014850:	4805      	ldr	r0, [pc, #20]	@ (8014868 <fiprintf+0x20>)
 8014852:	f853 2b04 	ldr.w	r2, [r3], #4
 8014856:	6800      	ldr	r0, [r0, #0]
 8014858:	9301      	str	r3, [sp, #4]
 801485a:	f000 fa3d 	bl	8014cd8 <_vfiprintf_r>
 801485e:	b002      	add	sp, #8
 8014860:	f85d eb04 	ldr.w	lr, [sp], #4
 8014864:	b003      	add	sp, #12
 8014866:	4770      	bx	lr
 8014868:	2000009c 	.word	0x2000009c

0801486c <_fwalk_sglue>:
 801486c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014870:	4607      	mov	r7, r0
 8014872:	4688      	mov	r8, r1
 8014874:	4614      	mov	r4, r2
 8014876:	2600      	movs	r6, #0
 8014878:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801487c:	f1b9 0901 	subs.w	r9, r9, #1
 8014880:	d505      	bpl.n	801488e <_fwalk_sglue+0x22>
 8014882:	6824      	ldr	r4, [r4, #0]
 8014884:	2c00      	cmp	r4, #0
 8014886:	d1f7      	bne.n	8014878 <_fwalk_sglue+0xc>
 8014888:	4630      	mov	r0, r6
 801488a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801488e:	89ab      	ldrh	r3, [r5, #12]
 8014890:	2b01      	cmp	r3, #1
 8014892:	d907      	bls.n	80148a4 <_fwalk_sglue+0x38>
 8014894:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014898:	3301      	adds	r3, #1
 801489a:	d003      	beq.n	80148a4 <_fwalk_sglue+0x38>
 801489c:	4629      	mov	r1, r5
 801489e:	4638      	mov	r0, r7
 80148a0:	47c0      	blx	r8
 80148a2:	4306      	orrs	r6, r0
 80148a4:	3568      	adds	r5, #104	@ 0x68
 80148a6:	e7e9      	b.n	801487c <_fwalk_sglue+0x10>

080148a8 <__sread>:
 80148a8:	b510      	push	{r4, lr}
 80148aa:	460c      	mov	r4, r1
 80148ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80148b0:	f000 f8aa 	bl	8014a08 <_read_r>
 80148b4:	2800      	cmp	r0, #0
 80148b6:	bfab      	itete	ge
 80148b8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80148ba:	89a3      	ldrhlt	r3, [r4, #12]
 80148bc:	181b      	addge	r3, r3, r0
 80148be:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80148c2:	bfac      	ite	ge
 80148c4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80148c6:	81a3      	strhlt	r3, [r4, #12]
 80148c8:	bd10      	pop	{r4, pc}

080148ca <__swrite>:
 80148ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80148ce:	461f      	mov	r7, r3
 80148d0:	898b      	ldrh	r3, [r1, #12]
 80148d2:	05db      	lsls	r3, r3, #23
 80148d4:	4605      	mov	r5, r0
 80148d6:	460c      	mov	r4, r1
 80148d8:	4616      	mov	r6, r2
 80148da:	d505      	bpl.n	80148e8 <__swrite+0x1e>
 80148dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80148e0:	2302      	movs	r3, #2
 80148e2:	2200      	movs	r2, #0
 80148e4:	f000 f87e 	bl	80149e4 <_lseek_r>
 80148e8:	89a3      	ldrh	r3, [r4, #12]
 80148ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80148ee:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80148f2:	81a3      	strh	r3, [r4, #12]
 80148f4:	4632      	mov	r2, r6
 80148f6:	463b      	mov	r3, r7
 80148f8:	4628      	mov	r0, r5
 80148fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80148fe:	f000 b8b9 	b.w	8014a74 <_write_r>

08014902 <__sseek>:
 8014902:	b510      	push	{r4, lr}
 8014904:	460c      	mov	r4, r1
 8014906:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801490a:	f000 f86b 	bl	80149e4 <_lseek_r>
 801490e:	1c43      	adds	r3, r0, #1
 8014910:	89a3      	ldrh	r3, [r4, #12]
 8014912:	bf15      	itete	ne
 8014914:	6560      	strne	r0, [r4, #84]	@ 0x54
 8014916:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801491a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801491e:	81a3      	strheq	r3, [r4, #12]
 8014920:	bf18      	it	ne
 8014922:	81a3      	strhne	r3, [r4, #12]
 8014924:	bd10      	pop	{r4, pc}

08014926 <__sclose>:
 8014926:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801492a:	f000 b84b 	b.w	80149c4 <_close_r>

0801492e <explicit_bzero>:
 801492e:	f000 bdb9 	b.w	80154a4 <bzero>

08014932 <memcmp>:
 8014932:	b510      	push	{r4, lr}
 8014934:	3901      	subs	r1, #1
 8014936:	4402      	add	r2, r0
 8014938:	4290      	cmp	r0, r2
 801493a:	d101      	bne.n	8014940 <memcmp+0xe>
 801493c:	2000      	movs	r0, #0
 801493e:	e005      	b.n	801494c <memcmp+0x1a>
 8014940:	7803      	ldrb	r3, [r0, #0]
 8014942:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8014946:	42a3      	cmp	r3, r4
 8014948:	d001      	beq.n	801494e <memcmp+0x1c>
 801494a:	1b18      	subs	r0, r3, r4
 801494c:	bd10      	pop	{r4, pc}
 801494e:	3001      	adds	r0, #1
 8014950:	e7f2      	b.n	8014938 <memcmp+0x6>

08014952 <memset>:
 8014952:	4402      	add	r2, r0
 8014954:	4603      	mov	r3, r0
 8014956:	4293      	cmp	r3, r2
 8014958:	d100      	bne.n	801495c <memset+0xa>
 801495a:	4770      	bx	lr
 801495c:	f803 1b01 	strb.w	r1, [r3], #1
 8014960:	e7f9      	b.n	8014956 <memset+0x4>

08014962 <_raise_r>:
 8014962:	291f      	cmp	r1, #31
 8014964:	b538      	push	{r3, r4, r5, lr}
 8014966:	4605      	mov	r5, r0
 8014968:	460c      	mov	r4, r1
 801496a:	d904      	bls.n	8014976 <_raise_r+0x14>
 801496c:	2316      	movs	r3, #22
 801496e:	6003      	str	r3, [r0, #0]
 8014970:	f04f 30ff 	mov.w	r0, #4294967295
 8014974:	bd38      	pop	{r3, r4, r5, pc}
 8014976:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8014978:	b112      	cbz	r2, 8014980 <_raise_r+0x1e>
 801497a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801497e:	b94b      	cbnz	r3, 8014994 <_raise_r+0x32>
 8014980:	4628      	mov	r0, r5
 8014982:	f000 f865 	bl	8014a50 <_getpid_r>
 8014986:	4622      	mov	r2, r4
 8014988:	4601      	mov	r1, r0
 801498a:	4628      	mov	r0, r5
 801498c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014990:	f000 b84c 	b.w	8014a2c <_kill_r>
 8014994:	2b01      	cmp	r3, #1
 8014996:	d00a      	beq.n	80149ae <_raise_r+0x4c>
 8014998:	1c59      	adds	r1, r3, #1
 801499a:	d103      	bne.n	80149a4 <_raise_r+0x42>
 801499c:	2316      	movs	r3, #22
 801499e:	6003      	str	r3, [r0, #0]
 80149a0:	2001      	movs	r0, #1
 80149a2:	e7e7      	b.n	8014974 <_raise_r+0x12>
 80149a4:	2100      	movs	r1, #0
 80149a6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80149aa:	4620      	mov	r0, r4
 80149ac:	4798      	blx	r3
 80149ae:	2000      	movs	r0, #0
 80149b0:	e7e0      	b.n	8014974 <_raise_r+0x12>
	...

080149b4 <raise>:
 80149b4:	4b02      	ldr	r3, [pc, #8]	@ (80149c0 <raise+0xc>)
 80149b6:	4601      	mov	r1, r0
 80149b8:	6818      	ldr	r0, [r3, #0]
 80149ba:	f7ff bfd2 	b.w	8014962 <_raise_r>
 80149be:	bf00      	nop
 80149c0:	2000009c 	.word	0x2000009c

080149c4 <_close_r>:
 80149c4:	b538      	push	{r3, r4, r5, lr}
 80149c6:	4d06      	ldr	r5, [pc, #24]	@ (80149e0 <_close_r+0x1c>)
 80149c8:	2300      	movs	r3, #0
 80149ca:	4604      	mov	r4, r0
 80149cc:	4608      	mov	r0, r1
 80149ce:	602b      	str	r3, [r5, #0]
 80149d0:	f7ed fee2 	bl	8002798 <_close>
 80149d4:	1c43      	adds	r3, r0, #1
 80149d6:	d102      	bne.n	80149de <_close_r+0x1a>
 80149d8:	682b      	ldr	r3, [r5, #0]
 80149da:	b103      	cbz	r3, 80149de <_close_r+0x1a>
 80149dc:	6023      	str	r3, [r4, #0]
 80149de:	bd38      	pop	{r3, r4, r5, pc}
 80149e0:	20015578 	.word	0x20015578

080149e4 <_lseek_r>:
 80149e4:	b538      	push	{r3, r4, r5, lr}
 80149e6:	4d07      	ldr	r5, [pc, #28]	@ (8014a04 <_lseek_r+0x20>)
 80149e8:	4604      	mov	r4, r0
 80149ea:	4608      	mov	r0, r1
 80149ec:	4611      	mov	r1, r2
 80149ee:	2200      	movs	r2, #0
 80149f0:	602a      	str	r2, [r5, #0]
 80149f2:	461a      	mov	r2, r3
 80149f4:	f7ed feda 	bl	80027ac <_lseek>
 80149f8:	1c43      	adds	r3, r0, #1
 80149fa:	d102      	bne.n	8014a02 <_lseek_r+0x1e>
 80149fc:	682b      	ldr	r3, [r5, #0]
 80149fe:	b103      	cbz	r3, 8014a02 <_lseek_r+0x1e>
 8014a00:	6023      	str	r3, [r4, #0]
 8014a02:	bd38      	pop	{r3, r4, r5, pc}
 8014a04:	20015578 	.word	0x20015578

08014a08 <_read_r>:
 8014a08:	b538      	push	{r3, r4, r5, lr}
 8014a0a:	4d07      	ldr	r5, [pc, #28]	@ (8014a28 <_read_r+0x20>)
 8014a0c:	4604      	mov	r4, r0
 8014a0e:	4608      	mov	r0, r1
 8014a10:	4611      	mov	r1, r2
 8014a12:	2200      	movs	r2, #0
 8014a14:	602a      	str	r2, [r5, #0]
 8014a16:	461a      	mov	r2, r3
 8014a18:	f7ed fea2 	bl	8002760 <_read>
 8014a1c:	1c43      	adds	r3, r0, #1
 8014a1e:	d102      	bne.n	8014a26 <_read_r+0x1e>
 8014a20:	682b      	ldr	r3, [r5, #0]
 8014a22:	b103      	cbz	r3, 8014a26 <_read_r+0x1e>
 8014a24:	6023      	str	r3, [r4, #0]
 8014a26:	bd38      	pop	{r3, r4, r5, pc}
 8014a28:	20015578 	.word	0x20015578

08014a2c <_kill_r>:
 8014a2c:	b538      	push	{r3, r4, r5, lr}
 8014a2e:	4d07      	ldr	r5, [pc, #28]	@ (8014a4c <_kill_r+0x20>)
 8014a30:	2300      	movs	r3, #0
 8014a32:	4604      	mov	r4, r0
 8014a34:	4608      	mov	r0, r1
 8014a36:	4611      	mov	r1, r2
 8014a38:	602b      	str	r3, [r5, #0]
 8014a3a:	f7ed fe83 	bl	8002744 <_kill>
 8014a3e:	1c43      	adds	r3, r0, #1
 8014a40:	d102      	bne.n	8014a48 <_kill_r+0x1c>
 8014a42:	682b      	ldr	r3, [r5, #0]
 8014a44:	b103      	cbz	r3, 8014a48 <_kill_r+0x1c>
 8014a46:	6023      	str	r3, [r4, #0]
 8014a48:	bd38      	pop	{r3, r4, r5, pc}
 8014a4a:	bf00      	nop
 8014a4c:	20015578 	.word	0x20015578

08014a50 <_getpid_r>:
 8014a50:	f7ed be76 	b.w	8002740 <_getpid>

08014a54 <_sbrk_r>:
 8014a54:	b538      	push	{r3, r4, r5, lr}
 8014a56:	4d06      	ldr	r5, [pc, #24]	@ (8014a70 <_sbrk_r+0x1c>)
 8014a58:	2300      	movs	r3, #0
 8014a5a:	4604      	mov	r4, r0
 8014a5c:	4608      	mov	r0, r1
 8014a5e:	602b      	str	r3, [r5, #0]
 8014a60:	f7ed fea6 	bl	80027b0 <_sbrk>
 8014a64:	1c43      	adds	r3, r0, #1
 8014a66:	d102      	bne.n	8014a6e <_sbrk_r+0x1a>
 8014a68:	682b      	ldr	r3, [r5, #0]
 8014a6a:	b103      	cbz	r3, 8014a6e <_sbrk_r+0x1a>
 8014a6c:	6023      	str	r3, [r4, #0]
 8014a6e:	bd38      	pop	{r3, r4, r5, pc}
 8014a70:	20015578 	.word	0x20015578

08014a74 <_write_r>:
 8014a74:	b538      	push	{r3, r4, r5, lr}
 8014a76:	4d07      	ldr	r5, [pc, #28]	@ (8014a94 <_write_r+0x20>)
 8014a78:	4604      	mov	r4, r0
 8014a7a:	4608      	mov	r0, r1
 8014a7c:	4611      	mov	r1, r2
 8014a7e:	2200      	movs	r2, #0
 8014a80:	602a      	str	r2, [r5, #0]
 8014a82:	461a      	mov	r2, r3
 8014a84:	f7ed fe7a 	bl	800277c <_write>
 8014a88:	1c43      	adds	r3, r0, #1
 8014a8a:	d102      	bne.n	8014a92 <_write_r+0x1e>
 8014a8c:	682b      	ldr	r3, [r5, #0]
 8014a8e:	b103      	cbz	r3, 8014a92 <_write_r+0x1e>
 8014a90:	6023      	str	r3, [r4, #0]
 8014a92:	bd38      	pop	{r3, r4, r5, pc}
 8014a94:	20015578 	.word	0x20015578

08014a98 <__errno>:
 8014a98:	4b01      	ldr	r3, [pc, #4]	@ (8014aa0 <__errno+0x8>)
 8014a9a:	6818      	ldr	r0, [r3, #0]
 8014a9c:	4770      	bx	lr
 8014a9e:	bf00      	nop
 8014aa0:	2000009c 	.word	0x2000009c

08014aa4 <__libc_init_array>:
 8014aa4:	b570      	push	{r4, r5, r6, lr}
 8014aa6:	4d0d      	ldr	r5, [pc, #52]	@ (8014adc <__libc_init_array+0x38>)
 8014aa8:	4c0d      	ldr	r4, [pc, #52]	@ (8014ae0 <__libc_init_array+0x3c>)
 8014aaa:	1b64      	subs	r4, r4, r5
 8014aac:	10a4      	asrs	r4, r4, #2
 8014aae:	2600      	movs	r6, #0
 8014ab0:	42a6      	cmp	r6, r4
 8014ab2:	d109      	bne.n	8014ac8 <__libc_init_array+0x24>
 8014ab4:	4d0b      	ldr	r5, [pc, #44]	@ (8014ae4 <__libc_init_array+0x40>)
 8014ab6:	4c0c      	ldr	r4, [pc, #48]	@ (8014ae8 <__libc_init_array+0x44>)
 8014ab8:	f000 fd96 	bl	80155e8 <_init>
 8014abc:	1b64      	subs	r4, r4, r5
 8014abe:	10a4      	asrs	r4, r4, #2
 8014ac0:	2600      	movs	r6, #0
 8014ac2:	42a6      	cmp	r6, r4
 8014ac4:	d105      	bne.n	8014ad2 <__libc_init_array+0x2e>
 8014ac6:	bd70      	pop	{r4, r5, r6, pc}
 8014ac8:	f855 3b04 	ldr.w	r3, [r5], #4
 8014acc:	4798      	blx	r3
 8014ace:	3601      	adds	r6, #1
 8014ad0:	e7ee      	b.n	8014ab0 <__libc_init_array+0xc>
 8014ad2:	f855 3b04 	ldr.w	r3, [r5], #4
 8014ad6:	4798      	blx	r3
 8014ad8:	3601      	adds	r6, #1
 8014ada:	e7f2      	b.n	8014ac2 <__libc_init_array+0x1e>
 8014adc:	080dfe70 	.word	0x080dfe70
 8014ae0:	080dfe70 	.word	0x080dfe70
 8014ae4:	080dfe70 	.word	0x080dfe70
 8014ae8:	080dfe88 	.word	0x080dfe88

08014aec <__retarget_lock_init_recursive>:
 8014aec:	4770      	bx	lr

08014aee <__retarget_lock_acquire>:
 8014aee:	4770      	bx	lr

08014af0 <__retarget_lock_acquire_recursive>:
 8014af0:	4770      	bx	lr

08014af2 <__retarget_lock_release>:
 8014af2:	4770      	bx	lr

08014af4 <__retarget_lock_release_recursive>:
 8014af4:	4770      	bx	lr
	...

08014af8 <getentropy>:
 8014af8:	4b02      	ldr	r3, [pc, #8]	@ (8014b04 <getentropy+0xc>)
 8014afa:	460a      	mov	r2, r1
 8014afc:	4601      	mov	r1, r0
 8014afe:	6818      	ldr	r0, [r3, #0]
 8014b00:	f000 bcd4 	b.w	80154ac <_getentropy_r>
 8014b04:	2000009c 	.word	0x2000009c

08014b08 <read>:
 8014b08:	4613      	mov	r3, r2
 8014b0a:	460a      	mov	r2, r1
 8014b0c:	4601      	mov	r1, r0
 8014b0e:	4802      	ldr	r0, [pc, #8]	@ (8014b18 <read+0x10>)
 8014b10:	6800      	ldr	r0, [r0, #0]
 8014b12:	f7ff bf79 	b.w	8014a08 <_read_r>
 8014b16:	bf00      	nop
 8014b18:	2000009c 	.word	0x2000009c

08014b1c <memcpy>:
 8014b1c:	440a      	add	r2, r1
 8014b1e:	4291      	cmp	r1, r2
 8014b20:	f100 33ff 	add.w	r3, r0, #4294967295
 8014b24:	d100      	bne.n	8014b28 <memcpy+0xc>
 8014b26:	4770      	bx	lr
 8014b28:	b510      	push	{r4, lr}
 8014b2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014b2e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014b32:	4291      	cmp	r1, r2
 8014b34:	d1f9      	bne.n	8014b2a <memcpy+0xe>
 8014b36:	bd10      	pop	{r4, pc}

08014b38 <__register_exitproc>:
 8014b38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014b3c:	4d27      	ldr	r5, [pc, #156]	@ (8014bdc <__register_exitproc+0xa4>)
 8014b3e:	4607      	mov	r7, r0
 8014b40:	6828      	ldr	r0, [r5, #0]
 8014b42:	4691      	mov	r9, r2
 8014b44:	460e      	mov	r6, r1
 8014b46:	4698      	mov	r8, r3
 8014b48:	f7ff ffd2 	bl	8014af0 <__retarget_lock_acquire_recursive>
 8014b4c:	4a24      	ldr	r2, [pc, #144]	@ (8014be0 <__register_exitproc+0xa8>)
 8014b4e:	6814      	ldr	r4, [r2, #0]
 8014b50:	b93c      	cbnz	r4, 8014b62 <__register_exitproc+0x2a>
 8014b52:	4b24      	ldr	r3, [pc, #144]	@ (8014be4 <__register_exitproc+0xac>)
 8014b54:	6013      	str	r3, [r2, #0]
 8014b56:	4a24      	ldr	r2, [pc, #144]	@ (8014be8 <__register_exitproc+0xb0>)
 8014b58:	b112      	cbz	r2, 8014b60 <__register_exitproc+0x28>
 8014b5a:	6812      	ldr	r2, [r2, #0]
 8014b5c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 8014b60:	4c20      	ldr	r4, [pc, #128]	@ (8014be4 <__register_exitproc+0xac>)
 8014b62:	6863      	ldr	r3, [r4, #4]
 8014b64:	2b1f      	cmp	r3, #31
 8014b66:	dd06      	ble.n	8014b76 <__register_exitproc+0x3e>
 8014b68:	6828      	ldr	r0, [r5, #0]
 8014b6a:	f7ff ffc3 	bl	8014af4 <__retarget_lock_release_recursive>
 8014b6e:	f04f 30ff 	mov.w	r0, #4294967295
 8014b72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014b76:	b32f      	cbz	r7, 8014bc4 <__register_exitproc+0x8c>
 8014b78:	f8d4 0088 	ldr.w	r0, [r4, #136]	@ 0x88
 8014b7c:	b968      	cbnz	r0, 8014b9a <__register_exitproc+0x62>
 8014b7e:	4b1b      	ldr	r3, [pc, #108]	@ (8014bec <__register_exitproc+0xb4>)
 8014b80:	2b00      	cmp	r3, #0
 8014b82:	d0f1      	beq.n	8014b68 <__register_exitproc+0x30>
 8014b84:	f44f 7084 	mov.w	r0, #264	@ 0x108
 8014b88:	f7ff f9f6 	bl	8013f78 <malloc>
 8014b8c:	2800      	cmp	r0, #0
 8014b8e:	d0eb      	beq.n	8014b68 <__register_exitproc+0x30>
 8014b90:	2300      	movs	r3, #0
 8014b92:	e9c0 3340 	strd	r3, r3, [r0, #256]	@ 0x100
 8014b96:	f8c4 0088 	str.w	r0, [r4, #136]	@ 0x88
 8014b9a:	6863      	ldr	r3, [r4, #4]
 8014b9c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8014ba0:	2201      	movs	r2, #1
 8014ba2:	409a      	lsls	r2, r3
 8014ba4:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8014ba8:	f8d0 3100 	ldr.w	r3, [r0, #256]	@ 0x100
 8014bac:	4313      	orrs	r3, r2
 8014bae:	f8c0 3100 	str.w	r3, [r0, #256]	@ 0x100
 8014bb2:	2f02      	cmp	r7, #2
 8014bb4:	f8c1 8080 	str.w	r8, [r1, #128]	@ 0x80
 8014bb8:	bf02      	ittt	eq
 8014bba:	f8d0 3104 	ldreq.w	r3, [r0, #260]	@ 0x104
 8014bbe:	4313      	orreq	r3, r2
 8014bc0:	f8c0 3104 	streq.w	r3, [r0, #260]	@ 0x104
 8014bc4:	6863      	ldr	r3, [r4, #4]
 8014bc6:	6828      	ldr	r0, [r5, #0]
 8014bc8:	1c5a      	adds	r2, r3, #1
 8014bca:	3302      	adds	r3, #2
 8014bcc:	6062      	str	r2, [r4, #4]
 8014bce:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 8014bd2:	f7ff ff8f 	bl	8014af4 <__retarget_lock_release_recursive>
 8014bd6:	2000      	movs	r0, #0
 8014bd8:	e7cb      	b.n	8014b72 <__register_exitproc+0x3a>
 8014bda:	bf00      	nop
 8014bdc:	200000ec 	.word	0x200000ec
 8014be0:	2001560c 	.word	0x2001560c
 8014be4:	20015580 	.word	0x20015580
 8014be8:	08016d4c 	.word	0x08016d4c
 8014bec:	08013f79 	.word	0x08013f79

08014bf0 <_free_r>:
 8014bf0:	b538      	push	{r3, r4, r5, lr}
 8014bf2:	4605      	mov	r5, r0
 8014bf4:	2900      	cmp	r1, #0
 8014bf6:	d041      	beq.n	8014c7c <_free_r+0x8c>
 8014bf8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014bfc:	1f0c      	subs	r4, r1, #4
 8014bfe:	2b00      	cmp	r3, #0
 8014c00:	bfb8      	it	lt
 8014c02:	18e4      	addlt	r4, r4, r3
 8014c04:	f7ff fa6a 	bl	80140dc <__malloc_lock>
 8014c08:	4a1d      	ldr	r2, [pc, #116]	@ (8014c80 <_free_r+0x90>)
 8014c0a:	6813      	ldr	r3, [r2, #0]
 8014c0c:	b933      	cbnz	r3, 8014c1c <_free_r+0x2c>
 8014c0e:	6063      	str	r3, [r4, #4]
 8014c10:	6014      	str	r4, [r2, #0]
 8014c12:	4628      	mov	r0, r5
 8014c14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014c18:	f7ff ba66 	b.w	80140e8 <__malloc_unlock>
 8014c1c:	42a3      	cmp	r3, r4
 8014c1e:	d908      	bls.n	8014c32 <_free_r+0x42>
 8014c20:	6820      	ldr	r0, [r4, #0]
 8014c22:	1821      	adds	r1, r4, r0
 8014c24:	428b      	cmp	r3, r1
 8014c26:	bf01      	itttt	eq
 8014c28:	6819      	ldreq	r1, [r3, #0]
 8014c2a:	685b      	ldreq	r3, [r3, #4]
 8014c2c:	1809      	addeq	r1, r1, r0
 8014c2e:	6021      	streq	r1, [r4, #0]
 8014c30:	e7ed      	b.n	8014c0e <_free_r+0x1e>
 8014c32:	461a      	mov	r2, r3
 8014c34:	685b      	ldr	r3, [r3, #4]
 8014c36:	b10b      	cbz	r3, 8014c3c <_free_r+0x4c>
 8014c38:	42a3      	cmp	r3, r4
 8014c3a:	d9fa      	bls.n	8014c32 <_free_r+0x42>
 8014c3c:	6811      	ldr	r1, [r2, #0]
 8014c3e:	1850      	adds	r0, r2, r1
 8014c40:	42a0      	cmp	r0, r4
 8014c42:	d10b      	bne.n	8014c5c <_free_r+0x6c>
 8014c44:	6820      	ldr	r0, [r4, #0]
 8014c46:	4401      	add	r1, r0
 8014c48:	1850      	adds	r0, r2, r1
 8014c4a:	4283      	cmp	r3, r0
 8014c4c:	6011      	str	r1, [r2, #0]
 8014c4e:	d1e0      	bne.n	8014c12 <_free_r+0x22>
 8014c50:	6818      	ldr	r0, [r3, #0]
 8014c52:	685b      	ldr	r3, [r3, #4]
 8014c54:	6053      	str	r3, [r2, #4]
 8014c56:	4408      	add	r0, r1
 8014c58:	6010      	str	r0, [r2, #0]
 8014c5a:	e7da      	b.n	8014c12 <_free_r+0x22>
 8014c5c:	d902      	bls.n	8014c64 <_free_r+0x74>
 8014c5e:	230c      	movs	r3, #12
 8014c60:	602b      	str	r3, [r5, #0]
 8014c62:	e7d6      	b.n	8014c12 <_free_r+0x22>
 8014c64:	6820      	ldr	r0, [r4, #0]
 8014c66:	1821      	adds	r1, r4, r0
 8014c68:	428b      	cmp	r3, r1
 8014c6a:	bf04      	itt	eq
 8014c6c:	6819      	ldreq	r1, [r3, #0]
 8014c6e:	685b      	ldreq	r3, [r3, #4]
 8014c70:	6063      	str	r3, [r4, #4]
 8014c72:	bf04      	itt	eq
 8014c74:	1809      	addeq	r1, r1, r0
 8014c76:	6021      	streq	r1, [r4, #0]
 8014c78:	6054      	str	r4, [r2, #4]
 8014c7a:	e7ca      	b.n	8014c12 <_free_r+0x22>
 8014c7c:	bd38      	pop	{r3, r4, r5, pc}
 8014c7e:	bf00      	nop
 8014c80:	20014fe8 	.word	0x20014fe8

08014c84 <__sfputc_r>:
 8014c84:	6893      	ldr	r3, [r2, #8]
 8014c86:	3b01      	subs	r3, #1
 8014c88:	2b00      	cmp	r3, #0
 8014c8a:	b410      	push	{r4}
 8014c8c:	6093      	str	r3, [r2, #8]
 8014c8e:	da08      	bge.n	8014ca2 <__sfputc_r+0x1e>
 8014c90:	6994      	ldr	r4, [r2, #24]
 8014c92:	42a3      	cmp	r3, r4
 8014c94:	db01      	blt.n	8014c9a <__sfputc_r+0x16>
 8014c96:	290a      	cmp	r1, #10
 8014c98:	d103      	bne.n	8014ca2 <__sfputc_r+0x1e>
 8014c9a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014c9e:	f000 bb6d 	b.w	801537c <__swbuf_r>
 8014ca2:	6813      	ldr	r3, [r2, #0]
 8014ca4:	1c58      	adds	r0, r3, #1
 8014ca6:	6010      	str	r0, [r2, #0]
 8014ca8:	7019      	strb	r1, [r3, #0]
 8014caa:	4608      	mov	r0, r1
 8014cac:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014cb0:	4770      	bx	lr

08014cb2 <__sfputs_r>:
 8014cb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014cb4:	4606      	mov	r6, r0
 8014cb6:	460f      	mov	r7, r1
 8014cb8:	4614      	mov	r4, r2
 8014cba:	18d5      	adds	r5, r2, r3
 8014cbc:	42ac      	cmp	r4, r5
 8014cbe:	d101      	bne.n	8014cc4 <__sfputs_r+0x12>
 8014cc0:	2000      	movs	r0, #0
 8014cc2:	e007      	b.n	8014cd4 <__sfputs_r+0x22>
 8014cc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014cc8:	463a      	mov	r2, r7
 8014cca:	4630      	mov	r0, r6
 8014ccc:	f7ff ffda 	bl	8014c84 <__sfputc_r>
 8014cd0:	1c43      	adds	r3, r0, #1
 8014cd2:	d1f3      	bne.n	8014cbc <__sfputs_r+0xa>
 8014cd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014cd8 <_vfiprintf_r>:
 8014cd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014cdc:	460d      	mov	r5, r1
 8014cde:	b09d      	sub	sp, #116	@ 0x74
 8014ce0:	4614      	mov	r4, r2
 8014ce2:	4698      	mov	r8, r3
 8014ce4:	4606      	mov	r6, r0
 8014ce6:	b118      	cbz	r0, 8014cf0 <_vfiprintf_r+0x18>
 8014ce8:	6a03      	ldr	r3, [r0, #32]
 8014cea:	b90b      	cbnz	r3, 8014cf0 <_vfiprintf_r+0x18>
 8014cec:	f7ff fd94 	bl	8014818 <__sinit>
 8014cf0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014cf2:	07d9      	lsls	r1, r3, #31
 8014cf4:	d405      	bmi.n	8014d02 <_vfiprintf_r+0x2a>
 8014cf6:	89ab      	ldrh	r3, [r5, #12]
 8014cf8:	059a      	lsls	r2, r3, #22
 8014cfa:	d402      	bmi.n	8014d02 <_vfiprintf_r+0x2a>
 8014cfc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014cfe:	f7ff fef7 	bl	8014af0 <__retarget_lock_acquire_recursive>
 8014d02:	89ab      	ldrh	r3, [r5, #12]
 8014d04:	071b      	lsls	r3, r3, #28
 8014d06:	d501      	bpl.n	8014d0c <_vfiprintf_r+0x34>
 8014d08:	692b      	ldr	r3, [r5, #16]
 8014d0a:	b99b      	cbnz	r3, 8014d34 <_vfiprintf_r+0x5c>
 8014d0c:	4629      	mov	r1, r5
 8014d0e:	4630      	mov	r0, r6
 8014d10:	f000 fb72 	bl	80153f8 <__swsetup_r>
 8014d14:	b170      	cbz	r0, 8014d34 <_vfiprintf_r+0x5c>
 8014d16:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014d18:	07dc      	lsls	r4, r3, #31
 8014d1a:	d504      	bpl.n	8014d26 <_vfiprintf_r+0x4e>
 8014d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8014d20:	b01d      	add	sp, #116	@ 0x74
 8014d22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014d26:	89ab      	ldrh	r3, [r5, #12]
 8014d28:	0598      	lsls	r0, r3, #22
 8014d2a:	d4f7      	bmi.n	8014d1c <_vfiprintf_r+0x44>
 8014d2c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014d2e:	f7ff fee1 	bl	8014af4 <__retarget_lock_release_recursive>
 8014d32:	e7f3      	b.n	8014d1c <_vfiprintf_r+0x44>
 8014d34:	2300      	movs	r3, #0
 8014d36:	9309      	str	r3, [sp, #36]	@ 0x24
 8014d38:	2320      	movs	r3, #32
 8014d3a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8014d3e:	f8cd 800c 	str.w	r8, [sp, #12]
 8014d42:	2330      	movs	r3, #48	@ 0x30
 8014d44:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8014ef4 <_vfiprintf_r+0x21c>
 8014d48:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8014d4c:	f04f 0901 	mov.w	r9, #1
 8014d50:	4623      	mov	r3, r4
 8014d52:	469a      	mov	sl, r3
 8014d54:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014d58:	b10a      	cbz	r2, 8014d5e <_vfiprintf_r+0x86>
 8014d5a:	2a25      	cmp	r2, #37	@ 0x25
 8014d5c:	d1f9      	bne.n	8014d52 <_vfiprintf_r+0x7a>
 8014d5e:	ebba 0b04 	subs.w	fp, sl, r4
 8014d62:	d00b      	beq.n	8014d7c <_vfiprintf_r+0xa4>
 8014d64:	465b      	mov	r3, fp
 8014d66:	4622      	mov	r2, r4
 8014d68:	4629      	mov	r1, r5
 8014d6a:	4630      	mov	r0, r6
 8014d6c:	f7ff ffa1 	bl	8014cb2 <__sfputs_r>
 8014d70:	3001      	adds	r0, #1
 8014d72:	f000 80a7 	beq.w	8014ec4 <_vfiprintf_r+0x1ec>
 8014d76:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014d78:	445a      	add	r2, fp
 8014d7a:	9209      	str	r2, [sp, #36]	@ 0x24
 8014d7c:	f89a 3000 	ldrb.w	r3, [sl]
 8014d80:	2b00      	cmp	r3, #0
 8014d82:	f000 809f 	beq.w	8014ec4 <_vfiprintf_r+0x1ec>
 8014d86:	2300      	movs	r3, #0
 8014d88:	f04f 32ff 	mov.w	r2, #4294967295
 8014d8c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014d90:	f10a 0a01 	add.w	sl, sl, #1
 8014d94:	9304      	str	r3, [sp, #16]
 8014d96:	9307      	str	r3, [sp, #28]
 8014d98:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8014d9c:	931a      	str	r3, [sp, #104]	@ 0x68
 8014d9e:	4654      	mov	r4, sl
 8014da0:	2205      	movs	r2, #5
 8014da2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014da6:	4853      	ldr	r0, [pc, #332]	@ (8014ef4 <_vfiprintf_r+0x21c>)
 8014da8:	f7eb fa22 	bl	80001f0 <memchr>
 8014dac:	9a04      	ldr	r2, [sp, #16]
 8014dae:	b9d8      	cbnz	r0, 8014de8 <_vfiprintf_r+0x110>
 8014db0:	06d1      	lsls	r1, r2, #27
 8014db2:	bf44      	itt	mi
 8014db4:	2320      	movmi	r3, #32
 8014db6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014dba:	0713      	lsls	r3, r2, #28
 8014dbc:	bf44      	itt	mi
 8014dbe:	232b      	movmi	r3, #43	@ 0x2b
 8014dc0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014dc4:	f89a 3000 	ldrb.w	r3, [sl]
 8014dc8:	2b2a      	cmp	r3, #42	@ 0x2a
 8014dca:	d015      	beq.n	8014df8 <_vfiprintf_r+0x120>
 8014dcc:	9a07      	ldr	r2, [sp, #28]
 8014dce:	4654      	mov	r4, sl
 8014dd0:	2000      	movs	r0, #0
 8014dd2:	f04f 0c0a 	mov.w	ip, #10
 8014dd6:	4621      	mov	r1, r4
 8014dd8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014ddc:	3b30      	subs	r3, #48	@ 0x30
 8014dde:	2b09      	cmp	r3, #9
 8014de0:	d94b      	bls.n	8014e7a <_vfiprintf_r+0x1a2>
 8014de2:	b1b0      	cbz	r0, 8014e12 <_vfiprintf_r+0x13a>
 8014de4:	9207      	str	r2, [sp, #28]
 8014de6:	e014      	b.n	8014e12 <_vfiprintf_r+0x13a>
 8014de8:	eba0 0308 	sub.w	r3, r0, r8
 8014dec:	fa09 f303 	lsl.w	r3, r9, r3
 8014df0:	4313      	orrs	r3, r2
 8014df2:	9304      	str	r3, [sp, #16]
 8014df4:	46a2      	mov	sl, r4
 8014df6:	e7d2      	b.n	8014d9e <_vfiprintf_r+0xc6>
 8014df8:	9b03      	ldr	r3, [sp, #12]
 8014dfa:	1d19      	adds	r1, r3, #4
 8014dfc:	681b      	ldr	r3, [r3, #0]
 8014dfe:	9103      	str	r1, [sp, #12]
 8014e00:	2b00      	cmp	r3, #0
 8014e02:	bfbb      	ittet	lt
 8014e04:	425b      	neglt	r3, r3
 8014e06:	f042 0202 	orrlt.w	r2, r2, #2
 8014e0a:	9307      	strge	r3, [sp, #28]
 8014e0c:	9307      	strlt	r3, [sp, #28]
 8014e0e:	bfb8      	it	lt
 8014e10:	9204      	strlt	r2, [sp, #16]
 8014e12:	7823      	ldrb	r3, [r4, #0]
 8014e14:	2b2e      	cmp	r3, #46	@ 0x2e
 8014e16:	d10a      	bne.n	8014e2e <_vfiprintf_r+0x156>
 8014e18:	7863      	ldrb	r3, [r4, #1]
 8014e1a:	2b2a      	cmp	r3, #42	@ 0x2a
 8014e1c:	d132      	bne.n	8014e84 <_vfiprintf_r+0x1ac>
 8014e1e:	9b03      	ldr	r3, [sp, #12]
 8014e20:	1d1a      	adds	r2, r3, #4
 8014e22:	681b      	ldr	r3, [r3, #0]
 8014e24:	9203      	str	r2, [sp, #12]
 8014e26:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8014e2a:	3402      	adds	r4, #2
 8014e2c:	9305      	str	r3, [sp, #20]
 8014e2e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8014f04 <_vfiprintf_r+0x22c>
 8014e32:	7821      	ldrb	r1, [r4, #0]
 8014e34:	2203      	movs	r2, #3
 8014e36:	4650      	mov	r0, sl
 8014e38:	f7eb f9da 	bl	80001f0 <memchr>
 8014e3c:	b138      	cbz	r0, 8014e4e <_vfiprintf_r+0x176>
 8014e3e:	9b04      	ldr	r3, [sp, #16]
 8014e40:	eba0 000a 	sub.w	r0, r0, sl
 8014e44:	2240      	movs	r2, #64	@ 0x40
 8014e46:	4082      	lsls	r2, r0
 8014e48:	4313      	orrs	r3, r2
 8014e4a:	3401      	adds	r4, #1
 8014e4c:	9304      	str	r3, [sp, #16]
 8014e4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014e52:	4829      	ldr	r0, [pc, #164]	@ (8014ef8 <_vfiprintf_r+0x220>)
 8014e54:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8014e58:	2206      	movs	r2, #6
 8014e5a:	f7eb f9c9 	bl	80001f0 <memchr>
 8014e5e:	2800      	cmp	r0, #0
 8014e60:	d03f      	beq.n	8014ee2 <_vfiprintf_r+0x20a>
 8014e62:	4b26      	ldr	r3, [pc, #152]	@ (8014efc <_vfiprintf_r+0x224>)
 8014e64:	bb1b      	cbnz	r3, 8014eae <_vfiprintf_r+0x1d6>
 8014e66:	9b03      	ldr	r3, [sp, #12]
 8014e68:	3307      	adds	r3, #7
 8014e6a:	f023 0307 	bic.w	r3, r3, #7
 8014e6e:	3308      	adds	r3, #8
 8014e70:	9303      	str	r3, [sp, #12]
 8014e72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014e74:	443b      	add	r3, r7
 8014e76:	9309      	str	r3, [sp, #36]	@ 0x24
 8014e78:	e76a      	b.n	8014d50 <_vfiprintf_r+0x78>
 8014e7a:	fb0c 3202 	mla	r2, ip, r2, r3
 8014e7e:	460c      	mov	r4, r1
 8014e80:	2001      	movs	r0, #1
 8014e82:	e7a8      	b.n	8014dd6 <_vfiprintf_r+0xfe>
 8014e84:	2300      	movs	r3, #0
 8014e86:	3401      	adds	r4, #1
 8014e88:	9305      	str	r3, [sp, #20]
 8014e8a:	4619      	mov	r1, r3
 8014e8c:	f04f 0c0a 	mov.w	ip, #10
 8014e90:	4620      	mov	r0, r4
 8014e92:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014e96:	3a30      	subs	r2, #48	@ 0x30
 8014e98:	2a09      	cmp	r2, #9
 8014e9a:	d903      	bls.n	8014ea4 <_vfiprintf_r+0x1cc>
 8014e9c:	2b00      	cmp	r3, #0
 8014e9e:	d0c6      	beq.n	8014e2e <_vfiprintf_r+0x156>
 8014ea0:	9105      	str	r1, [sp, #20]
 8014ea2:	e7c4      	b.n	8014e2e <_vfiprintf_r+0x156>
 8014ea4:	fb0c 2101 	mla	r1, ip, r1, r2
 8014ea8:	4604      	mov	r4, r0
 8014eaa:	2301      	movs	r3, #1
 8014eac:	e7f0      	b.n	8014e90 <_vfiprintf_r+0x1b8>
 8014eae:	ab03      	add	r3, sp, #12
 8014eb0:	9300      	str	r3, [sp, #0]
 8014eb2:	462a      	mov	r2, r5
 8014eb4:	4b12      	ldr	r3, [pc, #72]	@ (8014f00 <_vfiprintf_r+0x228>)
 8014eb6:	a904      	add	r1, sp, #16
 8014eb8:	4630      	mov	r0, r6
 8014eba:	f3af 8000 	nop.w
 8014ebe:	4607      	mov	r7, r0
 8014ec0:	1c78      	adds	r0, r7, #1
 8014ec2:	d1d6      	bne.n	8014e72 <_vfiprintf_r+0x19a>
 8014ec4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014ec6:	07d9      	lsls	r1, r3, #31
 8014ec8:	d405      	bmi.n	8014ed6 <_vfiprintf_r+0x1fe>
 8014eca:	89ab      	ldrh	r3, [r5, #12]
 8014ecc:	059a      	lsls	r2, r3, #22
 8014ece:	d402      	bmi.n	8014ed6 <_vfiprintf_r+0x1fe>
 8014ed0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014ed2:	f7ff fe0f 	bl	8014af4 <__retarget_lock_release_recursive>
 8014ed6:	89ab      	ldrh	r3, [r5, #12]
 8014ed8:	065b      	lsls	r3, r3, #25
 8014eda:	f53f af1f 	bmi.w	8014d1c <_vfiprintf_r+0x44>
 8014ede:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014ee0:	e71e      	b.n	8014d20 <_vfiprintf_r+0x48>
 8014ee2:	ab03      	add	r3, sp, #12
 8014ee4:	9300      	str	r3, [sp, #0]
 8014ee6:	462a      	mov	r2, r5
 8014ee8:	4b05      	ldr	r3, [pc, #20]	@ (8014f00 <_vfiprintf_r+0x228>)
 8014eea:	a904      	add	r1, sp, #16
 8014eec:	4630      	mov	r0, r6
 8014eee:	f000 f879 	bl	8014fe4 <_printf_i>
 8014ef2:	e7e4      	b.n	8014ebe <_vfiprintf_r+0x1e6>
 8014ef4:	08016d50 	.word	0x08016d50
 8014ef8:	08016d5a 	.word	0x08016d5a
 8014efc:	00000000 	.word	0x00000000
 8014f00:	08014cb3 	.word	0x08014cb3
 8014f04:	08016d56 	.word	0x08016d56

08014f08 <_printf_common>:
 8014f08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014f0c:	4616      	mov	r6, r2
 8014f0e:	4698      	mov	r8, r3
 8014f10:	688a      	ldr	r2, [r1, #8]
 8014f12:	690b      	ldr	r3, [r1, #16]
 8014f14:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8014f18:	4293      	cmp	r3, r2
 8014f1a:	bfb8      	it	lt
 8014f1c:	4613      	movlt	r3, r2
 8014f1e:	6033      	str	r3, [r6, #0]
 8014f20:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8014f24:	4607      	mov	r7, r0
 8014f26:	460c      	mov	r4, r1
 8014f28:	b10a      	cbz	r2, 8014f2e <_printf_common+0x26>
 8014f2a:	3301      	adds	r3, #1
 8014f2c:	6033      	str	r3, [r6, #0]
 8014f2e:	6823      	ldr	r3, [r4, #0]
 8014f30:	0699      	lsls	r1, r3, #26
 8014f32:	bf42      	ittt	mi
 8014f34:	6833      	ldrmi	r3, [r6, #0]
 8014f36:	3302      	addmi	r3, #2
 8014f38:	6033      	strmi	r3, [r6, #0]
 8014f3a:	6825      	ldr	r5, [r4, #0]
 8014f3c:	f015 0506 	ands.w	r5, r5, #6
 8014f40:	d106      	bne.n	8014f50 <_printf_common+0x48>
 8014f42:	f104 0a19 	add.w	sl, r4, #25
 8014f46:	68e3      	ldr	r3, [r4, #12]
 8014f48:	6832      	ldr	r2, [r6, #0]
 8014f4a:	1a9b      	subs	r3, r3, r2
 8014f4c:	42ab      	cmp	r3, r5
 8014f4e:	dc26      	bgt.n	8014f9e <_printf_common+0x96>
 8014f50:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8014f54:	6822      	ldr	r2, [r4, #0]
 8014f56:	3b00      	subs	r3, #0
 8014f58:	bf18      	it	ne
 8014f5a:	2301      	movne	r3, #1
 8014f5c:	0692      	lsls	r2, r2, #26
 8014f5e:	d42b      	bmi.n	8014fb8 <_printf_common+0xb0>
 8014f60:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8014f64:	4641      	mov	r1, r8
 8014f66:	4638      	mov	r0, r7
 8014f68:	47c8      	blx	r9
 8014f6a:	3001      	adds	r0, #1
 8014f6c:	d01e      	beq.n	8014fac <_printf_common+0xa4>
 8014f6e:	6823      	ldr	r3, [r4, #0]
 8014f70:	6922      	ldr	r2, [r4, #16]
 8014f72:	f003 0306 	and.w	r3, r3, #6
 8014f76:	2b04      	cmp	r3, #4
 8014f78:	bf02      	ittt	eq
 8014f7a:	68e5      	ldreq	r5, [r4, #12]
 8014f7c:	6833      	ldreq	r3, [r6, #0]
 8014f7e:	1aed      	subeq	r5, r5, r3
 8014f80:	68a3      	ldr	r3, [r4, #8]
 8014f82:	bf0c      	ite	eq
 8014f84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014f88:	2500      	movne	r5, #0
 8014f8a:	4293      	cmp	r3, r2
 8014f8c:	bfc4      	itt	gt
 8014f8e:	1a9b      	subgt	r3, r3, r2
 8014f90:	18ed      	addgt	r5, r5, r3
 8014f92:	2600      	movs	r6, #0
 8014f94:	341a      	adds	r4, #26
 8014f96:	42b5      	cmp	r5, r6
 8014f98:	d11a      	bne.n	8014fd0 <_printf_common+0xc8>
 8014f9a:	2000      	movs	r0, #0
 8014f9c:	e008      	b.n	8014fb0 <_printf_common+0xa8>
 8014f9e:	2301      	movs	r3, #1
 8014fa0:	4652      	mov	r2, sl
 8014fa2:	4641      	mov	r1, r8
 8014fa4:	4638      	mov	r0, r7
 8014fa6:	47c8      	blx	r9
 8014fa8:	3001      	adds	r0, #1
 8014faa:	d103      	bne.n	8014fb4 <_printf_common+0xac>
 8014fac:	f04f 30ff 	mov.w	r0, #4294967295
 8014fb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014fb4:	3501      	adds	r5, #1
 8014fb6:	e7c6      	b.n	8014f46 <_printf_common+0x3e>
 8014fb8:	18e1      	adds	r1, r4, r3
 8014fba:	1c5a      	adds	r2, r3, #1
 8014fbc:	2030      	movs	r0, #48	@ 0x30
 8014fbe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8014fc2:	4422      	add	r2, r4
 8014fc4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8014fc8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8014fcc:	3302      	adds	r3, #2
 8014fce:	e7c7      	b.n	8014f60 <_printf_common+0x58>
 8014fd0:	2301      	movs	r3, #1
 8014fd2:	4622      	mov	r2, r4
 8014fd4:	4641      	mov	r1, r8
 8014fd6:	4638      	mov	r0, r7
 8014fd8:	47c8      	blx	r9
 8014fda:	3001      	adds	r0, #1
 8014fdc:	d0e6      	beq.n	8014fac <_printf_common+0xa4>
 8014fde:	3601      	adds	r6, #1
 8014fe0:	e7d9      	b.n	8014f96 <_printf_common+0x8e>
	...

08014fe4 <_printf_i>:
 8014fe4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014fe8:	7e0f      	ldrb	r7, [r1, #24]
 8014fea:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8014fec:	2f78      	cmp	r7, #120	@ 0x78
 8014fee:	4691      	mov	r9, r2
 8014ff0:	4680      	mov	r8, r0
 8014ff2:	460c      	mov	r4, r1
 8014ff4:	469a      	mov	sl, r3
 8014ff6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8014ffa:	d807      	bhi.n	801500c <_printf_i+0x28>
 8014ffc:	2f62      	cmp	r7, #98	@ 0x62
 8014ffe:	d80a      	bhi.n	8015016 <_printf_i+0x32>
 8015000:	2f00      	cmp	r7, #0
 8015002:	f000 80d2 	beq.w	80151aa <_printf_i+0x1c6>
 8015006:	2f58      	cmp	r7, #88	@ 0x58
 8015008:	f000 80b9 	beq.w	801517e <_printf_i+0x19a>
 801500c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8015010:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8015014:	e03a      	b.n	801508c <_printf_i+0xa8>
 8015016:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801501a:	2b15      	cmp	r3, #21
 801501c:	d8f6      	bhi.n	801500c <_printf_i+0x28>
 801501e:	a101      	add	r1, pc, #4	@ (adr r1, 8015024 <_printf_i+0x40>)
 8015020:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8015024:	0801507d 	.word	0x0801507d
 8015028:	08015091 	.word	0x08015091
 801502c:	0801500d 	.word	0x0801500d
 8015030:	0801500d 	.word	0x0801500d
 8015034:	0801500d 	.word	0x0801500d
 8015038:	0801500d 	.word	0x0801500d
 801503c:	08015091 	.word	0x08015091
 8015040:	0801500d 	.word	0x0801500d
 8015044:	0801500d 	.word	0x0801500d
 8015048:	0801500d 	.word	0x0801500d
 801504c:	0801500d 	.word	0x0801500d
 8015050:	08015191 	.word	0x08015191
 8015054:	080150bb 	.word	0x080150bb
 8015058:	0801514b 	.word	0x0801514b
 801505c:	0801500d 	.word	0x0801500d
 8015060:	0801500d 	.word	0x0801500d
 8015064:	080151b3 	.word	0x080151b3
 8015068:	0801500d 	.word	0x0801500d
 801506c:	080150bb 	.word	0x080150bb
 8015070:	0801500d 	.word	0x0801500d
 8015074:	0801500d 	.word	0x0801500d
 8015078:	08015153 	.word	0x08015153
 801507c:	6833      	ldr	r3, [r6, #0]
 801507e:	1d1a      	adds	r2, r3, #4
 8015080:	681b      	ldr	r3, [r3, #0]
 8015082:	6032      	str	r2, [r6, #0]
 8015084:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8015088:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801508c:	2301      	movs	r3, #1
 801508e:	e09d      	b.n	80151cc <_printf_i+0x1e8>
 8015090:	6833      	ldr	r3, [r6, #0]
 8015092:	6820      	ldr	r0, [r4, #0]
 8015094:	1d19      	adds	r1, r3, #4
 8015096:	6031      	str	r1, [r6, #0]
 8015098:	0606      	lsls	r6, r0, #24
 801509a:	d501      	bpl.n	80150a0 <_printf_i+0xbc>
 801509c:	681d      	ldr	r5, [r3, #0]
 801509e:	e003      	b.n	80150a8 <_printf_i+0xc4>
 80150a0:	0645      	lsls	r5, r0, #25
 80150a2:	d5fb      	bpl.n	801509c <_printf_i+0xb8>
 80150a4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80150a8:	2d00      	cmp	r5, #0
 80150aa:	da03      	bge.n	80150b4 <_printf_i+0xd0>
 80150ac:	232d      	movs	r3, #45	@ 0x2d
 80150ae:	426d      	negs	r5, r5
 80150b0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80150b4:	4859      	ldr	r0, [pc, #356]	@ (801521c <_printf_i+0x238>)
 80150b6:	230a      	movs	r3, #10
 80150b8:	e011      	b.n	80150de <_printf_i+0xfa>
 80150ba:	6821      	ldr	r1, [r4, #0]
 80150bc:	6833      	ldr	r3, [r6, #0]
 80150be:	0608      	lsls	r0, r1, #24
 80150c0:	f853 5b04 	ldr.w	r5, [r3], #4
 80150c4:	d402      	bmi.n	80150cc <_printf_i+0xe8>
 80150c6:	0649      	lsls	r1, r1, #25
 80150c8:	bf48      	it	mi
 80150ca:	b2ad      	uxthmi	r5, r5
 80150cc:	2f6f      	cmp	r7, #111	@ 0x6f
 80150ce:	4853      	ldr	r0, [pc, #332]	@ (801521c <_printf_i+0x238>)
 80150d0:	6033      	str	r3, [r6, #0]
 80150d2:	bf14      	ite	ne
 80150d4:	230a      	movne	r3, #10
 80150d6:	2308      	moveq	r3, #8
 80150d8:	2100      	movs	r1, #0
 80150da:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80150de:	6866      	ldr	r6, [r4, #4]
 80150e0:	60a6      	str	r6, [r4, #8]
 80150e2:	2e00      	cmp	r6, #0
 80150e4:	bfa2      	ittt	ge
 80150e6:	6821      	ldrge	r1, [r4, #0]
 80150e8:	f021 0104 	bicge.w	r1, r1, #4
 80150ec:	6021      	strge	r1, [r4, #0]
 80150ee:	b90d      	cbnz	r5, 80150f4 <_printf_i+0x110>
 80150f0:	2e00      	cmp	r6, #0
 80150f2:	d04b      	beq.n	801518c <_printf_i+0x1a8>
 80150f4:	4616      	mov	r6, r2
 80150f6:	fbb5 f1f3 	udiv	r1, r5, r3
 80150fa:	fb03 5711 	mls	r7, r3, r1, r5
 80150fe:	5dc7      	ldrb	r7, [r0, r7]
 8015100:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8015104:	462f      	mov	r7, r5
 8015106:	42bb      	cmp	r3, r7
 8015108:	460d      	mov	r5, r1
 801510a:	d9f4      	bls.n	80150f6 <_printf_i+0x112>
 801510c:	2b08      	cmp	r3, #8
 801510e:	d10b      	bne.n	8015128 <_printf_i+0x144>
 8015110:	6823      	ldr	r3, [r4, #0]
 8015112:	07df      	lsls	r7, r3, #31
 8015114:	d508      	bpl.n	8015128 <_printf_i+0x144>
 8015116:	6923      	ldr	r3, [r4, #16]
 8015118:	6861      	ldr	r1, [r4, #4]
 801511a:	4299      	cmp	r1, r3
 801511c:	bfde      	ittt	le
 801511e:	2330      	movle	r3, #48	@ 0x30
 8015120:	f806 3c01 	strble.w	r3, [r6, #-1]
 8015124:	f106 36ff 	addle.w	r6, r6, #4294967295
 8015128:	1b92      	subs	r2, r2, r6
 801512a:	6122      	str	r2, [r4, #16]
 801512c:	f8cd a000 	str.w	sl, [sp]
 8015130:	464b      	mov	r3, r9
 8015132:	aa03      	add	r2, sp, #12
 8015134:	4621      	mov	r1, r4
 8015136:	4640      	mov	r0, r8
 8015138:	f7ff fee6 	bl	8014f08 <_printf_common>
 801513c:	3001      	adds	r0, #1
 801513e:	d14a      	bne.n	80151d6 <_printf_i+0x1f2>
 8015140:	f04f 30ff 	mov.w	r0, #4294967295
 8015144:	b004      	add	sp, #16
 8015146:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801514a:	6823      	ldr	r3, [r4, #0]
 801514c:	f043 0320 	orr.w	r3, r3, #32
 8015150:	6023      	str	r3, [r4, #0]
 8015152:	4833      	ldr	r0, [pc, #204]	@ (8015220 <_printf_i+0x23c>)
 8015154:	2778      	movs	r7, #120	@ 0x78
 8015156:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801515a:	6823      	ldr	r3, [r4, #0]
 801515c:	6831      	ldr	r1, [r6, #0]
 801515e:	061f      	lsls	r7, r3, #24
 8015160:	f851 5b04 	ldr.w	r5, [r1], #4
 8015164:	d402      	bmi.n	801516c <_printf_i+0x188>
 8015166:	065f      	lsls	r7, r3, #25
 8015168:	bf48      	it	mi
 801516a:	b2ad      	uxthmi	r5, r5
 801516c:	6031      	str	r1, [r6, #0]
 801516e:	07d9      	lsls	r1, r3, #31
 8015170:	bf44      	itt	mi
 8015172:	f043 0320 	orrmi.w	r3, r3, #32
 8015176:	6023      	strmi	r3, [r4, #0]
 8015178:	b11d      	cbz	r5, 8015182 <_printf_i+0x19e>
 801517a:	2310      	movs	r3, #16
 801517c:	e7ac      	b.n	80150d8 <_printf_i+0xf4>
 801517e:	4827      	ldr	r0, [pc, #156]	@ (801521c <_printf_i+0x238>)
 8015180:	e7e9      	b.n	8015156 <_printf_i+0x172>
 8015182:	6823      	ldr	r3, [r4, #0]
 8015184:	f023 0320 	bic.w	r3, r3, #32
 8015188:	6023      	str	r3, [r4, #0]
 801518a:	e7f6      	b.n	801517a <_printf_i+0x196>
 801518c:	4616      	mov	r6, r2
 801518e:	e7bd      	b.n	801510c <_printf_i+0x128>
 8015190:	6833      	ldr	r3, [r6, #0]
 8015192:	6825      	ldr	r5, [r4, #0]
 8015194:	6961      	ldr	r1, [r4, #20]
 8015196:	1d18      	adds	r0, r3, #4
 8015198:	6030      	str	r0, [r6, #0]
 801519a:	062e      	lsls	r6, r5, #24
 801519c:	681b      	ldr	r3, [r3, #0]
 801519e:	d501      	bpl.n	80151a4 <_printf_i+0x1c0>
 80151a0:	6019      	str	r1, [r3, #0]
 80151a2:	e002      	b.n	80151aa <_printf_i+0x1c6>
 80151a4:	0668      	lsls	r0, r5, #25
 80151a6:	d5fb      	bpl.n	80151a0 <_printf_i+0x1bc>
 80151a8:	8019      	strh	r1, [r3, #0]
 80151aa:	2300      	movs	r3, #0
 80151ac:	6123      	str	r3, [r4, #16]
 80151ae:	4616      	mov	r6, r2
 80151b0:	e7bc      	b.n	801512c <_printf_i+0x148>
 80151b2:	6833      	ldr	r3, [r6, #0]
 80151b4:	1d1a      	adds	r2, r3, #4
 80151b6:	6032      	str	r2, [r6, #0]
 80151b8:	681e      	ldr	r6, [r3, #0]
 80151ba:	6862      	ldr	r2, [r4, #4]
 80151bc:	2100      	movs	r1, #0
 80151be:	4630      	mov	r0, r6
 80151c0:	f7eb f816 	bl	80001f0 <memchr>
 80151c4:	b108      	cbz	r0, 80151ca <_printf_i+0x1e6>
 80151c6:	1b80      	subs	r0, r0, r6
 80151c8:	6060      	str	r0, [r4, #4]
 80151ca:	6863      	ldr	r3, [r4, #4]
 80151cc:	6123      	str	r3, [r4, #16]
 80151ce:	2300      	movs	r3, #0
 80151d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80151d4:	e7aa      	b.n	801512c <_printf_i+0x148>
 80151d6:	6923      	ldr	r3, [r4, #16]
 80151d8:	4632      	mov	r2, r6
 80151da:	4649      	mov	r1, r9
 80151dc:	4640      	mov	r0, r8
 80151de:	47d0      	blx	sl
 80151e0:	3001      	adds	r0, #1
 80151e2:	d0ad      	beq.n	8015140 <_printf_i+0x15c>
 80151e4:	6823      	ldr	r3, [r4, #0]
 80151e6:	079b      	lsls	r3, r3, #30
 80151e8:	d413      	bmi.n	8015212 <_printf_i+0x22e>
 80151ea:	68e0      	ldr	r0, [r4, #12]
 80151ec:	9b03      	ldr	r3, [sp, #12]
 80151ee:	4298      	cmp	r0, r3
 80151f0:	bfb8      	it	lt
 80151f2:	4618      	movlt	r0, r3
 80151f4:	e7a6      	b.n	8015144 <_printf_i+0x160>
 80151f6:	2301      	movs	r3, #1
 80151f8:	4632      	mov	r2, r6
 80151fa:	4649      	mov	r1, r9
 80151fc:	4640      	mov	r0, r8
 80151fe:	47d0      	blx	sl
 8015200:	3001      	adds	r0, #1
 8015202:	d09d      	beq.n	8015140 <_printf_i+0x15c>
 8015204:	3501      	adds	r5, #1
 8015206:	68e3      	ldr	r3, [r4, #12]
 8015208:	9903      	ldr	r1, [sp, #12]
 801520a:	1a5b      	subs	r3, r3, r1
 801520c:	42ab      	cmp	r3, r5
 801520e:	dcf2      	bgt.n	80151f6 <_printf_i+0x212>
 8015210:	e7eb      	b.n	80151ea <_printf_i+0x206>
 8015212:	2500      	movs	r5, #0
 8015214:	f104 0619 	add.w	r6, r4, #25
 8015218:	e7f5      	b.n	8015206 <_printf_i+0x222>
 801521a:	bf00      	nop
 801521c:	08016d61 	.word	0x08016d61
 8015220:	08016d72 	.word	0x08016d72

08015224 <__sflush_r>:
 8015224:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8015228:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801522c:	0716      	lsls	r6, r2, #28
 801522e:	4605      	mov	r5, r0
 8015230:	460c      	mov	r4, r1
 8015232:	d454      	bmi.n	80152de <__sflush_r+0xba>
 8015234:	684b      	ldr	r3, [r1, #4]
 8015236:	2b00      	cmp	r3, #0
 8015238:	dc02      	bgt.n	8015240 <__sflush_r+0x1c>
 801523a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801523c:	2b00      	cmp	r3, #0
 801523e:	dd48      	ble.n	80152d2 <__sflush_r+0xae>
 8015240:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8015242:	2e00      	cmp	r6, #0
 8015244:	d045      	beq.n	80152d2 <__sflush_r+0xae>
 8015246:	2300      	movs	r3, #0
 8015248:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801524c:	682f      	ldr	r7, [r5, #0]
 801524e:	6a21      	ldr	r1, [r4, #32]
 8015250:	602b      	str	r3, [r5, #0]
 8015252:	d030      	beq.n	80152b6 <__sflush_r+0x92>
 8015254:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8015256:	89a3      	ldrh	r3, [r4, #12]
 8015258:	0759      	lsls	r1, r3, #29
 801525a:	d505      	bpl.n	8015268 <__sflush_r+0x44>
 801525c:	6863      	ldr	r3, [r4, #4]
 801525e:	1ad2      	subs	r2, r2, r3
 8015260:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8015262:	b10b      	cbz	r3, 8015268 <__sflush_r+0x44>
 8015264:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8015266:	1ad2      	subs	r2, r2, r3
 8015268:	2300      	movs	r3, #0
 801526a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801526c:	6a21      	ldr	r1, [r4, #32]
 801526e:	4628      	mov	r0, r5
 8015270:	47b0      	blx	r6
 8015272:	1c43      	adds	r3, r0, #1
 8015274:	89a3      	ldrh	r3, [r4, #12]
 8015276:	d106      	bne.n	8015286 <__sflush_r+0x62>
 8015278:	6829      	ldr	r1, [r5, #0]
 801527a:	291d      	cmp	r1, #29
 801527c:	d82b      	bhi.n	80152d6 <__sflush_r+0xb2>
 801527e:	4a2a      	ldr	r2, [pc, #168]	@ (8015328 <__sflush_r+0x104>)
 8015280:	410a      	asrs	r2, r1
 8015282:	07d6      	lsls	r6, r2, #31
 8015284:	d427      	bmi.n	80152d6 <__sflush_r+0xb2>
 8015286:	2200      	movs	r2, #0
 8015288:	6062      	str	r2, [r4, #4]
 801528a:	04d9      	lsls	r1, r3, #19
 801528c:	6922      	ldr	r2, [r4, #16]
 801528e:	6022      	str	r2, [r4, #0]
 8015290:	d504      	bpl.n	801529c <__sflush_r+0x78>
 8015292:	1c42      	adds	r2, r0, #1
 8015294:	d101      	bne.n	801529a <__sflush_r+0x76>
 8015296:	682b      	ldr	r3, [r5, #0]
 8015298:	b903      	cbnz	r3, 801529c <__sflush_r+0x78>
 801529a:	6560      	str	r0, [r4, #84]	@ 0x54
 801529c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801529e:	602f      	str	r7, [r5, #0]
 80152a0:	b1b9      	cbz	r1, 80152d2 <__sflush_r+0xae>
 80152a2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80152a6:	4299      	cmp	r1, r3
 80152a8:	d002      	beq.n	80152b0 <__sflush_r+0x8c>
 80152aa:	4628      	mov	r0, r5
 80152ac:	f7ff fca0 	bl	8014bf0 <_free_r>
 80152b0:	2300      	movs	r3, #0
 80152b2:	6363      	str	r3, [r4, #52]	@ 0x34
 80152b4:	e00d      	b.n	80152d2 <__sflush_r+0xae>
 80152b6:	2301      	movs	r3, #1
 80152b8:	4628      	mov	r0, r5
 80152ba:	47b0      	blx	r6
 80152bc:	4602      	mov	r2, r0
 80152be:	1c50      	adds	r0, r2, #1
 80152c0:	d1c9      	bne.n	8015256 <__sflush_r+0x32>
 80152c2:	682b      	ldr	r3, [r5, #0]
 80152c4:	2b00      	cmp	r3, #0
 80152c6:	d0c6      	beq.n	8015256 <__sflush_r+0x32>
 80152c8:	2b1d      	cmp	r3, #29
 80152ca:	d001      	beq.n	80152d0 <__sflush_r+0xac>
 80152cc:	2b16      	cmp	r3, #22
 80152ce:	d11e      	bne.n	801530e <__sflush_r+0xea>
 80152d0:	602f      	str	r7, [r5, #0]
 80152d2:	2000      	movs	r0, #0
 80152d4:	e022      	b.n	801531c <__sflush_r+0xf8>
 80152d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80152da:	b21b      	sxth	r3, r3
 80152dc:	e01b      	b.n	8015316 <__sflush_r+0xf2>
 80152de:	690f      	ldr	r7, [r1, #16]
 80152e0:	2f00      	cmp	r7, #0
 80152e2:	d0f6      	beq.n	80152d2 <__sflush_r+0xae>
 80152e4:	0793      	lsls	r3, r2, #30
 80152e6:	680e      	ldr	r6, [r1, #0]
 80152e8:	bf08      	it	eq
 80152ea:	694b      	ldreq	r3, [r1, #20]
 80152ec:	600f      	str	r7, [r1, #0]
 80152ee:	bf18      	it	ne
 80152f0:	2300      	movne	r3, #0
 80152f2:	eba6 0807 	sub.w	r8, r6, r7
 80152f6:	608b      	str	r3, [r1, #8]
 80152f8:	f1b8 0f00 	cmp.w	r8, #0
 80152fc:	dde9      	ble.n	80152d2 <__sflush_r+0xae>
 80152fe:	6a21      	ldr	r1, [r4, #32]
 8015300:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8015302:	4643      	mov	r3, r8
 8015304:	463a      	mov	r2, r7
 8015306:	4628      	mov	r0, r5
 8015308:	47b0      	blx	r6
 801530a:	2800      	cmp	r0, #0
 801530c:	dc08      	bgt.n	8015320 <__sflush_r+0xfc>
 801530e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015312:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015316:	81a3      	strh	r3, [r4, #12]
 8015318:	f04f 30ff 	mov.w	r0, #4294967295
 801531c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015320:	4407      	add	r7, r0
 8015322:	eba8 0800 	sub.w	r8, r8, r0
 8015326:	e7e7      	b.n	80152f8 <__sflush_r+0xd4>
 8015328:	dfbffffe 	.word	0xdfbffffe

0801532c <_fflush_r>:
 801532c:	b538      	push	{r3, r4, r5, lr}
 801532e:	690b      	ldr	r3, [r1, #16]
 8015330:	4605      	mov	r5, r0
 8015332:	460c      	mov	r4, r1
 8015334:	b913      	cbnz	r3, 801533c <_fflush_r+0x10>
 8015336:	2500      	movs	r5, #0
 8015338:	4628      	mov	r0, r5
 801533a:	bd38      	pop	{r3, r4, r5, pc}
 801533c:	b118      	cbz	r0, 8015346 <_fflush_r+0x1a>
 801533e:	6a03      	ldr	r3, [r0, #32]
 8015340:	b90b      	cbnz	r3, 8015346 <_fflush_r+0x1a>
 8015342:	f7ff fa69 	bl	8014818 <__sinit>
 8015346:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801534a:	2b00      	cmp	r3, #0
 801534c:	d0f3      	beq.n	8015336 <_fflush_r+0xa>
 801534e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8015350:	07d0      	lsls	r0, r2, #31
 8015352:	d404      	bmi.n	801535e <_fflush_r+0x32>
 8015354:	0599      	lsls	r1, r3, #22
 8015356:	d402      	bmi.n	801535e <_fflush_r+0x32>
 8015358:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801535a:	f7ff fbc9 	bl	8014af0 <__retarget_lock_acquire_recursive>
 801535e:	4628      	mov	r0, r5
 8015360:	4621      	mov	r1, r4
 8015362:	f7ff ff5f 	bl	8015224 <__sflush_r>
 8015366:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8015368:	07da      	lsls	r2, r3, #31
 801536a:	4605      	mov	r5, r0
 801536c:	d4e4      	bmi.n	8015338 <_fflush_r+0xc>
 801536e:	89a3      	ldrh	r3, [r4, #12]
 8015370:	059b      	lsls	r3, r3, #22
 8015372:	d4e1      	bmi.n	8015338 <_fflush_r+0xc>
 8015374:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8015376:	f7ff fbbd 	bl	8014af4 <__retarget_lock_release_recursive>
 801537a:	e7dd      	b.n	8015338 <_fflush_r+0xc>

0801537c <__swbuf_r>:
 801537c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801537e:	460e      	mov	r6, r1
 8015380:	4614      	mov	r4, r2
 8015382:	4605      	mov	r5, r0
 8015384:	b118      	cbz	r0, 801538e <__swbuf_r+0x12>
 8015386:	6a03      	ldr	r3, [r0, #32]
 8015388:	b90b      	cbnz	r3, 801538e <__swbuf_r+0x12>
 801538a:	f7ff fa45 	bl	8014818 <__sinit>
 801538e:	69a3      	ldr	r3, [r4, #24]
 8015390:	60a3      	str	r3, [r4, #8]
 8015392:	89a3      	ldrh	r3, [r4, #12]
 8015394:	071a      	lsls	r2, r3, #28
 8015396:	d501      	bpl.n	801539c <__swbuf_r+0x20>
 8015398:	6923      	ldr	r3, [r4, #16]
 801539a:	b943      	cbnz	r3, 80153ae <__swbuf_r+0x32>
 801539c:	4621      	mov	r1, r4
 801539e:	4628      	mov	r0, r5
 80153a0:	f000 f82a 	bl	80153f8 <__swsetup_r>
 80153a4:	b118      	cbz	r0, 80153ae <__swbuf_r+0x32>
 80153a6:	f04f 37ff 	mov.w	r7, #4294967295
 80153aa:	4638      	mov	r0, r7
 80153ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80153ae:	6823      	ldr	r3, [r4, #0]
 80153b0:	6922      	ldr	r2, [r4, #16]
 80153b2:	1a98      	subs	r0, r3, r2
 80153b4:	6963      	ldr	r3, [r4, #20]
 80153b6:	b2f6      	uxtb	r6, r6
 80153b8:	4283      	cmp	r3, r0
 80153ba:	4637      	mov	r7, r6
 80153bc:	dc05      	bgt.n	80153ca <__swbuf_r+0x4e>
 80153be:	4621      	mov	r1, r4
 80153c0:	4628      	mov	r0, r5
 80153c2:	f7ff ffb3 	bl	801532c <_fflush_r>
 80153c6:	2800      	cmp	r0, #0
 80153c8:	d1ed      	bne.n	80153a6 <__swbuf_r+0x2a>
 80153ca:	68a3      	ldr	r3, [r4, #8]
 80153cc:	3b01      	subs	r3, #1
 80153ce:	60a3      	str	r3, [r4, #8]
 80153d0:	6823      	ldr	r3, [r4, #0]
 80153d2:	1c5a      	adds	r2, r3, #1
 80153d4:	6022      	str	r2, [r4, #0]
 80153d6:	701e      	strb	r6, [r3, #0]
 80153d8:	6962      	ldr	r2, [r4, #20]
 80153da:	1c43      	adds	r3, r0, #1
 80153dc:	429a      	cmp	r2, r3
 80153de:	d004      	beq.n	80153ea <__swbuf_r+0x6e>
 80153e0:	89a3      	ldrh	r3, [r4, #12]
 80153e2:	07db      	lsls	r3, r3, #31
 80153e4:	d5e1      	bpl.n	80153aa <__swbuf_r+0x2e>
 80153e6:	2e0a      	cmp	r6, #10
 80153e8:	d1df      	bne.n	80153aa <__swbuf_r+0x2e>
 80153ea:	4621      	mov	r1, r4
 80153ec:	4628      	mov	r0, r5
 80153ee:	f7ff ff9d 	bl	801532c <_fflush_r>
 80153f2:	2800      	cmp	r0, #0
 80153f4:	d0d9      	beq.n	80153aa <__swbuf_r+0x2e>
 80153f6:	e7d6      	b.n	80153a6 <__swbuf_r+0x2a>

080153f8 <__swsetup_r>:
 80153f8:	b538      	push	{r3, r4, r5, lr}
 80153fa:	4b29      	ldr	r3, [pc, #164]	@ (80154a0 <__swsetup_r+0xa8>)
 80153fc:	4605      	mov	r5, r0
 80153fe:	6818      	ldr	r0, [r3, #0]
 8015400:	460c      	mov	r4, r1
 8015402:	b118      	cbz	r0, 801540c <__swsetup_r+0x14>
 8015404:	6a03      	ldr	r3, [r0, #32]
 8015406:	b90b      	cbnz	r3, 801540c <__swsetup_r+0x14>
 8015408:	f7ff fa06 	bl	8014818 <__sinit>
 801540c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015410:	0719      	lsls	r1, r3, #28
 8015412:	d422      	bmi.n	801545a <__swsetup_r+0x62>
 8015414:	06da      	lsls	r2, r3, #27
 8015416:	d407      	bmi.n	8015428 <__swsetup_r+0x30>
 8015418:	2209      	movs	r2, #9
 801541a:	602a      	str	r2, [r5, #0]
 801541c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015420:	81a3      	strh	r3, [r4, #12]
 8015422:	f04f 30ff 	mov.w	r0, #4294967295
 8015426:	e033      	b.n	8015490 <__swsetup_r+0x98>
 8015428:	0758      	lsls	r0, r3, #29
 801542a:	d512      	bpl.n	8015452 <__swsetup_r+0x5a>
 801542c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801542e:	b141      	cbz	r1, 8015442 <__swsetup_r+0x4a>
 8015430:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8015434:	4299      	cmp	r1, r3
 8015436:	d002      	beq.n	801543e <__swsetup_r+0x46>
 8015438:	4628      	mov	r0, r5
 801543a:	f7ff fbd9 	bl	8014bf0 <_free_r>
 801543e:	2300      	movs	r3, #0
 8015440:	6363      	str	r3, [r4, #52]	@ 0x34
 8015442:	89a3      	ldrh	r3, [r4, #12]
 8015444:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8015448:	81a3      	strh	r3, [r4, #12]
 801544a:	2300      	movs	r3, #0
 801544c:	6063      	str	r3, [r4, #4]
 801544e:	6923      	ldr	r3, [r4, #16]
 8015450:	6023      	str	r3, [r4, #0]
 8015452:	89a3      	ldrh	r3, [r4, #12]
 8015454:	f043 0308 	orr.w	r3, r3, #8
 8015458:	81a3      	strh	r3, [r4, #12]
 801545a:	6923      	ldr	r3, [r4, #16]
 801545c:	b94b      	cbnz	r3, 8015472 <__swsetup_r+0x7a>
 801545e:	89a3      	ldrh	r3, [r4, #12]
 8015460:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8015464:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8015468:	d003      	beq.n	8015472 <__swsetup_r+0x7a>
 801546a:	4621      	mov	r1, r4
 801546c:	4628      	mov	r0, r5
 801546e:	f000 f855 	bl	801551c <__smakebuf_r>
 8015472:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015476:	f013 0201 	ands.w	r2, r3, #1
 801547a:	d00a      	beq.n	8015492 <__swsetup_r+0x9a>
 801547c:	2200      	movs	r2, #0
 801547e:	60a2      	str	r2, [r4, #8]
 8015480:	6962      	ldr	r2, [r4, #20]
 8015482:	4252      	negs	r2, r2
 8015484:	61a2      	str	r2, [r4, #24]
 8015486:	6922      	ldr	r2, [r4, #16]
 8015488:	b942      	cbnz	r2, 801549c <__swsetup_r+0xa4>
 801548a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801548e:	d1c5      	bne.n	801541c <__swsetup_r+0x24>
 8015490:	bd38      	pop	{r3, r4, r5, pc}
 8015492:	0799      	lsls	r1, r3, #30
 8015494:	bf58      	it	pl
 8015496:	6962      	ldrpl	r2, [r4, #20]
 8015498:	60a2      	str	r2, [r4, #8]
 801549a:	e7f4      	b.n	8015486 <__swsetup_r+0x8e>
 801549c:	2000      	movs	r0, #0
 801549e:	e7f7      	b.n	8015490 <__swsetup_r+0x98>
 80154a0:	2000009c 	.word	0x2000009c

080154a4 <bzero>:
 80154a4:	460a      	mov	r2, r1
 80154a6:	2100      	movs	r1, #0
 80154a8:	f7ff ba53 	b.w	8014952 <memset>

080154ac <_getentropy_r>:
 80154ac:	b538      	push	{r3, r4, r5, lr}
 80154ae:	4d07      	ldr	r5, [pc, #28]	@ (80154cc <_getentropy_r+0x20>)
 80154b0:	2300      	movs	r3, #0
 80154b2:	4604      	mov	r4, r0
 80154b4:	4608      	mov	r0, r1
 80154b6:	4611      	mov	r1, r2
 80154b8:	602b      	str	r3, [r5, #0]
 80154ba:	f000 f88d 	bl	80155d8 <_getentropy>
 80154be:	1c43      	adds	r3, r0, #1
 80154c0:	d102      	bne.n	80154c8 <_getentropy_r+0x1c>
 80154c2:	682b      	ldr	r3, [r5, #0]
 80154c4:	b103      	cbz	r3, 80154c8 <_getentropy_r+0x1c>
 80154c6:	6023      	str	r3, [r4, #0]
 80154c8:	bd38      	pop	{r3, r4, r5, pc}
 80154ca:	bf00      	nop
 80154cc:	20015578 	.word	0x20015578

080154d0 <__swhatbuf_r>:
 80154d0:	b570      	push	{r4, r5, r6, lr}
 80154d2:	460c      	mov	r4, r1
 80154d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80154d8:	2900      	cmp	r1, #0
 80154da:	b096      	sub	sp, #88	@ 0x58
 80154dc:	4615      	mov	r5, r2
 80154de:	461e      	mov	r6, r3
 80154e0:	da0d      	bge.n	80154fe <__swhatbuf_r+0x2e>
 80154e2:	89a3      	ldrh	r3, [r4, #12]
 80154e4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80154e8:	f04f 0100 	mov.w	r1, #0
 80154ec:	bf14      	ite	ne
 80154ee:	2340      	movne	r3, #64	@ 0x40
 80154f0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80154f4:	2000      	movs	r0, #0
 80154f6:	6031      	str	r1, [r6, #0]
 80154f8:	602b      	str	r3, [r5, #0]
 80154fa:	b016      	add	sp, #88	@ 0x58
 80154fc:	bd70      	pop	{r4, r5, r6, pc}
 80154fe:	466a      	mov	r2, sp
 8015500:	f000 f848 	bl	8015594 <_fstat_r>
 8015504:	2800      	cmp	r0, #0
 8015506:	dbec      	blt.n	80154e2 <__swhatbuf_r+0x12>
 8015508:	9901      	ldr	r1, [sp, #4]
 801550a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801550e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8015512:	4259      	negs	r1, r3
 8015514:	4159      	adcs	r1, r3
 8015516:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801551a:	e7eb      	b.n	80154f4 <__swhatbuf_r+0x24>

0801551c <__smakebuf_r>:
 801551c:	898b      	ldrh	r3, [r1, #12]
 801551e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015520:	079d      	lsls	r5, r3, #30
 8015522:	4606      	mov	r6, r0
 8015524:	460c      	mov	r4, r1
 8015526:	d507      	bpl.n	8015538 <__smakebuf_r+0x1c>
 8015528:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801552c:	6023      	str	r3, [r4, #0]
 801552e:	6123      	str	r3, [r4, #16]
 8015530:	2301      	movs	r3, #1
 8015532:	6163      	str	r3, [r4, #20]
 8015534:	b003      	add	sp, #12
 8015536:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015538:	ab01      	add	r3, sp, #4
 801553a:	466a      	mov	r2, sp
 801553c:	f7ff ffc8 	bl	80154d0 <__swhatbuf_r>
 8015540:	9f00      	ldr	r7, [sp, #0]
 8015542:	4605      	mov	r5, r0
 8015544:	4639      	mov	r1, r7
 8015546:	4630      	mov	r0, r6
 8015548:	f7fe fd48 	bl	8013fdc <_malloc_r>
 801554c:	b948      	cbnz	r0, 8015562 <__smakebuf_r+0x46>
 801554e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015552:	059a      	lsls	r2, r3, #22
 8015554:	d4ee      	bmi.n	8015534 <__smakebuf_r+0x18>
 8015556:	f023 0303 	bic.w	r3, r3, #3
 801555a:	f043 0302 	orr.w	r3, r3, #2
 801555e:	81a3      	strh	r3, [r4, #12]
 8015560:	e7e2      	b.n	8015528 <__smakebuf_r+0xc>
 8015562:	89a3      	ldrh	r3, [r4, #12]
 8015564:	6020      	str	r0, [r4, #0]
 8015566:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801556a:	81a3      	strh	r3, [r4, #12]
 801556c:	9b01      	ldr	r3, [sp, #4]
 801556e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8015572:	b15b      	cbz	r3, 801558c <__smakebuf_r+0x70>
 8015574:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015578:	4630      	mov	r0, r6
 801557a:	f000 f81d 	bl	80155b8 <_isatty_r>
 801557e:	b128      	cbz	r0, 801558c <__smakebuf_r+0x70>
 8015580:	89a3      	ldrh	r3, [r4, #12]
 8015582:	f023 0303 	bic.w	r3, r3, #3
 8015586:	f043 0301 	orr.w	r3, r3, #1
 801558a:	81a3      	strh	r3, [r4, #12]
 801558c:	89a3      	ldrh	r3, [r4, #12]
 801558e:	431d      	orrs	r5, r3
 8015590:	81a5      	strh	r5, [r4, #12]
 8015592:	e7cf      	b.n	8015534 <__smakebuf_r+0x18>

08015594 <_fstat_r>:
 8015594:	b538      	push	{r3, r4, r5, lr}
 8015596:	4d07      	ldr	r5, [pc, #28]	@ (80155b4 <_fstat_r+0x20>)
 8015598:	2300      	movs	r3, #0
 801559a:	4604      	mov	r4, r0
 801559c:	4608      	mov	r0, r1
 801559e:	4611      	mov	r1, r2
 80155a0:	602b      	str	r3, [r5, #0]
 80155a2:	f7ed f8fc 	bl	800279e <_fstat>
 80155a6:	1c43      	adds	r3, r0, #1
 80155a8:	d102      	bne.n	80155b0 <_fstat_r+0x1c>
 80155aa:	682b      	ldr	r3, [r5, #0]
 80155ac:	b103      	cbz	r3, 80155b0 <_fstat_r+0x1c>
 80155ae:	6023      	str	r3, [r4, #0]
 80155b0:	bd38      	pop	{r3, r4, r5, pc}
 80155b2:	bf00      	nop
 80155b4:	20015578 	.word	0x20015578

080155b8 <_isatty_r>:
 80155b8:	b538      	push	{r3, r4, r5, lr}
 80155ba:	4d06      	ldr	r5, [pc, #24]	@ (80155d4 <_isatty_r+0x1c>)
 80155bc:	2300      	movs	r3, #0
 80155be:	4604      	mov	r4, r0
 80155c0:	4608      	mov	r0, r1
 80155c2:	602b      	str	r3, [r5, #0]
 80155c4:	f7ed f8f0 	bl	80027a8 <_isatty>
 80155c8:	1c43      	adds	r3, r0, #1
 80155ca:	d102      	bne.n	80155d2 <_isatty_r+0x1a>
 80155cc:	682b      	ldr	r3, [r5, #0]
 80155ce:	b103      	cbz	r3, 80155d2 <_isatty_r+0x1a>
 80155d0:	6023      	str	r3, [r4, #0]
 80155d2:	bd38      	pop	{r3, r4, r5, pc}
 80155d4:	20015578 	.word	0x20015578

080155d8 <_getentropy>:
 80155d8:	4b02      	ldr	r3, [pc, #8]	@ (80155e4 <_getentropy+0xc>)
 80155da:	2258      	movs	r2, #88	@ 0x58
 80155dc:	601a      	str	r2, [r3, #0]
 80155de:	f04f 30ff 	mov.w	r0, #4294967295
 80155e2:	4770      	bx	lr
 80155e4:	20015578 	.word	0x20015578

080155e8 <_init>:
 80155e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80155ea:	bf00      	nop
 80155ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80155ee:	bc08      	pop	{r3}
 80155f0:	469e      	mov	lr, r3
 80155f2:	4770      	bx	lr

080155f4 <_fini>:
 80155f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80155f6:	bf00      	nop
 80155f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80155fa:	bc08      	pop	{r3}
 80155fc:	469e      	mov	lr, r3
 80155fe:	4770      	bx	lr
